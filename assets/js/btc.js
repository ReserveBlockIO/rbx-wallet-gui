(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
(function (process,global,Buffer){(function (){
"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node_modules/ecpair/src/networks.js
  var require_networks = __commonJS({
    "node_modules/ecpair/src/networks.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.testnet = exports.bitcoin = void 0;
      exports.bitcoin = {
        messagePrefix: "Bitcoin Signed Message:\n",
        bech32: "bc",
        bip32: {
          public: 76067358,
          private: 76066276
        },
        pubKeyHash: 0,
        scriptHash: 5,
        wif: 128
      };
      exports.testnet = {
        messagePrefix: "Bitcoin Signed Message:\n",
        bech32: "tb",
        bip32: {
          public: 70617039,
          private: 70615956
        },
        pubKeyHash: 111,
        scriptHash: 196,
        wif: 239
      };
    }
  });

  // node_modules/typeforce/native.js
  var require_native = __commonJS({
    "node_modules/typeforce/native.js"(exports, module) {
      var types = {
        Array: function(value) {
          return value !== null && value !== void 0 && value.constructor === Array;
        },
        Boolean: function(value) {
          return typeof value === "boolean";
        },
        Function: function(value) {
          return typeof value === "function";
        },
        Nil: function(value) {
          return value === void 0 || value === null;
        },
        Number: function(value) {
          return typeof value === "number";
        },
        Object: function(value) {
          return typeof value === "object";
        },
        String: function(value) {
          return typeof value === "string";
        },
        "": function() {
          return true;
        }
      };
      types.Null = types.Nil;
      for (typeName in types) {
        types[typeName].toJSON = function(t) {
          return t;
        }.bind(null, typeName);
      }
      var typeName;
      module.exports = types;
    }
  });

  // node_modules/typeforce/errors.js
  var require_errors = __commonJS({
    "node_modules/typeforce/errors.js"(exports, module) {
      var native = require_native();
      function getTypeName(fn) {
        return fn.name || fn.toString().match(/function (.*?)\s*\(/)[1];
      }
      function getValueTypeName(value) {
        return native.Nil(value) ? "" : getTypeName(value.constructor);
      }
      function getValue(value) {
        if (native.Function(value))
          return "";
        if (native.String(value))
          return JSON.stringify(value);
        if (value && native.Object(value))
          return "";
        return value;
      }
      function captureStackTrace(e, t) {
        if (Error.captureStackTrace) {
          Error.captureStackTrace(e, t);
        }
      }
      function tfJSON(type) {
        if (native.Function(type))
          return type.toJSON ? type.toJSON() : getTypeName(type);
        if (native.Array(type))
          return "Array";
        if (type && native.Object(type))
          return "Object";
        return type !== void 0 ? type : "";
      }
      function tfErrorString(type, value, valueTypeName) {
        var valueJson = getValue(value);
        return "Expected " + tfJSON(type) + ", got" + (valueTypeName !== "" ? " " + valueTypeName : "") + (valueJson !== "" ? " " + valueJson : "");
      }
      function TfTypeError(type, value, valueTypeName) {
        valueTypeName = valueTypeName || getValueTypeName(value);
        this.message = tfErrorString(type, value, valueTypeName);
        captureStackTrace(this, TfTypeError);
        this.__type = type;
        this.__value = value;
        this.__valueTypeName = valueTypeName;
      }
      TfTypeError.prototype = Object.create(Error.prototype);
      TfTypeError.prototype.constructor = TfTypeError;
      function tfPropertyErrorString(type, label, name, value, valueTypeName) {
        var description = '" of type ';
        if (label === "key")
          description = '" with key type ';
        return tfErrorString('property "' + tfJSON(name) + description + tfJSON(type), value, valueTypeName);
      }
      function TfPropertyTypeError(type, property, label, value, valueTypeName) {
        if (type) {
          valueTypeName = valueTypeName || getValueTypeName(value);
          this.message = tfPropertyErrorString(type, label, property, value, valueTypeName);
        } else {
          this.message = 'Unexpected property "' + property + '"';
        }
        captureStackTrace(this, TfTypeError);
        this.__label = label;
        this.__property = property;
        this.__type = type;
        this.__value = value;
        this.__valueTypeName = valueTypeName;
      }
      TfPropertyTypeError.prototype = Object.create(Error.prototype);
      TfPropertyTypeError.prototype.constructor = TfTypeError;
      function tfCustomError(expected, actual) {
        return new TfTypeError(expected, {}, actual);
      }
      function tfSubError(e, property, label) {
        if (e instanceof TfPropertyTypeError) {
          property = property + "." + e.__property;
          e = new TfPropertyTypeError(
            e.__type,
            property,
            e.__label,
            e.__value,
            e.__valueTypeName
          );
        } else if (e instanceof TfTypeError) {
          e = new TfPropertyTypeError(
            e.__type,
            property,
            label,
            e.__value,
            e.__valueTypeName
          );
        }
        captureStackTrace(e);
        return e;
      }
      module.exports = {
        TfTypeError,
        TfPropertyTypeError,
        tfCustomError,
        tfSubError,
        tfJSON,
        getValueTypeName
      };
    }
  });

  // node_modules/typeforce/extra.js
  var require_extra = __commonJS({
    "node_modules/typeforce/extra.js"(exports, module) {
      var NATIVE = require_native();
      var ERRORS = require_errors();
      function _Buffer(value) {
        return Buffer.isBuffer(value);
      }
      function Hex(value) {
        return typeof value === "string" && /^([0-9a-f]{2})+$/i.test(value);
      }
      function _LengthN(type, length) {
        var name = type.toJSON();
        function Length(value) {
          if (!type(value))
            return false;
          if (value.length === length)
            return true;
          throw ERRORS.tfCustomError(name + "(Length: " + length + ")", name + "(Length: " + value.length + ")");
        }
        Length.toJSON = function() {
          return name;
        };
        return Length;
      }
      var _ArrayN = _LengthN.bind(null, NATIVE.Array);
      var _BufferN = _LengthN.bind(null, _Buffer);
      var _HexN = _LengthN.bind(null, Hex);
      var _StringN = _LengthN.bind(null, NATIVE.String);
      function Range(a, b, f) {
        f = f || NATIVE.Number;
        function _range(value, strict) {
          return f(value, strict) && value > a && value < b;
        }
        _range.toJSON = function() {
          return `${f.toJSON()} between [${a}, ${b}]`;
        };
        return _range;
      }
      var INT53_MAX = Math.pow(2, 53) - 1;
      function Finite(value) {
        return typeof value === "number" && isFinite(value);
      }
      function Int8(value) {
        return value << 24 >> 24 === value;
      }
      function Int16(value) {
        return value << 16 >> 16 === value;
      }
      function Int32(value) {
        return (value | 0) === value;
      }
      function Int53(value) {
        return typeof value === "number" && value >= -INT53_MAX && value <= INT53_MAX && Math.floor(value) === value;
      }
      function UInt8(value) {
        return (value & 255) === value;
      }
      function UInt16(value) {
        return (value & 65535) === value;
      }
      function UInt32(value) {
        return value >>> 0 === value;
      }
      function UInt53(value) {
        return typeof value === "number" && value >= 0 && value <= INT53_MAX && Math.floor(value) === value;
      }
      var types = {
        ArrayN: _ArrayN,
        Buffer: _Buffer,
        BufferN: _BufferN,
        Finite,
        Hex,
        HexN: _HexN,
        Int8,
        Int16,
        Int32,
        Int53,
        Range,
        StringN: _StringN,
        UInt8,
        UInt16,
        UInt32,
        UInt53
      };
      for (typeName in types) {
        types[typeName].toJSON = function(t) {
          return t;
        }.bind(null, typeName);
      }
      var typeName;
      module.exports = types;
    }
  });

  // node_modules/typeforce/index.js
  var require_typeforce = __commonJS({
    "node_modules/typeforce/index.js"(exports, module) {
      var ERRORS = require_errors();
      var NATIVE = require_native();
      var tfJSON = ERRORS.tfJSON;
      var TfTypeError = ERRORS.TfTypeError;
      var TfPropertyTypeError = ERRORS.TfPropertyTypeError;
      var tfSubError = ERRORS.tfSubError;
      var getValueTypeName = ERRORS.getValueTypeName;
      var TYPES = {
        arrayOf: function arrayOf(type, options) {
          type = compile(type);
          options = options || {};
          function _arrayOf(array, strict) {
            if (!NATIVE.Array(array))
              return false;
            if (NATIVE.Nil(array))
              return false;
            if (options.minLength !== void 0 && array.length < options.minLength)
              return false;
            if (options.maxLength !== void 0 && array.length > options.maxLength)
              return false;
            if (options.length !== void 0 && array.length !== options.length)
              return false;
            return array.every(function(value, i) {
              try {
                return typeforce(type, value, strict);
              } catch (e) {
                throw tfSubError(e, i);
              }
            });
          }
          _arrayOf.toJSON = function() {
            var str = "[" + tfJSON(type) + "]";
            if (options.length !== void 0) {
              str += "{" + options.length + "}";
            } else if (options.minLength !== void 0 || options.maxLength !== void 0) {
              str += "{" + (options.minLength === void 0 ? 0 : options.minLength) + "," + (options.maxLength === void 0 ? Infinity : options.maxLength) + "}";
            }
            return str;
          };
          return _arrayOf;
        },
        maybe: function maybe(type) {
          type = compile(type);
          function _maybe(value, strict) {
            return NATIVE.Nil(value) || type(value, strict, maybe);
          }
          _maybe.toJSON = function() {
            return "?" + tfJSON(type);
          };
          return _maybe;
        },
        map: function map(propertyType, propertyKeyType) {
          propertyType = compile(propertyType);
          if (propertyKeyType)
            propertyKeyType = compile(propertyKeyType);
          function _map(value, strict) {
            if (!NATIVE.Object(value))
              return false;
            if (NATIVE.Nil(value))
              return false;
            for (var propertyName in value) {
              try {
                if (propertyKeyType) {
                  typeforce(propertyKeyType, propertyName, strict);
                }
              } catch (e) {
                throw tfSubError(e, propertyName, "key");
              }
              try {
                var propertyValue = value[propertyName];
                typeforce(propertyType, propertyValue, strict);
              } catch (e) {
                throw tfSubError(e, propertyName);
              }
            }
            return true;
          }
          if (propertyKeyType) {
            _map.toJSON = function() {
              return "{" + tfJSON(propertyKeyType) + ": " + tfJSON(propertyType) + "}";
            };
          } else {
            _map.toJSON = function() {
              return "{" + tfJSON(propertyType) + "}";
            };
          }
          return _map;
        },
        object: function object(uncompiled) {
          var type = {};
          for (var typePropertyName in uncompiled) {
            type[typePropertyName] = compile(uncompiled[typePropertyName]);
          }
          function _object(value, strict) {
            if (!NATIVE.Object(value))
              return false;
            if (NATIVE.Nil(value))
              return false;
            var propertyName;
            try {
              for (propertyName in type) {
                var propertyType = type[propertyName];
                var propertyValue = value[propertyName];
                typeforce(propertyType, propertyValue, strict);
              }
            } catch (e) {
              throw tfSubError(e, propertyName);
            }
            if (strict) {
              for (propertyName in value) {
                if (type[propertyName])
                  continue;
                throw new TfPropertyTypeError(void 0, propertyName);
              }
            }
            return true;
          }
          _object.toJSON = function() {
            return tfJSON(type);
          };
          return _object;
        },
        anyOf: function anyOf() {
          var types = [].slice.call(arguments).map(compile);
          function _anyOf(value, strict) {
            return types.some(function(type) {
              try {
                return typeforce(type, value, strict);
              } catch (e) {
                return false;
              }
            });
          }
          _anyOf.toJSON = function() {
            return types.map(tfJSON).join("|");
          };
          return _anyOf;
        },
        allOf: function allOf() {
          var types = [].slice.call(arguments).map(compile);
          function _allOf(value, strict) {
            return types.every(function(type) {
              try {
                return typeforce(type, value, strict);
              } catch (e) {
                return false;
              }
            });
          }
          _allOf.toJSON = function() {
            return types.map(tfJSON).join(" & ");
          };
          return _allOf;
        },
        quacksLike: function quacksLike(type) {
          function _quacksLike(value) {
            return type === getValueTypeName(value);
          }
          _quacksLike.toJSON = function() {
            return type;
          };
          return _quacksLike;
        },
        tuple: function tuple() {
          var types = [].slice.call(arguments).map(compile);
          function _tuple(values, strict) {
            if (NATIVE.Nil(values))
              return false;
            if (NATIVE.Nil(values.length))
              return false;
            if (strict && values.length !== types.length)
              return false;
            return types.every(function(type, i) {
              try {
                return typeforce(type, values[i], strict);
              } catch (e) {
                throw tfSubError(e, i);
              }
            });
          }
          _tuple.toJSON = function() {
            return "(" + types.map(tfJSON).join(", ") + ")";
          };
          return _tuple;
        },
        value: function value(expected) {
          function _value(actual) {
            return actual === expected;
          }
          _value.toJSON = function() {
            return expected;
          };
          return _value;
        }
      };
      TYPES.oneOf = TYPES.anyOf;
      function compile(type) {
        if (NATIVE.String(type)) {
          if (type[0] === "?")
            return TYPES.maybe(type.slice(1));
          return NATIVE[type] || TYPES.quacksLike(type);
        } else if (type && NATIVE.Object(type)) {
          if (NATIVE.Array(type)) {
            if (type.length !== 1)
              throw new TypeError("Expected compile() parameter of type Array of length 1");
            return TYPES.arrayOf(type[0]);
          }
          return TYPES.object(type);
        } else if (NATIVE.Function(type)) {
          return type;
        }
        return TYPES.value(type);
      }
      function typeforce(type, value, strict, surrogate) {
        if (NATIVE.Function(type)) {
          if (type(value, strict))
            return true;
          throw new TfTypeError(surrogate || type, value);
        }
        return typeforce(compile(type), value, strict);
      }
      for (typeName in NATIVE) {
        typeforce[typeName] = NATIVE[typeName];
      }
      var typeName;
      for (typeName in TYPES) {
        typeforce[typeName] = TYPES[typeName];
      }
      var EXTRA = require_extra();
      for (typeName in EXTRA) {
        typeforce[typeName] = EXTRA[typeName];
      }
      typeforce.compile = compile;
      typeforce.TfTypeError = TfTypeError;
      typeforce.TfPropertyTypeError = TfPropertyTypeError;
      module.exports = typeforce;
    }
  });

  // node_modules/ecpair/src/types.js
  var require_types = __commonJS({
    "node_modules/ecpair/src/types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.maybe = exports.Boolean = exports.Array = exports.Buffer256bit = exports.Network = exports.typeforce = void 0;
      exports.typeforce = require_typeforce();
      exports.Network = exports.typeforce.compile({
        messagePrefix: exports.typeforce.oneOf(
          exports.typeforce.Buffer,
          exports.typeforce.String
        ),
        bip32: {
          public: exports.typeforce.UInt32,
          private: exports.typeforce.UInt32
        },
        pubKeyHash: exports.typeforce.UInt8,
        scriptHash: exports.typeforce.UInt8,
        wif: exports.typeforce.UInt8
      });
      exports.Buffer256bit = exports.typeforce.BufferN(32);
      exports.Array = exports.typeforce.Array;
      exports.Boolean = exports.typeforce.Boolean;
      exports.maybe = exports.typeforce.maybe;
    }
  });

  // node_modules/base64-js/index.js
  var require_base64_js = __commonJS({
    "node_modules/base64-js/index.js"(exports) {
      "use strict";
      exports.byteLength = byteLength;
      exports.toByteArray = toByteArray;
      exports.fromByteArray = fromByteArray;
      var lookup = [];
      var revLookup = [];
      var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
      var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      for (i = 0, len = code.length; i < len; ++i) {
        lookup[i] = code[i];
        revLookup[code.charCodeAt(i)] = i;
      }
      var i;
      var len;
      revLookup["-".charCodeAt(0)] = 62;
      revLookup["_".charCodeAt(0)] = 63;
      function getLens(b64) {
        var len2 = b64.length;
        if (len2 % 4 > 0) {
          throw new Error("Invalid string. Length must be a multiple of 4");
        }
        var validLen = b64.indexOf("=");
        if (validLen === -1)
          validLen = len2;
        var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
        return [validLen, placeHoldersLen];
      }
      function byteLength(b64) {
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }
      function _byteLength(b64, validLen, placeHoldersLen) {
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }
      function toByteArray(b64) {
        var tmp;
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
        var curByte = 0;
        var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
        var i2;
        for (i2 = 0; i2 < len2; i2 += 4) {
          tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];
          arr[curByte++] = tmp >> 16 & 255;
          arr[curByte++] = tmp >> 8 & 255;
          arr[curByte++] = tmp & 255;
        }
        if (placeHoldersLen === 2) {
          tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;
          arr[curByte++] = tmp & 255;
        }
        if (placeHoldersLen === 1) {
          tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;
          arr[curByte++] = tmp >> 8 & 255;
          arr[curByte++] = tmp & 255;
        }
        return arr;
      }
      function tripletToBase64(num) {
        return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
      }
      function encodeChunk(uint8, start, end) {
        var tmp;
        var output = [];
        for (var i2 = start; i2 < end; i2 += 3) {
          tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
          output.push(tripletToBase64(tmp));
        }
        return output.join("");
      }
      function fromByteArray(uint8) {
        var tmp;
        var len2 = uint8.length;
        var extraBytes = len2 % 3;
        var parts = [];
        var maxChunkLength = 16383;
        for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
          parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
        }
        if (extraBytes === 1) {
          tmp = uint8[len2 - 1];
          parts.push(
            lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
          );
        } else if (extraBytes === 2) {
          tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
          parts.push(
            lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
          );
        }
        return parts.join("");
      }
    }
  });

  // node_modules/ieee754/index.js
  var require_ieee754 = __commonJS({
    "node_modules/ieee754/index.js"(exports) {
      exports.read = function(buffer, offset, isLE, mLen, nBytes) {
        var e, m;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var nBits = -7;
        var i = isLE ? nBytes - 1 : 0;
        var d = isLE ? -1 : 1;
        var s = buffer[offset + i];
        i += d;
        e = s & (1 << -nBits) - 1;
        s >>= -nBits;
        nBits += eLen;
        for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {
        }
        m = e & (1 << -nBits) - 1;
        e >>= -nBits;
        nBits += mLen;
        for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {
        }
        if (e === 0) {
          e = 1 - eBias;
        } else if (e === eMax) {
          return m ? NaN : (s ? -1 : 1) * Infinity;
        } else {
          m = m + Math.pow(2, mLen);
          e = e - eBias;
        }
        return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
      };
      exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
        var e, m, c;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
        var i = isLE ? 0 : nBytes - 1;
        var d = isLE ? 1 : -1;
        var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
        value = Math.abs(value);
        if (isNaN(value) || value === Infinity) {
          m = isNaN(value) ? 1 : 0;
          e = eMax;
        } else {
          e = Math.floor(Math.log(value) / Math.LN2);
          if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
          }
          if (e + eBias >= 1) {
            value += rt / c;
          } else {
            value += rt * Math.pow(2, 1 - eBias);
          }
          if (value * c >= 2) {
            e++;
            c /= 2;
          }
          if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
          } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
          } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
          }
        }
        for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {
        }
        e = e << mLen | m;
        eLen += mLen;
        for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {
        }
        buffer[offset + i - d] |= s * 128;
      };
    }
  });

  // node_modules/buffer/index.js
  var require_buffer = __commonJS({
    "node_modules/buffer/index.js"(exports) {
      "use strict";
      var base64 = require_base64_js();
      var ieee754 = require_ieee754();
      exports.Buffer = Buffer2;
      exports.SlowBuffer = SlowBuffer;
      exports.INSPECT_MAX_BYTES = 50;
      var K_MAX_LENGTH = 2147483647;
      exports.kMaxLength = K_MAX_LENGTH;
      Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();
      if (!Buffer2.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
        console.error(
          "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
        );
      }
      function typedArraySupport() {
        try {
          var arr = new Uint8Array(1);
          arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function() {
            return 42;
          } };
          return arr.foo() === 42;
        } catch (e) {
          return false;
        }
      }
      Object.defineProperty(Buffer2.prototype, "parent", {
        enumerable: true,
        get: function() {
          if (!Buffer2.isBuffer(this))
            return void 0;
          return this.buffer;
        }
      });
      Object.defineProperty(Buffer2.prototype, "offset", {
        enumerable: true,
        get: function() {
          if (!Buffer2.isBuffer(this))
            return void 0;
          return this.byteOffset;
        }
      });
      function createBuffer(length) {
        if (length > K_MAX_LENGTH) {
          throw new RangeError('The value "' + length + '" is invalid for option "size"');
        }
        var buf = new Uint8Array(length);
        buf.__proto__ = Buffer2.prototype;
        return buf;
      }
      function Buffer2(arg, encodingOrOffset, length) {
        if (typeof arg === "number") {
          if (typeof encodingOrOffset === "string") {
            throw new TypeError(
              'The "string" argument must be of type string. Received type number'
            );
          }
          return allocUnsafe(arg);
        }
        return from(arg, encodingOrOffset, length);
      }
      if (typeof Symbol !== "undefined" && Symbol.species != null && Buffer2[Symbol.species] === Buffer2) {
        Object.defineProperty(Buffer2, Symbol.species, {
          value: null,
          configurable: true,
          enumerable: false,
          writable: false
        });
      }
      Buffer2.poolSize = 8192;
      function from(value, encodingOrOffset, length) {
        if (typeof value === "string") {
          return fromString(value, encodingOrOffset);
        }
        if (ArrayBuffer.isView(value)) {
          return fromArrayLike(value);
        }
        if (value == null) {
          throw TypeError(
            "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
          );
        }
        if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }
        if (typeof value === "number") {
          throw new TypeError(
            'The "value" argument must not be of type number. Received type number'
          );
        }
        var valueOf = value.valueOf && value.valueOf();
        if (valueOf != null && valueOf !== value) {
          return Buffer2.from(valueOf, encodingOrOffset, length);
        }
        var b = fromObject(value);
        if (b)
          return b;
        if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
          return Buffer2.from(
            value[Symbol.toPrimitive]("string"),
            encodingOrOffset,
            length
          );
        }
        throw new TypeError(
          "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
        );
      }
      Buffer2.from = function(value, encodingOrOffset, length) {
        return from(value, encodingOrOffset, length);
      };
      Buffer2.prototype.__proto__ = Uint8Array.prototype;
      Buffer2.__proto__ = Uint8Array;
      function assertSize(size) {
        if (typeof size !== "number") {
          throw new TypeError('"size" argument must be of type number');
        } else if (size < 0) {
          throw new RangeError('The value "' + size + '" is invalid for option "size"');
        }
      }
      function alloc(size, fill, encoding) {
        assertSize(size);
        if (size <= 0) {
          return createBuffer(size);
        }
        if (fill !== void 0) {
          return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
        }
        return createBuffer(size);
      }
      Buffer2.alloc = function(size, fill, encoding) {
        return alloc(size, fill, encoding);
      };
      function allocUnsafe(size) {
        assertSize(size);
        return createBuffer(size < 0 ? 0 : checked(size) | 0);
      }
      Buffer2.allocUnsafe = function(size) {
        return allocUnsafe(size);
      };
      Buffer2.allocUnsafeSlow = function(size) {
        return allocUnsafe(size);
      };
      function fromString(string, encoding) {
        if (typeof encoding !== "string" || encoding === "") {
          encoding = "utf8";
        }
        if (!Buffer2.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
        var length = byteLength(string, encoding) | 0;
        var buf = createBuffer(length);
        var actual = buf.write(string, encoding);
        if (actual !== length) {
          buf = buf.slice(0, actual);
        }
        return buf;
      }
      function fromArrayLike(array) {
        var length = array.length < 0 ? 0 : checked(array.length) | 0;
        var buf = createBuffer(length);
        for (var i = 0; i < length; i += 1) {
          buf[i] = array[i] & 255;
        }
        return buf;
      }
      function fromArrayBuffer(array, byteOffset, length) {
        if (byteOffset < 0 || array.byteLength < byteOffset) {
          throw new RangeError('"offset" is outside of buffer bounds');
        }
        if (array.byteLength < byteOffset + (length || 0)) {
          throw new RangeError('"length" is outside of buffer bounds');
        }
        var buf;
        if (byteOffset === void 0 && length === void 0) {
          buf = new Uint8Array(array);
        } else if (length === void 0) {
          buf = new Uint8Array(array, byteOffset);
        } else {
          buf = new Uint8Array(array, byteOffset, length);
        }
        buf.__proto__ = Buffer2.prototype;
        return buf;
      }
      function fromObject(obj) {
        if (Buffer2.isBuffer(obj)) {
          var len = checked(obj.length) | 0;
          var buf = createBuffer(len);
          if (buf.length === 0) {
            return buf;
          }
          obj.copy(buf, 0, 0, len);
          return buf;
        }
        if (obj.length !== void 0) {
          if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
            return createBuffer(0);
          }
          return fromArrayLike(obj);
        }
        if (obj.type === "Buffer" && Array.isArray(obj.data)) {
          return fromArrayLike(obj.data);
        }
      }
      function checked(length) {
        if (length >= K_MAX_LENGTH) {
          throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
        }
        return length | 0;
      }
      function SlowBuffer(length) {
        if (+length != length) {
          length = 0;
        }
        return Buffer2.alloc(+length);
      }
      Buffer2.isBuffer = function isBuffer(b) {
        return b != null && b._isBuffer === true && b !== Buffer2.prototype;
      };
      Buffer2.compare = function compare(a, b) {
        if (isInstance(a, Uint8Array))
          a = Buffer2.from(a, a.offset, a.byteLength);
        if (isInstance(b, Uint8Array))
          b = Buffer2.from(b, b.offset, b.byteLength);
        if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {
          throw new TypeError(
            'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
          );
        }
        if (a === b)
          return 0;
        var x = a.length;
        var y = b.length;
        for (var i = 0, len = Math.min(x, y); i < len; ++i) {
          if (a[i] !== b[i]) {
            x = a[i];
            y = b[i];
            break;
          }
        }
        if (x < y)
          return -1;
        if (y < x)
          return 1;
        return 0;
      };
      Buffer2.isEncoding = function isEncoding(encoding) {
        switch (String(encoding).toLowerCase()) {
          case "hex":
          case "utf8":
          case "utf-8":
          case "ascii":
          case "latin1":
          case "binary":
          case "base64":
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return true;
          default:
            return false;
        }
      };
      Buffer2.concat = function concat(list, length) {
        if (!Array.isArray(list)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        }
        if (list.length === 0) {
          return Buffer2.alloc(0);
        }
        var i;
        if (length === void 0) {
          length = 0;
          for (i = 0; i < list.length; ++i) {
            length += list[i].length;
          }
        }
        var buffer = Buffer2.allocUnsafe(length);
        var pos = 0;
        for (i = 0; i < list.length; ++i) {
          var buf = list[i];
          if (isInstance(buf, Uint8Array)) {
            buf = Buffer2.from(buf);
          }
          if (!Buffer2.isBuffer(buf)) {
            throw new TypeError('"list" argument must be an Array of Buffers');
          }
          buf.copy(buffer, pos);
          pos += buf.length;
        }
        return buffer;
      };
      function byteLength(string, encoding) {
        if (Buffer2.isBuffer(string)) {
          return string.length;
        }
        if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
          return string.byteLength;
        }
        if (typeof string !== "string") {
          throw new TypeError(
            'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string
          );
        }
        var len = string.length;
        var mustMatch = arguments.length > 2 && arguments[2] === true;
        if (!mustMatch && len === 0)
          return 0;
        var loweredCase = false;
        for (; ; ) {
          switch (encoding) {
            case "ascii":
            case "latin1":
            case "binary":
              return len;
            case "utf8":
            case "utf-8":
              return utf8ToBytes(string).length;
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return len * 2;
            case "hex":
              return len >>> 1;
            case "base64":
              return base64ToBytes(string).length;
            default:
              if (loweredCase) {
                return mustMatch ? -1 : utf8ToBytes(string).length;
              }
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer2.byteLength = byteLength;
      function slowToString(encoding, start, end) {
        var loweredCase = false;
        if (start === void 0 || start < 0) {
          start = 0;
        }
        if (start > this.length) {
          return "";
        }
        if (end === void 0 || end > this.length) {
          end = this.length;
        }
        if (end <= 0) {
          return "";
        }
        end >>>= 0;
        start >>>= 0;
        if (end <= start) {
          return "";
        }
        if (!encoding)
          encoding = "utf8";
        while (true) {
          switch (encoding) {
            case "hex":
              return hexSlice(this, start, end);
            case "utf8":
            case "utf-8":
              return utf8Slice(this, start, end);
            case "ascii":
              return asciiSlice(this, start, end);
            case "latin1":
            case "binary":
              return latin1Slice(this, start, end);
            case "base64":
              return base64Slice(this, start, end);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return utf16leSlice(this, start, end);
            default:
              if (loweredCase)
                throw new TypeError("Unknown encoding: " + encoding);
              encoding = (encoding + "").toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer2.prototype._isBuffer = true;
      function swap(b, n, m) {
        var i = b[n];
        b[n] = b[m];
        b[m] = i;
      }
      Buffer2.prototype.swap16 = function swap16() {
        var len = this.length;
        if (len % 2 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 16-bits");
        }
        for (var i = 0; i < len; i += 2) {
          swap(this, i, i + 1);
        }
        return this;
      };
      Buffer2.prototype.swap32 = function swap32() {
        var len = this.length;
        if (len % 4 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 32-bits");
        }
        for (var i = 0; i < len; i += 4) {
          swap(this, i, i + 3);
          swap(this, i + 1, i + 2);
        }
        return this;
      };
      Buffer2.prototype.swap64 = function swap64() {
        var len = this.length;
        if (len % 8 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 64-bits");
        }
        for (var i = 0; i < len; i += 8) {
          swap(this, i, i + 7);
          swap(this, i + 1, i + 6);
          swap(this, i + 2, i + 5);
          swap(this, i + 3, i + 4);
        }
        return this;
      };
      Buffer2.prototype.toString = function toString() {
        var length = this.length;
        if (length === 0)
          return "";
        if (arguments.length === 0)
          return utf8Slice(this, 0, length);
        return slowToString.apply(this, arguments);
      };
      Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;
      Buffer2.prototype.equals = function equals(b) {
        if (!Buffer2.isBuffer(b))
          throw new TypeError("Argument must be a Buffer");
        if (this === b)
          return true;
        return Buffer2.compare(this, b) === 0;
      };
      Buffer2.prototype.inspect = function inspect() {
        var str = "";
        var max = exports.INSPECT_MAX_BYTES;
        str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
        if (this.length > max)
          str += " ... ";
        return "<Buffer " + str + ">";
      };
      Buffer2.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
        if (isInstance(target, Uint8Array)) {
          target = Buffer2.from(target, target.offset, target.byteLength);
        }
        if (!Buffer2.isBuffer(target)) {
          throw new TypeError(
            'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target
          );
        }
        if (start === void 0) {
          start = 0;
        }
        if (end === void 0) {
          end = target ? target.length : 0;
        }
        if (thisStart === void 0) {
          thisStart = 0;
        }
        if (thisEnd === void 0) {
          thisEnd = this.length;
        }
        if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
          throw new RangeError("out of range index");
        }
        if (thisStart >= thisEnd && start >= end) {
          return 0;
        }
        if (thisStart >= thisEnd) {
          return -1;
        }
        if (start >= end) {
          return 1;
        }
        start >>>= 0;
        end >>>= 0;
        thisStart >>>= 0;
        thisEnd >>>= 0;
        if (this === target)
          return 0;
        var x = thisEnd - thisStart;
        var y = end - start;
        var len = Math.min(x, y);
        var thisCopy = this.slice(thisStart, thisEnd);
        var targetCopy = target.slice(start, end);
        for (var i = 0; i < len; ++i) {
          if (thisCopy[i] !== targetCopy[i]) {
            x = thisCopy[i];
            y = targetCopy[i];
            break;
          }
        }
        if (x < y)
          return -1;
        if (y < x)
          return 1;
        return 0;
      };
      function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
        if (buffer.length === 0)
          return -1;
        if (typeof byteOffset === "string") {
          encoding = byteOffset;
          byteOffset = 0;
        } else if (byteOffset > 2147483647) {
          byteOffset = 2147483647;
        } else if (byteOffset < -2147483648) {
          byteOffset = -2147483648;
        }
        byteOffset = +byteOffset;
        if (numberIsNaN(byteOffset)) {
          byteOffset = dir ? 0 : buffer.length - 1;
        }
        if (byteOffset < 0)
          byteOffset = buffer.length + byteOffset;
        if (byteOffset >= buffer.length) {
          if (dir)
            return -1;
          else
            byteOffset = buffer.length - 1;
        } else if (byteOffset < 0) {
          if (dir)
            byteOffset = 0;
          else
            return -1;
        }
        if (typeof val === "string") {
          val = Buffer2.from(val, encoding);
        }
        if (Buffer2.isBuffer(val)) {
          if (val.length === 0) {
            return -1;
          }
          return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
        } else if (typeof val === "number") {
          val = val & 255;
          if (typeof Uint8Array.prototype.indexOf === "function") {
            if (dir) {
              return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            } else {
              return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
            }
          }
          return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
        }
        throw new TypeError("val must be string, number or Buffer");
      }
      function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
        var indexSize = 1;
        var arrLength = arr.length;
        var valLength = val.length;
        if (encoding !== void 0) {
          encoding = String(encoding).toLowerCase();
          if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) {
              return -1;
            }
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
          }
        }
        function read(buf, i2) {
          if (indexSize === 1) {
            return buf[i2];
          } else {
            return buf.readUInt16BE(i2 * indexSize);
          }
        }
        var i;
        if (dir) {
          var foundIndex = -1;
          for (i = byteOffset; i < arrLength; i++) {
            if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
              if (foundIndex === -1)
                foundIndex = i;
              if (i - foundIndex + 1 === valLength)
                return foundIndex * indexSize;
            } else {
              if (foundIndex !== -1)
                i -= i - foundIndex;
              foundIndex = -1;
            }
          }
        } else {
          if (byteOffset + valLength > arrLength)
            byteOffset = arrLength - valLength;
          for (i = byteOffset; i >= 0; i--) {
            var found = true;
            for (var j = 0; j < valLength; j++) {
              if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
              }
            }
            if (found)
              return i;
          }
        }
        return -1;
      }
      Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {
        return this.indexOf(val, byteOffset, encoding) !== -1;
      };
      Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
      };
      Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
      };
      function hexWrite(buf, string, offset, length) {
        offset = Number(offset) || 0;
        var remaining = buf.length - offset;
        if (!length) {
          length = remaining;
        } else {
          length = Number(length);
          if (length > remaining) {
            length = remaining;
          }
        }
        var strLen = string.length;
        if (length > strLen / 2) {
          length = strLen / 2;
        }
        for (var i = 0; i < length; ++i) {
          var parsed = parseInt(string.substr(i * 2, 2), 16);
          if (numberIsNaN(parsed))
            return i;
          buf[offset + i] = parsed;
        }
        return i;
      }
      function utf8Write(buf, string, offset, length) {
        return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
      }
      function asciiWrite(buf, string, offset, length) {
        return blitBuffer(asciiToBytes(string), buf, offset, length);
      }
      function latin1Write(buf, string, offset, length) {
        return asciiWrite(buf, string, offset, length);
      }
      function base64Write(buf, string, offset, length) {
        return blitBuffer(base64ToBytes(string), buf, offset, length);
      }
      function ucs2Write(buf, string, offset, length) {
        return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
      }
      Buffer2.prototype.write = function write(string, offset, length, encoding) {
        if (offset === void 0) {
          encoding = "utf8";
          length = this.length;
          offset = 0;
        } else if (length === void 0 && typeof offset === "string") {
          encoding = offset;
          length = this.length;
          offset = 0;
        } else if (isFinite(offset)) {
          offset = offset >>> 0;
          if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === void 0)
              encoding = "utf8";
          } else {
            encoding = length;
            length = void 0;
          }
        } else {
          throw new Error(
            "Buffer.write(string, encoding, offset[, length]) is no longer supported"
          );
        }
        var remaining = this.length - offset;
        if (length === void 0 || length > remaining)
          length = remaining;
        if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
          throw new RangeError("Attempt to write outside buffer bounds");
        }
        if (!encoding)
          encoding = "utf8";
        var loweredCase = false;
        for (; ; ) {
          switch (encoding) {
            case "hex":
              return hexWrite(this, string, offset, length);
            case "utf8":
            case "utf-8":
              return utf8Write(this, string, offset, length);
            case "ascii":
              return asciiWrite(this, string, offset, length);
            case "latin1":
            case "binary":
              return latin1Write(this, string, offset, length);
            case "base64":
              return base64Write(this, string, offset, length);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return ucs2Write(this, string, offset, length);
            default:
              if (loweredCase)
                throw new TypeError("Unknown encoding: " + encoding);
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      };
      Buffer2.prototype.toJSON = function toJSON() {
        return {
          type: "Buffer",
          data: Array.prototype.slice.call(this._arr || this, 0)
        };
      };
      function base64Slice(buf, start, end) {
        if (start === 0 && end === buf.length) {
          return base64.fromByteArray(buf);
        } else {
          return base64.fromByteArray(buf.slice(start, end));
        }
      }
      function utf8Slice(buf, start, end) {
        end = Math.min(buf.length, end);
        var res = [];
        var i = start;
        while (i < end) {
          var firstByte = buf[i];
          var codePoint = null;
          var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
          if (i + bytesPerSequence <= end) {
            var secondByte, thirdByte, fourthByte, tempCodePoint;
            switch (bytesPerSequence) {
              case 1:
                if (firstByte < 128) {
                  codePoint = firstByte;
                }
                break;
              case 2:
                secondByte = buf[i + 1];
                if ((secondByte & 192) === 128) {
                  tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                  if (tempCodePoint > 127) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 3:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                  tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                  if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 4:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                fourthByte = buf[i + 3];
                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                  tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                  if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                    codePoint = tempCodePoint;
                  }
                }
            }
          }
          if (codePoint === null) {
            codePoint = 65533;
            bytesPerSequence = 1;
          } else if (codePoint > 65535) {
            codePoint -= 65536;
            res.push(codePoint >>> 10 & 1023 | 55296);
            codePoint = 56320 | codePoint & 1023;
          }
          res.push(codePoint);
          i += bytesPerSequence;
        }
        return decodeCodePointsArray(res);
      }
      var MAX_ARGUMENTS_LENGTH = 4096;
      function decodeCodePointsArray(codePoints) {
        var len = codePoints.length;
        if (len <= MAX_ARGUMENTS_LENGTH) {
          return String.fromCharCode.apply(String, codePoints);
        }
        var res = "";
        var i = 0;
        while (i < len) {
          res += String.fromCharCode.apply(
            String,
            codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
          );
        }
        return res;
      }
      function asciiSlice(buf, start, end) {
        var ret = "";
        end = Math.min(buf.length, end);
        for (var i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i] & 127);
        }
        return ret;
      }
      function latin1Slice(buf, start, end) {
        var ret = "";
        end = Math.min(buf.length, end);
        for (var i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i]);
        }
        return ret;
      }
      function hexSlice(buf, start, end) {
        var len = buf.length;
        if (!start || start < 0)
          start = 0;
        if (!end || end < 0 || end > len)
          end = len;
        var out = "";
        for (var i = start; i < end; ++i) {
          out += toHex(buf[i]);
        }
        return out;
      }
      function utf16leSlice(buf, start, end) {
        var bytes = buf.slice(start, end);
        var res = "";
        for (var i = 0; i < bytes.length; i += 2) {
          res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
        }
        return res;
      }
      Buffer2.prototype.slice = function slice(start, end) {
        var len = this.length;
        start = ~~start;
        end = end === void 0 ? len : ~~end;
        if (start < 0) {
          start += len;
          if (start < 0)
            start = 0;
        } else if (start > len) {
          start = len;
        }
        if (end < 0) {
          end += len;
          if (end < 0)
            end = 0;
        } else if (end > len) {
          end = len;
        }
        if (end < start)
          end = start;
        var newBuf = this.subarray(start, end);
        newBuf.__proto__ = Buffer2.prototype;
        return newBuf;
      };
      function checkOffset(offset, ext, length) {
        if (offset % 1 !== 0 || offset < 0)
          throw new RangeError("offset is not uint");
        if (offset + ext > length)
          throw new RangeError("Trying to access beyond buffer length");
      }
      Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        var val = this[offset];
        var mul = 1;
        var i = 0;
        while (++i < byteLength2 && (mul *= 256)) {
          val += this[offset + i] * mul;
        }
        return val;
      };
      Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          checkOffset(offset, byteLength2, this.length);
        }
        var val = this[offset + --byteLength2];
        var mul = 1;
        while (byteLength2 > 0 && (mul *= 256)) {
          val += this[offset + --byteLength2] * mul;
        }
        return val;
      };
      Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 1, this.length);
        return this[offset];
      };
      Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        return this[offset] | this[offset + 1] << 8;
      };
      Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        return this[offset] << 8 | this[offset + 1];
      };
      Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
      };
      Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
      };
      Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        var val = this[offset];
        var mul = 1;
        var i = 0;
        while (++i < byteLength2 && (mul *= 256)) {
          val += this[offset + i] * mul;
        }
        mul *= 128;
        if (val >= mul)
          val -= Math.pow(2, 8 * byteLength2);
        return val;
      };
      Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        var i = byteLength2;
        var mul = 1;
        var val = this[offset + --i];
        while (i > 0 && (mul *= 256)) {
          val += this[offset + --i] * mul;
        }
        mul *= 128;
        if (val >= mul)
          val -= Math.pow(2, 8 * byteLength2);
        return val;
      };
      Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 1, this.length);
        if (!(this[offset] & 128))
          return this[offset];
        return (255 - this[offset] + 1) * -1;
      };
      Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        var val = this[offset] | this[offset + 1] << 8;
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        var val = this[offset + 1] | this[offset] << 8;
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
      };
      Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
      };
      Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, true, 23, 4);
      };
      Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, false, 23, 4);
      };
      Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, true, 52, 8);
      };
      Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, false, 52, 8);
      };
      function checkInt(buf, value, offset, ext, max, min) {
        if (!Buffer2.isBuffer(buf))
          throw new TypeError('"buffer" argument must be a Buffer instance');
        if (value > max || value < min)
          throw new RangeError('"value" argument is out of bounds');
        if (offset + ext > buf.length)
          throw new RangeError("Index out of range");
      }
      Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
          checkInt(this, value, offset, byteLength2, maxBytes, 0);
        }
        var mul = 1;
        var i = 0;
        this[offset] = value & 255;
        while (++i < byteLength2 && (mul *= 256)) {
          this[offset + i] = value / mul & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
          checkInt(this, value, offset, byteLength2, maxBytes, 0);
        }
        var i = byteLength2 - 1;
        var mul = 1;
        this[offset + i] = value & 255;
        while (--i >= 0 && (mul *= 256)) {
          this[offset + i] = value / mul & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 1, 255, 0);
        this[offset] = value & 255;
        return offset + 1;
      };
      Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 65535, 0);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        return offset + 2;
      };
      Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 65535, 0);
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
        return offset + 2;
      };
      Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 4294967295, 0);
        this[offset + 3] = value >>> 24;
        this[offset + 2] = value >>> 16;
        this[offset + 1] = value >>> 8;
        this[offset] = value & 255;
        return offset + 4;
      };
      Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 4294967295, 0);
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
        return offset + 4;
      };
      Buffer2.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          var limit = Math.pow(2, 8 * byteLength2 - 1);
          checkInt(this, value, offset, byteLength2, limit - 1, -limit);
        }
        var i = 0;
        var mul = 1;
        var sub = 0;
        this[offset] = value & 255;
        while (++i < byteLength2 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          var limit = Math.pow(2, 8 * byteLength2 - 1);
          checkInt(this, value, offset, byteLength2, limit - 1, -limit);
        }
        var i = byteLength2 - 1;
        var mul = 1;
        var sub = 0;
        this[offset + i] = value & 255;
        while (--i >= 0 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 1, 127, -128);
        if (value < 0)
          value = 255 + value + 1;
        this[offset] = value & 255;
        return offset + 1;
      };
      Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 32767, -32768);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        return offset + 2;
      };
      Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 32767, -32768);
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
        return offset + 2;
      };
      Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 2147483647, -2147483648);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        this[offset + 2] = value >>> 16;
        this[offset + 3] = value >>> 24;
        return offset + 4;
      };
      Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 2147483647, -2147483648);
        if (value < 0)
          value = 4294967295 + value + 1;
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
        return offset + 4;
      };
      function checkIEEE754(buf, value, offset, ext, max, min) {
        if (offset + ext > buf.length)
          throw new RangeError("Index out of range");
        if (offset < 0)
          throw new RangeError("Index out of range");
      }
      function writeFloat(buf, value, offset, littleEndian, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
        }
        ieee754.write(buf, value, offset, littleEndian, 23, 4);
        return offset + 4;
      }
      Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
        return writeFloat(this, value, offset, true, noAssert);
      };
      Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
        return writeFloat(this, value, offset, false, noAssert);
      };
      function writeDouble(buf, value, offset, littleEndian, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
        }
        ieee754.write(buf, value, offset, littleEndian, 52, 8);
        return offset + 8;
      }
      Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
        return writeDouble(this, value, offset, true, noAssert);
      };
      Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
        return writeDouble(this, value, offset, false, noAssert);
      };
      Buffer2.prototype.copy = function copy(target, targetStart, start, end) {
        if (!Buffer2.isBuffer(target))
          throw new TypeError("argument should be a Buffer");
        if (!start)
          start = 0;
        if (!end && end !== 0)
          end = this.length;
        if (targetStart >= target.length)
          targetStart = target.length;
        if (!targetStart)
          targetStart = 0;
        if (end > 0 && end < start)
          end = start;
        if (end === start)
          return 0;
        if (target.length === 0 || this.length === 0)
          return 0;
        if (targetStart < 0) {
          throw new RangeError("targetStart out of bounds");
        }
        if (start < 0 || start >= this.length)
          throw new RangeError("Index out of range");
        if (end < 0)
          throw new RangeError("sourceEnd out of bounds");
        if (end > this.length)
          end = this.length;
        if (target.length - targetStart < end - start) {
          end = target.length - targetStart + start;
        }
        var len = end - start;
        if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
          this.copyWithin(targetStart, start, end);
        } else if (this === target && start < targetStart && targetStart < end) {
          for (var i = len - 1; i >= 0; --i) {
            target[i + targetStart] = this[i + start];
          }
        } else {
          Uint8Array.prototype.set.call(
            target,
            this.subarray(start, end),
            targetStart
          );
        }
        return len;
      };
      Buffer2.prototype.fill = function fill(val, start, end, encoding) {
        if (typeof val === "string") {
          if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
          } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
          }
          if (encoding !== void 0 && typeof encoding !== "string") {
            throw new TypeError("encoding must be a string");
          }
          if (typeof encoding === "string" && !Buffer2.isEncoding(encoding)) {
            throw new TypeError("Unknown encoding: " + encoding);
          }
          if (val.length === 1) {
            var code = val.charCodeAt(0);
            if (encoding === "utf8" && code < 128 || encoding === "latin1") {
              val = code;
            }
          }
        } else if (typeof val === "number") {
          val = val & 255;
        }
        if (start < 0 || this.length < start || this.length < end) {
          throw new RangeError("Out of range index");
        }
        if (end <= start) {
          return this;
        }
        start = start >>> 0;
        end = end === void 0 ? this.length : end >>> 0;
        if (!val)
          val = 0;
        var i;
        if (typeof val === "number") {
          for (i = start; i < end; ++i) {
            this[i] = val;
          }
        } else {
          var bytes = Buffer2.isBuffer(val) ? val : Buffer2.from(val, encoding);
          var len = bytes.length;
          if (len === 0) {
            throw new TypeError('The value "' + val + '" is invalid for argument "value"');
          }
          for (i = 0; i < end - start; ++i) {
            this[i + start] = bytes[i % len];
          }
        }
        return this;
      };
      var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
      function base64clean(str) {
        str = str.split("=")[0];
        str = str.trim().replace(INVALID_BASE64_RE, "");
        if (str.length < 2)
          return "";
        while (str.length % 4 !== 0) {
          str = str + "=";
        }
        return str;
      }
      function toHex(n) {
        if (n < 16)
          return "0" + n.toString(16);
        return n.toString(16);
      }
      function utf8ToBytes(string, units) {
        units = units || Infinity;
        var codePoint;
        var length = string.length;
        var leadSurrogate = null;
        var bytes = [];
        for (var i = 0; i < length; ++i) {
          codePoint = string.charCodeAt(i);
          if (codePoint > 55295 && codePoint < 57344) {
            if (!leadSurrogate) {
              if (codePoint > 56319) {
                if ((units -= 3) > -1)
                  bytes.push(239, 191, 189);
                continue;
              } else if (i + 1 === length) {
                if ((units -= 3) > -1)
                  bytes.push(239, 191, 189);
                continue;
              }
              leadSurrogate = codePoint;
              continue;
            }
            if (codePoint < 56320) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              leadSurrogate = codePoint;
              continue;
            }
            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
          } else if (leadSurrogate) {
            if ((units -= 3) > -1)
              bytes.push(239, 191, 189);
          }
          leadSurrogate = null;
          if (codePoint < 128) {
            if ((units -= 1) < 0)
              break;
            bytes.push(codePoint);
          } else if (codePoint < 2048) {
            if ((units -= 2) < 0)
              break;
            bytes.push(
              codePoint >> 6 | 192,
              codePoint & 63 | 128
            );
          } else if (codePoint < 65536) {
            if ((units -= 3) < 0)
              break;
            bytes.push(
              codePoint >> 12 | 224,
              codePoint >> 6 & 63 | 128,
              codePoint & 63 | 128
            );
          } else if (codePoint < 1114112) {
            if ((units -= 4) < 0)
              break;
            bytes.push(
              codePoint >> 18 | 240,
              codePoint >> 12 & 63 | 128,
              codePoint >> 6 & 63 | 128,
              codePoint & 63 | 128
            );
          } else {
            throw new Error("Invalid code point");
          }
        }
        return bytes;
      }
      function asciiToBytes(str) {
        var byteArray = [];
        for (var i = 0; i < str.length; ++i) {
          byteArray.push(str.charCodeAt(i) & 255);
        }
        return byteArray;
      }
      function utf16leToBytes(str, units) {
        var c, hi, lo;
        var byteArray = [];
        for (var i = 0; i < str.length; ++i) {
          if ((units -= 2) < 0)
            break;
          c = str.charCodeAt(i);
          hi = c >> 8;
          lo = c % 256;
          byteArray.push(lo);
          byteArray.push(hi);
        }
        return byteArray;
      }
      function base64ToBytes(str) {
        return base64.toByteArray(base64clean(str));
      }
      function blitBuffer(src, dst, offset, length) {
        for (var i = 0; i < length; ++i) {
          if (i + offset >= dst.length || i >= src.length)
            break;
          dst[i + offset] = src[i];
        }
        return i;
      }
      function isInstance(obj, type) {
        return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
      }
      function numberIsNaN(obj) {
        return obj !== obj;
      }
    }
  });

  // node_modules/safe-buffer/index.js
  var require_safe_buffer = __commonJS({
    "node_modules/safe-buffer/index.js"(exports, module) {
      var buffer = require_buffer();
      var Buffer2 = buffer.Buffer;
      function copyProps(src, dst) {
        for (var key in src) {
          dst[key] = src[key];
        }
      }
      if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {
        module.exports = buffer;
      } else {
        copyProps(buffer, exports);
        exports.Buffer = SafeBuffer;
      }
      function SafeBuffer(arg, encodingOrOffset, length) {
        return Buffer2(arg, encodingOrOffset, length);
      }
      copyProps(Buffer2, SafeBuffer);
      SafeBuffer.from = function(arg, encodingOrOffset, length) {
        if (typeof arg === "number") {
          throw new TypeError("Argument must not be a number");
        }
        return Buffer2(arg, encodingOrOffset, length);
      };
      SafeBuffer.alloc = function(size, fill, encoding) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        var buf = Buffer2(size);
        if (fill !== void 0) {
          if (typeof encoding === "string") {
            buf.fill(fill, encoding);
          } else {
            buf.fill(fill);
          }
        } else {
          buf.fill(0);
        }
        return buf;
      };
      SafeBuffer.allocUnsafe = function(size) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        return Buffer2(size);
      };
      SafeBuffer.allocUnsafeSlow = function(size) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        return buffer.SlowBuffer(size);
      };
    }
  });

  // node_modules/randombytes/browser.js
  var require_browser = __commonJS({
    "node_modules/randombytes/browser.js"(exports, module) {
      "use strict";
      var MAX_BYTES = 65536;
      var MAX_UINT32 = 4294967295;
      function oldBrowser() {
        throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11");
      }
      var Buffer2 = require_safe_buffer().Buffer;
      var crypto2 = global.crypto || global.msCrypto;
      if (crypto2 && crypto2.getRandomValues) {
        module.exports = randomBytes;
      } else {
        module.exports = oldBrowser;
      }
      function randomBytes(size, cb) {
        if (size > MAX_UINT32)
          throw new RangeError("requested too many random bytes");
        var bytes = Buffer2.allocUnsafe(size);
        if (size > 0) {
          if (size > MAX_BYTES) {
            for (var generated = 0; generated < size; generated += MAX_BYTES) {
              crypto2.getRandomValues(bytes.slice(generated, generated + MAX_BYTES));
            }
          } else {
            crypto2.getRandomValues(bytes);
          }
        }
        if (typeof cb === "function") {
          return process.nextTick(function() {
            cb(null, bytes);
          });
        }
        return bytes;
      }
    }
  });

  // node_modules/inherits/inherits_browser.js
  var require_inherits_browser = __commonJS({
    "node_modules/inherits/inherits_browser.js"(exports, module) {
      if (typeof Object.create === "function") {
        module.exports = function inherits(ctor, superCtor) {
          if (superCtor) {
            ctor.super_ = superCtor;
            ctor.prototype = Object.create(superCtor.prototype, {
              constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
          }
        };
      } else {
        module.exports = function inherits(ctor, superCtor) {
          if (superCtor) {
            ctor.super_ = superCtor;
            var TempCtor = function() {
            };
            TempCtor.prototype = superCtor.prototype;
            ctor.prototype = new TempCtor();
            ctor.prototype.constructor = ctor;
          }
        };
      }
    }
  });

  // node_modules/hash-base/node_modules/safe-buffer/index.js
  var require_safe_buffer2 = __commonJS({
    "node_modules/hash-base/node_modules/safe-buffer/index.js"(exports, module) {
      var buffer = require_buffer();
      var Buffer2 = buffer.Buffer;
      function copyProps(src, dst) {
        for (var key in src) {
          dst[key] = src[key];
        }
      }
      if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {
        module.exports = buffer;
      } else {
        copyProps(buffer, exports);
        exports.Buffer = SafeBuffer;
      }
      function SafeBuffer(arg, encodingOrOffset, length) {
        return Buffer2(arg, encodingOrOffset, length);
      }
      SafeBuffer.prototype = Object.create(Buffer2.prototype);
      copyProps(Buffer2, SafeBuffer);
      SafeBuffer.from = function(arg, encodingOrOffset, length) {
        if (typeof arg === "number") {
          throw new TypeError("Argument must not be a number");
        }
        return Buffer2(arg, encodingOrOffset, length);
      };
      SafeBuffer.alloc = function(size, fill, encoding) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        var buf = Buffer2(size);
        if (fill !== void 0) {
          if (typeof encoding === "string") {
            buf.fill(fill, encoding);
          } else {
            buf.fill(fill);
          }
        } else {
          buf.fill(0);
        }
        return buf;
      };
      SafeBuffer.allocUnsafe = function(size) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        return Buffer2(size);
      };
      SafeBuffer.allocUnsafeSlow = function(size) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        return buffer.SlowBuffer(size);
      };
    }
  });

  // node_modules/events/events.js
  var require_events = __commonJS({
    "node_modules/events/events.js"(exports, module) {
      "use strict";
      var R = typeof Reflect === "object" ? Reflect : null;
      var ReflectApply = R && typeof R.apply === "function" ? R.apply : function ReflectApply2(target, receiver, args) {
        return Function.prototype.apply.call(target, receiver, args);
      };
      var ReflectOwnKeys;
      if (R && typeof R.ownKeys === "function") {
        ReflectOwnKeys = R.ownKeys;
      } else if (Object.getOwnPropertySymbols) {
        ReflectOwnKeys = function ReflectOwnKeys2(target) {
          return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
        };
      } else {
        ReflectOwnKeys = function ReflectOwnKeys2(target) {
          return Object.getOwnPropertyNames(target);
        };
      }
      function ProcessEmitWarning(warning) {
        if (console && console.warn)
          console.warn(warning);
      }
      var NumberIsNaN = Number.isNaN || function NumberIsNaN2(value) {
        return value !== value;
      };
      function EventEmitter() {
        EventEmitter.init.call(this);
      }
      module.exports = EventEmitter;
      module.exports.once = once;
      EventEmitter.EventEmitter = EventEmitter;
      EventEmitter.prototype._events = void 0;
      EventEmitter.prototype._eventsCount = 0;
      EventEmitter.prototype._maxListeners = void 0;
      var defaultMaxListeners = 10;
      function checkListener(listener) {
        if (typeof listener !== "function") {
          throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
        }
      }
      Object.defineProperty(EventEmitter, "defaultMaxListeners", {
        enumerable: true,
        get: function() {
          return defaultMaxListeners;
        },
        set: function(arg) {
          if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) {
            throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
          }
          defaultMaxListeners = arg;
        }
      });
      EventEmitter.init = function() {
        if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {
          this._events = /* @__PURE__ */ Object.create(null);
          this._eventsCount = 0;
        }
        this._maxListeners = this._maxListeners || void 0;
      };
      EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
        if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) {
          throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
        }
        this._maxListeners = n;
        return this;
      };
      function _getMaxListeners(that) {
        if (that._maxListeners === void 0)
          return EventEmitter.defaultMaxListeners;
        return that._maxListeners;
      }
      EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
        return _getMaxListeners(this);
      };
      EventEmitter.prototype.emit = function emit(type) {
        var args = [];
        for (var i = 1; i < arguments.length; i++)
          args.push(arguments[i]);
        var doError = type === "error";
        var events = this._events;
        if (events !== void 0)
          doError = doError && events.error === void 0;
        else if (!doError)
          return false;
        if (doError) {
          var er;
          if (args.length > 0)
            er = args[0];
          if (er instanceof Error) {
            throw er;
          }
          var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
          err.context = er;
          throw err;
        }
        var handler = events[type];
        if (handler === void 0)
          return false;
        if (typeof handler === "function") {
          ReflectApply(handler, this, args);
        } else {
          var len = handler.length;
          var listeners = arrayClone(handler, len);
          for (var i = 0; i < len; ++i)
            ReflectApply(listeners[i], this, args);
        }
        return true;
      };
      function _addListener(target, type, listener, prepend) {
        var m;
        var events;
        var existing;
        checkListener(listener);
        events = target._events;
        if (events === void 0) {
          events = target._events = /* @__PURE__ */ Object.create(null);
          target._eventsCount = 0;
        } else {
          if (events.newListener !== void 0) {
            target.emit(
              "newListener",
              type,
              listener.listener ? listener.listener : listener
            );
            events = target._events;
          }
          existing = events[type];
        }
        if (existing === void 0) {
          existing = events[type] = listener;
          ++target._eventsCount;
        } else {
          if (typeof existing === "function") {
            existing = events[type] = prepend ? [listener, existing] : [existing, listener];
          } else if (prepend) {
            existing.unshift(listener);
          } else {
            existing.push(listener);
          }
          m = _getMaxListeners(target);
          if (m > 0 && existing.length > m && !existing.warned) {
            existing.warned = true;
            var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners added. Use emitter.setMaxListeners() to increase limit");
            w.name = "MaxListenersExceededWarning";
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            ProcessEmitWarning(w);
          }
        }
        return target;
      }
      EventEmitter.prototype.addListener = function addListener(type, listener) {
        return _addListener(this, type, listener, false);
      };
      EventEmitter.prototype.on = EventEmitter.prototype.addListener;
      EventEmitter.prototype.prependListener = function prependListener(type, listener) {
        return _addListener(this, type, listener, true);
      };
      function onceWrapper() {
        if (!this.fired) {
          this.target.removeListener(this.type, this.wrapFn);
          this.fired = true;
          if (arguments.length === 0)
            return this.listener.call(this.target);
          return this.listener.apply(this.target, arguments);
        }
      }
      function _onceWrap(target, type, listener) {
        var state = { fired: false, wrapFn: void 0, target, type, listener };
        var wrapped = onceWrapper.bind(state);
        wrapped.listener = listener;
        state.wrapFn = wrapped;
        return wrapped;
      }
      EventEmitter.prototype.once = function once2(type, listener) {
        checkListener(listener);
        this.on(type, _onceWrap(this, type, listener));
        return this;
      };
      EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
        checkListener(listener);
        this.prependListener(type, _onceWrap(this, type, listener));
        return this;
      };
      EventEmitter.prototype.removeListener = function removeListener(type, listener) {
        var list, events, position, i, originalListener;
        checkListener(listener);
        events = this._events;
        if (events === void 0)
          return this;
        list = events[type];
        if (list === void 0)
          return this;
        if (list === listener || list.listener === listener) {
          if (--this._eventsCount === 0)
            this._events = /* @__PURE__ */ Object.create(null);
          else {
            delete events[type];
            if (events.removeListener)
              this.emit("removeListener", type, list.listener || listener);
          }
        } else if (typeof list !== "function") {
          position = -1;
          for (i = list.length - 1; i >= 0; i--) {
            if (list[i] === listener || list[i].listener === listener) {
              originalListener = list[i].listener;
              position = i;
              break;
            }
          }
          if (position < 0)
            return this;
          if (position === 0)
            list.shift();
          else {
            spliceOne(list, position);
          }
          if (list.length === 1)
            events[type] = list[0];
          if (events.removeListener !== void 0)
            this.emit("removeListener", type, originalListener || listener);
        }
        return this;
      };
      EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
      EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
        var listeners, events, i;
        events = this._events;
        if (events === void 0)
          return this;
        if (events.removeListener === void 0) {
          if (arguments.length === 0) {
            this._events = /* @__PURE__ */ Object.create(null);
            this._eventsCount = 0;
          } else if (events[type] !== void 0) {
            if (--this._eventsCount === 0)
              this._events = /* @__PURE__ */ Object.create(null);
            else
              delete events[type];
          }
          return this;
        }
        if (arguments.length === 0) {
          var keys = Object.keys(events);
          var key;
          for (i = 0; i < keys.length; ++i) {
            key = keys[i];
            if (key === "removeListener")
              continue;
            this.removeAllListeners(key);
          }
          this.removeAllListeners("removeListener");
          this._events = /* @__PURE__ */ Object.create(null);
          this._eventsCount = 0;
          return this;
        }
        listeners = events[type];
        if (typeof listeners === "function") {
          this.removeListener(type, listeners);
        } else if (listeners !== void 0) {
          for (i = listeners.length - 1; i >= 0; i--) {
            this.removeListener(type, listeners[i]);
          }
        }
        return this;
      };
      function _listeners(target, type, unwrap) {
        var events = target._events;
        if (events === void 0)
          return [];
        var evlistener = events[type];
        if (evlistener === void 0)
          return [];
        if (typeof evlistener === "function")
          return unwrap ? [evlistener.listener || evlistener] : [evlistener];
        return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
      }
      EventEmitter.prototype.listeners = function listeners(type) {
        return _listeners(this, type, true);
      };
      EventEmitter.prototype.rawListeners = function rawListeners(type) {
        return _listeners(this, type, false);
      };
      EventEmitter.listenerCount = function(emitter, type) {
        if (typeof emitter.listenerCount === "function") {
          return emitter.listenerCount(type);
        } else {
          return listenerCount.call(emitter, type);
        }
      };
      EventEmitter.prototype.listenerCount = listenerCount;
      function listenerCount(type) {
        var events = this._events;
        if (events !== void 0) {
          var evlistener = events[type];
          if (typeof evlistener === "function") {
            return 1;
          } else if (evlistener !== void 0) {
            return evlistener.length;
          }
        }
        return 0;
      }
      EventEmitter.prototype.eventNames = function eventNames() {
        return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
      };
      function arrayClone(arr, n) {
        var copy = new Array(n);
        for (var i = 0; i < n; ++i)
          copy[i] = arr[i];
        return copy;
      }
      function spliceOne(list, index) {
        for (; index + 1 < list.length; index++)
          list[index] = list[index + 1];
        list.pop();
      }
      function unwrapListeners(arr) {
        var ret = new Array(arr.length);
        for (var i = 0; i < ret.length; ++i) {
          ret[i] = arr[i].listener || arr[i];
        }
        return ret;
      }
      function once(emitter, name) {
        return new Promise(function(resolve, reject) {
          function errorListener(err) {
            emitter.removeListener(name, resolver);
            reject(err);
          }
          function resolver() {
            if (typeof emitter.removeListener === "function") {
              emitter.removeListener("error", errorListener);
            }
            resolve([].slice.call(arguments));
          }
          ;
          eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
          if (name !== "error") {
            addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
          }
        });
      }
      function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
        if (typeof emitter.on === "function") {
          eventTargetAgnosticAddListener(emitter, "error", handler, flags);
        }
      }
      function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
        if (typeof emitter.on === "function") {
          if (flags.once) {
            emitter.once(name, listener);
          } else {
            emitter.on(name, listener);
          }
        } else if (typeof emitter.addEventListener === "function") {
          emitter.addEventListener(name, function wrapListener(arg) {
            if (flags.once) {
              emitter.removeEventListener(name, wrapListener);
            }
            listener(arg);
          });
        } else {
          throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
        }
      }
    }
  });

  // node_modules/readable-stream/lib/internal/streams/stream-browser.js
  var require_stream_browser = __commonJS({
    "node_modules/readable-stream/lib/internal/streams/stream-browser.js"(exports, module) {
      module.exports = require_events().EventEmitter;
    }
  });

  // (disabled):node_modules/util/util.js
  var require_util = __commonJS({
    "(disabled):node_modules/util/util.js"() {
    }
  });

  // node_modules/readable-stream/lib/internal/streams/buffer_list.js
  var require_buffer_list = __commonJS({
    "node_modules/readable-stream/lib/internal/streams/buffer_list.js"(exports, module) {
      "use strict";
      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
        return target;
      }
      function _defineProperty(obj, key, value) {
        key = _toPropertyKey(key);
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
        }
      }
      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps)
          _defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          _defineProperties(Constructor, staticProps);
        Object.defineProperty(Constructor, "prototype", { writable: false });
        return Constructor;
      }
      function _toPropertyKey(arg) {
        var key = _toPrimitive(arg, "string");
        return typeof key === "symbol" ? key : String(key);
      }
      function _toPrimitive(input, hint) {
        if (typeof input !== "object" || input === null)
          return input;
        var prim = input[Symbol.toPrimitive];
        if (prim !== void 0) {
          var res = prim.call(input, hint || "default");
          if (typeof res !== "object")
            return res;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return (hint === "string" ? String : Number)(input);
      }
      var _require = require_buffer();
      var Buffer2 = _require.Buffer;
      var _require2 = require_util();
      var inspect = _require2.inspect;
      var custom = inspect && inspect.custom || "inspect";
      function copyBuffer(src, target, offset) {
        Buffer2.prototype.copy.call(src, target, offset);
      }
      module.exports = /* @__PURE__ */ function() {
        function BufferList() {
          _classCallCheck(this, BufferList);
          this.head = null;
          this.tail = null;
          this.length = 0;
        }
        _createClass(BufferList, [{
          key: "push",
          value: function push(v) {
            var entry = {
              data: v,
              next: null
            };
            if (this.length > 0)
              this.tail.next = entry;
            else
              this.head = entry;
            this.tail = entry;
            ++this.length;
          }
        }, {
          key: "unshift",
          value: function unshift(v) {
            var entry = {
              data: v,
              next: this.head
            };
            if (this.length === 0)
              this.tail = entry;
            this.head = entry;
            ++this.length;
          }
        }, {
          key: "shift",
          value: function shift() {
            if (this.length === 0)
              return;
            var ret = this.head.data;
            if (this.length === 1)
              this.head = this.tail = null;
            else
              this.head = this.head.next;
            --this.length;
            return ret;
          }
        }, {
          key: "clear",
          value: function clear() {
            this.head = this.tail = null;
            this.length = 0;
          }
        }, {
          key: "join",
          value: function join(s) {
            if (this.length === 0)
              return "";
            var p = this.head;
            var ret = "" + p.data;
            while (p = p.next)
              ret += s + p.data;
            return ret;
          }
        }, {
          key: "concat",
          value: function concat(n) {
            if (this.length === 0)
              return Buffer2.alloc(0);
            var ret = Buffer2.allocUnsafe(n >>> 0);
            var p = this.head;
            var i = 0;
            while (p) {
              copyBuffer(p.data, ret, i);
              i += p.data.length;
              p = p.next;
            }
            return ret;
          }
          // Consumes a specified amount of bytes or characters from the buffered data.
        }, {
          key: "consume",
          value: function consume(n, hasStrings) {
            var ret;
            if (n < this.head.data.length) {
              ret = this.head.data.slice(0, n);
              this.head.data = this.head.data.slice(n);
            } else if (n === this.head.data.length) {
              ret = this.shift();
            } else {
              ret = hasStrings ? this._getString(n) : this._getBuffer(n);
            }
            return ret;
          }
        }, {
          key: "first",
          value: function first() {
            return this.head.data;
          }
          // Consumes a specified amount of characters from the buffered data.
        }, {
          key: "_getString",
          value: function _getString(n) {
            var p = this.head;
            var c = 1;
            var ret = p.data;
            n -= ret.length;
            while (p = p.next) {
              var str = p.data;
              var nb = n > str.length ? str.length : n;
              if (nb === str.length)
                ret += str;
              else
                ret += str.slice(0, n);
              n -= nb;
              if (n === 0) {
                if (nb === str.length) {
                  ++c;
                  if (p.next)
                    this.head = p.next;
                  else
                    this.head = this.tail = null;
                } else {
                  this.head = p;
                  p.data = str.slice(nb);
                }
                break;
              }
              ++c;
            }
            this.length -= c;
            return ret;
          }
          // Consumes a specified amount of bytes from the buffered data.
        }, {
          key: "_getBuffer",
          value: function _getBuffer(n) {
            var ret = Buffer2.allocUnsafe(n);
            var p = this.head;
            var c = 1;
            p.data.copy(ret);
            n -= p.data.length;
            while (p = p.next) {
              var buf = p.data;
              var nb = n > buf.length ? buf.length : n;
              buf.copy(ret, ret.length - n, 0, nb);
              n -= nb;
              if (n === 0) {
                if (nb === buf.length) {
                  ++c;
                  if (p.next)
                    this.head = p.next;
                  else
                    this.head = this.tail = null;
                } else {
                  this.head = p;
                  p.data = buf.slice(nb);
                }
                break;
              }
              ++c;
            }
            this.length -= c;
            return ret;
          }
          // Make sure the linked list only shows the minimal necessary information.
        }, {
          key: custom,
          value: function value(_, options) {
            return inspect(this, _objectSpread(_objectSpread({}, options), {}, {
              // Only inspect one level.
              depth: 0,
              // It should not recurse.
              customInspect: false
            }));
          }
        }]);
        return BufferList;
      }();
    }
  });

  // node_modules/readable-stream/lib/internal/streams/destroy.js
  var require_destroy = __commonJS({
    "node_modules/readable-stream/lib/internal/streams/destroy.js"(exports, module) {
      "use strict";
      function destroy(err, cb) {
        var _this = this;
        var readableDestroyed = this._readableState && this._readableState.destroyed;
        var writableDestroyed = this._writableState && this._writableState.destroyed;
        if (readableDestroyed || writableDestroyed) {
          if (cb) {
            cb(err);
          } else if (err) {
            if (!this._writableState) {
              process.nextTick(emitErrorNT, this, err);
            } else if (!this._writableState.errorEmitted) {
              this._writableState.errorEmitted = true;
              process.nextTick(emitErrorNT, this, err);
            }
          }
          return this;
        }
        if (this._readableState) {
          this._readableState.destroyed = true;
        }
        if (this._writableState) {
          this._writableState.destroyed = true;
        }
        this._destroy(err || null, function(err2) {
          if (!cb && err2) {
            if (!_this._writableState) {
              process.nextTick(emitErrorAndCloseNT, _this, err2);
            } else if (!_this._writableState.errorEmitted) {
              _this._writableState.errorEmitted = true;
              process.nextTick(emitErrorAndCloseNT, _this, err2);
            } else {
              process.nextTick(emitCloseNT, _this);
            }
          } else if (cb) {
            process.nextTick(emitCloseNT, _this);
            cb(err2);
          } else {
            process.nextTick(emitCloseNT, _this);
          }
        });
        return this;
      }
      function emitErrorAndCloseNT(self2, err) {
        emitErrorNT(self2, err);
        emitCloseNT(self2);
      }
      function emitCloseNT(self2) {
        if (self2._writableState && !self2._writableState.emitClose)
          return;
        if (self2._readableState && !self2._readableState.emitClose)
          return;
        self2.emit("close");
      }
      function undestroy() {
        if (this._readableState) {
          this._readableState.destroyed = false;
          this._readableState.reading = false;
          this._readableState.ended = false;
          this._readableState.endEmitted = false;
        }
        if (this._writableState) {
          this._writableState.destroyed = false;
          this._writableState.ended = false;
          this._writableState.ending = false;
          this._writableState.finalCalled = false;
          this._writableState.prefinished = false;
          this._writableState.finished = false;
          this._writableState.errorEmitted = false;
        }
      }
      function emitErrorNT(self2, err) {
        self2.emit("error", err);
      }
      function errorOrDestroy(stream, err) {
        var rState = stream._readableState;
        var wState = stream._writableState;
        if (rState && rState.autoDestroy || wState && wState.autoDestroy)
          stream.destroy(err);
        else
          stream.emit("error", err);
      }
      module.exports = {
        destroy,
        undestroy,
        errorOrDestroy
      };
    }
  });

  // node_modules/readable-stream/errors-browser.js
  var require_errors_browser = __commonJS({
    "node_modules/readable-stream/errors-browser.js"(exports, module) {
      "use strict";
      function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        subClass.__proto__ = superClass;
      }
      var codes = {};
      function createErrorType(code, message, Base) {
        if (!Base) {
          Base = Error;
        }
        function getMessage(arg1, arg2, arg3) {
          if (typeof message === "string") {
            return message;
          } else {
            return message(arg1, arg2, arg3);
          }
        }
        var NodeError = /* @__PURE__ */ function(_Base) {
          _inheritsLoose(NodeError2, _Base);
          function NodeError2(arg1, arg2, arg3) {
            return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
          }
          return NodeError2;
        }(Base);
        NodeError.prototype.name = Base.name;
        NodeError.prototype.code = code;
        codes[code] = NodeError;
      }
      function oneOf(expected, thing) {
        if (Array.isArray(expected)) {
          var len = expected.length;
          expected = expected.map(function(i) {
            return String(i);
          });
          if (len > 2) {
            return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
          } else if (len === 2) {
            return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
          } else {
            return "of ".concat(thing, " ").concat(expected[0]);
          }
        } else {
          return "of ".concat(thing, " ").concat(String(expected));
        }
      }
      function startsWith(str, search, pos) {
        return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
      }
      function endsWith(str, search, this_len) {
        if (this_len === void 0 || this_len > str.length) {
          this_len = str.length;
        }
        return str.substring(this_len - search.length, this_len) === search;
      }
      function includes(str, search, start) {
        if (typeof start !== "number") {
          start = 0;
        }
        if (start + search.length > str.length) {
          return false;
        } else {
          return str.indexOf(search, start) !== -1;
        }
      }
      createErrorType("ERR_INVALID_OPT_VALUE", function(name, value) {
        return 'The value "' + value + '" is invalid for option "' + name + '"';
      }, TypeError);
      createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
        var determiner;
        if (typeof expected === "string" && startsWith(expected, "not ")) {
          determiner = "must not be";
          expected = expected.replace(/^not /, "");
        } else {
          determiner = "must be";
        }
        var msg;
        if (endsWith(name, " argument")) {
          msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
        } else {
          var type = includes(name, ".") ? "property" : "argument";
          msg = 'The "'.concat(name, '" ').concat(type, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
        }
        msg += ". Received type ".concat(typeof actual);
        return msg;
      }, TypeError);
      createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
      createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name) {
        return "The " + name + " method is not implemented";
      });
      createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
      createErrorType("ERR_STREAM_DESTROYED", function(name) {
        return "Cannot call " + name + " after a stream was destroyed";
      });
      createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
      createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
      createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
      createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
      createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
        return "Unknown encoding: " + arg;
      }, TypeError);
      createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
      module.exports.codes = codes;
    }
  });

  // node_modules/readable-stream/lib/internal/streams/state.js
  var require_state = __commonJS({
    "node_modules/readable-stream/lib/internal/streams/state.js"(exports, module) {
      "use strict";
      var ERR_INVALID_OPT_VALUE = require_errors_browser().codes.ERR_INVALID_OPT_VALUE;
      function highWaterMarkFrom(options, isDuplex, duplexKey) {
        return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
      }
      function getHighWaterMark(state, options, duplexKey, isDuplex) {
        var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
        if (hwm != null) {
          if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
            var name = isDuplex ? duplexKey : "highWaterMark";
            throw new ERR_INVALID_OPT_VALUE(name, hwm);
          }
          return Math.floor(hwm);
        }
        return state.objectMode ? 16 : 16 * 1024;
      }
      module.exports = {
        getHighWaterMark
      };
    }
  });

  // node_modules/util-deprecate/browser.js
  var require_browser2 = __commonJS({
    "node_modules/util-deprecate/browser.js"(exports, module) {
      module.exports = deprecate;
      function deprecate(fn, msg) {
        if (config("noDeprecation")) {
          return fn;
        }
        var warned = false;
        function deprecated() {
          if (!warned) {
            if (config("throwDeprecation")) {
              throw new Error(msg);
            } else if (config("traceDeprecation")) {
              console.trace(msg);
            } else {
              console.warn(msg);
            }
            warned = true;
          }
          return fn.apply(this, arguments);
        }
        return deprecated;
      }
      function config(name) {
        try {
          if (!global.localStorage)
            return false;
        } catch (_) {
          return false;
        }
        var val = global.localStorage[name];
        if (null == val)
          return false;
        return String(val).toLowerCase() === "true";
      }
    }
  });

  // node_modules/readable-stream/lib/_stream_writable.js
  var require_stream_writable = __commonJS({
    "node_modules/readable-stream/lib/_stream_writable.js"(exports, module) {
      "use strict";
      module.exports = Writable;
      function CorkedRequest(state) {
        var _this = this;
        this.next = null;
        this.entry = null;
        this.finish = function() {
          onCorkedFinish(_this, state);
        };
      }
      var Duplex;
      Writable.WritableState = WritableState;
      var internalUtil = {
        deprecate: require_browser2()
      };
      var Stream = require_stream_browser();
      var Buffer2 = require_buffer().Buffer;
      var OurUint8Array = (typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
      };
      function _uint8ArrayToBuffer(chunk) {
        return Buffer2.from(chunk);
      }
      function _isUint8Array(obj) {
        return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
      }
      var destroyImpl = require_destroy();
      var _require = require_state();
      var getHighWaterMark = _require.getHighWaterMark;
      var _require$codes = require_errors_browser().codes;
      var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
      var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
      var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
      var ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE;
      var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
      var ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES;
      var ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END;
      var ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
      var errorOrDestroy = destroyImpl.errorOrDestroy;
      require_inherits_browser()(Writable, Stream);
      function nop() {
      }
      function WritableState(options, stream, isDuplex) {
        Duplex = Duplex || require_stream_duplex();
        options = options || {};
        if (typeof isDuplex !== "boolean")
          isDuplex = stream instanceof Duplex;
        this.objectMode = !!options.objectMode;
        if (isDuplex)
          this.objectMode = this.objectMode || !!options.writableObjectMode;
        this.highWaterMark = getHighWaterMark(this, options, "writableHighWaterMark", isDuplex);
        this.finalCalled = false;
        this.needDrain = false;
        this.ending = false;
        this.ended = false;
        this.finished = false;
        this.destroyed = false;
        var noDecode = options.decodeStrings === false;
        this.decodeStrings = !noDecode;
        this.defaultEncoding = options.defaultEncoding || "utf8";
        this.length = 0;
        this.writing = false;
        this.corked = 0;
        this.sync = true;
        this.bufferProcessing = false;
        this.onwrite = function(er) {
          onwrite(stream, er);
        };
        this.writecb = null;
        this.writelen = 0;
        this.bufferedRequest = null;
        this.lastBufferedRequest = null;
        this.pendingcb = 0;
        this.prefinished = false;
        this.errorEmitted = false;
        this.emitClose = options.emitClose !== false;
        this.autoDestroy = !!options.autoDestroy;
        this.bufferedRequestCount = 0;
        this.corkedRequestsFree = new CorkedRequest(this);
      }
      WritableState.prototype.getBuffer = function getBuffer() {
        var current = this.bufferedRequest;
        var out = [];
        while (current) {
          out.push(current);
          current = current.next;
        }
        return out;
      };
      (function() {
        try {
          Object.defineProperty(WritableState.prototype, "buffer", {
            get: internalUtil.deprecate(function writableStateBufferGetter() {
              return this.getBuffer();
            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
          });
        } catch (_) {
        }
      })();
      var realHasInstance;
      if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
        realHasInstance = Function.prototype[Symbol.hasInstance];
        Object.defineProperty(Writable, Symbol.hasInstance, {
          value: function value(object) {
            if (realHasInstance.call(this, object))
              return true;
            if (this !== Writable)
              return false;
            return object && object._writableState instanceof WritableState;
          }
        });
      } else {
        realHasInstance = function realHasInstance2(object) {
          return object instanceof this;
        };
      }
      function Writable(options) {
        Duplex = Duplex || require_stream_duplex();
        var isDuplex = this instanceof Duplex;
        if (!isDuplex && !realHasInstance.call(Writable, this))
          return new Writable(options);
        this._writableState = new WritableState(options, this, isDuplex);
        this.writable = true;
        if (options) {
          if (typeof options.write === "function")
            this._write = options.write;
          if (typeof options.writev === "function")
            this._writev = options.writev;
          if (typeof options.destroy === "function")
            this._destroy = options.destroy;
          if (typeof options.final === "function")
            this._final = options.final;
        }
        Stream.call(this);
      }
      Writable.prototype.pipe = function() {
        errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
      };
      function writeAfterEnd(stream, cb) {
        var er = new ERR_STREAM_WRITE_AFTER_END();
        errorOrDestroy(stream, er);
        process.nextTick(cb, er);
      }
      function validChunk(stream, state, chunk, cb) {
        var er;
        if (chunk === null) {
          er = new ERR_STREAM_NULL_VALUES();
        } else if (typeof chunk !== "string" && !state.objectMode) {
          er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer"], chunk);
        }
        if (er) {
          errorOrDestroy(stream, er);
          process.nextTick(cb, er);
          return false;
        }
        return true;
      }
      Writable.prototype.write = function(chunk, encoding, cb) {
        var state = this._writableState;
        var ret = false;
        var isBuf = !state.objectMode && _isUint8Array(chunk);
        if (isBuf && !Buffer2.isBuffer(chunk)) {
          chunk = _uint8ArrayToBuffer(chunk);
        }
        if (typeof encoding === "function") {
          cb = encoding;
          encoding = null;
        }
        if (isBuf)
          encoding = "buffer";
        else if (!encoding)
          encoding = state.defaultEncoding;
        if (typeof cb !== "function")
          cb = nop;
        if (state.ending)
          writeAfterEnd(this, cb);
        else if (isBuf || validChunk(this, state, chunk, cb)) {
          state.pendingcb++;
          ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
        }
        return ret;
      };
      Writable.prototype.cork = function() {
        this._writableState.corked++;
      };
      Writable.prototype.uncork = function() {
        var state = this._writableState;
        if (state.corked) {
          state.corked--;
          if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest)
            clearBuffer(this, state);
        }
      };
      Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
        if (typeof encoding === "string")
          encoding = encoding.toLowerCase();
        if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1))
          throw new ERR_UNKNOWN_ENCODING(encoding);
        this._writableState.defaultEncoding = encoding;
        return this;
      };
      Object.defineProperty(Writable.prototype, "writableBuffer", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get() {
          return this._writableState && this._writableState.getBuffer();
        }
      });
      function decodeChunk(state, chunk, encoding) {
        if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") {
          chunk = Buffer2.from(chunk, encoding);
        }
        return chunk;
      }
      Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get() {
          return this._writableState.highWaterMark;
        }
      });
      function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
        if (!isBuf) {
          var newChunk = decodeChunk(state, chunk, encoding);
          if (chunk !== newChunk) {
            isBuf = true;
            encoding = "buffer";
            chunk = newChunk;
          }
        }
        var len = state.objectMode ? 1 : chunk.length;
        state.length += len;
        var ret = state.length < state.highWaterMark;
        if (!ret)
          state.needDrain = true;
        if (state.writing || state.corked) {
          var last = state.lastBufferedRequest;
          state.lastBufferedRequest = {
            chunk,
            encoding,
            isBuf,
            callback: cb,
            next: null
          };
          if (last) {
            last.next = state.lastBufferedRequest;
          } else {
            state.bufferedRequest = state.lastBufferedRequest;
          }
          state.bufferedRequestCount += 1;
        } else {
          doWrite(stream, state, false, len, chunk, encoding, cb);
        }
        return ret;
      }
      function doWrite(stream, state, writev, len, chunk, encoding, cb) {
        state.writelen = len;
        state.writecb = cb;
        state.writing = true;
        state.sync = true;
        if (state.destroyed)
          state.onwrite(new ERR_STREAM_DESTROYED("write"));
        else if (writev)
          stream._writev(chunk, state.onwrite);
        else
          stream._write(chunk, encoding, state.onwrite);
        state.sync = false;
      }
      function onwriteError(stream, state, sync, er, cb) {
        --state.pendingcb;
        if (sync) {
          process.nextTick(cb, er);
          process.nextTick(finishMaybe, stream, state);
          stream._writableState.errorEmitted = true;
          errorOrDestroy(stream, er);
        } else {
          cb(er);
          stream._writableState.errorEmitted = true;
          errorOrDestroy(stream, er);
          finishMaybe(stream, state);
        }
      }
      function onwriteStateUpdate(state) {
        state.writing = false;
        state.writecb = null;
        state.length -= state.writelen;
        state.writelen = 0;
      }
      function onwrite(stream, er) {
        var state = stream._writableState;
        var sync = state.sync;
        var cb = state.writecb;
        if (typeof cb !== "function")
          throw new ERR_MULTIPLE_CALLBACK();
        onwriteStateUpdate(state);
        if (er)
          onwriteError(stream, state, sync, er, cb);
        else {
          var finished = needFinish(state) || stream.destroyed;
          if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
            clearBuffer(stream, state);
          }
          if (sync) {
            process.nextTick(afterWrite, stream, state, finished, cb);
          } else {
            afterWrite(stream, state, finished, cb);
          }
        }
      }
      function afterWrite(stream, state, finished, cb) {
        if (!finished)
          onwriteDrain(stream, state);
        state.pendingcb--;
        cb();
        finishMaybe(stream, state);
      }
      function onwriteDrain(stream, state) {
        if (state.length === 0 && state.needDrain) {
          state.needDrain = false;
          stream.emit("drain");
        }
      }
      function clearBuffer(stream, state) {
        state.bufferProcessing = true;
        var entry = state.bufferedRequest;
        if (stream._writev && entry && entry.next) {
          var l = state.bufferedRequestCount;
          var buffer = new Array(l);
          var holder = state.corkedRequestsFree;
          holder.entry = entry;
          var count = 0;
          var allBuffers = true;
          while (entry) {
            buffer[count] = entry;
            if (!entry.isBuf)
              allBuffers = false;
            entry = entry.next;
            count += 1;
          }
          buffer.allBuffers = allBuffers;
          doWrite(stream, state, true, state.length, buffer, "", holder.finish);
          state.pendingcb++;
          state.lastBufferedRequest = null;
          if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
          } else {
            state.corkedRequestsFree = new CorkedRequest(state);
          }
          state.bufferedRequestCount = 0;
        } else {
          while (entry) {
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            doWrite(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--;
            if (state.writing) {
              break;
            }
          }
          if (entry === null)
            state.lastBufferedRequest = null;
        }
        state.bufferedRequest = entry;
        state.bufferProcessing = false;
      }
      Writable.prototype._write = function(chunk, encoding, cb) {
        cb(new ERR_METHOD_NOT_IMPLEMENTED("_write()"));
      };
      Writable.prototype._writev = null;
      Writable.prototype.end = function(chunk, encoding, cb) {
        var state = this._writableState;
        if (typeof chunk === "function") {
          cb = chunk;
          chunk = null;
          encoding = null;
        } else if (typeof encoding === "function") {
          cb = encoding;
          encoding = null;
        }
        if (chunk !== null && chunk !== void 0)
          this.write(chunk, encoding);
        if (state.corked) {
          state.corked = 1;
          this.uncork();
        }
        if (!state.ending)
          endWritable(this, state, cb);
        return this;
      };
      Object.defineProperty(Writable.prototype, "writableLength", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get() {
          return this._writableState.length;
        }
      });
      function needFinish(state) {
        return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
      }
      function callFinal(stream, state) {
        stream._final(function(err) {
          state.pendingcb--;
          if (err) {
            errorOrDestroy(stream, err);
          }
          state.prefinished = true;
          stream.emit("prefinish");
          finishMaybe(stream, state);
        });
      }
      function prefinish(stream, state) {
        if (!state.prefinished && !state.finalCalled) {
          if (typeof stream._final === "function" && !state.destroyed) {
            state.pendingcb++;
            state.finalCalled = true;
            process.nextTick(callFinal, stream, state);
          } else {
            state.prefinished = true;
            stream.emit("prefinish");
          }
        }
      }
      function finishMaybe(stream, state) {
        var need = needFinish(state);
        if (need) {
          prefinish(stream, state);
          if (state.pendingcb === 0) {
            state.finished = true;
            stream.emit("finish");
            if (state.autoDestroy) {
              var rState = stream._readableState;
              if (!rState || rState.autoDestroy && rState.endEmitted) {
                stream.destroy();
              }
            }
          }
        }
        return need;
      }
      function endWritable(stream, state, cb) {
        state.ending = true;
        finishMaybe(stream, state);
        if (cb) {
          if (state.finished)
            process.nextTick(cb);
          else
            stream.once("finish", cb);
        }
        state.ended = true;
        stream.writable = false;
      }
      function onCorkedFinish(corkReq, state, err) {
        var entry = corkReq.entry;
        corkReq.entry = null;
        while (entry) {
          var cb = entry.callback;
          state.pendingcb--;
          cb(err);
          entry = entry.next;
        }
        state.corkedRequestsFree.next = corkReq;
      }
      Object.defineProperty(Writable.prototype, "destroyed", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get() {
          if (this._writableState === void 0) {
            return false;
          }
          return this._writableState.destroyed;
        },
        set: function set(value) {
          if (!this._writableState) {
            return;
          }
          this._writableState.destroyed = value;
        }
      });
      Writable.prototype.destroy = destroyImpl.destroy;
      Writable.prototype._undestroy = destroyImpl.undestroy;
      Writable.prototype._destroy = function(err, cb) {
        cb(err);
      };
    }
  });

  // node_modules/readable-stream/lib/_stream_duplex.js
  var require_stream_duplex = __commonJS({
    "node_modules/readable-stream/lib/_stream_duplex.js"(exports, module) {
      "use strict";
      var objectKeys = Object.keys || function(obj) {
        var keys2 = [];
        for (var key in obj)
          keys2.push(key);
        return keys2;
      };
      module.exports = Duplex;
      var Readable = require_stream_readable();
      var Writable = require_stream_writable();
      require_inherits_browser()(Duplex, Readable);
      {
        keys = objectKeys(Writable.prototype);
        for (v = 0; v < keys.length; v++) {
          method = keys[v];
          if (!Duplex.prototype[method])
            Duplex.prototype[method] = Writable.prototype[method];
        }
      }
      var keys;
      var method;
      var v;
      function Duplex(options) {
        if (!(this instanceof Duplex))
          return new Duplex(options);
        Readable.call(this, options);
        Writable.call(this, options);
        this.allowHalfOpen = true;
        if (options) {
          if (options.readable === false)
            this.readable = false;
          if (options.writable === false)
            this.writable = false;
          if (options.allowHalfOpen === false) {
            this.allowHalfOpen = false;
            this.once("end", onend);
          }
        }
      }
      Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get() {
          return this._writableState.highWaterMark;
        }
      });
      Object.defineProperty(Duplex.prototype, "writableBuffer", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get() {
          return this._writableState && this._writableState.getBuffer();
        }
      });
      Object.defineProperty(Duplex.prototype, "writableLength", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get() {
          return this._writableState.length;
        }
      });
      function onend() {
        if (this._writableState.ended)
          return;
        process.nextTick(onEndNT, this);
      }
      function onEndNT(self2) {
        self2.end();
      }
      Object.defineProperty(Duplex.prototype, "destroyed", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get() {
          if (this._readableState === void 0 || this._writableState === void 0) {
            return false;
          }
          return this._readableState.destroyed && this._writableState.destroyed;
        },
        set: function set(value) {
          if (this._readableState === void 0 || this._writableState === void 0) {
            return;
          }
          this._readableState.destroyed = value;
          this._writableState.destroyed = value;
        }
      });
    }
  });

  // node_modules/string_decoder/node_modules/safe-buffer/index.js
  var require_safe_buffer3 = __commonJS({
    "node_modules/string_decoder/node_modules/safe-buffer/index.js"(exports, module) {
      var buffer = require_buffer();
      var Buffer2 = buffer.Buffer;
      function copyProps(src, dst) {
        for (var key in src) {
          dst[key] = src[key];
        }
      }
      if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {
        module.exports = buffer;
      } else {
        copyProps(buffer, exports);
        exports.Buffer = SafeBuffer;
      }
      function SafeBuffer(arg, encodingOrOffset, length) {
        return Buffer2(arg, encodingOrOffset, length);
      }
      SafeBuffer.prototype = Object.create(Buffer2.prototype);
      copyProps(Buffer2, SafeBuffer);
      SafeBuffer.from = function(arg, encodingOrOffset, length) {
        if (typeof arg === "number") {
          throw new TypeError("Argument must not be a number");
        }
        return Buffer2(arg, encodingOrOffset, length);
      };
      SafeBuffer.alloc = function(size, fill, encoding) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        var buf = Buffer2(size);
        if (fill !== void 0) {
          if (typeof encoding === "string") {
            buf.fill(fill, encoding);
          } else {
            buf.fill(fill);
          }
        } else {
          buf.fill(0);
        }
        return buf;
      };
      SafeBuffer.allocUnsafe = function(size) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        return Buffer2(size);
      };
      SafeBuffer.allocUnsafeSlow = function(size) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        return buffer.SlowBuffer(size);
      };
    }
  });

  // node_modules/string_decoder/lib/string_decoder.js
  var require_string_decoder = __commonJS({
    "node_modules/string_decoder/lib/string_decoder.js"(exports) {
      "use strict";
      var Buffer2 = require_safe_buffer3().Buffer;
      var isEncoding = Buffer2.isEncoding || function(encoding) {
        encoding = "" + encoding;
        switch (encoding && encoding.toLowerCase()) {
          case "hex":
          case "utf8":
          case "utf-8":
          case "ascii":
          case "binary":
          case "base64":
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
          case "raw":
            return true;
          default:
            return false;
        }
      };
      function _normalizeEncoding(enc) {
        if (!enc)
          return "utf8";
        var retried;
        while (true) {
          switch (enc) {
            case "utf8":
            case "utf-8":
              return "utf8";
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return "utf16le";
            case "latin1":
            case "binary":
              return "latin1";
            case "base64":
            case "ascii":
            case "hex":
              return enc;
            default:
              if (retried)
                return;
              enc = ("" + enc).toLowerCase();
              retried = true;
          }
        }
      }
      function normalizeEncoding(enc) {
        var nenc = _normalizeEncoding(enc);
        if (typeof nenc !== "string" && (Buffer2.isEncoding === isEncoding || !isEncoding(enc)))
          throw new Error("Unknown encoding: " + enc);
        return nenc || enc;
      }
      exports.StringDecoder = StringDecoder;
      function StringDecoder(encoding) {
        this.encoding = normalizeEncoding(encoding);
        var nb;
        switch (this.encoding) {
          case "utf16le":
            this.text = utf16Text;
            this.end = utf16End;
            nb = 4;
            break;
          case "utf8":
            this.fillLast = utf8FillLast;
            nb = 4;
            break;
          case "base64":
            this.text = base64Text;
            this.end = base64End;
            nb = 3;
            break;
          default:
            this.write = simpleWrite;
            this.end = simpleEnd;
            return;
        }
        this.lastNeed = 0;
        this.lastTotal = 0;
        this.lastChar = Buffer2.allocUnsafe(nb);
      }
      StringDecoder.prototype.write = function(buf) {
        if (buf.length === 0)
          return "";
        var r;
        var i;
        if (this.lastNeed) {
          r = this.fillLast(buf);
          if (r === void 0)
            return "";
          i = this.lastNeed;
          this.lastNeed = 0;
        } else {
          i = 0;
        }
        if (i < buf.length)
          return r ? r + this.text(buf, i) : this.text(buf, i);
        return r || "";
      };
      StringDecoder.prototype.end = utf8End;
      StringDecoder.prototype.text = utf8Text;
      StringDecoder.prototype.fillLast = function(buf) {
        if (this.lastNeed <= buf.length) {
          buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
          return this.lastChar.toString(this.encoding, 0, this.lastTotal);
        }
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
        this.lastNeed -= buf.length;
      };
      function utf8CheckByte(byte) {
        if (byte <= 127)
          return 0;
        else if (byte >> 5 === 6)
          return 2;
        else if (byte >> 4 === 14)
          return 3;
        else if (byte >> 3 === 30)
          return 4;
        return byte >> 6 === 2 ? -1 : -2;
      }
      function utf8CheckIncomplete(self2, buf, i) {
        var j = buf.length - 1;
        if (j < i)
          return 0;
        var nb = utf8CheckByte(buf[j]);
        if (nb >= 0) {
          if (nb > 0)
            self2.lastNeed = nb - 1;
          return nb;
        }
        if (--j < i || nb === -2)
          return 0;
        nb = utf8CheckByte(buf[j]);
        if (nb >= 0) {
          if (nb > 0)
            self2.lastNeed = nb - 2;
          return nb;
        }
        if (--j < i || nb === -2)
          return 0;
        nb = utf8CheckByte(buf[j]);
        if (nb >= 0) {
          if (nb > 0) {
            if (nb === 2)
              nb = 0;
            else
              self2.lastNeed = nb - 3;
          }
          return nb;
        }
        return 0;
      }
      function utf8CheckExtraBytes(self2, buf, p) {
        if ((buf[0] & 192) !== 128) {
          self2.lastNeed = 0;
          return "\uFFFD";
        }
        if (self2.lastNeed > 1 && buf.length > 1) {
          if ((buf[1] & 192) !== 128) {
            self2.lastNeed = 1;
            return "\uFFFD";
          }
          if (self2.lastNeed > 2 && buf.length > 2) {
            if ((buf[2] & 192) !== 128) {
              self2.lastNeed = 2;
              return "\uFFFD";
            }
          }
        }
      }
      function utf8FillLast(buf) {
        var p = this.lastTotal - this.lastNeed;
        var r = utf8CheckExtraBytes(this, buf, p);
        if (r !== void 0)
          return r;
        if (this.lastNeed <= buf.length) {
          buf.copy(this.lastChar, p, 0, this.lastNeed);
          return this.lastChar.toString(this.encoding, 0, this.lastTotal);
        }
        buf.copy(this.lastChar, p, 0, buf.length);
        this.lastNeed -= buf.length;
      }
      function utf8Text(buf, i) {
        var total = utf8CheckIncomplete(this, buf, i);
        if (!this.lastNeed)
          return buf.toString("utf8", i);
        this.lastTotal = total;
        var end = buf.length - (total - this.lastNeed);
        buf.copy(this.lastChar, 0, end);
        return buf.toString("utf8", i, end);
      }
      function utf8End(buf) {
        var r = buf && buf.length ? this.write(buf) : "";
        if (this.lastNeed)
          return r + "\uFFFD";
        return r;
      }
      function utf16Text(buf, i) {
        if ((buf.length - i) % 2 === 0) {
          var r = buf.toString("utf16le", i);
          if (r) {
            var c = r.charCodeAt(r.length - 1);
            if (c >= 55296 && c <= 56319) {
              this.lastNeed = 2;
              this.lastTotal = 4;
              this.lastChar[0] = buf[buf.length - 2];
              this.lastChar[1] = buf[buf.length - 1];
              return r.slice(0, -1);
            }
          }
          return r;
        }
        this.lastNeed = 1;
        this.lastTotal = 2;
        this.lastChar[0] = buf[buf.length - 1];
        return buf.toString("utf16le", i, buf.length - 1);
      }
      function utf16End(buf) {
        var r = buf && buf.length ? this.write(buf) : "";
        if (this.lastNeed) {
          var end = this.lastTotal - this.lastNeed;
          return r + this.lastChar.toString("utf16le", 0, end);
        }
        return r;
      }
      function base64Text(buf, i) {
        var n = (buf.length - i) % 3;
        if (n === 0)
          return buf.toString("base64", i);
        this.lastNeed = 3 - n;
        this.lastTotal = 3;
        if (n === 1) {
          this.lastChar[0] = buf[buf.length - 1];
        } else {
          this.lastChar[0] = buf[buf.length - 2];
          this.lastChar[1] = buf[buf.length - 1];
        }
        return buf.toString("base64", i, buf.length - n);
      }
      function base64End(buf) {
        var r = buf && buf.length ? this.write(buf) : "";
        if (this.lastNeed)
          return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
        return r;
      }
      function simpleWrite(buf) {
        return buf.toString(this.encoding);
      }
      function simpleEnd(buf) {
        return buf && buf.length ? this.write(buf) : "";
      }
    }
  });

  // node_modules/readable-stream/lib/internal/streams/end-of-stream.js
  var require_end_of_stream = __commonJS({
    "node_modules/readable-stream/lib/internal/streams/end-of-stream.js"(exports, module) {
      "use strict";
      var ERR_STREAM_PREMATURE_CLOSE = require_errors_browser().codes.ERR_STREAM_PREMATURE_CLOSE;
      function once(callback) {
        var called = false;
        return function() {
          if (called)
            return;
          called = true;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          callback.apply(this, args);
        };
      }
      function noop() {
      }
      function isRequest(stream) {
        return stream.setHeader && typeof stream.abort === "function";
      }
      function eos(stream, opts, callback) {
        if (typeof opts === "function")
          return eos(stream, null, opts);
        if (!opts)
          opts = {};
        callback = once(callback || noop);
        var readable = opts.readable || opts.readable !== false && stream.readable;
        var writable = opts.writable || opts.writable !== false && stream.writable;
        var onlegacyfinish = function onlegacyfinish2() {
          if (!stream.writable)
            onfinish();
        };
        var writableEnded = stream._writableState && stream._writableState.finished;
        var onfinish = function onfinish2() {
          writable = false;
          writableEnded = true;
          if (!readable)
            callback.call(stream);
        };
        var readableEnded = stream._readableState && stream._readableState.endEmitted;
        var onend = function onend2() {
          readable = false;
          readableEnded = true;
          if (!writable)
            callback.call(stream);
        };
        var onerror = function onerror2(err) {
          callback.call(stream, err);
        };
        var onclose = function onclose2() {
          var err;
          if (readable && !readableEnded) {
            if (!stream._readableState || !stream._readableState.ended)
              err = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
          }
          if (writable && !writableEnded) {
            if (!stream._writableState || !stream._writableState.ended)
              err = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
          }
        };
        var onrequest = function onrequest2() {
          stream.req.on("finish", onfinish);
        };
        if (isRequest(stream)) {
          stream.on("complete", onfinish);
          stream.on("abort", onclose);
          if (stream.req)
            onrequest();
          else
            stream.on("request", onrequest);
        } else if (writable && !stream._writableState) {
          stream.on("end", onlegacyfinish);
          stream.on("close", onlegacyfinish);
        }
        stream.on("end", onend);
        stream.on("finish", onfinish);
        if (opts.error !== false)
          stream.on("error", onerror);
        stream.on("close", onclose);
        return function() {
          stream.removeListener("complete", onfinish);
          stream.removeListener("abort", onclose);
          stream.removeListener("request", onrequest);
          if (stream.req)
            stream.req.removeListener("finish", onfinish);
          stream.removeListener("end", onlegacyfinish);
          stream.removeListener("close", onlegacyfinish);
          stream.removeListener("finish", onfinish);
          stream.removeListener("end", onend);
          stream.removeListener("error", onerror);
          stream.removeListener("close", onclose);
        };
      }
      module.exports = eos;
    }
  });

  // node_modules/readable-stream/lib/internal/streams/async_iterator.js
  var require_async_iterator = __commonJS({
    "node_modules/readable-stream/lib/internal/streams/async_iterator.js"(exports, module) {
      "use strict";
      var _Object$setPrototypeO;
      function _defineProperty(obj, key, value) {
        key = _toPropertyKey(key);
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _toPropertyKey(arg) {
        var key = _toPrimitive(arg, "string");
        return typeof key === "symbol" ? key : String(key);
      }
      function _toPrimitive(input, hint) {
        if (typeof input !== "object" || input === null)
          return input;
        var prim = input[Symbol.toPrimitive];
        if (prim !== void 0) {
          var res = prim.call(input, hint || "default");
          if (typeof res !== "object")
            return res;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return (hint === "string" ? String : Number)(input);
      }
      var finished = require_end_of_stream();
      var kLastResolve = Symbol("lastResolve");
      var kLastReject = Symbol("lastReject");
      var kError = Symbol("error");
      var kEnded = Symbol("ended");
      var kLastPromise = Symbol("lastPromise");
      var kHandlePromise = Symbol("handlePromise");
      var kStream = Symbol("stream");
      function createIterResult(value, done) {
        return {
          value,
          done
        };
      }
      function readAndResolve(iter) {
        var resolve = iter[kLastResolve];
        if (resolve !== null) {
          var data = iter[kStream].read();
          if (data !== null) {
            iter[kLastPromise] = null;
            iter[kLastResolve] = null;
            iter[kLastReject] = null;
            resolve(createIterResult(data, false));
          }
        }
      }
      function onReadable(iter) {
        process.nextTick(readAndResolve, iter);
      }
      function wrapForNext(lastPromise, iter) {
        return function(resolve, reject) {
          lastPromise.then(function() {
            if (iter[kEnded]) {
              resolve(createIterResult(void 0, true));
              return;
            }
            iter[kHandlePromise](resolve, reject);
          }, reject);
        };
      }
      var AsyncIteratorPrototype = Object.getPrototypeOf(function() {
      });
      var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
        get stream() {
          return this[kStream];
        },
        next: function next() {
          var _this = this;
          var error = this[kError];
          if (error !== null) {
            return Promise.reject(error);
          }
          if (this[kEnded]) {
            return Promise.resolve(createIterResult(void 0, true));
          }
          if (this[kStream].destroyed) {
            return new Promise(function(resolve, reject) {
              process.nextTick(function() {
                if (_this[kError]) {
                  reject(_this[kError]);
                } else {
                  resolve(createIterResult(void 0, true));
                }
              });
            });
          }
          var lastPromise = this[kLastPromise];
          var promise;
          if (lastPromise) {
            promise = new Promise(wrapForNext(lastPromise, this));
          } else {
            var data = this[kStream].read();
            if (data !== null) {
              return Promise.resolve(createIterResult(data, false));
            }
            promise = new Promise(this[kHandlePromise]);
          }
          this[kLastPromise] = promise;
          return promise;
        }
      }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
        return this;
      }), _defineProperty(_Object$setPrototypeO, "return", function _return() {
        var _this2 = this;
        return new Promise(function(resolve, reject) {
          _this2[kStream].destroy(null, function(err) {
            if (err) {
              reject(err);
              return;
            }
            resolve(createIterResult(void 0, true));
          });
        });
      }), _Object$setPrototypeO), AsyncIteratorPrototype);
      var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator2(stream) {
        var _Object$create;
        var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
          value: stream,
          writable: true
        }), _defineProperty(_Object$create, kLastResolve, {
          value: null,
          writable: true
        }), _defineProperty(_Object$create, kLastReject, {
          value: null,
          writable: true
        }), _defineProperty(_Object$create, kError, {
          value: null,
          writable: true
        }), _defineProperty(_Object$create, kEnded, {
          value: stream._readableState.endEmitted,
          writable: true
        }), _defineProperty(_Object$create, kHandlePromise, {
          value: function value(resolve, reject) {
            var data = iterator[kStream].read();
            if (data) {
              iterator[kLastPromise] = null;
              iterator[kLastResolve] = null;
              iterator[kLastReject] = null;
              resolve(createIterResult(data, false));
            } else {
              iterator[kLastResolve] = resolve;
              iterator[kLastReject] = reject;
            }
          },
          writable: true
        }), _Object$create));
        iterator[kLastPromise] = null;
        finished(stream, function(err) {
          if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
            var reject = iterator[kLastReject];
            if (reject !== null) {
              iterator[kLastPromise] = null;
              iterator[kLastResolve] = null;
              iterator[kLastReject] = null;
              reject(err);
            }
            iterator[kError] = err;
            return;
          }
          var resolve = iterator[kLastResolve];
          if (resolve !== null) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            resolve(createIterResult(void 0, true));
          }
          iterator[kEnded] = true;
        });
        stream.on("readable", onReadable.bind(null, iterator));
        return iterator;
      };
      module.exports = createReadableStreamAsyncIterator;
    }
  });

  // node_modules/readable-stream/lib/internal/streams/from-browser.js
  var require_from_browser = __commonJS({
    "node_modules/readable-stream/lib/internal/streams/from-browser.js"(exports, module) {
      module.exports = function() {
        throw new Error("Readable.from is not available in the browser");
      };
    }
  });

  // node_modules/readable-stream/lib/_stream_readable.js
  var require_stream_readable = __commonJS({
    "node_modules/readable-stream/lib/_stream_readable.js"(exports, module) {
      "use strict";
      module.exports = Readable;
      var Duplex;
      Readable.ReadableState = ReadableState;
      var EE = require_events().EventEmitter;
      var EElistenerCount = function EElistenerCount2(emitter, type) {
        return emitter.listeners(type).length;
      };
      var Stream = require_stream_browser();
      var Buffer2 = require_buffer().Buffer;
      var OurUint8Array = (typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
      };
      function _uint8ArrayToBuffer(chunk) {
        return Buffer2.from(chunk);
      }
      function _isUint8Array(obj) {
        return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
      }
      var debugUtil = require_util();
      var debug;
      if (debugUtil && debugUtil.debuglog) {
        debug = debugUtil.debuglog("stream");
      } else {
        debug = function debug2() {
        };
      }
      var BufferList = require_buffer_list();
      var destroyImpl = require_destroy();
      var _require = require_state();
      var getHighWaterMark = _require.getHighWaterMark;
      var _require$codes = require_errors_browser().codes;
      var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
      var ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF;
      var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
      var ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
      var StringDecoder;
      var createReadableStreamAsyncIterator;
      var from;
      require_inherits_browser()(Readable, Stream);
      var errorOrDestroy = destroyImpl.errorOrDestroy;
      var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];
      function prependListener(emitter, event, fn) {
        if (typeof emitter.prependListener === "function")
          return emitter.prependListener(event, fn);
        if (!emitter._events || !emitter._events[event])
          emitter.on(event, fn);
        else if (Array.isArray(emitter._events[event]))
          emitter._events[event].unshift(fn);
        else
          emitter._events[event] = [fn, emitter._events[event]];
      }
      function ReadableState(options, stream, isDuplex) {
        Duplex = Duplex || require_stream_duplex();
        options = options || {};
        if (typeof isDuplex !== "boolean")
          isDuplex = stream instanceof Duplex;
        this.objectMode = !!options.objectMode;
        if (isDuplex)
          this.objectMode = this.objectMode || !!options.readableObjectMode;
        this.highWaterMark = getHighWaterMark(this, options, "readableHighWaterMark", isDuplex);
        this.buffer = new BufferList();
        this.length = 0;
        this.pipes = null;
        this.pipesCount = 0;
        this.flowing = null;
        this.ended = false;
        this.endEmitted = false;
        this.reading = false;
        this.sync = true;
        this.needReadable = false;
        this.emittedReadable = false;
        this.readableListening = false;
        this.resumeScheduled = false;
        this.paused = true;
        this.emitClose = options.emitClose !== false;
        this.autoDestroy = !!options.autoDestroy;
        this.destroyed = false;
        this.defaultEncoding = options.defaultEncoding || "utf8";
        this.awaitDrain = 0;
        this.readingMore = false;
        this.decoder = null;
        this.encoding = null;
        if (options.encoding) {
          if (!StringDecoder)
            StringDecoder = require_string_decoder().StringDecoder;
          this.decoder = new StringDecoder(options.encoding);
          this.encoding = options.encoding;
        }
      }
      function Readable(options) {
        Duplex = Duplex || require_stream_duplex();
        if (!(this instanceof Readable))
          return new Readable(options);
        var isDuplex = this instanceof Duplex;
        this._readableState = new ReadableState(options, this, isDuplex);
        this.readable = true;
        if (options) {
          if (typeof options.read === "function")
            this._read = options.read;
          if (typeof options.destroy === "function")
            this._destroy = options.destroy;
        }
        Stream.call(this);
      }
      Object.defineProperty(Readable.prototype, "destroyed", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get() {
          if (this._readableState === void 0) {
            return false;
          }
          return this._readableState.destroyed;
        },
        set: function set(value) {
          if (!this._readableState) {
            return;
          }
          this._readableState.destroyed = value;
        }
      });
      Readable.prototype.destroy = destroyImpl.destroy;
      Readable.prototype._undestroy = destroyImpl.undestroy;
      Readable.prototype._destroy = function(err, cb) {
        cb(err);
      };
      Readable.prototype.push = function(chunk, encoding) {
        var state = this._readableState;
        var skipChunkCheck;
        if (!state.objectMode) {
          if (typeof chunk === "string") {
            encoding = encoding || state.defaultEncoding;
            if (encoding !== state.encoding) {
              chunk = Buffer2.from(chunk, encoding);
              encoding = "";
            }
            skipChunkCheck = true;
          }
        } else {
          skipChunkCheck = true;
        }
        return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
      };
      Readable.prototype.unshift = function(chunk) {
        return readableAddChunk(this, chunk, null, true, false);
      };
      function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
        debug("readableAddChunk", chunk);
        var state = stream._readableState;
        if (chunk === null) {
          state.reading = false;
          onEofChunk(stream, state);
        } else {
          var er;
          if (!skipChunkCheck)
            er = chunkInvalid(state, chunk);
          if (er) {
            errorOrDestroy(stream, er);
          } else if (state.objectMode || chunk && chunk.length > 0) {
            if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer2.prototype) {
              chunk = _uint8ArrayToBuffer(chunk);
            }
            if (addToFront) {
              if (state.endEmitted)
                errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
              else
                addChunk(stream, state, chunk, true);
            } else if (state.ended) {
              errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
            } else if (state.destroyed) {
              return false;
            } else {
              state.reading = false;
              if (state.decoder && !encoding) {
                chunk = state.decoder.write(chunk);
                if (state.objectMode || chunk.length !== 0)
                  addChunk(stream, state, chunk, false);
                else
                  maybeReadMore(stream, state);
              } else {
                addChunk(stream, state, chunk, false);
              }
            }
          } else if (!addToFront) {
            state.reading = false;
            maybeReadMore(stream, state);
          }
        }
        return !state.ended && (state.length < state.highWaterMark || state.length === 0);
      }
      function addChunk(stream, state, chunk, addToFront) {
        if (state.flowing && state.length === 0 && !state.sync) {
          state.awaitDrain = 0;
          stream.emit("data", chunk);
        } else {
          state.length += state.objectMode ? 1 : chunk.length;
          if (addToFront)
            state.buffer.unshift(chunk);
          else
            state.buffer.push(chunk);
          if (state.needReadable)
            emitReadable(stream);
        }
        maybeReadMore(stream, state);
      }
      function chunkInvalid(state, chunk) {
        var er;
        if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
          er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer", "Uint8Array"], chunk);
        }
        return er;
      }
      Readable.prototype.isPaused = function() {
        return this._readableState.flowing === false;
      };
      Readable.prototype.setEncoding = function(enc) {
        if (!StringDecoder)
          StringDecoder = require_string_decoder().StringDecoder;
        var decoder = new StringDecoder(enc);
        this._readableState.decoder = decoder;
        this._readableState.encoding = this._readableState.decoder.encoding;
        var p = this._readableState.buffer.head;
        var content = "";
        while (p !== null) {
          content += decoder.write(p.data);
          p = p.next;
        }
        this._readableState.buffer.clear();
        if (content !== "")
          this._readableState.buffer.push(content);
        this._readableState.length = content.length;
        return this;
      };
      var MAX_HWM = 1073741824;
      function computeNewHighWaterMark(n) {
        if (n >= MAX_HWM) {
          n = MAX_HWM;
        } else {
          n--;
          n |= n >>> 1;
          n |= n >>> 2;
          n |= n >>> 4;
          n |= n >>> 8;
          n |= n >>> 16;
          n++;
        }
        return n;
      }
      function howMuchToRead(n, state) {
        if (n <= 0 || state.length === 0 && state.ended)
          return 0;
        if (state.objectMode)
          return 1;
        if (n !== n) {
          if (state.flowing && state.length)
            return state.buffer.head.data.length;
          else
            return state.length;
        }
        if (n > state.highWaterMark)
          state.highWaterMark = computeNewHighWaterMark(n);
        if (n <= state.length)
          return n;
        if (!state.ended) {
          state.needReadable = true;
          return 0;
        }
        return state.length;
      }
      Readable.prototype.read = function(n) {
        debug("read", n);
        n = parseInt(n, 10);
        var state = this._readableState;
        var nOrig = n;
        if (n !== 0)
          state.emittedReadable = false;
        if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
          debug("read: emitReadable", state.length, state.ended);
          if (state.length === 0 && state.ended)
            endReadable(this);
          else
            emitReadable(this);
          return null;
        }
        n = howMuchToRead(n, state);
        if (n === 0 && state.ended) {
          if (state.length === 0)
            endReadable(this);
          return null;
        }
        var doRead = state.needReadable;
        debug("need readable", doRead);
        if (state.length === 0 || state.length - n < state.highWaterMark) {
          doRead = true;
          debug("length less than watermark", doRead);
        }
        if (state.ended || state.reading) {
          doRead = false;
          debug("reading or ended", doRead);
        } else if (doRead) {
          debug("do read");
          state.reading = true;
          state.sync = true;
          if (state.length === 0)
            state.needReadable = true;
          this._read(state.highWaterMark);
          state.sync = false;
          if (!state.reading)
            n = howMuchToRead(nOrig, state);
        }
        var ret;
        if (n > 0)
          ret = fromList(n, state);
        else
          ret = null;
        if (ret === null) {
          state.needReadable = state.length <= state.highWaterMark;
          n = 0;
        } else {
          state.length -= n;
          state.awaitDrain = 0;
        }
        if (state.length === 0) {
          if (!state.ended)
            state.needReadable = true;
          if (nOrig !== n && state.ended)
            endReadable(this);
        }
        if (ret !== null)
          this.emit("data", ret);
        return ret;
      };
      function onEofChunk(stream, state) {
        debug("onEofChunk");
        if (state.ended)
          return;
        if (state.decoder) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
          }
        }
        state.ended = true;
        if (state.sync) {
          emitReadable(stream);
        } else {
          state.needReadable = false;
          if (!state.emittedReadable) {
            state.emittedReadable = true;
            emitReadable_(stream);
          }
        }
      }
      function emitReadable(stream) {
        var state = stream._readableState;
        debug("emitReadable", state.needReadable, state.emittedReadable);
        state.needReadable = false;
        if (!state.emittedReadable) {
          debug("emitReadable", state.flowing);
          state.emittedReadable = true;
          process.nextTick(emitReadable_, stream);
        }
      }
      function emitReadable_(stream) {
        var state = stream._readableState;
        debug("emitReadable_", state.destroyed, state.length, state.ended);
        if (!state.destroyed && (state.length || state.ended)) {
          stream.emit("readable");
          state.emittedReadable = false;
        }
        state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
        flow(stream);
      }
      function maybeReadMore(stream, state) {
        if (!state.readingMore) {
          state.readingMore = true;
          process.nextTick(maybeReadMore_, stream, state);
        }
      }
      function maybeReadMore_(stream, state) {
        while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
          var len = state.length;
          debug("maybeReadMore read 0");
          stream.read(0);
          if (len === state.length)
            break;
        }
        state.readingMore = false;
      }
      Readable.prototype._read = function(n) {
        errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED("_read()"));
      };
      Readable.prototype.pipe = function(dest, pipeOpts) {
        var src = this;
        var state = this._readableState;
        switch (state.pipesCount) {
          case 0:
            state.pipes = dest;
            break;
          case 1:
            state.pipes = [state.pipes, dest];
            break;
          default:
            state.pipes.push(dest);
            break;
        }
        state.pipesCount += 1;
        debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
        var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
        var endFn = doEnd ? onend : unpipe;
        if (state.endEmitted)
          process.nextTick(endFn);
        else
          src.once("end", endFn);
        dest.on("unpipe", onunpipe);
        function onunpipe(readable, unpipeInfo) {
          debug("onunpipe");
          if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
              unpipeInfo.hasUnpiped = true;
              cleanup();
            }
          }
        }
        function onend() {
          debug("onend");
          dest.end();
        }
        var ondrain = pipeOnDrain(src);
        dest.on("drain", ondrain);
        var cleanedUp = false;
        function cleanup() {
          debug("cleanup");
          dest.removeListener("close", onclose);
          dest.removeListener("finish", onfinish);
          dest.removeListener("drain", ondrain);
          dest.removeListener("error", onerror);
          dest.removeListener("unpipe", onunpipe);
          src.removeListener("end", onend);
          src.removeListener("end", unpipe);
          src.removeListener("data", ondata);
          cleanedUp = true;
          if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain))
            ondrain();
        }
        src.on("data", ondata);
        function ondata(chunk) {
          debug("ondata");
          var ret = dest.write(chunk);
          debug("dest.write", ret);
          if (ret === false) {
            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
              debug("false write response, pause", state.awaitDrain);
              state.awaitDrain++;
            }
            src.pause();
          }
        }
        function onerror(er) {
          debug("onerror", er);
          unpipe();
          dest.removeListener("error", onerror);
          if (EElistenerCount(dest, "error") === 0)
            errorOrDestroy(dest, er);
        }
        prependListener(dest, "error", onerror);
        function onclose() {
          dest.removeListener("finish", onfinish);
          unpipe();
        }
        dest.once("close", onclose);
        function onfinish() {
          debug("onfinish");
          dest.removeListener("close", onclose);
          unpipe();
        }
        dest.once("finish", onfinish);
        function unpipe() {
          debug("unpipe");
          src.unpipe(dest);
        }
        dest.emit("pipe", src);
        if (!state.flowing) {
          debug("pipe resume");
          src.resume();
        }
        return dest;
      };
      function pipeOnDrain(src) {
        return function pipeOnDrainFunctionResult() {
          var state = src._readableState;
          debug("pipeOnDrain", state.awaitDrain);
          if (state.awaitDrain)
            state.awaitDrain--;
          if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
            state.flowing = true;
            flow(src);
          }
        };
      }
      Readable.prototype.unpipe = function(dest) {
        var state = this._readableState;
        var unpipeInfo = {
          hasUnpiped: false
        };
        if (state.pipesCount === 0)
          return this;
        if (state.pipesCount === 1) {
          if (dest && dest !== state.pipes)
            return this;
          if (!dest)
            dest = state.pipes;
          state.pipes = null;
          state.pipesCount = 0;
          state.flowing = false;
          if (dest)
            dest.emit("unpipe", this, unpipeInfo);
          return this;
        }
        if (!dest) {
          var dests = state.pipes;
          var len = state.pipesCount;
          state.pipes = null;
          state.pipesCount = 0;
          state.flowing = false;
          for (var i = 0; i < len; i++)
            dests[i].emit("unpipe", this, {
              hasUnpiped: false
            });
          return this;
        }
        var index = indexOf(state.pipes, dest);
        if (index === -1)
          return this;
        state.pipes.splice(index, 1);
        state.pipesCount -= 1;
        if (state.pipesCount === 1)
          state.pipes = state.pipes[0];
        dest.emit("unpipe", this, unpipeInfo);
        return this;
      };
      Readable.prototype.on = function(ev, fn) {
        var res = Stream.prototype.on.call(this, ev, fn);
        var state = this._readableState;
        if (ev === "data") {
          state.readableListening = this.listenerCount("readable") > 0;
          if (state.flowing !== false)
            this.resume();
        } else if (ev === "readable") {
          if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.flowing = false;
            state.emittedReadable = false;
            debug("on readable", state.length, state.reading);
            if (state.length) {
              emitReadable(this);
            } else if (!state.reading) {
              process.nextTick(nReadingNextTick, this);
            }
          }
        }
        return res;
      };
      Readable.prototype.addListener = Readable.prototype.on;
      Readable.prototype.removeListener = function(ev, fn) {
        var res = Stream.prototype.removeListener.call(this, ev, fn);
        if (ev === "readable") {
          process.nextTick(updateReadableListening, this);
        }
        return res;
      };
      Readable.prototype.removeAllListeners = function(ev) {
        var res = Stream.prototype.removeAllListeners.apply(this, arguments);
        if (ev === "readable" || ev === void 0) {
          process.nextTick(updateReadableListening, this);
        }
        return res;
      };
      function updateReadableListening(self2) {
        var state = self2._readableState;
        state.readableListening = self2.listenerCount("readable") > 0;
        if (state.resumeScheduled && !state.paused) {
          state.flowing = true;
        } else if (self2.listenerCount("data") > 0) {
          self2.resume();
        }
      }
      function nReadingNextTick(self2) {
        debug("readable nexttick read 0");
        self2.read(0);
      }
      Readable.prototype.resume = function() {
        var state = this._readableState;
        if (!state.flowing) {
          debug("resume");
          state.flowing = !state.readableListening;
          resume(this, state);
        }
        state.paused = false;
        return this;
      };
      function resume(stream, state) {
        if (!state.resumeScheduled) {
          state.resumeScheduled = true;
          process.nextTick(resume_, stream, state);
        }
      }
      function resume_(stream, state) {
        debug("resume", state.reading);
        if (!state.reading) {
          stream.read(0);
        }
        state.resumeScheduled = false;
        stream.emit("resume");
        flow(stream);
        if (state.flowing && !state.reading)
          stream.read(0);
      }
      Readable.prototype.pause = function() {
        debug("call pause flowing=%j", this._readableState.flowing);
        if (this._readableState.flowing !== false) {
          debug("pause");
          this._readableState.flowing = false;
          this.emit("pause");
        }
        this._readableState.paused = true;
        return this;
      };
      function flow(stream) {
        var state = stream._readableState;
        debug("flow", state.flowing);
        while (state.flowing && stream.read() !== null)
          ;
      }
      Readable.prototype.wrap = function(stream) {
        var _this = this;
        var state = this._readableState;
        var paused = false;
        stream.on("end", function() {
          debug("wrapped end");
          if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length)
              _this.push(chunk);
          }
          _this.push(null);
        });
        stream.on("data", function(chunk) {
          debug("wrapped data");
          if (state.decoder)
            chunk = state.decoder.write(chunk);
          if (state.objectMode && (chunk === null || chunk === void 0))
            return;
          else if (!state.objectMode && (!chunk || !chunk.length))
            return;
          var ret = _this.push(chunk);
          if (!ret) {
            paused = true;
            stream.pause();
          }
        });
        for (var i in stream) {
          if (this[i] === void 0 && typeof stream[i] === "function") {
            this[i] = /* @__PURE__ */ function methodWrap(method) {
              return function methodWrapReturnFunction() {
                return stream[method].apply(stream, arguments);
              };
            }(i);
          }
        }
        for (var n = 0; n < kProxyEvents.length; n++) {
          stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
        }
        this._read = function(n2) {
          debug("wrapped _read", n2);
          if (paused) {
            paused = false;
            stream.resume();
          }
        };
        return this;
      };
      if (typeof Symbol === "function") {
        Readable.prototype[Symbol.asyncIterator] = function() {
          if (createReadableStreamAsyncIterator === void 0) {
            createReadableStreamAsyncIterator = require_async_iterator();
          }
          return createReadableStreamAsyncIterator(this);
        };
      }
      Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get() {
          return this._readableState.highWaterMark;
        }
      });
      Object.defineProperty(Readable.prototype, "readableBuffer", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get() {
          return this._readableState && this._readableState.buffer;
        }
      });
      Object.defineProperty(Readable.prototype, "readableFlowing", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get() {
          return this._readableState.flowing;
        },
        set: function set(state) {
          if (this._readableState) {
            this._readableState.flowing = state;
          }
        }
      });
      Readable._fromList = fromList;
      Object.defineProperty(Readable.prototype, "readableLength", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get() {
          return this._readableState.length;
        }
      });
      function fromList(n, state) {
        if (state.length === 0)
          return null;
        var ret;
        if (state.objectMode)
          ret = state.buffer.shift();
        else if (!n || n >= state.length) {
          if (state.decoder)
            ret = state.buffer.join("");
          else if (state.buffer.length === 1)
            ret = state.buffer.first();
          else
            ret = state.buffer.concat(state.length);
          state.buffer.clear();
        } else {
          ret = state.buffer.consume(n, state.decoder);
        }
        return ret;
      }
      function endReadable(stream) {
        var state = stream._readableState;
        debug("endReadable", state.endEmitted);
        if (!state.endEmitted) {
          state.ended = true;
          process.nextTick(endReadableNT, state, stream);
        }
      }
      function endReadableNT(state, stream) {
        debug("endReadableNT", state.endEmitted, state.length);
        if (!state.endEmitted && state.length === 0) {
          state.endEmitted = true;
          stream.readable = false;
          stream.emit("end");
          if (state.autoDestroy) {
            var wState = stream._writableState;
            if (!wState || wState.autoDestroy && wState.finished) {
              stream.destroy();
            }
          }
        }
      }
      if (typeof Symbol === "function") {
        Readable.from = function(iterable, opts) {
          if (from === void 0) {
            from = require_from_browser();
          }
          return from(Readable, iterable, opts);
        };
      }
      function indexOf(xs, x) {
        for (var i = 0, l = xs.length; i < l; i++) {
          if (xs[i] === x)
            return i;
        }
        return -1;
      }
    }
  });

  // node_modules/readable-stream/lib/_stream_transform.js
  var require_stream_transform = __commonJS({
    "node_modules/readable-stream/lib/_stream_transform.js"(exports, module) {
      "use strict";
      module.exports = Transform;
      var _require$codes = require_errors_browser().codes;
      var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
      var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
      var ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING;
      var ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
      var Duplex = require_stream_duplex();
      require_inherits_browser()(Transform, Duplex);
      function afterTransform(er, data) {
        var ts = this._transformState;
        ts.transforming = false;
        var cb = ts.writecb;
        if (cb === null) {
          return this.emit("error", new ERR_MULTIPLE_CALLBACK());
        }
        ts.writechunk = null;
        ts.writecb = null;
        if (data != null)
          this.push(data);
        cb(er);
        var rs = this._readableState;
        rs.reading = false;
        if (rs.needReadable || rs.length < rs.highWaterMark) {
          this._read(rs.highWaterMark);
        }
      }
      function Transform(options) {
        if (!(this instanceof Transform))
          return new Transform(options);
        Duplex.call(this, options);
        this._transformState = {
          afterTransform: afterTransform.bind(this),
          needTransform: false,
          transforming: false,
          writecb: null,
          writechunk: null,
          writeencoding: null
        };
        this._readableState.needReadable = true;
        this._readableState.sync = false;
        if (options) {
          if (typeof options.transform === "function")
            this._transform = options.transform;
          if (typeof options.flush === "function")
            this._flush = options.flush;
        }
        this.on("prefinish", prefinish);
      }
      function prefinish() {
        var _this = this;
        if (typeof this._flush === "function" && !this._readableState.destroyed) {
          this._flush(function(er, data) {
            done(_this, er, data);
          });
        } else {
          done(this, null, null);
        }
      }
      Transform.prototype.push = function(chunk, encoding) {
        this._transformState.needTransform = false;
        return Duplex.prototype.push.call(this, chunk, encoding);
      };
      Transform.prototype._transform = function(chunk, encoding, cb) {
        cb(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
      };
      Transform.prototype._write = function(chunk, encoding, cb) {
        var ts = this._transformState;
        ts.writecb = cb;
        ts.writechunk = chunk;
        ts.writeencoding = encoding;
        if (!ts.transforming) {
          var rs = this._readableState;
          if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark)
            this._read(rs.highWaterMark);
        }
      };
      Transform.prototype._read = function(n) {
        var ts = this._transformState;
        if (ts.writechunk !== null && !ts.transforming) {
          ts.transforming = true;
          this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
        } else {
          ts.needTransform = true;
        }
      };
      Transform.prototype._destroy = function(err, cb) {
        Duplex.prototype._destroy.call(this, err, function(err2) {
          cb(err2);
        });
      };
      function done(stream, er, data) {
        if (er)
          return stream.emit("error", er);
        if (data != null)
          stream.push(data);
        if (stream._writableState.length)
          throw new ERR_TRANSFORM_WITH_LENGTH_0();
        if (stream._transformState.transforming)
          throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
        return stream.push(null);
      }
    }
  });

  // node_modules/readable-stream/lib/_stream_passthrough.js
  var require_stream_passthrough = __commonJS({
    "node_modules/readable-stream/lib/_stream_passthrough.js"(exports, module) {
      "use strict";
      module.exports = PassThrough;
      var Transform = require_stream_transform();
      require_inherits_browser()(PassThrough, Transform);
      function PassThrough(options) {
        if (!(this instanceof PassThrough))
          return new PassThrough(options);
        Transform.call(this, options);
      }
      PassThrough.prototype._transform = function(chunk, encoding, cb) {
        cb(null, chunk);
      };
    }
  });

  // node_modules/readable-stream/lib/internal/streams/pipeline.js
  var require_pipeline = __commonJS({
    "node_modules/readable-stream/lib/internal/streams/pipeline.js"(exports, module) {
      "use strict";
      var eos;
      function once(callback) {
        var called = false;
        return function() {
          if (called)
            return;
          called = true;
          callback.apply(void 0, arguments);
        };
      }
      var _require$codes = require_errors_browser().codes;
      var ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;
      var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
      function noop(err) {
        if (err)
          throw err;
      }
      function isRequest(stream) {
        return stream.setHeader && typeof stream.abort === "function";
      }
      function destroyer(stream, reading, writing, callback) {
        callback = once(callback);
        var closed = false;
        stream.on("close", function() {
          closed = true;
        });
        if (eos === void 0)
          eos = require_end_of_stream();
        eos(stream, {
          readable: reading,
          writable: writing
        }, function(err) {
          if (err)
            return callback(err);
          closed = true;
          callback();
        });
        var destroyed = false;
        return function(err) {
          if (closed)
            return;
          if (destroyed)
            return;
          destroyed = true;
          if (isRequest(stream))
            return stream.abort();
          if (typeof stream.destroy === "function")
            return stream.destroy();
          callback(err || new ERR_STREAM_DESTROYED("pipe"));
        };
      }
      function call(fn) {
        fn();
      }
      function pipe(from, to) {
        return from.pipe(to);
      }
      function popCallback(streams) {
        if (!streams.length)
          return noop;
        if (typeof streams[streams.length - 1] !== "function")
          return noop;
        return streams.pop();
      }
      function pipeline() {
        for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
          streams[_key] = arguments[_key];
        }
        var callback = popCallback(streams);
        if (Array.isArray(streams[0]))
          streams = streams[0];
        if (streams.length < 2) {
          throw new ERR_MISSING_ARGS("streams");
        }
        var error;
        var destroys = streams.map(function(stream, i) {
          var reading = i < streams.length - 1;
          var writing = i > 0;
          return destroyer(stream, reading, writing, function(err) {
            if (!error)
              error = err;
            if (err)
              destroys.forEach(call);
            if (reading)
              return;
            destroys.forEach(call);
            callback(error);
          });
        });
        return streams.reduce(pipe);
      }
      module.exports = pipeline;
    }
  });

  // node_modules/readable-stream/readable-browser.js
  var require_readable_browser = __commonJS({
    "node_modules/readable-stream/readable-browser.js"(exports, module) {
      exports = module.exports = require_stream_readable();
      exports.Stream = exports;
      exports.Readable = exports;
      exports.Writable = require_stream_writable();
      exports.Duplex = require_stream_duplex();
      exports.Transform = require_stream_transform();
      exports.PassThrough = require_stream_passthrough();
      exports.finished = require_end_of_stream();
      exports.pipeline = require_pipeline();
    }
  });

  // node_modules/hash-base/index.js
  var require_hash_base = __commonJS({
    "node_modules/hash-base/index.js"(exports, module) {
      "use strict";
      var Buffer2 = require_safe_buffer2().Buffer;
      var Transform = require_readable_browser().Transform;
      var inherits = require_inherits_browser();
      function throwIfNotStringOrBuffer(val, prefix) {
        if (!Buffer2.isBuffer(val) && typeof val !== "string") {
          throw new TypeError(prefix + " must be a string or a buffer");
        }
      }
      function HashBase(blockSize) {
        Transform.call(this);
        this._block = Buffer2.allocUnsafe(blockSize);
        this._blockSize = blockSize;
        this._blockOffset = 0;
        this._length = [0, 0, 0, 0];
        this._finalized = false;
      }
      inherits(HashBase, Transform);
      HashBase.prototype._transform = function(chunk, encoding, callback) {
        var error = null;
        try {
          this.update(chunk, encoding);
        } catch (err) {
          error = err;
        }
        callback(error);
      };
      HashBase.prototype._flush = function(callback) {
        var error = null;
        try {
          this.push(this.digest());
        } catch (err) {
          error = err;
        }
        callback(error);
      };
      HashBase.prototype.update = function(data, encoding) {
        throwIfNotStringOrBuffer(data, "Data");
        if (this._finalized)
          throw new Error("Digest already called");
        if (!Buffer2.isBuffer(data))
          data = Buffer2.from(data, encoding);
        var block = this._block;
        var offset = 0;
        while (this._blockOffset + data.length - offset >= this._blockSize) {
          for (var i = this._blockOffset; i < this._blockSize; )
            block[i++] = data[offset++];
          this._update();
          this._blockOffset = 0;
        }
        while (offset < data.length)
          block[this._blockOffset++] = data[offset++];
        for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
          this._length[j] += carry;
          carry = this._length[j] / 4294967296 | 0;
          if (carry > 0)
            this._length[j] -= 4294967296 * carry;
        }
        return this;
      };
      HashBase.prototype._update = function() {
        throw new Error("_update is not implemented");
      };
      HashBase.prototype.digest = function(encoding) {
        if (this._finalized)
          throw new Error("Digest already called");
        this._finalized = true;
        var digest = this._digest();
        if (encoding !== void 0)
          digest = digest.toString(encoding);
        this._block.fill(0);
        this._blockOffset = 0;
        for (var i = 0; i < 4; ++i)
          this._length[i] = 0;
        return digest;
      };
      HashBase.prototype._digest = function() {
        throw new Error("_digest is not implemented");
      };
      module.exports = HashBase;
    }
  });

  // node_modules/md5.js/index.js
  var require_md5 = __commonJS({
    "node_modules/md5.js/index.js"(exports, module) {
      "use strict";
      var inherits = require_inherits_browser();
      var HashBase = require_hash_base();
      var Buffer2 = require_safe_buffer().Buffer;
      var ARRAY16 = new Array(16);
      function MD5() {
        HashBase.call(this, 64);
        this._a = 1732584193;
        this._b = 4023233417;
        this._c = 2562383102;
        this._d = 271733878;
      }
      inherits(MD5, HashBase);
      MD5.prototype._update = function() {
        var M = ARRAY16;
        for (var i = 0; i < 16; ++i)
          M[i] = this._block.readInt32LE(i * 4);
        var a = this._a;
        var b = this._b;
        var c = this._c;
        var d = this._d;
        a = fnF(a, b, c, d, M[0], 3614090360, 7);
        d = fnF(d, a, b, c, M[1], 3905402710, 12);
        c = fnF(c, d, a, b, M[2], 606105819, 17);
        b = fnF(b, c, d, a, M[3], 3250441966, 22);
        a = fnF(a, b, c, d, M[4], 4118548399, 7);
        d = fnF(d, a, b, c, M[5], 1200080426, 12);
        c = fnF(c, d, a, b, M[6], 2821735955, 17);
        b = fnF(b, c, d, a, M[7], 4249261313, 22);
        a = fnF(a, b, c, d, M[8], 1770035416, 7);
        d = fnF(d, a, b, c, M[9], 2336552879, 12);
        c = fnF(c, d, a, b, M[10], 4294925233, 17);
        b = fnF(b, c, d, a, M[11], 2304563134, 22);
        a = fnF(a, b, c, d, M[12], 1804603682, 7);
        d = fnF(d, a, b, c, M[13], 4254626195, 12);
        c = fnF(c, d, a, b, M[14], 2792965006, 17);
        b = fnF(b, c, d, a, M[15], 1236535329, 22);
        a = fnG(a, b, c, d, M[1], 4129170786, 5);
        d = fnG(d, a, b, c, M[6], 3225465664, 9);
        c = fnG(c, d, a, b, M[11], 643717713, 14);
        b = fnG(b, c, d, a, M[0], 3921069994, 20);
        a = fnG(a, b, c, d, M[5], 3593408605, 5);
        d = fnG(d, a, b, c, M[10], 38016083, 9);
        c = fnG(c, d, a, b, M[15], 3634488961, 14);
        b = fnG(b, c, d, a, M[4], 3889429448, 20);
        a = fnG(a, b, c, d, M[9], 568446438, 5);
        d = fnG(d, a, b, c, M[14], 3275163606, 9);
        c = fnG(c, d, a, b, M[3], 4107603335, 14);
        b = fnG(b, c, d, a, M[8], 1163531501, 20);
        a = fnG(a, b, c, d, M[13], 2850285829, 5);
        d = fnG(d, a, b, c, M[2], 4243563512, 9);
        c = fnG(c, d, a, b, M[7], 1735328473, 14);
        b = fnG(b, c, d, a, M[12], 2368359562, 20);
        a = fnH(a, b, c, d, M[5], 4294588738, 4);
        d = fnH(d, a, b, c, M[8], 2272392833, 11);
        c = fnH(c, d, a, b, M[11], 1839030562, 16);
        b = fnH(b, c, d, a, M[14], 4259657740, 23);
        a = fnH(a, b, c, d, M[1], 2763975236, 4);
        d = fnH(d, a, b, c, M[4], 1272893353, 11);
        c = fnH(c, d, a, b, M[7], 4139469664, 16);
        b = fnH(b, c, d, a, M[10], 3200236656, 23);
        a = fnH(a, b, c, d, M[13], 681279174, 4);
        d = fnH(d, a, b, c, M[0], 3936430074, 11);
        c = fnH(c, d, a, b, M[3], 3572445317, 16);
        b = fnH(b, c, d, a, M[6], 76029189, 23);
        a = fnH(a, b, c, d, M[9], 3654602809, 4);
        d = fnH(d, a, b, c, M[12], 3873151461, 11);
        c = fnH(c, d, a, b, M[15], 530742520, 16);
        b = fnH(b, c, d, a, M[2], 3299628645, 23);
        a = fnI(a, b, c, d, M[0], 4096336452, 6);
        d = fnI(d, a, b, c, M[7], 1126891415, 10);
        c = fnI(c, d, a, b, M[14], 2878612391, 15);
        b = fnI(b, c, d, a, M[5], 4237533241, 21);
        a = fnI(a, b, c, d, M[12], 1700485571, 6);
        d = fnI(d, a, b, c, M[3], 2399980690, 10);
        c = fnI(c, d, a, b, M[10], 4293915773, 15);
        b = fnI(b, c, d, a, M[1], 2240044497, 21);
        a = fnI(a, b, c, d, M[8], 1873313359, 6);
        d = fnI(d, a, b, c, M[15], 4264355552, 10);
        c = fnI(c, d, a, b, M[6], 2734768916, 15);
        b = fnI(b, c, d, a, M[13], 1309151649, 21);
        a = fnI(a, b, c, d, M[4], 4149444226, 6);
        d = fnI(d, a, b, c, M[11], 3174756917, 10);
        c = fnI(c, d, a, b, M[2], 718787259, 15);
        b = fnI(b, c, d, a, M[9], 3951481745, 21);
        this._a = this._a + a | 0;
        this._b = this._b + b | 0;
        this._c = this._c + c | 0;
        this._d = this._d + d | 0;
      };
      MD5.prototype._digest = function() {
        this._block[this._blockOffset++] = 128;
        if (this._blockOffset > 56) {
          this._block.fill(0, this._blockOffset, 64);
          this._update();
          this._blockOffset = 0;
        }
        this._block.fill(0, this._blockOffset, 56);
        this._block.writeUInt32LE(this._length[0], 56);
        this._block.writeUInt32LE(this._length[1], 60);
        this._update();
        var buffer = Buffer2.allocUnsafe(16);
        buffer.writeInt32LE(this._a, 0);
        buffer.writeInt32LE(this._b, 4);
        buffer.writeInt32LE(this._c, 8);
        buffer.writeInt32LE(this._d, 12);
        return buffer;
      };
      function rotl(x, n) {
        return x << n | x >>> 32 - n;
      }
      function fnF(a, b, c, d, m, k, s) {
        return rotl(a + (b & c | ~b & d) + m + k | 0, s) + b | 0;
      }
      function fnG(a, b, c, d, m, k, s) {
        return rotl(a + (b & d | c & ~d) + m + k | 0, s) + b | 0;
      }
      function fnH(a, b, c, d, m, k, s) {
        return rotl(a + (b ^ c ^ d) + m + k | 0, s) + b | 0;
      }
      function fnI(a, b, c, d, m, k, s) {
        return rotl(a + (c ^ (b | ~d)) + m + k | 0, s) + b | 0;
      }
      module.exports = MD5;
    }
  });

  // node_modules/ripemd160/index.js
  var require_ripemd160 = __commonJS({
    "node_modules/ripemd160/index.js"(exports, module) {
      "use strict";
      var Buffer2 = require_buffer().Buffer;
      var inherits = require_inherits_browser();
      var HashBase = require_hash_base();
      var ARRAY16 = new Array(16);
      var zl = [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        7,
        4,
        13,
        1,
        10,
        6,
        15,
        3,
        12,
        0,
        9,
        5,
        2,
        14,
        11,
        8,
        3,
        10,
        14,
        4,
        9,
        15,
        8,
        1,
        2,
        7,
        0,
        6,
        13,
        11,
        5,
        12,
        1,
        9,
        11,
        10,
        0,
        8,
        12,
        4,
        13,
        3,
        7,
        15,
        14,
        5,
        6,
        2,
        4,
        0,
        5,
        9,
        7,
        12,
        2,
        10,
        14,
        1,
        3,
        8,
        11,
        6,
        15,
        13
      ];
      var zr = [
        5,
        14,
        7,
        0,
        9,
        2,
        11,
        4,
        13,
        6,
        15,
        8,
        1,
        10,
        3,
        12,
        6,
        11,
        3,
        7,
        0,
        13,
        5,
        10,
        14,
        15,
        8,
        12,
        4,
        9,
        1,
        2,
        15,
        5,
        1,
        3,
        7,
        14,
        6,
        9,
        11,
        8,
        12,
        2,
        10,
        0,
        4,
        13,
        8,
        6,
        4,
        1,
        3,
        11,
        15,
        0,
        5,
        12,
        2,
        13,
        9,
        7,
        10,
        14,
        12,
        15,
        10,
        4,
        1,
        5,
        8,
        7,
        6,
        2,
        13,
        14,
        0,
        3,
        9,
        11
      ];
      var sl = [
        11,
        14,
        15,
        12,
        5,
        8,
        7,
        9,
        11,
        13,
        14,
        15,
        6,
        7,
        9,
        8,
        7,
        6,
        8,
        13,
        11,
        9,
        7,
        15,
        7,
        12,
        15,
        9,
        11,
        7,
        13,
        12,
        11,
        13,
        6,
        7,
        14,
        9,
        13,
        15,
        14,
        8,
        13,
        6,
        5,
        12,
        7,
        5,
        11,
        12,
        14,
        15,
        14,
        15,
        9,
        8,
        9,
        14,
        5,
        6,
        8,
        6,
        5,
        12,
        9,
        15,
        5,
        11,
        6,
        8,
        13,
        12,
        5,
        12,
        13,
        14,
        11,
        8,
        5,
        6
      ];
      var sr = [
        8,
        9,
        9,
        11,
        13,
        15,
        15,
        5,
        7,
        7,
        8,
        11,
        14,
        14,
        12,
        6,
        9,
        13,
        15,
        7,
        12,
        8,
        9,
        11,
        7,
        7,
        12,
        7,
        6,
        15,
        13,
        11,
        9,
        7,
        15,
        11,
        8,
        6,
        6,
        14,
        12,
        13,
        5,
        14,
        13,
        13,
        7,
        5,
        15,
        5,
        8,
        11,
        14,
        14,
        6,
        14,
        6,
        9,
        12,
        9,
        12,
        5,
        15,
        8,
        8,
        5,
        12,
        9,
        12,
        5,
        14,
        6,
        8,
        13,
        6,
        5,
        15,
        13,
        11,
        11
      ];
      var hl = [0, 1518500249, 1859775393, 2400959708, 2840853838];
      var hr = [1352829926, 1548603684, 1836072691, 2053994217, 0];
      function RIPEMD160() {
        HashBase.call(this, 64);
        this._a = 1732584193;
        this._b = 4023233417;
        this._c = 2562383102;
        this._d = 271733878;
        this._e = 3285377520;
      }
      inherits(RIPEMD160, HashBase);
      RIPEMD160.prototype._update = function() {
        var words = ARRAY16;
        for (var j = 0; j < 16; ++j)
          words[j] = this._block.readInt32LE(j * 4);
        var al = this._a | 0;
        var bl = this._b | 0;
        var cl = this._c | 0;
        var dl = this._d | 0;
        var el = this._e | 0;
        var ar = this._a | 0;
        var br = this._b | 0;
        var cr = this._c | 0;
        var dr = this._d | 0;
        var er = this._e | 0;
        for (var i = 0; i < 80; i += 1) {
          var tl;
          var tr;
          if (i < 16) {
            tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);
            tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i]);
          } else if (i < 32) {
            tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);
            tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i]);
          } else if (i < 48) {
            tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);
            tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i]);
          } else if (i < 64) {
            tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);
            tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i]);
          } else {
            tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);
            tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i]);
          }
          al = el;
          el = dl;
          dl = rotl(cl, 10);
          cl = bl;
          bl = tl;
          ar = er;
          er = dr;
          dr = rotl(cr, 10);
          cr = br;
          br = tr;
        }
        var t = this._b + cl + dr | 0;
        this._b = this._c + dl + er | 0;
        this._c = this._d + el + ar | 0;
        this._d = this._e + al + br | 0;
        this._e = this._a + bl + cr | 0;
        this._a = t;
      };
      RIPEMD160.prototype._digest = function() {
        this._block[this._blockOffset++] = 128;
        if (this._blockOffset > 56) {
          this._block.fill(0, this._blockOffset, 64);
          this._update();
          this._blockOffset = 0;
        }
        this._block.fill(0, this._blockOffset, 56);
        this._block.writeUInt32LE(this._length[0], 56);
        this._block.writeUInt32LE(this._length[1], 60);
        this._update();
        var buffer = Buffer2.alloc ? Buffer2.alloc(20) : new Buffer2(20);
        buffer.writeInt32LE(this._a, 0);
        buffer.writeInt32LE(this._b, 4);
        buffer.writeInt32LE(this._c, 8);
        buffer.writeInt32LE(this._d, 12);
        buffer.writeInt32LE(this._e, 16);
        return buffer;
      };
      function rotl(x, n) {
        return x << n | x >>> 32 - n;
      }
      function fn1(a, b, c, d, e, m, k, s) {
        return rotl(a + (b ^ c ^ d) + m + k | 0, s) + e | 0;
      }
      function fn2(a, b, c, d, e, m, k, s) {
        return rotl(a + (b & c | ~b & d) + m + k | 0, s) + e | 0;
      }
      function fn3(a, b, c, d, e, m, k, s) {
        return rotl(a + ((b | ~c) ^ d) + m + k | 0, s) + e | 0;
      }
      function fn4(a, b, c, d, e, m, k, s) {
        return rotl(a + (b & d | c & ~d) + m + k | 0, s) + e | 0;
      }
      function fn5(a, b, c, d, e, m, k, s) {
        return rotl(a + (b ^ (c | ~d)) + m + k | 0, s) + e | 0;
      }
      module.exports = RIPEMD160;
    }
  });

  // node_modules/sha.js/hash.js
  var require_hash = __commonJS({
    "node_modules/sha.js/hash.js"(exports, module) {
      var Buffer2 = require_safe_buffer().Buffer;
      function Hash(blockSize, finalSize) {
        this._block = Buffer2.alloc(blockSize);
        this._finalSize = finalSize;
        this._blockSize = blockSize;
        this._len = 0;
      }
      Hash.prototype.update = function(data, enc) {
        if (typeof data === "string") {
          enc = enc || "utf8";
          data = Buffer2.from(data, enc);
        }
        var block = this._block;
        var blockSize = this._blockSize;
        var length = data.length;
        var accum = this._len;
        for (var offset = 0; offset < length; ) {
          var assigned = accum % blockSize;
          var remainder = Math.min(length - offset, blockSize - assigned);
          for (var i = 0; i < remainder; i++) {
            block[assigned + i] = data[offset + i];
          }
          accum += remainder;
          offset += remainder;
          if (accum % blockSize === 0) {
            this._update(block);
          }
        }
        this._len += length;
        return this;
      };
      Hash.prototype.digest = function(enc) {
        var rem = this._len % this._blockSize;
        this._block[rem] = 128;
        this._block.fill(0, rem + 1);
        if (rem >= this._finalSize) {
          this._update(this._block);
          this._block.fill(0);
        }
        var bits = this._len * 8;
        if (bits <= 4294967295) {
          this._block.writeUInt32BE(bits, this._blockSize - 4);
        } else {
          var lowBits = (bits & 4294967295) >>> 0;
          var highBits = (bits - lowBits) / 4294967296;
          this._block.writeUInt32BE(highBits, this._blockSize - 8);
          this._block.writeUInt32BE(lowBits, this._blockSize - 4);
        }
        this._update(this._block);
        var hash = this._hash();
        return enc ? hash.toString(enc) : hash;
      };
      Hash.prototype._update = function() {
        throw new Error("_update must be implemented by subclass");
      };
      module.exports = Hash;
    }
  });

  // node_modules/sha.js/sha.js
  var require_sha = __commonJS({
    "node_modules/sha.js/sha.js"(exports, module) {
      var inherits = require_inherits_browser();
      var Hash = require_hash();
      var Buffer2 = require_safe_buffer().Buffer;
      var K = [
        1518500249,
        1859775393,
        2400959708 | 0,
        3395469782 | 0
      ];
      var W = new Array(80);
      function Sha() {
        this.init();
        this._w = W;
        Hash.call(this, 64, 56);
      }
      inherits(Sha, Hash);
      Sha.prototype.init = function() {
        this._a = 1732584193;
        this._b = 4023233417;
        this._c = 2562383102;
        this._d = 271733878;
        this._e = 3285377520;
        return this;
      };
      function rotl5(num) {
        return num << 5 | num >>> 27;
      }
      function rotl30(num) {
        return num << 30 | num >>> 2;
      }
      function ft(s, b, c, d) {
        if (s === 0)
          return b & c | ~b & d;
        if (s === 2)
          return b & c | b & d | c & d;
        return b ^ c ^ d;
      }
      Sha.prototype._update = function(M) {
        var W2 = this._w;
        var a = this._a | 0;
        var b = this._b | 0;
        var c = this._c | 0;
        var d = this._d | 0;
        var e = this._e | 0;
        for (var i = 0; i < 16; ++i)
          W2[i] = M.readInt32BE(i * 4);
        for (; i < 80; ++i)
          W2[i] = W2[i - 3] ^ W2[i - 8] ^ W2[i - 14] ^ W2[i - 16];
        for (var j = 0; j < 80; ++j) {
          var s = ~~(j / 20);
          var t = rotl5(a) + ft(s, b, c, d) + e + W2[j] + K[s] | 0;
          e = d;
          d = c;
          c = rotl30(b);
          b = a;
          a = t;
        }
        this._a = a + this._a | 0;
        this._b = b + this._b | 0;
        this._c = c + this._c | 0;
        this._d = d + this._d | 0;
        this._e = e + this._e | 0;
      };
      Sha.prototype._hash = function() {
        var H = Buffer2.allocUnsafe(20);
        H.writeInt32BE(this._a | 0, 0);
        H.writeInt32BE(this._b | 0, 4);
        H.writeInt32BE(this._c | 0, 8);
        H.writeInt32BE(this._d | 0, 12);
        H.writeInt32BE(this._e | 0, 16);
        return H;
      };
      module.exports = Sha;
    }
  });

  // node_modules/sha.js/sha1.js
  var require_sha1 = __commonJS({
    "node_modules/sha.js/sha1.js"(exports, module) {
      var inherits = require_inherits_browser();
      var Hash = require_hash();
      var Buffer2 = require_safe_buffer().Buffer;
      var K = [
        1518500249,
        1859775393,
        2400959708 | 0,
        3395469782 | 0
      ];
      var W = new Array(80);
      function Sha1() {
        this.init();
        this._w = W;
        Hash.call(this, 64, 56);
      }
      inherits(Sha1, Hash);
      Sha1.prototype.init = function() {
        this._a = 1732584193;
        this._b = 4023233417;
        this._c = 2562383102;
        this._d = 271733878;
        this._e = 3285377520;
        return this;
      };
      function rotl1(num) {
        return num << 1 | num >>> 31;
      }
      function rotl5(num) {
        return num << 5 | num >>> 27;
      }
      function rotl30(num) {
        return num << 30 | num >>> 2;
      }
      function ft(s, b, c, d) {
        if (s === 0)
          return b & c | ~b & d;
        if (s === 2)
          return b & c | b & d | c & d;
        return b ^ c ^ d;
      }
      Sha1.prototype._update = function(M) {
        var W2 = this._w;
        var a = this._a | 0;
        var b = this._b | 0;
        var c = this._c | 0;
        var d = this._d | 0;
        var e = this._e | 0;
        for (var i = 0; i < 16; ++i)
          W2[i] = M.readInt32BE(i * 4);
        for (; i < 80; ++i)
          W2[i] = rotl1(W2[i - 3] ^ W2[i - 8] ^ W2[i - 14] ^ W2[i - 16]);
        for (var j = 0; j < 80; ++j) {
          var s = ~~(j / 20);
          var t = rotl5(a) + ft(s, b, c, d) + e + W2[j] + K[s] | 0;
          e = d;
          d = c;
          c = rotl30(b);
          b = a;
          a = t;
        }
        this._a = a + this._a | 0;
        this._b = b + this._b | 0;
        this._c = c + this._c | 0;
        this._d = d + this._d | 0;
        this._e = e + this._e | 0;
      };
      Sha1.prototype._hash = function() {
        var H = Buffer2.allocUnsafe(20);
        H.writeInt32BE(this._a | 0, 0);
        H.writeInt32BE(this._b | 0, 4);
        H.writeInt32BE(this._c | 0, 8);
        H.writeInt32BE(this._d | 0, 12);
        H.writeInt32BE(this._e | 0, 16);
        return H;
      };
      module.exports = Sha1;
    }
  });

  // node_modules/sha.js/sha256.js
  var require_sha256 = __commonJS({
    "node_modules/sha.js/sha256.js"(exports, module) {
      var inherits = require_inherits_browser();
      var Hash = require_hash();
      var Buffer2 = require_safe_buffer().Buffer;
      var K = [
        1116352408,
        1899447441,
        3049323471,
        3921009573,
        961987163,
        1508970993,
        2453635748,
        2870763221,
        3624381080,
        310598401,
        607225278,
        1426881987,
        1925078388,
        2162078206,
        2614888103,
        3248222580,
        3835390401,
        4022224774,
        264347078,
        604807628,
        770255983,
        1249150122,
        1555081692,
        1996064986,
        2554220882,
        2821834349,
        2952996808,
        3210313671,
        3336571891,
        3584528711,
        113926993,
        338241895,
        666307205,
        773529912,
        1294757372,
        1396182291,
        1695183700,
        1986661051,
        2177026350,
        2456956037,
        2730485921,
        2820302411,
        3259730800,
        3345764771,
        3516065817,
        3600352804,
        4094571909,
        275423344,
        430227734,
        506948616,
        659060556,
        883997877,
        958139571,
        1322822218,
        1537002063,
        1747873779,
        1955562222,
        2024104815,
        2227730452,
        2361852424,
        2428436474,
        2756734187,
        3204031479,
        3329325298
      ];
      var W = new Array(64);
      function Sha256() {
        this.init();
        this._w = W;
        Hash.call(this, 64, 56);
      }
      inherits(Sha256, Hash);
      Sha256.prototype.init = function() {
        this._a = 1779033703;
        this._b = 3144134277;
        this._c = 1013904242;
        this._d = 2773480762;
        this._e = 1359893119;
        this._f = 2600822924;
        this._g = 528734635;
        this._h = 1541459225;
        return this;
      };
      function ch(x, y, z) {
        return z ^ x & (y ^ z);
      }
      function maj(x, y, z) {
        return x & y | z & (x | y);
      }
      function sigma0(x) {
        return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);
      }
      function sigma1(x) {
        return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);
      }
      function gamma0(x) {
        return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ x >>> 3;
      }
      function gamma1(x) {
        return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ x >>> 10;
      }
      Sha256.prototype._update = function(M) {
        var W2 = this._w;
        var a = this._a | 0;
        var b = this._b | 0;
        var c = this._c | 0;
        var d = this._d | 0;
        var e = this._e | 0;
        var f = this._f | 0;
        var g = this._g | 0;
        var h = this._h | 0;
        for (var i = 0; i < 16; ++i)
          W2[i] = M.readInt32BE(i * 4);
        for (; i < 64; ++i)
          W2[i] = gamma1(W2[i - 2]) + W2[i - 7] + gamma0(W2[i - 15]) + W2[i - 16] | 0;
        for (var j = 0; j < 64; ++j) {
          var T1 = h + sigma1(e) + ch(e, f, g) + K[j] + W2[j] | 0;
          var T2 = sigma0(a) + maj(a, b, c) | 0;
          h = g;
          g = f;
          f = e;
          e = d + T1 | 0;
          d = c;
          c = b;
          b = a;
          a = T1 + T2 | 0;
        }
        this._a = a + this._a | 0;
        this._b = b + this._b | 0;
        this._c = c + this._c | 0;
        this._d = d + this._d | 0;
        this._e = e + this._e | 0;
        this._f = f + this._f | 0;
        this._g = g + this._g | 0;
        this._h = h + this._h | 0;
      };
      Sha256.prototype._hash = function() {
        var H = Buffer2.allocUnsafe(32);
        H.writeInt32BE(this._a, 0);
        H.writeInt32BE(this._b, 4);
        H.writeInt32BE(this._c, 8);
        H.writeInt32BE(this._d, 12);
        H.writeInt32BE(this._e, 16);
        H.writeInt32BE(this._f, 20);
        H.writeInt32BE(this._g, 24);
        H.writeInt32BE(this._h, 28);
        return H;
      };
      module.exports = Sha256;
    }
  });

  // node_modules/sha.js/sha224.js
  var require_sha224 = __commonJS({
    "node_modules/sha.js/sha224.js"(exports, module) {
      var inherits = require_inherits_browser();
      var Sha256 = require_sha256();
      var Hash = require_hash();
      var Buffer2 = require_safe_buffer().Buffer;
      var W = new Array(64);
      function Sha224() {
        this.init();
        this._w = W;
        Hash.call(this, 64, 56);
      }
      inherits(Sha224, Sha256);
      Sha224.prototype.init = function() {
        this._a = 3238371032;
        this._b = 914150663;
        this._c = 812702999;
        this._d = 4144912697;
        this._e = 4290775857;
        this._f = 1750603025;
        this._g = 1694076839;
        this._h = 3204075428;
        return this;
      };
      Sha224.prototype._hash = function() {
        var H = Buffer2.allocUnsafe(28);
        H.writeInt32BE(this._a, 0);
        H.writeInt32BE(this._b, 4);
        H.writeInt32BE(this._c, 8);
        H.writeInt32BE(this._d, 12);
        H.writeInt32BE(this._e, 16);
        H.writeInt32BE(this._f, 20);
        H.writeInt32BE(this._g, 24);
        return H;
      };
      module.exports = Sha224;
    }
  });

  // node_modules/sha.js/sha512.js
  var require_sha512 = __commonJS({
    "node_modules/sha.js/sha512.js"(exports, module) {
      var inherits = require_inherits_browser();
      var Hash = require_hash();
      var Buffer2 = require_safe_buffer().Buffer;
      var K = [
        1116352408,
        3609767458,
        1899447441,
        602891725,
        3049323471,
        3964484399,
        3921009573,
        2173295548,
        961987163,
        4081628472,
        1508970993,
        3053834265,
        2453635748,
        2937671579,
        2870763221,
        3664609560,
        3624381080,
        2734883394,
        310598401,
        1164996542,
        607225278,
        1323610764,
        1426881987,
        3590304994,
        1925078388,
        4068182383,
        2162078206,
        991336113,
        2614888103,
        633803317,
        3248222580,
        3479774868,
        3835390401,
        2666613458,
        4022224774,
        944711139,
        264347078,
        2341262773,
        604807628,
        2007800933,
        770255983,
        1495990901,
        1249150122,
        1856431235,
        1555081692,
        3175218132,
        1996064986,
        2198950837,
        2554220882,
        3999719339,
        2821834349,
        766784016,
        2952996808,
        2566594879,
        3210313671,
        3203337956,
        3336571891,
        1034457026,
        3584528711,
        2466948901,
        113926993,
        3758326383,
        338241895,
        168717936,
        666307205,
        1188179964,
        773529912,
        1546045734,
        1294757372,
        1522805485,
        1396182291,
        2643833823,
        1695183700,
        2343527390,
        1986661051,
        1014477480,
        2177026350,
        1206759142,
        2456956037,
        344077627,
        2730485921,
        1290863460,
        2820302411,
        3158454273,
        3259730800,
        3505952657,
        3345764771,
        106217008,
        3516065817,
        3606008344,
        3600352804,
        1432725776,
        4094571909,
        1467031594,
        275423344,
        851169720,
        430227734,
        3100823752,
        506948616,
        1363258195,
        659060556,
        3750685593,
        883997877,
        3785050280,
        958139571,
        3318307427,
        1322822218,
        3812723403,
        1537002063,
        2003034995,
        1747873779,
        3602036899,
        1955562222,
        1575990012,
        2024104815,
        1125592928,
        2227730452,
        2716904306,
        2361852424,
        442776044,
        2428436474,
        593698344,
        2756734187,
        3733110249,
        3204031479,
        2999351573,
        3329325298,
        3815920427,
        3391569614,
        3928383900,
        3515267271,
        566280711,
        3940187606,
        3454069534,
        4118630271,
        4000239992,
        116418474,
        1914138554,
        174292421,
        2731055270,
        289380356,
        3203993006,
        460393269,
        320620315,
        685471733,
        587496836,
        852142971,
        1086792851,
        1017036298,
        365543100,
        1126000580,
        2618297676,
        1288033470,
        3409855158,
        1501505948,
        4234509866,
        1607167915,
        987167468,
        1816402316,
        1246189591
      ];
      var W = new Array(160);
      function Sha512() {
        this.init();
        this._w = W;
        Hash.call(this, 128, 112);
      }
      inherits(Sha512, Hash);
      Sha512.prototype.init = function() {
        this._ah = 1779033703;
        this._bh = 3144134277;
        this._ch = 1013904242;
        this._dh = 2773480762;
        this._eh = 1359893119;
        this._fh = 2600822924;
        this._gh = 528734635;
        this._hh = 1541459225;
        this._al = 4089235720;
        this._bl = 2227873595;
        this._cl = 4271175723;
        this._dl = 1595750129;
        this._el = 2917565137;
        this._fl = 725511199;
        this._gl = 4215389547;
        this._hl = 327033209;
        return this;
      };
      function Ch(x, y, z) {
        return z ^ x & (y ^ z);
      }
      function maj(x, y, z) {
        return x & y | z & (x | y);
      }
      function sigma0(x, xl) {
        return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25);
      }
      function sigma1(x, xl) {
        return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23);
      }
      function Gamma0(x, xl) {
        return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ x >>> 7;
      }
      function Gamma0l(x, xl) {
        return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25);
      }
      function Gamma1(x, xl) {
        return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ x >>> 6;
      }
      function Gamma1l(x, xl) {
        return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26);
      }
      function getCarry(a, b) {
        return a >>> 0 < b >>> 0 ? 1 : 0;
      }
      Sha512.prototype._update = function(M) {
        var W2 = this._w;
        var ah = this._ah | 0;
        var bh = this._bh | 0;
        var ch = this._ch | 0;
        var dh = this._dh | 0;
        var eh = this._eh | 0;
        var fh = this._fh | 0;
        var gh = this._gh | 0;
        var hh = this._hh | 0;
        var al = this._al | 0;
        var bl = this._bl | 0;
        var cl = this._cl | 0;
        var dl = this._dl | 0;
        var el = this._el | 0;
        var fl = this._fl | 0;
        var gl = this._gl | 0;
        var hl = this._hl | 0;
        for (var i = 0; i < 32; i += 2) {
          W2[i] = M.readInt32BE(i * 4);
          W2[i + 1] = M.readInt32BE(i * 4 + 4);
        }
        for (; i < 160; i += 2) {
          var xh = W2[i - 15 * 2];
          var xl = W2[i - 15 * 2 + 1];
          var gamma0 = Gamma0(xh, xl);
          var gamma0l = Gamma0l(xl, xh);
          xh = W2[i - 2 * 2];
          xl = W2[i - 2 * 2 + 1];
          var gamma1 = Gamma1(xh, xl);
          var gamma1l = Gamma1l(xl, xh);
          var Wi7h = W2[i - 7 * 2];
          var Wi7l = W2[i - 7 * 2 + 1];
          var Wi16h = W2[i - 16 * 2];
          var Wi16l = W2[i - 16 * 2 + 1];
          var Wil = gamma0l + Wi7l | 0;
          var Wih = gamma0 + Wi7h + getCarry(Wil, gamma0l) | 0;
          Wil = Wil + gamma1l | 0;
          Wih = Wih + gamma1 + getCarry(Wil, gamma1l) | 0;
          Wil = Wil + Wi16l | 0;
          Wih = Wih + Wi16h + getCarry(Wil, Wi16l) | 0;
          W2[i] = Wih;
          W2[i + 1] = Wil;
        }
        for (var j = 0; j < 160; j += 2) {
          Wih = W2[j];
          Wil = W2[j + 1];
          var majh = maj(ah, bh, ch);
          var majl = maj(al, bl, cl);
          var sigma0h = sigma0(ah, al);
          var sigma0l = sigma0(al, ah);
          var sigma1h = sigma1(eh, el);
          var sigma1l = sigma1(el, eh);
          var Kih = K[j];
          var Kil = K[j + 1];
          var chh = Ch(eh, fh, gh);
          var chl = Ch(el, fl, gl);
          var t1l = hl + sigma1l | 0;
          var t1h = hh + sigma1h + getCarry(t1l, hl) | 0;
          t1l = t1l + chl | 0;
          t1h = t1h + chh + getCarry(t1l, chl) | 0;
          t1l = t1l + Kil | 0;
          t1h = t1h + Kih + getCarry(t1l, Kil) | 0;
          t1l = t1l + Wil | 0;
          t1h = t1h + Wih + getCarry(t1l, Wil) | 0;
          var t2l = sigma0l + majl | 0;
          var t2h = sigma0h + majh + getCarry(t2l, sigma0l) | 0;
          hh = gh;
          hl = gl;
          gh = fh;
          gl = fl;
          fh = eh;
          fl = el;
          el = dl + t1l | 0;
          eh = dh + t1h + getCarry(el, dl) | 0;
          dh = ch;
          dl = cl;
          ch = bh;
          cl = bl;
          bh = ah;
          bl = al;
          al = t1l + t2l | 0;
          ah = t1h + t2h + getCarry(al, t1l) | 0;
        }
        this._al = this._al + al | 0;
        this._bl = this._bl + bl | 0;
        this._cl = this._cl + cl | 0;
        this._dl = this._dl + dl | 0;
        this._el = this._el + el | 0;
        this._fl = this._fl + fl | 0;
        this._gl = this._gl + gl | 0;
        this._hl = this._hl + hl | 0;
        this._ah = this._ah + ah + getCarry(this._al, al) | 0;
        this._bh = this._bh + bh + getCarry(this._bl, bl) | 0;
        this._ch = this._ch + ch + getCarry(this._cl, cl) | 0;
        this._dh = this._dh + dh + getCarry(this._dl, dl) | 0;
        this._eh = this._eh + eh + getCarry(this._el, el) | 0;
        this._fh = this._fh + fh + getCarry(this._fl, fl) | 0;
        this._gh = this._gh + gh + getCarry(this._gl, gl) | 0;
        this._hh = this._hh + hh + getCarry(this._hl, hl) | 0;
      };
      Sha512.prototype._hash = function() {
        var H = Buffer2.allocUnsafe(64);
        function writeInt64BE(h, l, offset) {
          H.writeInt32BE(h, offset);
          H.writeInt32BE(l, offset + 4);
        }
        writeInt64BE(this._ah, this._al, 0);
        writeInt64BE(this._bh, this._bl, 8);
        writeInt64BE(this._ch, this._cl, 16);
        writeInt64BE(this._dh, this._dl, 24);
        writeInt64BE(this._eh, this._el, 32);
        writeInt64BE(this._fh, this._fl, 40);
        writeInt64BE(this._gh, this._gl, 48);
        writeInt64BE(this._hh, this._hl, 56);
        return H;
      };
      module.exports = Sha512;
    }
  });

  // node_modules/sha.js/sha384.js
  var require_sha384 = __commonJS({
    "node_modules/sha.js/sha384.js"(exports, module) {
      var inherits = require_inherits_browser();
      var SHA512 = require_sha512();
      var Hash = require_hash();
      var Buffer2 = require_safe_buffer().Buffer;
      var W = new Array(160);
      function Sha384() {
        this.init();
        this._w = W;
        Hash.call(this, 128, 112);
      }
      inherits(Sha384, SHA512);
      Sha384.prototype.init = function() {
        this._ah = 3418070365;
        this._bh = 1654270250;
        this._ch = 2438529370;
        this._dh = 355462360;
        this._eh = 1731405415;
        this._fh = 2394180231;
        this._gh = 3675008525;
        this._hh = 1203062813;
        this._al = 3238371032;
        this._bl = 914150663;
        this._cl = 812702999;
        this._dl = 4144912697;
        this._el = 4290775857;
        this._fl = 1750603025;
        this._gl = 1694076839;
        this._hl = 3204075428;
        return this;
      };
      Sha384.prototype._hash = function() {
        var H = Buffer2.allocUnsafe(48);
        function writeInt64BE(h, l, offset) {
          H.writeInt32BE(h, offset);
          H.writeInt32BE(l, offset + 4);
        }
        writeInt64BE(this._ah, this._al, 0);
        writeInt64BE(this._bh, this._bl, 8);
        writeInt64BE(this._ch, this._cl, 16);
        writeInt64BE(this._dh, this._dl, 24);
        writeInt64BE(this._eh, this._el, 32);
        writeInt64BE(this._fh, this._fl, 40);
        return H;
      };
      module.exports = Sha384;
    }
  });

  // node_modules/sha.js/index.js
  var require_sha2 = __commonJS({
    "node_modules/sha.js/index.js"(exports, module) {
      var exports = module.exports = function SHA(algorithm) {
        algorithm = algorithm.toLowerCase();
        var Algorithm = exports[algorithm];
        if (!Algorithm)
          throw new Error(algorithm + " is not supported (we accept pull requests)");
        return new Algorithm();
      };
      exports.sha = require_sha();
      exports.sha1 = require_sha1();
      exports.sha224 = require_sha224();
      exports.sha256 = require_sha256();
      exports.sha384 = require_sha384();
      exports.sha512 = require_sha512();
    }
  });

  // node_modules/cipher-base/index.js
  var require_cipher_base = __commonJS({
    "node_modules/cipher-base/index.js"(exports, module) {
      var Buffer2 = require_safe_buffer().Buffer;
      var Transform = require_readable_browser().Transform;
      var StringDecoder = require_string_decoder().StringDecoder;
      var inherits = require_inherits_browser();
      function CipherBase(hashMode) {
        Transform.call(this);
        this.hashMode = typeof hashMode === "string";
        if (this.hashMode) {
          this[hashMode] = this._finalOrDigest;
        } else {
          this.final = this._finalOrDigest;
        }
        if (this._final) {
          this.__final = this._final;
          this._final = null;
        }
        this._decoder = null;
        this._encoding = null;
      }
      inherits(CipherBase, Transform);
      CipherBase.prototype.update = function(data, inputEnc, outputEnc) {
        if (typeof data === "string") {
          data = Buffer2.from(data, inputEnc);
        }
        var outData = this._update(data);
        if (this.hashMode)
          return this;
        if (outputEnc) {
          outData = this._toString(outData, outputEnc);
        }
        return outData;
      };
      CipherBase.prototype.setAutoPadding = function() {
      };
      CipherBase.prototype.getAuthTag = function() {
        throw new Error("trying to get auth tag in unsupported state");
      };
      CipherBase.prototype.setAuthTag = function() {
        throw new Error("trying to set auth tag in unsupported state");
      };
      CipherBase.prototype.setAAD = function() {
        throw new Error("trying to set aad in unsupported state");
      };
      CipherBase.prototype._transform = function(data, _, next) {
        var err;
        try {
          if (this.hashMode) {
            this._update(data);
          } else {
            this.push(this._update(data));
          }
        } catch (e) {
          err = e;
        } finally {
          next(err);
        }
      };
      CipherBase.prototype._flush = function(done) {
        var err;
        try {
          this.push(this.__final());
        } catch (e) {
          err = e;
        }
        done(err);
      };
      CipherBase.prototype._finalOrDigest = function(outputEnc) {
        var outData = this.__final() || Buffer2.alloc(0);
        if (outputEnc) {
          outData = this._toString(outData, outputEnc, true);
        }
        return outData;
      };
      CipherBase.prototype._toString = function(value, enc, fin) {
        if (!this._decoder) {
          this._decoder = new StringDecoder(enc);
          this._encoding = enc;
        }
        if (this._encoding !== enc)
          throw new Error("can't switch encodings");
        var out = this._decoder.write(value);
        if (fin) {
          out += this._decoder.end();
        }
        return out;
      };
      module.exports = CipherBase;
    }
  });

  // node_modules/create-hash/browser.js
  var require_browser3 = __commonJS({
    "node_modules/create-hash/browser.js"(exports, module) {
      "use strict";
      var inherits = require_inherits_browser();
      var MD5 = require_md5();
      var RIPEMD160 = require_ripemd160();
      var sha = require_sha2();
      var Base = require_cipher_base();
      function Hash(hash) {
        Base.call(this, "digest");
        this._hash = hash;
      }
      inherits(Hash, Base);
      Hash.prototype._update = function(data) {
        this._hash.update(data);
      };
      Hash.prototype._final = function() {
        return this._hash.digest();
      };
      module.exports = function createHash(alg) {
        alg = alg.toLowerCase();
        if (alg === "md5")
          return new MD5();
        if (alg === "rmd160" || alg === "ripemd160")
          return new RIPEMD160();
        return new Hash(sha(alg));
      };
    }
  });

  // node_modules/wif/node_modules/base-x/src/index.js
  var require_src = __commonJS({
    "node_modules/wif/node_modules/base-x/src/index.js"(exports, module) {
      "use strict";
      var _Buffer = require_safe_buffer().Buffer;
      function base(ALPHABET) {
        if (ALPHABET.length >= 255) {
          throw new TypeError("Alphabet too long");
        }
        var BASE_MAP = new Uint8Array(256);
        for (var j = 0; j < BASE_MAP.length; j++) {
          BASE_MAP[j] = 255;
        }
        for (var i = 0; i < ALPHABET.length; i++) {
          var x = ALPHABET.charAt(i);
          var xc = x.charCodeAt(0);
          if (BASE_MAP[xc] !== 255) {
            throw new TypeError(x + " is ambiguous");
          }
          BASE_MAP[xc] = i;
        }
        var BASE = ALPHABET.length;
        var LEADER = ALPHABET.charAt(0);
        var FACTOR = Math.log(BASE) / Math.log(256);
        var iFACTOR = Math.log(256) / Math.log(BASE);
        function encode(source) {
          if (Array.isArray(source) || source instanceof Uint8Array) {
            source = _Buffer.from(source);
          }
          if (!_Buffer.isBuffer(source)) {
            throw new TypeError("Expected Buffer");
          }
          if (source.length === 0) {
            return "";
          }
          var zeroes = 0;
          var length = 0;
          var pbegin = 0;
          var pend = source.length;
          while (pbegin !== pend && source[pbegin] === 0) {
            pbegin++;
            zeroes++;
          }
          var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
          var b58 = new Uint8Array(size);
          while (pbegin !== pend) {
            var carry = source[pbegin];
            var i2 = 0;
            for (var it1 = size - 1; (carry !== 0 || i2 < length) && it1 !== -1; it1--, i2++) {
              carry += 256 * b58[it1] >>> 0;
              b58[it1] = carry % BASE >>> 0;
              carry = carry / BASE >>> 0;
            }
            if (carry !== 0) {
              throw new Error("Non-zero carry");
            }
            length = i2;
            pbegin++;
          }
          var it2 = size - length;
          while (it2 !== size && b58[it2] === 0) {
            it2++;
          }
          var str = LEADER.repeat(zeroes);
          for (; it2 < size; ++it2) {
            str += ALPHABET.charAt(b58[it2]);
          }
          return str;
        }
        function decodeUnsafe(source) {
          if (typeof source !== "string") {
            throw new TypeError("Expected String");
          }
          if (source.length === 0) {
            return _Buffer.alloc(0);
          }
          var psz = 0;
          var zeroes = 0;
          var length = 0;
          while (source[psz] === LEADER) {
            zeroes++;
            psz++;
          }
          var size = (source.length - psz) * FACTOR + 1 >>> 0;
          var b256 = new Uint8Array(size);
          while (source[psz]) {
            var carry = BASE_MAP[source.charCodeAt(psz)];
            if (carry === 255) {
              return;
            }
            var i2 = 0;
            for (var it3 = size - 1; (carry !== 0 || i2 < length) && it3 !== -1; it3--, i2++) {
              carry += BASE * b256[it3] >>> 0;
              b256[it3] = carry % 256 >>> 0;
              carry = carry / 256 >>> 0;
            }
            if (carry !== 0) {
              throw new Error("Non-zero carry");
            }
            length = i2;
            psz++;
          }
          var it4 = size - length;
          while (it4 !== size && b256[it4] === 0) {
            it4++;
          }
          var vch = _Buffer.allocUnsafe(zeroes + (size - it4));
          vch.fill(0, 0, zeroes);
          var j2 = zeroes;
          while (it4 !== size) {
            vch[j2++] = b256[it4++];
          }
          return vch;
        }
        function decode(string) {
          var buffer = decodeUnsafe(string);
          if (buffer) {
            return buffer;
          }
          throw new Error("Non-base" + BASE + " character");
        }
        return {
          encode,
          decodeUnsafe,
          decode
        };
      }
      module.exports = base;
    }
  });

  // node_modules/wif/node_modules/bs58/index.js
  var require_bs58 = __commonJS({
    "node_modules/wif/node_modules/bs58/index.js"(exports, module) {
      var basex = require_src();
      var ALPHABET = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
      module.exports = basex(ALPHABET);
    }
  });

  // node_modules/wif/node_modules/bs58check/base.js
  var require_base = __commonJS({
    "node_modules/wif/node_modules/bs58check/base.js"(exports, module) {
      "use strict";
      var base58 = require_bs58();
      var Buffer2 = require_safe_buffer().Buffer;
      module.exports = function(checksumFn) {
        function encode(payload) {
          var checksum = checksumFn(payload);
          return base58.encode(Buffer2.concat([
            payload,
            checksum
          ], payload.length + 4));
        }
        function decodeRaw(buffer) {
          var payload = buffer.slice(0, -4);
          var checksum = buffer.slice(-4);
          var newChecksum = checksumFn(payload);
          if (checksum[0] ^ newChecksum[0] | checksum[1] ^ newChecksum[1] | checksum[2] ^ newChecksum[2] | checksum[3] ^ newChecksum[3])
            return;
          return payload;
        }
        function decodeUnsafe(string) {
          var buffer = base58.decodeUnsafe(string);
          if (!buffer)
            return;
          return decodeRaw(buffer);
        }
        function decode(string) {
          var buffer = base58.decode(string);
          var payload = decodeRaw(buffer, checksumFn);
          if (!payload)
            throw new Error("Invalid checksum");
          return payload;
        }
        return {
          encode,
          decode,
          decodeUnsafe
        };
      };
    }
  });

  // node_modules/wif/node_modules/bs58check/index.js
  var require_bs58check = __commonJS({
    "node_modules/wif/node_modules/bs58check/index.js"(exports, module) {
      "use strict";
      var createHash = require_browser3();
      var bs58checkBase = require_base();
      function sha256x2(buffer) {
        var tmp = createHash("sha256").update(buffer).digest();
        return createHash("sha256").update(tmp).digest();
      }
      module.exports = bs58checkBase(sha256x2);
    }
  });

  // node_modules/wif/index.js
  var require_wif = __commonJS({
    "node_modules/wif/index.js"(exports, module) {
      var bs58check = require_bs58check();
      function decodeRaw(buffer, version) {
        if (version !== void 0 && buffer[0] !== version)
          throw new Error("Invalid network version");
        if (buffer.length === 33) {
          return {
            version: buffer[0],
            privateKey: buffer.slice(1, 33),
            compressed: false
          };
        }
        if (buffer.length !== 34)
          throw new Error("Invalid WIF length");
        if (buffer[33] !== 1)
          throw new Error("Invalid compression flag");
        return {
          version: buffer[0],
          privateKey: buffer.slice(1, 33),
          compressed: true
        };
      }
      function encodeRaw(version, privateKey, compressed) {
        var result = new Buffer(compressed ? 34 : 33);
        result.writeUInt8(version, 0);
        privateKey.copy(result, 1);
        if (compressed) {
          result[33] = 1;
        }
        return result;
      }
      function decode(string, version) {
        return decodeRaw(bs58check.decode(string), version);
      }
      function encode(version, privateKey, compressed) {
        if (typeof version === "number")
          return bs58check.encode(encodeRaw(version, privateKey, compressed));
        return bs58check.encode(
          encodeRaw(
            version.version,
            version.privateKey,
            version.compressed
          )
        );
      }
      module.exports = {
        decode,
        decodeRaw,
        encode,
        encodeRaw
      };
    }
  });

  // node_modules/ecpair/src/testecc.js
  var require_testecc = __commonJS({
    "node_modules/ecpair/src/testecc.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.testEcc = void 0;
      var h = (hex) => Buffer.from(hex, "hex");
      function testEcc(ecc3) {
        assert(
          ecc3.isPoint(
            h("0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798")
          )
        );
        assert(
          !ecc3.isPoint(
            h("030000000000000000000000000000000000000000000000000000000000000005")
          )
        );
        assert(
          ecc3.isPrivate(
            h("79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798")
          )
        );
        assert(
          ecc3.isPrivate(
            h("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140")
          )
        );
        assert(
          !ecc3.isPrivate(
            h("0000000000000000000000000000000000000000000000000000000000000000")
          )
        );
        assert(
          !ecc3.isPrivate(
            h("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141")
          )
        );
        assert(
          !ecc3.isPrivate(
            h("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142")
          )
        );
        assert(
          Buffer.from(
            ecc3.privateAdd(
              h("0000000000000000000000000000000000000000000000000000000000000001"),
              h("0000000000000000000000000000000000000000000000000000000000000000")
            )
          ).equals(
            h("0000000000000000000000000000000000000000000000000000000000000001")
          )
        );
        assert(
          ecc3.privateAdd(
            h("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413e"),
            h("0000000000000000000000000000000000000000000000000000000000000003")
          ) === null
        );
        assert(
          Buffer.from(
            ecc3.privateAdd(
              h("e211078564db65c3ce7704f08262b1f38f1ef412ad15b5ac2d76657a63b2c500"),
              h("b51fbb69051255d1becbd683de5848242a89c229348dd72896a87ada94ae8665")
            )
          ).equals(
            h("9730c2ee69edbb958d42db7460bafa18fef9d955325aec99044c81c8282b0a24")
          )
        );
        assert(
          Buffer.from(
            ecc3.privateNegate(
              h("0000000000000000000000000000000000000000000000000000000000000001")
            )
          ).equals(
            h("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140")
          )
        );
        assert(
          Buffer.from(
            ecc3.privateNegate(
              h("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413e")
            )
          ).equals(
            h("0000000000000000000000000000000000000000000000000000000000000003")
          )
        );
        assert(
          Buffer.from(
            ecc3.privateNegate(
              h("b1121e4088a66a28f5b6b0f5844943ecd9f610196d7bb83b25214b60452c09af")
            )
          ).equals(
            h("4eede1bf775995d70a494f0a7bb6bc11e0b8cccd41cce8009ab1132c8b0a3792")
          )
        );
        assert(
          Buffer.from(
            ecc3.pointCompress(
              h(
                "0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8"
              ),
              true
            )
          ).equals(
            h("0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798")
          )
        );
        assert(
          Buffer.from(
            ecc3.pointCompress(
              h(
                "0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8"
              ),
              false
            )
          ).equals(
            h(
              "0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8"
            )
          )
        );
        assert(
          Buffer.from(
            ecc3.pointCompress(
              h("0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798"),
              true
            )
          ).equals(
            h("0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798")
          )
        );
        assert(
          Buffer.from(
            ecc3.pointCompress(
              h("0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798"),
              false
            )
          ).equals(
            h(
              "0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8"
            )
          )
        );
        assert(
          Buffer.from(
            ecc3.pointFromScalar(
              h("b1121e4088a66a28f5b6b0f5844943ecd9f610196d7bb83b25214b60452c09af")
            )
          ).equals(
            h("02b07ba9dca9523b7ef4bd97703d43d20399eb698e194704791a25ce77a400df99")
          )
        );
        assert(
          ecc3.xOnlyPointAddTweak(
            h("79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798"),
            h("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140")
          ) === null
        );
        let xOnlyRes = ecc3.xOnlyPointAddTweak(
          h("1617d38ed8d8657da4d4761e8057bc396ea9e4b9d29776d4be096016dbd2509b"),
          h("a8397a935f0dfceba6ba9618f6451ef4d80637abf4e6af2669fbc9de6a8fd2ac")
        );
        assert(
          Buffer.from(xOnlyRes.xOnlyPubkey).equals(
            h("e478f99dab91052ab39a33ea35fd5e6e4933f4d28023cd597c9a1f6760346adf")
          ) && xOnlyRes.parity === 1
        );
        xOnlyRes = ecc3.xOnlyPointAddTweak(
          h("2c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991"),
          h("823c3cd2142744b075a87eade7e1b8678ba308d566226a0056ca2b7a76f86b47")
        );
        assert(
          Buffer.from(xOnlyRes.xOnlyPubkey).equals(
            h("9534f8dc8c6deda2dc007655981c78b49c5d96c778fbf363462a11ec9dfd948c")
          ) && xOnlyRes.parity === 0
        );
        assert(
          Buffer.from(
            ecc3.sign(
              h("5e9f0a0d593efdcf78ac923bc3313e4e7d408d574354ee2b3288c0da9fbba6ed"),
              h("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140")
            )
          ).equals(
            h(
              "54c4a33c6423d689378f160a7ff8b61330444abb58fb470f96ea16d99d4a2fed07082304410efa6b2943111b6a4e0aaa7b7db55a07e9861d1fb3cb1f421044a5"
            )
          )
        );
        assert(
          ecc3.verify(
            h("5e9f0a0d593efdcf78ac923bc3313e4e7d408d574354ee2b3288c0da9fbba6ed"),
            h("0379be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798"),
            h(
              "54c4a33c6423d689378f160a7ff8b61330444abb58fb470f96ea16d99d4a2fed07082304410efa6b2943111b6a4e0aaa7b7db55a07e9861d1fb3cb1f421044a5"
            )
          )
        );
        if (ecc3.signSchnorr) {
          assert(
            Buffer.from(
              ecc3.signSchnorr(
                h("7e2d58d8b3bcdf1abadec7829054f90dda9805aab56c77333024b9d0a508b75c"),
                h("c90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b14e5c9"),
                h("c87aa53824b4d7ae2eb035a2b5bbbccc080e76cdc6d1692c4b0b62d798e6d906")
              )
            ).equals(
              h(
                "5831aaeed7b44bb74e5eab94ba9d4294c49bcf2a60728d8b4c200f50dd313c1bab745879a5ad954a72c45a91c3a51d3c7adea98d82f8481e0e1e03674a6f3fb7"
              )
            )
          );
        }
        if (ecc3.verifySchnorr) {
          assert(
            ecc3.verifySchnorr(
              h("7e2d58d8b3bcdf1abadec7829054f90dda9805aab56c77333024b9d0a508b75c"),
              h("dd308afec5777e13121fa72b9cc1b7cc0139715309b086c960e18fd969774eb8"),
              h(
                "5831aaeed7b44bb74e5eab94ba9d4294c49bcf2a60728d8b4c200f50dd313c1bab745879a5ad954a72c45a91c3a51d3c7adea98d82f8481e0e1e03674a6f3fb7"
              )
            )
          );
        }
      }
      exports.testEcc = testEcc;
      function assert(bool) {
        if (!bool)
          throw new Error("ecc library invalid");
      }
    }
  });

  // node_modules/ecpair/src/ecpair.js
  var require_ecpair = __commonJS({
    "node_modules/ecpair/src/ecpair.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ECPairFactory = exports.networks = void 0;
      var networks4 = require_networks();
      exports.networks = networks4;
      var types = require_types();
      var randomBytes = require_browser();
      var wif = require_wif();
      var testecc_1 = require_testecc();
      var isOptions = types.typeforce.maybe(
        types.typeforce.compile({
          compressed: types.maybe(types.Boolean),
          network: types.maybe(types.Network)
        })
      );
      var toXOnly = (pubKey) => pubKey.length === 32 ? pubKey : pubKey.slice(1, 33);
      function ECPairFactory3(ecc3) {
        (0, testecc_1.testEcc)(ecc3);
        function isPoint(maybePoint) {
          return ecc3.isPoint(maybePoint);
        }
        function fromPrivateKey(buffer, options) {
          types.typeforce(types.Buffer256bit, buffer);
          if (!ecc3.isPrivate(buffer))
            throw new TypeError("Private key not in range [1, n)");
          types.typeforce(isOptions, options);
          return new ECPair3(buffer, void 0, options);
        }
        function fromPublicKey(buffer, options) {
          types.typeforce(ecc3.isPoint, buffer);
          types.typeforce(isOptions, options);
          return new ECPair3(void 0, buffer, options);
        }
        function fromWIF(wifString, network) {
          const decoded = wif.decode(wifString);
          const version = decoded.version;
          if (types.Array(network)) {
            network = network.filter((x) => {
              return version === x.wif;
            }).pop();
            if (!network)
              throw new Error("Unknown network version");
          } else {
            network = network || networks4.bitcoin;
            if (version !== network.wif)
              throw new Error("Invalid network version");
          }
          return fromPrivateKey(decoded.privateKey, {
            compressed: decoded.compressed,
            network
          });
        }
        function makeRandom(options) {
          types.typeforce(isOptions, options);
          if (options === void 0)
            options = {};
          const rng = options.rng || randomBytes;
          let d;
          do {
            d = rng(32);
            types.typeforce(types.Buffer256bit, d);
          } while (!ecc3.isPrivate(d));
          return fromPrivateKey(d, options);
        }
        class ECPair3 {
          __D;
          __Q;
          compressed;
          network;
          lowR;
          constructor(__D, __Q, options) {
            this.__D = __D;
            this.__Q = __Q;
            this.lowR = false;
            if (options === void 0)
              options = {};
            this.compressed = options.compressed === void 0 ? true : options.compressed;
            this.network = options.network || networks4.bitcoin;
            if (__Q !== void 0)
              this.__Q = Buffer.from(ecc3.pointCompress(__Q, this.compressed));
          }
          get privateKey() {
            return this.__D;
          }
          get publicKey() {
            if (!this.__Q) {
              const p = ecc3.pointFromScalar(this.__D, this.compressed);
              this.__Q = Buffer.from(p);
            }
            return this.__Q;
          }
          toWIF() {
            if (!this.__D)
              throw new Error("Missing private key");
            return wif.encode(this.network.wif, this.__D, this.compressed);
          }
          tweak(t) {
            if (this.privateKey)
              return this.tweakFromPrivateKey(t);
            return this.tweakFromPublicKey(t);
          }
          sign(hash, lowR) {
            if (!this.__D)
              throw new Error("Missing private key");
            if (lowR === void 0)
              lowR = this.lowR;
            if (lowR === false) {
              return Buffer.from(ecc3.sign(hash, this.__D));
            } else {
              let sig = ecc3.sign(hash, this.__D);
              const extraData = Buffer.alloc(32, 0);
              let counter = 0;
              while (sig[0] > 127) {
                counter++;
                extraData.writeUIntLE(counter, 0, 6);
                sig = ecc3.sign(hash, this.__D, extraData);
              }
              return Buffer.from(sig);
            }
          }
          signSchnorr(hash) {
            if (!this.privateKey)
              throw new Error("Missing private key");
            if (!ecc3.signSchnorr)
              throw new Error("signSchnorr not supported by ecc library");
            return Buffer.from(ecc3.signSchnorr(hash, this.privateKey));
          }
          verify(hash, signature) {
            return ecc3.verify(hash, this.publicKey, signature);
          }
          verifySchnorr(hash, signature) {
            if (!ecc3.verifySchnorr)
              throw new Error("verifySchnorr not supported by ecc library");
            return ecc3.verifySchnorr(hash, this.publicKey.subarray(1, 33), signature);
          }
          tweakFromPublicKey(t) {
            const xOnlyPubKey = toXOnly(this.publicKey);
            const tweakedPublicKey = ecc3.xOnlyPointAddTweak(xOnlyPubKey, t);
            if (!tweakedPublicKey || tweakedPublicKey.xOnlyPubkey === null)
              throw new Error("Cannot tweak public key!");
            const parityByte = Buffer.from([
              tweakedPublicKey.parity === 0 ? 2 : 3
            ]);
            return fromPublicKey(
              Buffer.concat([parityByte, tweakedPublicKey.xOnlyPubkey]),
              { network: this.network, compressed: this.compressed }
            );
          }
          tweakFromPrivateKey(t) {
            const hasOddY = this.publicKey[0] === 3 || this.publicKey[0] === 4 && (this.publicKey[64] & 1) === 1;
            const privateKey = hasOddY ? ecc3.privateNegate(this.privateKey) : this.privateKey;
            const tweakedPrivateKey = ecc3.privateAdd(privateKey, t);
            if (!tweakedPrivateKey)
              throw new Error("Invalid tweaked private key!");
            return fromPrivateKey(Buffer.from(tweakedPrivateKey), {
              network: this.network,
              compressed: this.compressed
            });
          }
        }
        return {
          isPoint,
          fromPrivateKey,
          fromPublicKey,
          fromWIF,
          makeRandom
        };
      }
      exports.ECPairFactory = ECPairFactory3;
    }
  });

  // node_modules/ecpair/src/index.js
  var require_src2 = __commonJS({
    "node_modules/ecpair/src/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.networks = exports.ECPairFactory = exports.default = void 0;
      var ecpair_1 = require_ecpair();
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return ecpair_1.ECPairFactory;
        }
      });
      Object.defineProperty(exports, "ECPairFactory", {
        enumerable: true,
        get: function() {
          return ecpair_1.ECPairFactory;
        }
      });
      Object.defineProperty(exports, "networks", {
        enumerable: true,
        get: function() {
          return ecpair_1.networks;
        }
      });
    }
  });

  // (disabled):crypto
  var require_crypto = __commonJS({
    "(disabled):crypto"() {
    }
  });

  // node_modules/@noble/secp256k1/lib/index.js
  var require_lib = __commonJS({
    "node_modules/@noble/secp256k1/lib/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.utils = exports.schnorr = exports.verify = exports.signSync = exports.sign = exports.getSharedSecret = exports.recoverPublicKey = exports.getPublicKey = exports.Signature = exports.Point = exports.CURVE = void 0;
      var nodeCrypto = require_crypto();
      var _0n = BigInt(0);
      var _1n = BigInt(1);
      var _2n = BigInt(2);
      var _3n = BigInt(3);
      var _8n = BigInt(8);
      var CURVE = Object.freeze({
        a: _0n,
        b: BigInt(7),
        P: BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"),
        n: BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),
        h: _1n,
        Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
        Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
        beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee")
      });
      exports.CURVE = CURVE;
      var divNearest = (a, b) => (a + b / _2n) / b;
      var endo = {
        beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
        splitScalar(k) {
          const { n } = CURVE;
          const a1 = BigInt("0x3086d221a7d46bcde86c90e49284eb15");
          const b1 = -_1n * BigInt("0xe4437ed6010e88286f547fa90abfe4c3");
          const a2 = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8");
          const b2 = a1;
          const POW_2_128 = BigInt("0x100000000000000000000000000000000");
          const c1 = divNearest(b2 * k, n);
          const c2 = divNearest(-b1 * k, n);
          let k1 = mod(k - c1 * a1 - c2 * a2, n);
          let k2 = mod(-c1 * b1 - c2 * b2, n);
          const k1neg = k1 > POW_2_128;
          const k2neg = k2 > POW_2_128;
          if (k1neg)
            k1 = n - k1;
          if (k2neg)
            k2 = n - k2;
          if (k1 > POW_2_128 || k2 > POW_2_128) {
            throw new Error("splitScalarEndo: Endomorphism failed, k=" + k);
          }
          return { k1neg, k1, k2neg, k2 };
        }
      };
      var fieldLen = 32;
      var groupLen = 32;
      var hashLen = 32;
      var compressedLen = fieldLen + 1;
      var uncompressedLen = 2 * fieldLen + 1;
      function weierstrass(x) {
        const { a, b } = CURVE;
        const x2 = mod(x * x);
        const x3 = mod(x2 * x);
        return mod(x3 + a * x + b);
      }
      var USE_ENDOMORPHISM = CURVE.a === _0n;
      var ShaError = class extends Error {
        constructor(message) {
          super(message);
        }
      };
      function assertJacPoint(other) {
        if (!(other instanceof JacobianPoint))
          throw new TypeError("JacobianPoint expected");
      }
      var JacobianPoint = class _JacobianPoint {
        constructor(x, y, z) {
          this.x = x;
          this.y = y;
          this.z = z;
        }
        static fromAffine(p) {
          if (!(p instanceof Point)) {
            throw new TypeError("JacobianPoint#fromAffine: expected Point");
          }
          if (p.equals(Point.ZERO))
            return _JacobianPoint.ZERO;
          return new _JacobianPoint(p.x, p.y, _1n);
        }
        static toAffineBatch(points) {
          const toInv = invertBatch(points.map((p) => p.z));
          return points.map((p, i) => p.toAffine(toInv[i]));
        }
        static normalizeZ(points) {
          return _JacobianPoint.toAffineBatch(points).map(_JacobianPoint.fromAffine);
        }
        equals(other) {
          assertJacPoint(other);
          const { x: X1, y: Y1, z: Z1 } = this;
          const { x: X2, y: Y2, z: Z2 } = other;
          const Z1Z1 = mod(Z1 * Z1);
          const Z2Z2 = mod(Z2 * Z2);
          const U1 = mod(X1 * Z2Z2);
          const U2 = mod(X2 * Z1Z1);
          const S1 = mod(mod(Y1 * Z2) * Z2Z2);
          const S2 = mod(mod(Y2 * Z1) * Z1Z1);
          return U1 === U2 && S1 === S2;
        }
        negate() {
          return new _JacobianPoint(this.x, mod(-this.y), this.z);
        }
        double() {
          const { x: X1, y: Y1, z: Z1 } = this;
          const A = mod(X1 * X1);
          const B = mod(Y1 * Y1);
          const C = mod(B * B);
          const x1b = X1 + B;
          const D = mod(_2n * (mod(x1b * x1b) - A - C));
          const E = mod(_3n * A);
          const F = mod(E * E);
          const X3 = mod(F - _2n * D);
          const Y3 = mod(E * (D - X3) - _8n * C);
          const Z3 = mod(_2n * Y1 * Z1);
          return new _JacobianPoint(X3, Y3, Z3);
        }
        add(other) {
          assertJacPoint(other);
          const { x: X1, y: Y1, z: Z1 } = this;
          const { x: X2, y: Y2, z: Z2 } = other;
          if (X2 === _0n || Y2 === _0n)
            return this;
          if (X1 === _0n || Y1 === _0n)
            return other;
          const Z1Z1 = mod(Z1 * Z1);
          const Z2Z2 = mod(Z2 * Z2);
          const U1 = mod(X1 * Z2Z2);
          const U2 = mod(X2 * Z1Z1);
          const S1 = mod(mod(Y1 * Z2) * Z2Z2);
          const S2 = mod(mod(Y2 * Z1) * Z1Z1);
          const H = mod(U2 - U1);
          const r = mod(S2 - S1);
          if (H === _0n) {
            if (r === _0n) {
              return this.double();
            } else {
              return _JacobianPoint.ZERO;
            }
          }
          const HH = mod(H * H);
          const HHH = mod(H * HH);
          const V = mod(U1 * HH);
          const X3 = mod(r * r - HHH - _2n * V);
          const Y3 = mod(r * (V - X3) - S1 * HHH);
          const Z3 = mod(Z1 * Z2 * H);
          return new _JacobianPoint(X3, Y3, Z3);
        }
        subtract(other) {
          return this.add(other.negate());
        }
        multiplyUnsafe(scalar) {
          const P0 = _JacobianPoint.ZERO;
          if (typeof scalar === "bigint" && scalar === _0n)
            return P0;
          let n = normalizeScalar(scalar);
          if (n === _1n)
            return this;
          if (!USE_ENDOMORPHISM) {
            let p = P0;
            let d2 = this;
            while (n > _0n) {
              if (n & _1n)
                p = p.add(d2);
              d2 = d2.double();
              n >>= _1n;
            }
            return p;
          }
          let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
          let k1p = P0;
          let k2p = P0;
          let d = this;
          while (k1 > _0n || k2 > _0n) {
            if (k1 & _1n)
              k1p = k1p.add(d);
            if (k2 & _1n)
              k2p = k2p.add(d);
            d = d.double();
            k1 >>= _1n;
            k2 >>= _1n;
          }
          if (k1neg)
            k1p = k1p.negate();
          if (k2neg)
            k2p = k2p.negate();
          k2p = new _JacobianPoint(mod(k2p.x * endo.beta), k2p.y, k2p.z);
          return k1p.add(k2p);
        }
        precomputeWindow(W) {
          const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;
          const points = [];
          let p = this;
          let base = p;
          for (let window2 = 0; window2 < windows; window2++) {
            base = p;
            points.push(base);
            for (let i = 1; i < 2 ** (W - 1); i++) {
              base = base.add(p);
              points.push(base);
            }
            p = base.double();
          }
          return points;
        }
        wNAF(n, affinePoint) {
          if (!affinePoint && this.equals(_JacobianPoint.BASE))
            affinePoint = Point.BASE;
          const W = affinePoint && affinePoint._WINDOW_SIZE || 1;
          if (256 % W) {
            throw new Error("Point#wNAF: Invalid precomputation window, must be power of 2");
          }
          let precomputes = affinePoint && pointPrecomputes.get(affinePoint);
          if (!precomputes) {
            precomputes = this.precomputeWindow(W);
            if (affinePoint && W !== 1) {
              precomputes = _JacobianPoint.normalizeZ(precomputes);
              pointPrecomputes.set(affinePoint, precomputes);
            }
          }
          let p = _JacobianPoint.ZERO;
          let f = _JacobianPoint.BASE;
          const windows = 1 + (USE_ENDOMORPHISM ? 128 / W : 256 / W);
          const windowSize = 2 ** (W - 1);
          const mask = BigInt(2 ** W - 1);
          const maxNumber = 2 ** W;
          const shiftBy = BigInt(W);
          for (let window2 = 0; window2 < windows; window2++) {
            const offset = window2 * windowSize;
            let wbits = Number(n & mask);
            n >>= shiftBy;
            if (wbits > windowSize) {
              wbits -= maxNumber;
              n += _1n;
            }
            const offset1 = offset;
            const offset2 = offset + Math.abs(wbits) - 1;
            const cond1 = window2 % 2 !== 0;
            const cond2 = wbits < 0;
            if (wbits === 0) {
              f = f.add(constTimeNegate(cond1, precomputes[offset1]));
            } else {
              p = p.add(constTimeNegate(cond2, precomputes[offset2]));
            }
          }
          return { p, f };
        }
        multiply(scalar, affinePoint) {
          let n = normalizeScalar(scalar);
          let point;
          let fake;
          if (USE_ENDOMORPHISM) {
            const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
            let { p: k1p, f: f1p } = this.wNAF(k1, affinePoint);
            let { p: k2p, f: f2p } = this.wNAF(k2, affinePoint);
            k1p = constTimeNegate(k1neg, k1p);
            k2p = constTimeNegate(k2neg, k2p);
            k2p = new _JacobianPoint(mod(k2p.x * endo.beta), k2p.y, k2p.z);
            point = k1p.add(k2p);
            fake = f1p.add(f2p);
          } else {
            const { p, f } = this.wNAF(n, affinePoint);
            point = p;
            fake = f;
          }
          return _JacobianPoint.normalizeZ([point, fake])[0];
        }
        toAffine(invZ) {
          const { x, y, z } = this;
          const is0 = this.equals(_JacobianPoint.ZERO);
          if (invZ == null)
            invZ = is0 ? _8n : invert(z);
          const iz1 = invZ;
          const iz2 = mod(iz1 * iz1);
          const iz3 = mod(iz2 * iz1);
          const ax = mod(x * iz2);
          const ay = mod(y * iz3);
          const zz = mod(z * iz1);
          if (is0)
            return Point.ZERO;
          if (zz !== _1n)
            throw new Error("invZ was invalid");
          return new Point(ax, ay);
        }
      };
      JacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, _1n);
      JacobianPoint.ZERO = new JacobianPoint(_0n, _1n, _0n);
      function constTimeNegate(condition, item) {
        const neg = item.negate();
        return condition ? neg : item;
      }
      var pointPrecomputes = /* @__PURE__ */ new WeakMap();
      var Point = class _Point {
        constructor(x, y) {
          this.x = x;
          this.y = y;
        }
        _setWindowSize(windowSize) {
          this._WINDOW_SIZE = windowSize;
          pointPrecomputes.delete(this);
        }
        hasEvenY() {
          return this.y % _2n === _0n;
        }
        static fromCompressedHex(bytes) {
          const isShort = bytes.length === 32;
          const x = bytesToNumber(isShort ? bytes : bytes.subarray(1));
          if (!isValidFieldElement(x))
            throw new Error("Point is not on curve");
          const y2 = weierstrass(x);
          let y = sqrtMod(y2);
          const isYOdd = (y & _1n) === _1n;
          if (isShort) {
            if (isYOdd)
              y = mod(-y);
          } else {
            const isFirstByteOdd = (bytes[0] & 1) === 1;
            if (isFirstByteOdd !== isYOdd)
              y = mod(-y);
          }
          const point = new _Point(x, y);
          point.assertValidity();
          return point;
        }
        static fromUncompressedHex(bytes) {
          const x = bytesToNumber(bytes.subarray(1, fieldLen + 1));
          const y = bytesToNumber(bytes.subarray(fieldLen + 1, fieldLen * 2 + 1));
          const point = new _Point(x, y);
          point.assertValidity();
          return point;
        }
        static fromHex(hex) {
          const bytes = ensureBytes(hex);
          const len = bytes.length;
          const header = bytes[0];
          if (len === fieldLen)
            return this.fromCompressedHex(bytes);
          if (len === compressedLen && (header === 2 || header === 3)) {
            return this.fromCompressedHex(bytes);
          }
          if (len === uncompressedLen && header === 4)
            return this.fromUncompressedHex(bytes);
          throw new Error(`Point.fromHex: received invalid point. Expected 32-${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes, not ${len}`);
        }
        static fromPrivateKey(privateKey) {
          return _Point.BASE.multiply(normalizePrivateKey(privateKey));
        }
        static fromSignature(msgHash, signature, recovery) {
          const { r, s } = normalizeSignature(signature);
          if (![0, 1, 2, 3].includes(recovery))
            throw new Error("Cannot recover: invalid recovery bit");
          const h = truncateHash(ensureBytes(msgHash));
          const { n } = CURVE;
          const radj = recovery === 2 || recovery === 3 ? r + n : r;
          const rinv = invert(radj, n);
          const u1 = mod(-h * rinv, n);
          const u2 = mod(s * rinv, n);
          const prefix = recovery & 1 ? "03" : "02";
          const R = _Point.fromHex(prefix + numTo32bStr(radj));
          const Q = _Point.BASE.multiplyAndAddUnsafe(R, u1, u2);
          if (!Q)
            throw new Error("Cannot recover signature: point at infinify");
          Q.assertValidity();
          return Q;
        }
        toRawBytes(isCompressed = false) {
          return hexToBytes(this.toHex(isCompressed));
        }
        toHex(isCompressed = false) {
          const x = numTo32bStr(this.x);
          if (isCompressed) {
            const prefix = this.hasEvenY() ? "02" : "03";
            return `${prefix}${x}`;
          } else {
            return `04${x}${numTo32bStr(this.y)}`;
          }
        }
        toHexX() {
          return this.toHex(true).slice(2);
        }
        toRawX() {
          return this.toRawBytes(true).slice(1);
        }
        assertValidity() {
          const msg = "Point is not on elliptic curve";
          const { x, y } = this;
          if (!isValidFieldElement(x) || !isValidFieldElement(y))
            throw new Error(msg);
          const left = mod(y * y);
          const right = weierstrass(x);
          if (mod(left - right) !== _0n)
            throw new Error(msg);
        }
        equals(other) {
          return this.x === other.x && this.y === other.y;
        }
        negate() {
          return new _Point(this.x, mod(-this.y));
        }
        double() {
          return JacobianPoint.fromAffine(this).double().toAffine();
        }
        add(other) {
          return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();
        }
        subtract(other) {
          return this.add(other.negate());
        }
        multiply(scalar) {
          return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();
        }
        multiplyAndAddUnsafe(Q, a, b) {
          const P = JacobianPoint.fromAffine(this);
          const aP = a === _0n || a === _1n || this !== _Point.BASE ? P.multiplyUnsafe(a) : P.multiply(a);
          const bQ = JacobianPoint.fromAffine(Q).multiplyUnsafe(b);
          const sum = aP.add(bQ);
          return sum.equals(JacobianPoint.ZERO) ? void 0 : sum.toAffine();
        }
      };
      exports.Point = Point;
      Point.BASE = new Point(CURVE.Gx, CURVE.Gy);
      Point.ZERO = new Point(_0n, _0n);
      function sliceDER(s) {
        return Number.parseInt(s[0], 16) >= 8 ? "00" + s : s;
      }
      function parseDERInt(data) {
        if (data.length < 2 || data[0] !== 2) {
          throw new Error(`Invalid signature integer tag: ${bytesToHex(data)}`);
        }
        const len = data[1];
        const res = data.subarray(2, len + 2);
        if (!len || res.length !== len) {
          throw new Error(`Invalid signature integer: wrong length`);
        }
        if (res[0] === 0 && res[1] <= 127) {
          throw new Error("Invalid signature integer: trailing length");
        }
        return { data: bytesToNumber(res), left: data.subarray(len + 2) };
      }
      function parseDERSignature(data) {
        if (data.length < 2 || data[0] != 48) {
          throw new Error(`Invalid signature tag: ${bytesToHex(data)}`);
        }
        if (data[1] !== data.length - 2) {
          throw new Error("Invalid signature: incorrect length");
        }
        const { data: r, left: sBytes } = parseDERInt(data.subarray(2));
        const { data: s, left: rBytesLeft } = parseDERInt(sBytes);
        if (rBytesLeft.length) {
          throw new Error(`Invalid signature: left bytes after parsing: ${bytesToHex(rBytesLeft)}`);
        }
        return { r, s };
      }
      var Signature = class _Signature {
        constructor(r, s) {
          this.r = r;
          this.s = s;
          this.assertValidity();
        }
        static fromCompact(hex) {
          const arr = hex instanceof Uint8Array;
          const name = "Signature.fromCompact";
          if (typeof hex !== "string" && !arr)
            throw new TypeError(`${name}: Expected string or Uint8Array`);
          const str = arr ? bytesToHex(hex) : hex;
          if (str.length !== 128)
            throw new Error(`${name}: Expected 64-byte hex`);
          return new _Signature(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));
        }
        static fromDER(hex) {
          const arr = hex instanceof Uint8Array;
          if (typeof hex !== "string" && !arr)
            throw new TypeError(`Signature.fromDER: Expected string or Uint8Array`);
          const { r, s } = parseDERSignature(arr ? hex : hexToBytes(hex));
          return new _Signature(r, s);
        }
        static fromHex(hex) {
          return this.fromDER(hex);
        }
        assertValidity() {
          const { r, s } = this;
          if (!isWithinCurveOrder(r))
            throw new Error("Invalid Signature: r must be 0 < r < n");
          if (!isWithinCurveOrder(s))
            throw new Error("Invalid Signature: s must be 0 < s < n");
        }
        hasHighS() {
          const HALF = CURVE.n >> _1n;
          return this.s > HALF;
        }
        normalizeS() {
          return this.hasHighS() ? new _Signature(this.r, mod(-this.s, CURVE.n)) : this;
        }
        toDERRawBytes() {
          return hexToBytes(this.toDERHex());
        }
        toDERHex() {
          const sHex = sliceDER(numberToHexUnpadded(this.s));
          const rHex = sliceDER(numberToHexUnpadded(this.r));
          const sHexL = sHex.length / 2;
          const rHexL = rHex.length / 2;
          const sLen = numberToHexUnpadded(sHexL);
          const rLen = numberToHexUnpadded(rHexL);
          const length = numberToHexUnpadded(rHexL + sHexL + 4);
          return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;
        }
        toRawBytes() {
          return this.toDERRawBytes();
        }
        toHex() {
          return this.toDERHex();
        }
        toCompactRawBytes() {
          return hexToBytes(this.toCompactHex());
        }
        toCompactHex() {
          return numTo32bStr(this.r) + numTo32bStr(this.s);
        }
      };
      exports.Signature = Signature;
      function concatBytes(...arrays) {
        if (!arrays.every((b) => b instanceof Uint8Array))
          throw new Error("Uint8Array list expected");
        if (arrays.length === 1)
          return arrays[0];
        const length = arrays.reduce((a, arr) => a + arr.length, 0);
        const result = new Uint8Array(length);
        for (let i = 0, pad = 0; i < arrays.length; i++) {
          const arr = arrays[i];
          result.set(arr, pad);
          pad += arr.length;
        }
        return result;
      }
      var hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, "0"));
      function bytesToHex(uint8a) {
        if (!(uint8a instanceof Uint8Array))
          throw new Error("Expected Uint8Array");
        let hex = "";
        for (let i = 0; i < uint8a.length; i++) {
          hex += hexes[uint8a[i]];
        }
        return hex;
      }
      var POW_2_256 = BigInt("0x10000000000000000000000000000000000000000000000000000000000000000");
      function numTo32bStr(num) {
        if (typeof num !== "bigint")
          throw new Error("Expected bigint");
        if (!(_0n <= num && num < POW_2_256))
          throw new Error("Expected number 0 <= n < 2^256");
        return num.toString(16).padStart(64, "0");
      }
      function numTo32b(num) {
        const b = hexToBytes(numTo32bStr(num));
        if (b.length !== 32)
          throw new Error("Error: expected 32 bytes");
        return b;
      }
      function numberToHexUnpadded(num) {
        const hex = num.toString(16);
        return hex.length & 1 ? `0${hex}` : hex;
      }
      function hexToNumber(hex) {
        if (typeof hex !== "string") {
          throw new TypeError("hexToNumber: expected string, got " + typeof hex);
        }
        return BigInt(`0x${hex}`);
      }
      function hexToBytes(hex) {
        if (typeof hex !== "string") {
          throw new TypeError("hexToBytes: expected string, got " + typeof hex);
        }
        if (hex.length % 2)
          throw new Error("hexToBytes: received invalid unpadded hex" + hex.length);
        const array = new Uint8Array(hex.length / 2);
        for (let i = 0; i < array.length; i++) {
          const j = i * 2;
          const hexByte = hex.slice(j, j + 2);
          const byte = Number.parseInt(hexByte, 16);
          if (Number.isNaN(byte) || byte < 0)
            throw new Error("Invalid byte sequence");
          array[i] = byte;
        }
        return array;
      }
      function bytesToNumber(bytes) {
        return hexToNumber(bytesToHex(bytes));
      }
      function ensureBytes(hex) {
        return hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);
      }
      function normalizeScalar(num) {
        if (typeof num === "number" && Number.isSafeInteger(num) && num > 0)
          return BigInt(num);
        if (typeof num === "bigint" && isWithinCurveOrder(num))
          return num;
        throw new TypeError("Expected valid private scalar: 0 < scalar < curve.n");
      }
      function mod(a, b = CURVE.P) {
        const result = a % b;
        return result >= _0n ? result : b + result;
      }
      function pow2(x, power) {
        const { P } = CURVE;
        let res = x;
        while (power-- > _0n) {
          res *= res;
          res %= P;
        }
        return res;
      }
      function sqrtMod(x) {
        const { P } = CURVE;
        const _6n = BigInt(6);
        const _11n = BigInt(11);
        const _22n = BigInt(22);
        const _23n = BigInt(23);
        const _44n = BigInt(44);
        const _88n = BigInt(88);
        const b2 = x * x * x % P;
        const b3 = b2 * b2 * x % P;
        const b6 = pow2(b3, _3n) * b3 % P;
        const b9 = pow2(b6, _3n) * b3 % P;
        const b11 = pow2(b9, _2n) * b2 % P;
        const b22 = pow2(b11, _11n) * b11 % P;
        const b44 = pow2(b22, _22n) * b22 % P;
        const b88 = pow2(b44, _44n) * b44 % P;
        const b176 = pow2(b88, _88n) * b88 % P;
        const b220 = pow2(b176, _44n) * b44 % P;
        const b223 = pow2(b220, _3n) * b3 % P;
        const t1 = pow2(b223, _23n) * b22 % P;
        const t2 = pow2(t1, _6n) * b2 % P;
        const rt = pow2(t2, _2n);
        const xc = rt * rt % P;
        if (xc !== x)
          throw new Error("Cannot find square root");
        return rt;
      }
      function invert(number, modulo = CURVE.P) {
        if (number === _0n || modulo <= _0n) {
          throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);
        }
        let a = mod(number, modulo);
        let b = modulo;
        let x = _0n, y = _1n, u = _1n, v = _0n;
        while (a !== _0n) {
          const q = b / a;
          const r = b % a;
          const m = x - u * q;
          const n = y - v * q;
          b = a, a = r, x = u, y = v, u = m, v = n;
        }
        const gcd = b;
        if (gcd !== _1n)
          throw new Error("invert: does not exist");
        return mod(x, modulo);
      }
      function invertBatch(nums, p = CURVE.P) {
        const scratch = new Array(nums.length);
        const lastMultiplied = nums.reduce((acc, num, i) => {
          if (num === _0n)
            return acc;
          scratch[i] = acc;
          return mod(acc * num, p);
        }, _1n);
        const inverted = invert(lastMultiplied, p);
        nums.reduceRight((acc, num, i) => {
          if (num === _0n)
            return acc;
          scratch[i] = mod(acc * scratch[i], p);
          return mod(acc * num, p);
        }, inverted);
        return scratch;
      }
      function bits2int_2(bytes) {
        const delta = bytes.length * 8 - groupLen * 8;
        const num = bytesToNumber(bytes);
        return delta > 0 ? num >> BigInt(delta) : num;
      }
      function truncateHash(hash, truncateOnly = false) {
        const h = bits2int_2(hash);
        if (truncateOnly)
          return h;
        const { n } = CURVE;
        return h >= n ? h - n : h;
      }
      var _sha256Sync;
      var _hmacSha256Sync;
      var HmacDrbg = class {
        constructor(hashLen2, qByteLen) {
          this.hashLen = hashLen2;
          this.qByteLen = qByteLen;
          if (typeof hashLen2 !== "number" || hashLen2 < 2)
            throw new Error("hashLen must be a number");
          if (typeof qByteLen !== "number" || qByteLen < 2)
            throw new Error("qByteLen must be a number");
          this.v = new Uint8Array(hashLen2).fill(1);
          this.k = new Uint8Array(hashLen2).fill(0);
          this.counter = 0;
        }
        hmac(...values) {
          return exports.utils.hmacSha256(this.k, ...values);
        }
        hmacSync(...values) {
          return _hmacSha256Sync(this.k, ...values);
        }
        checkSync() {
          if (typeof _hmacSha256Sync !== "function")
            throw new ShaError("hmacSha256Sync needs to be set");
        }
        incr() {
          if (this.counter >= 1e3)
            throw new Error("Tried 1,000 k values for sign(), all were invalid");
          this.counter += 1;
        }
        async reseed(seed = new Uint8Array()) {
          this.k = await this.hmac(this.v, Uint8Array.from([0]), seed);
          this.v = await this.hmac(this.v);
          if (seed.length === 0)
            return;
          this.k = await this.hmac(this.v, Uint8Array.from([1]), seed);
          this.v = await this.hmac(this.v);
        }
        reseedSync(seed = new Uint8Array()) {
          this.checkSync();
          this.k = this.hmacSync(this.v, Uint8Array.from([0]), seed);
          this.v = this.hmacSync(this.v);
          if (seed.length === 0)
            return;
          this.k = this.hmacSync(this.v, Uint8Array.from([1]), seed);
          this.v = this.hmacSync(this.v);
        }
        async generate() {
          this.incr();
          let len = 0;
          const out = [];
          while (len < this.qByteLen) {
            this.v = await this.hmac(this.v);
            const sl = this.v.slice();
            out.push(sl);
            len += this.v.length;
          }
          return concatBytes(...out);
        }
        generateSync() {
          this.checkSync();
          this.incr();
          let len = 0;
          const out = [];
          while (len < this.qByteLen) {
            this.v = this.hmacSync(this.v);
            const sl = this.v.slice();
            out.push(sl);
            len += this.v.length;
          }
          return concatBytes(...out);
        }
      };
      function isWithinCurveOrder(num) {
        return _0n < num && num < CURVE.n;
      }
      function isValidFieldElement(num) {
        return _0n < num && num < CURVE.P;
      }
      function kmdToSig(kBytes, m, d, lowS = true) {
        const { n } = CURVE;
        const k = truncateHash(kBytes, true);
        if (!isWithinCurveOrder(k))
          return;
        const kinv = invert(k, n);
        const q = Point.BASE.multiply(k);
        const r = mod(q.x, n);
        if (r === _0n)
          return;
        const s = mod(kinv * mod(m + d * r, n), n);
        if (s === _0n)
          return;
        let sig = new Signature(r, s);
        let recovery = (q.x === sig.r ? 0 : 2) | Number(q.y & _1n);
        if (lowS && sig.hasHighS()) {
          sig = sig.normalizeS();
          recovery ^= 1;
        }
        return { sig, recovery };
      }
      function normalizePrivateKey(key) {
        let num;
        if (typeof key === "bigint") {
          num = key;
        } else if (typeof key === "number" && Number.isSafeInteger(key) && key > 0) {
          num = BigInt(key);
        } else if (typeof key === "string") {
          if (key.length !== 2 * groupLen)
            throw new Error("Expected 32 bytes of private key");
          num = hexToNumber(key);
        } else if (key instanceof Uint8Array) {
          if (key.length !== groupLen)
            throw new Error("Expected 32 bytes of private key");
          num = bytesToNumber(key);
        } else {
          throw new TypeError("Expected valid private key");
        }
        if (!isWithinCurveOrder(num))
          throw new Error("Expected private key: 0 < key < n");
        return num;
      }
      function normalizePublicKey(publicKey) {
        if (publicKey instanceof Point) {
          publicKey.assertValidity();
          return publicKey;
        } else {
          return Point.fromHex(publicKey);
        }
      }
      function normalizeSignature(signature) {
        if (signature instanceof Signature) {
          signature.assertValidity();
          return signature;
        }
        try {
          return Signature.fromDER(signature);
        } catch (error) {
          return Signature.fromCompact(signature);
        }
      }
      function getPublicKey(privateKey, isCompressed = false) {
        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);
      }
      exports.getPublicKey = getPublicKey;
      function recoverPublicKey(msgHash, signature, recovery, isCompressed = false) {
        return Point.fromSignature(msgHash, signature, recovery).toRawBytes(isCompressed);
      }
      exports.recoverPublicKey = recoverPublicKey;
      function isProbPub(item) {
        const arr = item instanceof Uint8Array;
        const str = typeof item === "string";
        const len = (arr || str) && item.length;
        if (arr)
          return len === compressedLen || len === uncompressedLen;
        if (str)
          return len === compressedLen * 2 || len === uncompressedLen * 2;
        if (item instanceof Point)
          return true;
        return false;
      }
      function getSharedSecret(privateA, publicB, isCompressed = false) {
        if (isProbPub(privateA))
          throw new TypeError("getSharedSecret: first arg must be private key");
        if (!isProbPub(publicB))
          throw new TypeError("getSharedSecret: second arg must be public key");
        const b = normalizePublicKey(publicB);
        b.assertValidity();
        return b.multiply(normalizePrivateKey(privateA)).toRawBytes(isCompressed);
      }
      exports.getSharedSecret = getSharedSecret;
      function bits2int(bytes) {
        const slice = bytes.length > fieldLen ? bytes.slice(0, fieldLen) : bytes;
        return bytesToNumber(slice);
      }
      function bits2octets(bytes) {
        const z1 = bits2int(bytes);
        const z2 = mod(z1, CURVE.n);
        return int2octets(z2 < _0n ? z1 : z2);
      }
      function int2octets(num) {
        return numTo32b(num);
      }
      function initSigArgs(msgHash, privateKey, extraEntropy) {
        if (msgHash == null)
          throw new Error(`sign: expected valid message hash, not "${msgHash}"`);
        const h1 = ensureBytes(msgHash);
        const d = normalizePrivateKey(privateKey);
        const seedArgs = [int2octets(d), bits2octets(h1)];
        if (extraEntropy != null) {
          if (extraEntropy === true)
            extraEntropy = exports.utils.randomBytes(fieldLen);
          const e = ensureBytes(extraEntropy);
          if (e.length !== fieldLen)
            throw new Error(`sign: Expected ${fieldLen} bytes of extra data`);
          seedArgs.push(e);
        }
        const seed = concatBytes(...seedArgs);
        const m = bits2int(h1);
        return { seed, m, d };
      }
      function finalizeSig(recSig, opts) {
        const { sig, recovery } = recSig;
        const { der, recovered } = Object.assign({ canonical: true, der: true }, opts);
        const hashed = der ? sig.toDERRawBytes() : sig.toCompactRawBytes();
        return recovered ? [hashed, recovery] : hashed;
      }
      async function sign(msgHash, privKey, opts = {}) {
        const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);
        const drbg = new HmacDrbg(hashLen, groupLen);
        await drbg.reseed(seed);
        let sig;
        while (!(sig = kmdToSig(await drbg.generate(), m, d, opts.canonical)))
          await drbg.reseed();
        return finalizeSig(sig, opts);
      }
      exports.sign = sign;
      function signSync(msgHash, privKey, opts = {}) {
        const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);
        const drbg = new HmacDrbg(hashLen, groupLen);
        drbg.reseedSync(seed);
        let sig;
        while (!(sig = kmdToSig(drbg.generateSync(), m, d, opts.canonical)))
          drbg.reseedSync();
        return finalizeSig(sig, opts);
      }
      exports.signSync = signSync;
      var vopts = { strict: true };
      function verify(signature, msgHash, publicKey, opts = vopts) {
        let sig;
        try {
          sig = normalizeSignature(signature);
          msgHash = ensureBytes(msgHash);
        } catch (error) {
          return false;
        }
        const { r, s } = sig;
        if (opts.strict && sig.hasHighS())
          return false;
        const h = truncateHash(msgHash);
        let P;
        try {
          P = normalizePublicKey(publicKey);
        } catch (error) {
          return false;
        }
        const { n } = CURVE;
        const sinv = invert(s, n);
        const u1 = mod(h * sinv, n);
        const u2 = mod(r * sinv, n);
        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2);
        if (!R)
          return false;
        const v = mod(R.x, n);
        return v === r;
      }
      exports.verify = verify;
      function schnorrChallengeFinalize(ch) {
        return mod(bytesToNumber(ch), CURVE.n);
      }
      var SchnorrSignature = class _SchnorrSignature {
        constructor(r, s) {
          this.r = r;
          this.s = s;
          this.assertValidity();
        }
        static fromHex(hex) {
          const bytes = ensureBytes(hex);
          if (bytes.length !== 64)
            throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${bytes.length}`);
          const r = bytesToNumber(bytes.subarray(0, 32));
          const s = bytesToNumber(bytes.subarray(32, 64));
          return new _SchnorrSignature(r, s);
        }
        assertValidity() {
          const { r, s } = this;
          if (!isValidFieldElement(r) || !isWithinCurveOrder(s))
            throw new Error("Invalid signature");
        }
        toHex() {
          return numTo32bStr(this.r) + numTo32bStr(this.s);
        }
        toRawBytes() {
          return hexToBytes(this.toHex());
        }
      };
      function schnorrGetPublicKey(privateKey) {
        return Point.fromPrivateKey(privateKey).toRawX();
      }
      var InternalSchnorrSignature = class {
        constructor(message, privateKey, auxRand = exports.utils.randomBytes()) {
          if (message == null)
            throw new TypeError(`sign: Expected valid message, not "${message}"`);
          this.m = ensureBytes(message);
          const { x, scalar } = this.getScalar(normalizePrivateKey(privateKey));
          this.px = x;
          this.d = scalar;
          this.rand = ensureBytes(auxRand);
          if (this.rand.length !== 32)
            throw new TypeError("sign: Expected 32 bytes of aux randomness");
        }
        getScalar(priv) {
          const point = Point.fromPrivateKey(priv);
          const scalar = point.hasEvenY() ? priv : CURVE.n - priv;
          return { point, scalar, x: point.toRawX() };
        }
        initNonce(d, t0h) {
          return numTo32b(d ^ bytesToNumber(t0h));
        }
        finalizeNonce(k0h) {
          const k0 = mod(bytesToNumber(k0h), CURVE.n);
          if (k0 === _0n)
            throw new Error("sign: Creation of signature failed. k is zero");
          const { point: R, x: rx, scalar: k } = this.getScalar(k0);
          return { R, rx, k };
        }
        finalizeSig(R, k, e, d) {
          return new SchnorrSignature(R.x, mod(k + e * d, CURVE.n)).toRawBytes();
        }
        error() {
          throw new Error("sign: Invalid signature produced");
        }
        async calc() {
          const { m, d, px, rand } = this;
          const tag = exports.utils.taggedHash;
          const t = this.initNonce(d, await tag(TAGS.aux, rand));
          const { R, rx, k } = this.finalizeNonce(await tag(TAGS.nonce, t, px, m));
          const e = schnorrChallengeFinalize(await tag(TAGS.challenge, rx, px, m));
          const sig = this.finalizeSig(R, k, e, d);
          if (!await schnorrVerify(sig, m, px))
            this.error();
          return sig;
        }
        calcSync() {
          const { m, d, px, rand } = this;
          const tag = exports.utils.taggedHashSync;
          const t = this.initNonce(d, tag(TAGS.aux, rand));
          const { R, rx, k } = this.finalizeNonce(tag(TAGS.nonce, t, px, m));
          const e = schnorrChallengeFinalize(tag(TAGS.challenge, rx, px, m));
          const sig = this.finalizeSig(R, k, e, d);
          if (!schnorrVerifySync(sig, m, px))
            this.error();
          return sig;
        }
      };
      async function schnorrSign(msg, privKey, auxRand) {
        return new InternalSchnorrSignature(msg, privKey, auxRand).calc();
      }
      function schnorrSignSync(msg, privKey, auxRand) {
        return new InternalSchnorrSignature(msg, privKey, auxRand).calcSync();
      }
      function initSchnorrVerify(signature, message, publicKey) {
        const raw = signature instanceof SchnorrSignature;
        const sig = raw ? signature : SchnorrSignature.fromHex(signature);
        if (raw)
          sig.assertValidity();
        return {
          ...sig,
          m: ensureBytes(message),
          P: normalizePublicKey(publicKey)
        };
      }
      function finalizeSchnorrVerify(r, P, s, e) {
        const R = Point.BASE.multiplyAndAddUnsafe(P, normalizePrivateKey(s), mod(-e, CURVE.n));
        if (!R || !R.hasEvenY() || R.x !== r)
          return false;
        return true;
      }
      async function schnorrVerify(signature, message, publicKey) {
        try {
          const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);
          const e = schnorrChallengeFinalize(await exports.utils.taggedHash(TAGS.challenge, numTo32b(r), P.toRawX(), m));
          return finalizeSchnorrVerify(r, P, s, e);
        } catch (error) {
          return false;
        }
      }
      function schnorrVerifySync(signature, message, publicKey) {
        try {
          const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);
          const e = schnorrChallengeFinalize(exports.utils.taggedHashSync(TAGS.challenge, numTo32b(r), P.toRawX(), m));
          return finalizeSchnorrVerify(r, P, s, e);
        } catch (error) {
          if (error instanceof ShaError)
            throw error;
          return false;
        }
      }
      exports.schnorr = {
        Signature: SchnorrSignature,
        getPublicKey: schnorrGetPublicKey,
        sign: schnorrSign,
        verify: schnorrVerify,
        signSync: schnorrSignSync,
        verifySync: schnorrVerifySync
      };
      Point.BASE._setWindowSize(8);
      var crypto2 = {
        node: nodeCrypto,
        web: typeof self === "object" && "crypto" in self ? self.crypto : void 0
      };
      var TAGS = {
        challenge: "BIP0340/challenge",
        aux: "BIP0340/aux",
        nonce: "BIP0340/nonce"
      };
      var TAGGED_HASH_PREFIXES = {};
      exports.utils = {
        bytesToHex,
        hexToBytes,
        concatBytes,
        mod,
        invert,
        isValidPrivateKey(privateKey) {
          try {
            normalizePrivateKey(privateKey);
            return true;
          } catch (error) {
            return false;
          }
        },
        _bigintTo32Bytes: numTo32b,
        _normalizePrivateKey: normalizePrivateKey,
        hashToPrivateKey: (hash) => {
          hash = ensureBytes(hash);
          const minLen = groupLen + 8;
          if (hash.length < minLen || hash.length > 1024) {
            throw new Error(`Expected valid bytes of private key as per FIPS 186`);
          }
          const num = mod(bytesToNumber(hash), CURVE.n - _1n) + _1n;
          return numTo32b(num);
        },
        randomBytes: (bytesLength = 32) => {
          if (crypto2.web) {
            return crypto2.web.getRandomValues(new Uint8Array(bytesLength));
          } else if (crypto2.node) {
            const { randomBytes } = crypto2.node;
            return Uint8Array.from(randomBytes(bytesLength));
          } else {
            throw new Error("The environment doesn't have randomBytes function");
          }
        },
        randomPrivateKey: () => exports.utils.hashToPrivateKey(exports.utils.randomBytes(groupLen + 8)),
        precompute(windowSize = 8, point = Point.BASE) {
          const cached = point === Point.BASE ? point : new Point(point.x, point.y);
          cached._setWindowSize(windowSize);
          cached.multiply(_3n);
          return cached;
        },
        sha256: async (...messages) => {
          if (crypto2.web) {
            const buffer = await crypto2.web.subtle.digest("SHA-256", concatBytes(...messages));
            return new Uint8Array(buffer);
          } else if (crypto2.node) {
            const { createHash } = crypto2.node;
            const hash = createHash("sha256");
            messages.forEach((m) => hash.update(m));
            return Uint8Array.from(hash.digest());
          } else {
            throw new Error("The environment doesn't have sha256 function");
          }
        },
        hmacSha256: async (key, ...messages) => {
          if (crypto2.web) {
            const ckey = await crypto2.web.subtle.importKey("raw", key, { name: "HMAC", hash: { name: "SHA-256" } }, false, ["sign"]);
            const message = concatBytes(...messages);
            const buffer = await crypto2.web.subtle.sign("HMAC", ckey, message);
            return new Uint8Array(buffer);
          } else if (crypto2.node) {
            const { createHmac } = crypto2.node;
            const hash = createHmac("sha256", key);
            messages.forEach((m) => hash.update(m));
            return Uint8Array.from(hash.digest());
          } else {
            throw new Error("The environment doesn't have hmac-sha256 function");
          }
        },
        sha256Sync: void 0,
        hmacSha256Sync: void 0,
        taggedHash: async (tag, ...messages) => {
          let tagP = TAGGED_HASH_PREFIXES[tag];
          if (tagP === void 0) {
            const tagH = await exports.utils.sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));
            tagP = concatBytes(tagH, tagH);
            TAGGED_HASH_PREFIXES[tag] = tagP;
          }
          return exports.utils.sha256(tagP, ...messages);
        },
        taggedHashSync: (tag, ...messages) => {
          if (typeof _sha256Sync !== "function")
            throw new ShaError("sha256Sync is undefined, you need to set it");
          let tagP = TAGGED_HASH_PREFIXES[tag];
          if (tagP === void 0) {
            const tagH = _sha256Sync(Uint8Array.from(tag, (c) => c.charCodeAt(0)));
            tagP = concatBytes(tagH, tagH);
            TAGGED_HASH_PREFIXES[tag] = tagP;
          }
          return _sha256Sync(tagP, ...messages);
        },
        _JacobianPoint: JacobianPoint
      };
      Object.defineProperties(exports.utils, {
        sha256Sync: {
          configurable: false,
          get() {
            return _sha256Sync;
          },
          set(val) {
            if (!_sha256Sync)
              _sha256Sync = val;
          }
        },
        hmacSha256Sync: {
          configurable: false,
          get() {
            return _hmacSha256Sync;
          },
          set(val) {
            if (!_hmacSha256Sync)
              _hmacSha256Sync = val;
          }
        }
      });
    }
  });

  // node_modules/@noble/hashes/_assert.js
  var require_assert = __commonJS({
    "node_modules/@noble/hashes/_assert.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.output = exports.exists = exports.hash = exports.bytes = exports.bool = exports.number = void 0;
      function number(n) {
        if (!Number.isSafeInteger(n) || n < 0)
          throw new Error(`Wrong positive integer: ${n}`);
      }
      exports.number = number;
      function bool(b) {
        if (typeof b !== "boolean")
          throw new Error(`Expected boolean, not ${b}`);
      }
      exports.bool = bool;
      function isBytes(a) {
        return a instanceof Uint8Array || a != null && typeof a === "object" && a.constructor.name === "Uint8Array";
      }
      function bytes(b, ...lengths) {
        if (!isBytes(b))
          throw new Error("Expected Uint8Array");
        if (lengths.length > 0 && !lengths.includes(b.length))
          throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);
      }
      exports.bytes = bytes;
      function hash(hash2) {
        if (typeof hash2 !== "function" || typeof hash2.create !== "function")
          throw new Error("Hash should be wrapped by utils.wrapConstructor");
        number(hash2.outputLen);
        number(hash2.blockLen);
      }
      exports.hash = hash;
      function exists(instance, checkFinished = true) {
        if (instance.destroyed)
          throw new Error("Hash instance has been destroyed");
        if (checkFinished && instance.finished)
          throw new Error("Hash#digest() has already been called");
      }
      exports.exists = exists;
      function output(out, instance) {
        bytes(out);
        const min = instance.outputLen;
        if (out.length < min) {
          throw new Error(`digestInto() expects output buffer of length at least ${min}`);
        }
      }
      exports.output = output;
      var assert = { number, bool, bytes, hash, exists, output };
      exports.default = assert;
    }
  });

  // node_modules/@noble/hashes/crypto.js
  var require_crypto2 = __commonJS({
    "node_modules/@noble/hashes/crypto.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.crypto = void 0;
      exports.crypto = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
    }
  });

  // node_modules/@noble/hashes/utils.js
  var require_utils = __commonJS({
    "node_modules/@noble/hashes/utils.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.randomBytes = exports.wrapXOFConstructorWithOpts = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.checkOpts = exports.Hash = exports.concatBytes = exports.toBytes = exports.utf8ToBytes = exports.asyncLoop = exports.nextTick = exports.hexToBytes = exports.bytesToHex = exports.isLE = exports.rotr = exports.createView = exports.u32 = exports.u8 = void 0;
      var crypto_1 = require_crypto2();
      var u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
      exports.u8 = u8;
      var u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
      exports.u32 = u32;
      function isBytes(a) {
        return a instanceof Uint8Array || a != null && typeof a === "object" && a.constructor.name === "Uint8Array";
      }
      var createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
      exports.createView = createView;
      var rotr = (word, shift) => word << 32 - shift | word >>> shift;
      exports.rotr = rotr;
      exports.isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
      if (!exports.isLE)
        throw new Error("Non little-endian hardware is not supported");
      var hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
      function bytesToHex(bytes) {
        if (!isBytes(bytes))
          throw new Error("Uint8Array expected");
        let hex = "";
        for (let i = 0; i < bytes.length; i++) {
          hex += hexes[bytes[i]];
        }
        return hex;
      }
      exports.bytesToHex = bytesToHex;
      var asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };
      function asciiToBase16(char) {
        if (char >= asciis._0 && char <= asciis._9)
          return char - asciis._0;
        if (char >= asciis._A && char <= asciis._F)
          return char - (asciis._A - 10);
        if (char >= asciis._a && char <= asciis._f)
          return char - (asciis._a - 10);
        return;
      }
      function hexToBytes(hex) {
        if (typeof hex !== "string")
          throw new Error("hex string expected, got " + typeof hex);
        const hl = hex.length;
        const al = hl / 2;
        if (hl % 2)
          throw new Error("padded hex string expected, got unpadded hex of length " + hl);
        const array = new Uint8Array(al);
        for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
          const n1 = asciiToBase16(hex.charCodeAt(hi));
          const n2 = asciiToBase16(hex.charCodeAt(hi + 1));
          if (n1 === void 0 || n2 === void 0) {
            const char = hex[hi] + hex[hi + 1];
            throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
          }
          array[ai] = n1 * 16 + n2;
        }
        return array;
      }
      exports.hexToBytes = hexToBytes;
      var nextTick = async () => {
      };
      exports.nextTick = nextTick;
      async function asyncLoop(iters, tick, cb) {
        let ts = Date.now();
        for (let i = 0; i < iters; i++) {
          cb(i);
          const diff = Date.now() - ts;
          if (diff >= 0 && diff < tick)
            continue;
          await (0, exports.nextTick)();
          ts += diff;
        }
      }
      exports.asyncLoop = asyncLoop;
      function utf8ToBytes(str) {
        if (typeof str !== "string")
          throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
        return new Uint8Array(new TextEncoder().encode(str));
      }
      exports.utf8ToBytes = utf8ToBytes;
      function toBytes(data) {
        if (typeof data === "string")
          data = utf8ToBytes(data);
        if (!isBytes(data))
          throw new Error(`expected Uint8Array, got ${typeof data}`);
        return data;
      }
      exports.toBytes = toBytes;
      function concatBytes(...arrays) {
        let sum = 0;
        for (let i = 0; i < arrays.length; i++) {
          const a = arrays[i];
          if (!isBytes(a))
            throw new Error("Uint8Array expected");
          sum += a.length;
        }
        const res = new Uint8Array(sum);
        for (let i = 0, pad = 0; i < arrays.length; i++) {
          const a = arrays[i];
          res.set(a, pad);
          pad += a.length;
        }
        return res;
      }
      exports.concatBytes = concatBytes;
      var Hash = class {
        // Safe version that clones internal state
        clone() {
          return this._cloneInto();
        }
      };
      exports.Hash = Hash;
      var toStr = {}.toString;
      function checkOpts(defaults, opts) {
        if (opts !== void 0 && toStr.call(opts) !== "[object Object]")
          throw new Error("Options should be object or undefined");
        const merged = Object.assign(defaults, opts);
        return merged;
      }
      exports.checkOpts = checkOpts;
      function wrapConstructor(hashCons) {
        const hashC = (msg) => hashCons().update(toBytes(msg)).digest();
        const tmp = hashCons();
        hashC.outputLen = tmp.outputLen;
        hashC.blockLen = tmp.blockLen;
        hashC.create = () => hashCons();
        return hashC;
      }
      exports.wrapConstructor = wrapConstructor;
      function wrapConstructorWithOpts(hashCons) {
        const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
        const tmp = hashCons({});
        hashC.outputLen = tmp.outputLen;
        hashC.blockLen = tmp.blockLen;
        hashC.create = (opts) => hashCons(opts);
        return hashC;
      }
      exports.wrapConstructorWithOpts = wrapConstructorWithOpts;
      function wrapXOFConstructorWithOpts(hashCons) {
        const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
        const tmp = hashCons({});
        hashC.outputLen = tmp.outputLen;
        hashC.blockLen = tmp.blockLen;
        hashC.create = (opts) => hashCons(opts);
        return hashC;
      }
      exports.wrapXOFConstructorWithOpts = wrapXOFConstructorWithOpts;
      function randomBytes(bytesLength = 32) {
        if (crypto_1.crypto && typeof crypto_1.crypto.getRandomValues === "function") {
          return crypto_1.crypto.getRandomValues(new Uint8Array(bytesLength));
        }
        throw new Error("crypto.getRandomValues must be defined");
      }
      exports.randomBytes = randomBytes;
    }
  });

  // node_modules/@noble/hashes/hmac.js
  var require_hmac = __commonJS({
    "node_modules/@noble/hashes/hmac.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.hmac = exports.HMAC = void 0;
      var _assert_js_1 = require_assert();
      var utils_js_1 = require_utils();
      var HMAC = class extends utils_js_1.Hash {
        constructor(hash, _key) {
          super();
          this.finished = false;
          this.destroyed = false;
          (0, _assert_js_1.hash)(hash);
          const key = (0, utils_js_1.toBytes)(_key);
          this.iHash = hash.create();
          if (typeof this.iHash.update !== "function")
            throw new Error("Expected instance of class which extends utils.Hash");
          this.blockLen = this.iHash.blockLen;
          this.outputLen = this.iHash.outputLen;
          const blockLen = this.blockLen;
          const pad = new Uint8Array(blockLen);
          pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);
          for (let i = 0; i < pad.length; i++)
            pad[i] ^= 54;
          this.iHash.update(pad);
          this.oHash = hash.create();
          for (let i = 0; i < pad.length; i++)
            pad[i] ^= 54 ^ 92;
          this.oHash.update(pad);
          pad.fill(0);
        }
        update(buf) {
          (0, _assert_js_1.exists)(this);
          this.iHash.update(buf);
          return this;
        }
        digestInto(out) {
          (0, _assert_js_1.exists)(this);
          (0, _assert_js_1.bytes)(out, this.outputLen);
          this.finished = true;
          this.iHash.digestInto(out);
          this.oHash.update(out);
          this.oHash.digestInto(out);
          this.destroy();
        }
        digest() {
          const out = new Uint8Array(this.oHash.outputLen);
          this.digestInto(out);
          return out;
        }
        _cloneInto(to) {
          to || (to = Object.create(Object.getPrototypeOf(this), {}));
          const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
          to = to;
          to.finished = finished;
          to.destroyed = destroyed;
          to.blockLen = blockLen;
          to.outputLen = outputLen;
          to.oHash = oHash._cloneInto(to.oHash);
          to.iHash = iHash._cloneInto(to.iHash);
          return to;
        }
        destroy() {
          this.destroyed = true;
          this.oHash.destroy();
          this.iHash.destroy();
        }
      };
      exports.HMAC = HMAC;
      var hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();
      exports.hmac = hmac;
      exports.hmac.create = (hash, key) => new HMAC(hash, key);
    }
  });

  // node_modules/@noble/hashes/_sha2.js
  var require_sha22 = __commonJS({
    "node_modules/@noble/hashes/_sha2.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SHA2 = void 0;
      var _assert_js_1 = require_assert();
      var utils_js_1 = require_utils();
      function setBigUint64(view, byteOffset, value, isLE) {
        if (typeof view.setBigUint64 === "function")
          return view.setBigUint64(byteOffset, value, isLE);
        const _32n = BigInt(32);
        const _u32_max = BigInt(4294967295);
        const wh = Number(value >> _32n & _u32_max);
        const wl = Number(value & _u32_max);
        const h = isLE ? 4 : 0;
        const l = isLE ? 0 : 4;
        view.setUint32(byteOffset + h, wh, isLE);
        view.setUint32(byteOffset + l, wl, isLE);
      }
      var SHA2 = class extends utils_js_1.Hash {
        constructor(blockLen, outputLen, padOffset, isLE) {
          super();
          this.blockLen = blockLen;
          this.outputLen = outputLen;
          this.padOffset = padOffset;
          this.isLE = isLE;
          this.finished = false;
          this.length = 0;
          this.pos = 0;
          this.destroyed = false;
          this.buffer = new Uint8Array(blockLen);
          this.view = (0, utils_js_1.createView)(this.buffer);
        }
        update(data) {
          (0, _assert_js_1.exists)(this);
          const { view, buffer, blockLen } = this;
          data = (0, utils_js_1.toBytes)(data);
          const len = data.length;
          for (let pos = 0; pos < len; ) {
            const take = Math.min(blockLen - this.pos, len - pos);
            if (take === blockLen) {
              const dataView = (0, utils_js_1.createView)(data);
              for (; blockLen <= len - pos; pos += blockLen)
                this.process(dataView, pos);
              continue;
            }
            buffer.set(data.subarray(pos, pos + take), this.pos);
            this.pos += take;
            pos += take;
            if (this.pos === blockLen) {
              this.process(view, 0);
              this.pos = 0;
            }
          }
          this.length += data.length;
          this.roundClean();
          return this;
        }
        digestInto(out) {
          (0, _assert_js_1.exists)(this);
          (0, _assert_js_1.output)(out, this);
          this.finished = true;
          const { buffer, view, blockLen, isLE } = this;
          let { pos } = this;
          buffer[pos++] = 128;
          this.buffer.subarray(pos).fill(0);
          if (this.padOffset > blockLen - pos) {
            this.process(view, 0);
            pos = 0;
          }
          for (let i = pos; i < blockLen; i++)
            buffer[i] = 0;
          setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);
          this.process(view, 0);
          const oview = (0, utils_js_1.createView)(out);
          const len = this.outputLen;
          if (len % 4)
            throw new Error("_sha2: outputLen should be aligned to 32bit");
          const outLen = len / 4;
          const state = this.get();
          if (outLen > state.length)
            throw new Error("_sha2: outputLen bigger than state");
          for (let i = 0; i < outLen; i++)
            oview.setUint32(4 * i, state[i], isLE);
        }
        digest() {
          const { buffer, outputLen } = this;
          this.digestInto(buffer);
          const res = buffer.slice(0, outputLen);
          this.destroy();
          return res;
        }
        _cloneInto(to) {
          to || (to = new this.constructor());
          to.set(...this.get());
          const { blockLen, buffer, length, finished, destroyed, pos } = this;
          to.length = length;
          to.pos = pos;
          to.finished = finished;
          to.destroyed = destroyed;
          if (length % blockLen)
            to.buffer.set(buffer);
          return to;
        }
      };
      exports.SHA2 = SHA2;
    }
  });

  // node_modules/@noble/hashes/sha256.js
  var require_sha2562 = __commonJS({
    "node_modules/@noble/hashes/sha256.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.sha224 = exports.sha256 = void 0;
      var _sha2_js_1 = require_sha22();
      var utils_js_1 = require_utils();
      var Chi = (a, b, c) => a & b ^ ~a & c;
      var Maj = (a, b, c) => a & b ^ a & c ^ b & c;
      var SHA256_K = /* @__PURE__ */ new Uint32Array([
        1116352408,
        1899447441,
        3049323471,
        3921009573,
        961987163,
        1508970993,
        2453635748,
        2870763221,
        3624381080,
        310598401,
        607225278,
        1426881987,
        1925078388,
        2162078206,
        2614888103,
        3248222580,
        3835390401,
        4022224774,
        264347078,
        604807628,
        770255983,
        1249150122,
        1555081692,
        1996064986,
        2554220882,
        2821834349,
        2952996808,
        3210313671,
        3336571891,
        3584528711,
        113926993,
        338241895,
        666307205,
        773529912,
        1294757372,
        1396182291,
        1695183700,
        1986661051,
        2177026350,
        2456956037,
        2730485921,
        2820302411,
        3259730800,
        3345764771,
        3516065817,
        3600352804,
        4094571909,
        275423344,
        430227734,
        506948616,
        659060556,
        883997877,
        958139571,
        1322822218,
        1537002063,
        1747873779,
        1955562222,
        2024104815,
        2227730452,
        2361852424,
        2428436474,
        2756734187,
        3204031479,
        3329325298
      ]);
      var IV = /* @__PURE__ */ new Uint32Array([
        1779033703,
        3144134277,
        1013904242,
        2773480762,
        1359893119,
        2600822924,
        528734635,
        1541459225
      ]);
      var SHA256_W = /* @__PURE__ */ new Uint32Array(64);
      var SHA256 = class extends _sha2_js_1.SHA2 {
        constructor() {
          super(64, 32, 8, false);
          this.A = IV[0] | 0;
          this.B = IV[1] | 0;
          this.C = IV[2] | 0;
          this.D = IV[3] | 0;
          this.E = IV[4] | 0;
          this.F = IV[5] | 0;
          this.G = IV[6] | 0;
          this.H = IV[7] | 0;
        }
        get() {
          const { A, B, C, D, E, F, G, H } = this;
          return [A, B, C, D, E, F, G, H];
        }
        // prettier-ignore
        set(A, B, C, D, E, F, G, H) {
          this.A = A | 0;
          this.B = B | 0;
          this.C = C | 0;
          this.D = D | 0;
          this.E = E | 0;
          this.F = F | 0;
          this.G = G | 0;
          this.H = H | 0;
        }
        process(view, offset) {
          for (let i = 0; i < 16; i++, offset += 4)
            SHA256_W[i] = view.getUint32(offset, false);
          for (let i = 16; i < 64; i++) {
            const W15 = SHA256_W[i - 15];
            const W2 = SHA256_W[i - 2];
            const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ W15 >>> 3;
            const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ W2 >>> 10;
            SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;
          }
          let { A, B, C, D, E, F, G, H } = this;
          for (let i = 0; i < 64; i++) {
            const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);
            const T1 = H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i] | 0;
            const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);
            const T2 = sigma0 + Maj(A, B, C) | 0;
            H = G;
            G = F;
            F = E;
            E = D + T1 | 0;
            D = C;
            C = B;
            B = A;
            A = T1 + T2 | 0;
          }
          A = A + this.A | 0;
          B = B + this.B | 0;
          C = C + this.C | 0;
          D = D + this.D | 0;
          E = E + this.E | 0;
          F = F + this.F | 0;
          G = G + this.G | 0;
          H = H + this.H | 0;
          this.set(A, B, C, D, E, F, G, H);
        }
        roundClean() {
          SHA256_W.fill(0);
        }
        destroy() {
          this.set(0, 0, 0, 0, 0, 0, 0, 0);
          this.buffer.fill(0);
        }
      };
      var SHA224 = class extends SHA256 {
        constructor() {
          super();
          this.A = 3238371032 | 0;
          this.B = 914150663 | 0;
          this.C = 812702999 | 0;
          this.D = 4144912697 | 0;
          this.E = 4290775857 | 0;
          this.F = 1750603025 | 0;
          this.G = 1694076839 | 0;
          this.H = 3204075428 | 0;
          this.outputLen = 28;
        }
      };
      exports.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA256());
      exports.sha224 = (0, utils_js_1.wrapConstructor)(() => new SHA224());
    }
  });

  // node_modules/@bitcoinerlab/secp256k1/dist/index.js
  var require_dist = __commonJS({
    "node_modules/@bitcoinerlab/secp256k1/dist/index.js"(exports) {
      "use strict";
      var necc = require_lib();
      var hmac = require_hmac();
      var sha256 = require_sha2562();
      function _interopNamespaceDefault(e) {
        var n = /* @__PURE__ */ Object.create(null);
        if (e) {
          Object.keys(e).forEach(function(k) {
            if (k !== "default") {
              var d = Object.getOwnPropertyDescriptor(e, k);
              Object.defineProperty(n, k, d.get ? d : {
                enumerable: true,
                get: function() {
                  return e[k];
                }
              });
            }
          });
        }
        n.default = e;
        return Object.freeze(n);
      }
      var necc__namespace = /* @__PURE__ */ _interopNamespaceDefault(necc);
      var THROW_BAD_PRIVATE = "Expected Private";
      var THROW_BAD_POINT = "Expected Point";
      var THROW_BAD_TWEAK = "Expected Tweak";
      var THROW_BAD_HASH = "Expected Hash";
      var THROW_BAD_SIGNATURE = "Expected Signature";
      var THROW_BAD_EXTRA_DATA = "Expected Extra Data (32 bytes)";
      var THROW_BAD_SCALAR = "Expected Scalar";
      var THROW_BAD_RECOVERY_ID = "Bad Recovery Id";
      necc__namespace.utils.hmacSha256Sync = (key, ...msgs) => hmac.hmac(sha256.sha256, key, necc__namespace.utils.concatBytes(...msgs));
      necc__namespace.utils.sha256Sync = (...msgs) => sha256.sha256(necc__namespace.utils.concatBytes(...msgs));
      var normalizePrivateKey = necc__namespace.utils._normalizePrivateKey;
      var HASH_SIZE = 32;
      var TWEAK_SIZE = 32;
      var BN32_N = new Uint8Array([
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        254,
        186,
        174,
        220,
        230,
        175,
        72,
        160,
        59,
        191,
        210,
        94,
        140,
        208,
        54,
        65,
        65
      ]);
      var EXTRA_DATA_SIZE = 32;
      var BN32_ZERO = new Uint8Array(32);
      var BN32_P_MINUS_N = new Uint8Array([
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        69,
        81,
        35,
        25,
        80,
        183,
        95,
        196,
        64,
        45,
        161,
        114,
        47,
        201,
        186,
        238
      ]);
      function isUint8Array(value) {
        return value instanceof Uint8Array;
      }
      function cmpBN32(data1, data2) {
        for (let i = 0; i < 32; ++i) {
          if (data1[i] !== data2[i]) {
            return data1[i] < data2[i] ? -1 : 1;
          }
        }
        return 0;
      }
      function isZero(x) {
        return cmpBN32(x, BN32_ZERO) === 0;
      }
      function isTweak(tweak) {
        if (!(tweak instanceof Uint8Array) || tweak.length !== TWEAK_SIZE || cmpBN32(tweak, BN32_N) >= 0) {
          return false;
        }
        return true;
      }
      function isSignature(signature) {
        return signature instanceof Uint8Array && signature.length === 64 && cmpBN32(signature.subarray(0, 32), BN32_N) < 0 && cmpBN32(signature.subarray(32, 64), BN32_N) < 0;
      }
      function isSigrLessThanPMinusN(signature) {
        return isUint8Array(signature) && signature.length === 64 && cmpBN32(signature.subarray(0, 32), BN32_P_MINUS_N) < 0;
      }
      function isSignatureNonzeroRS(signature) {
        return !(isZero(signature.subarray(0, 32)) || isZero(signature.subarray(32, 64)));
      }
      function isHash(h) {
        return h instanceof Uint8Array && h.length === HASH_SIZE;
      }
      function isExtraData(e) {
        return e === void 0 || e instanceof Uint8Array && e.length === EXTRA_DATA_SIZE;
      }
      function hexToNumber(hex) {
        if (typeof hex !== "string") {
          throw new TypeError("hexToNumber: expected string, got " + typeof hex);
        }
        return BigInt(`0x${hex}`);
      }
      function bytesToNumber(bytes) {
        return hexToNumber(necc__namespace.utils.bytesToHex(bytes));
      }
      function normalizeScalar(scalar) {
        let num;
        if (typeof scalar === "bigint") {
          num = scalar;
        } else if (typeof scalar === "number" && Number.isSafeInteger(scalar) && scalar >= 0) {
          num = BigInt(scalar);
        } else if (typeof scalar === "string") {
          if (scalar.length !== 64)
            throw new Error("Expected 32 bytes of private scalar");
          num = hexToNumber(scalar);
        } else if (scalar instanceof Uint8Array) {
          if (scalar.length !== 32)
            throw new Error("Expected 32 bytes of private scalar");
          num = bytesToNumber(scalar);
        } else {
          throw new TypeError("Expected valid private scalar");
        }
        if (num < 0)
          throw new Error("Expected private scalar >= 0");
        return num;
      }
      var _privateAdd = (privateKey, tweak) => {
        const p = normalizePrivateKey(privateKey);
        const t = normalizeScalar(tweak);
        const add = necc__namespace.utils._bigintTo32Bytes(necc__namespace.utils.mod(p + t, necc__namespace.CURVE.n));
        if (necc__namespace.utils.isValidPrivateKey(add))
          return add;
        else
          return null;
      };
      var _privateSub = (privateKey, tweak) => {
        const p = normalizePrivateKey(privateKey);
        const t = normalizeScalar(tweak);
        const sub = necc__namespace.utils._bigintTo32Bytes(necc__namespace.utils.mod(p - t, necc__namespace.CURVE.n));
        if (necc__namespace.utils.isValidPrivateKey(sub))
          return sub;
        else
          return null;
      };
      var _privateNegate = (privateKey) => {
        const p = normalizePrivateKey(privateKey);
        const not = necc__namespace.utils._bigintTo32Bytes(necc__namespace.CURVE.n - p);
        if (necc__namespace.utils.isValidPrivateKey(not))
          return not;
        else
          return null;
      };
      var _pointAddScalar = (p, tweak, isCompressed) => {
        const P = necc__namespace.Point.fromHex(p);
        const t = normalizeScalar(tweak);
        const Q = necc__namespace.Point.BASE.multiplyAndAddUnsafe(P, t, BigInt(1));
        if (!Q)
          throw new Error("Tweaked point at infinity");
        return Q.toRawBytes(isCompressed);
      };
      var _pointMultiply = (p, tweak, isCompressed) => {
        const P = necc__namespace.Point.fromHex(p);
        const h = typeof tweak === "string" ? tweak : necc__namespace.utils.bytesToHex(tweak);
        const t = BigInt(`0x${h}`);
        return P.multiply(t).toRawBytes(isCompressed);
      };
      function assumeCompression(compressed, p) {
        if (compressed === void 0) {
          return p !== void 0 ? isPointCompressed(p) : true;
        }
        return compressed ? true : false;
      }
      function throwToNull(fn) {
        try {
          return fn();
        } catch (e) {
          return null;
        }
      }
      function _isPoint(p, xOnly) {
        if (p.length === 32 !== xOnly)
          return false;
        try {
          return !!necc__namespace.Point.fromHex(p);
        } catch (e) {
          return false;
        }
      }
      function isPoint(p) {
        return _isPoint(p, false);
      }
      function isPointCompressed(p) {
        const PUBLIC_KEY_COMPRESSED_SIZE = 33;
        return _isPoint(p, false) && p.length === PUBLIC_KEY_COMPRESSED_SIZE;
      }
      function isPrivate(d) {
        return necc__namespace.utils.isValidPrivateKey(d);
      }
      function isXOnlyPoint(p) {
        return _isPoint(p, true);
      }
      function xOnlyPointAddTweak(p, tweak) {
        if (!isXOnlyPoint(p)) {
          throw new Error(THROW_BAD_POINT);
        }
        if (!isTweak(tweak)) {
          throw new Error(THROW_BAD_TWEAK);
        }
        return throwToNull(() => {
          const P = _pointAddScalar(p, tweak, true);
          const parity = P[0] % 2 === 1 ? 1 : 0;
          return { parity, xOnlyPubkey: P.slice(1) };
        });
      }
      function xOnlyPointFromPoint(p) {
        if (!isPoint(p)) {
          throw new Error(THROW_BAD_POINT);
        }
        return p.slice(1, 33);
      }
      function pointFromScalar(sk, compressed) {
        if (!isPrivate(sk)) {
          throw new Error(THROW_BAD_PRIVATE);
        }
        return throwToNull(
          () => necc__namespace.getPublicKey(sk, assumeCompression(compressed))
        );
      }
      function xOnlyPointFromScalar(d) {
        if (!isPrivate(d)) {
          throw new Error(THROW_BAD_PRIVATE);
        }
        return xOnlyPointFromPoint(pointFromScalar(d));
      }
      function pointCompress(p, compressed) {
        if (!isPoint(p)) {
          throw new Error(THROW_BAD_POINT);
        }
        return necc__namespace.Point.fromHex(p).toRawBytes(assumeCompression(compressed, p));
      }
      function pointMultiply(a, tweak, compressed) {
        if (!isPoint(a)) {
          throw new Error(THROW_BAD_POINT);
        }
        if (!isTweak(tweak)) {
          throw new Error(THROW_BAD_TWEAK);
        }
        return throwToNull(
          () => _pointMultiply(a, tweak, assumeCompression(compressed, a))
        );
      }
      function pointAdd(a, b, compressed) {
        if (!isPoint(a) || !isPoint(b)) {
          throw new Error(THROW_BAD_POINT);
        }
        return throwToNull(() => {
          const A = necc__namespace.Point.fromHex(a);
          const B = necc__namespace.Point.fromHex(b);
          if (A.equals(B.negate())) {
            return null;
          } else {
            return A.add(B).toRawBytes(assumeCompression(compressed, a));
          }
        });
      }
      function pointAddScalar(p, tweak, compressed) {
        if (!isPoint(p)) {
          throw new Error(THROW_BAD_POINT);
        }
        if (!isTweak(tweak)) {
          throw new Error(THROW_BAD_TWEAK);
        }
        return throwToNull(
          () => _pointAddScalar(p, tweak, assumeCompression(compressed, p))
        );
      }
      function privateAdd(d, tweak) {
        if (isPrivate(d) === false) {
          throw new Error(THROW_BAD_PRIVATE);
        }
        if (isTweak(tweak) === false) {
          throw new Error(THROW_BAD_TWEAK);
        }
        return throwToNull(() => _privateAdd(d, tweak));
      }
      function privateSub(d, tweak) {
        if (isPrivate(d) === false) {
          throw new Error(THROW_BAD_PRIVATE);
        }
        if (isTweak(tweak) === false) {
          throw new Error(THROW_BAD_TWEAK);
        }
        return throwToNull(() => _privateSub(d, tweak));
      }
      function privateNegate(d) {
        if (isPrivate(d) === false) {
          throw new Error(THROW_BAD_PRIVATE);
        }
        return _privateNegate(d);
      }
      function sign(h, d, e) {
        if (!isPrivate(d)) {
          throw new Error(THROW_BAD_PRIVATE);
        }
        if (!isHash(h)) {
          throw new Error(THROW_BAD_SCALAR);
        }
        if (!isExtraData(e)) {
          throw new Error(THROW_BAD_EXTRA_DATA);
        }
        return necc__namespace.signSync(h, d, { der: false, extraEntropy: e });
      }
      function signRecoverable(h, d, e) {
        if (!isPrivate(d)) {
          throw new Error(THROW_BAD_PRIVATE);
        }
        if (!isHash(h)) {
          throw new Error(THROW_BAD_SCALAR);
        }
        if (!isExtraData(e)) {
          throw new Error(THROW_BAD_EXTRA_DATA);
        }
        const [signature, recoveryId] = necc__namespace.signSync(h, d, { der: false, extraEntropy: e, recovered: true });
        return { signature, recoveryId };
      }
      function signSchnorr(h, d, e = Buffer.alloc(32, 0)) {
        if (!isPrivate(d)) {
          throw new Error(THROW_BAD_PRIVATE);
        }
        if (!isHash(h)) {
          throw new Error(THROW_BAD_SCALAR);
        }
        if (!isExtraData(e)) {
          throw new Error(THROW_BAD_EXTRA_DATA);
        }
        return necc__namespace.schnorr.signSync(h, d, e);
      }
      function recover(h, signature, recoveryId, compressed) {
        if (!isHash(h)) {
          throw new Error(THROW_BAD_HASH);
        }
        if (!isSignature(signature) || !isSignatureNonzeroRS(signature)) {
          throw new Error(THROW_BAD_SIGNATURE);
        }
        if (recoveryId & 2) {
          if (!isSigrLessThanPMinusN(signature))
            throw new Error(THROW_BAD_RECOVERY_ID);
        }
        if (!isXOnlyPoint(signature.subarray(0, 32))) {
          throw new Error(THROW_BAD_SIGNATURE);
        }
        return necc__namespace.recoverPublicKey(h, signature, recoveryId, assumeCompression(compressed));
      }
      function verify(h, Q, signature, strict) {
        if (!isPoint(Q)) {
          throw new Error(THROW_BAD_POINT);
        }
        if (!isSignature(signature)) {
          throw new Error(THROW_BAD_SIGNATURE);
        }
        if (!isHash(h)) {
          throw new Error(THROW_BAD_SCALAR);
        }
        return necc__namespace.verify(signature, h, Q, { strict });
      }
      function verifySchnorr(h, Q, signature) {
        if (!isXOnlyPoint(Q)) {
          throw new Error(THROW_BAD_POINT);
        }
        if (!isSignature(signature)) {
          throw new Error(THROW_BAD_SIGNATURE);
        }
        if (!isHash(h)) {
          throw new Error(THROW_BAD_SCALAR);
        }
        return necc__namespace.schnorr.verifySync(signature, h, Q);
      }
      exports.isPoint = isPoint;
      exports.isPointCompressed = isPointCompressed;
      exports.isPrivate = isPrivate;
      exports.isXOnlyPoint = isXOnlyPoint;
      exports.pointAdd = pointAdd;
      exports.pointAddScalar = pointAddScalar;
      exports.pointCompress = pointCompress;
      exports.pointFromScalar = pointFromScalar;
      exports.pointMultiply = pointMultiply;
      exports.privateAdd = privateAdd;
      exports.privateNegate = privateNegate;
      exports.privateSub = privateSub;
      exports.recover = recover;
      exports.sign = sign;
      exports.signRecoverable = signRecoverable;
      exports.signSchnorr = signSchnorr;
      exports.verify = verify;
      exports.verifySchnorr = verifySchnorr;
      exports.xOnlyPointAddTweak = xOnlyPointAddTweak;
      exports.xOnlyPointFromPoint = xOnlyPointFromPoint;
      exports.xOnlyPointFromScalar = xOnlyPointFromScalar;
    }
  });

  // node_modules/bitcoinjs-lib/src/networks.js
  var require_networks2 = __commonJS({
    "node_modules/bitcoinjs-lib/src/networks.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.testnet = exports.regtest = exports.bitcoin = void 0;
      exports.bitcoin = {
        messagePrefix: "Bitcoin Signed Message:\n",
        bech32: "bc",
        bip32: {
          public: 76067358,
          private: 76066276
        },
        pubKeyHash: 0,
        scriptHash: 5,
        wif: 128
      };
      exports.regtest = {
        messagePrefix: "Bitcoin Signed Message:\n",
        bech32: "bcrt",
        bip32: {
          public: 70617039,
          private: 70615956
        },
        pubKeyHash: 111,
        scriptHash: 196,
        wif: 239
      };
      exports.testnet = {
        messagePrefix: "Bitcoin Signed Message:\n",
        bech32: "tb",
        bip32: {
          public: 70617039,
          private: 70615956
        },
        pubKeyHash: 111,
        scriptHash: 196,
        wif: 239
      };
    }
  });

  // node_modules/bitcoinjs-lib/src/bip66.js
  var require_bip66 = __commonJS({
    "node_modules/bitcoinjs-lib/src/bip66.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.encode = exports.decode = exports.check = void 0;
      function check(buffer) {
        if (buffer.length < 8)
          return false;
        if (buffer.length > 72)
          return false;
        if (buffer[0] !== 48)
          return false;
        if (buffer[1] !== buffer.length - 2)
          return false;
        if (buffer[2] !== 2)
          return false;
        const lenR = buffer[3];
        if (lenR === 0)
          return false;
        if (5 + lenR >= buffer.length)
          return false;
        if (buffer[4 + lenR] !== 2)
          return false;
        const lenS = buffer[5 + lenR];
        if (lenS === 0)
          return false;
        if (6 + lenR + lenS !== buffer.length)
          return false;
        if (buffer[4] & 128)
          return false;
        if (lenR > 1 && buffer[4] === 0 && !(buffer[5] & 128))
          return false;
        if (buffer[lenR + 6] & 128)
          return false;
        if (lenS > 1 && buffer[lenR + 6] === 0 && !(buffer[lenR + 7] & 128))
          return false;
        return true;
      }
      exports.check = check;
      function decode(buffer) {
        if (buffer.length < 8)
          throw new Error("DER sequence length is too short");
        if (buffer.length > 72)
          throw new Error("DER sequence length is too long");
        if (buffer[0] !== 48)
          throw new Error("Expected DER sequence");
        if (buffer[1] !== buffer.length - 2)
          throw new Error("DER sequence length is invalid");
        if (buffer[2] !== 2)
          throw new Error("Expected DER integer");
        const lenR = buffer[3];
        if (lenR === 0)
          throw new Error("R length is zero");
        if (5 + lenR >= buffer.length)
          throw new Error("R length is too long");
        if (buffer[4 + lenR] !== 2)
          throw new Error("Expected DER integer (2)");
        const lenS = buffer[5 + lenR];
        if (lenS === 0)
          throw new Error("S length is zero");
        if (6 + lenR + lenS !== buffer.length)
          throw new Error("S length is invalid");
        if (buffer[4] & 128)
          throw new Error("R value is negative");
        if (lenR > 1 && buffer[4] === 0 && !(buffer[5] & 128))
          throw new Error("R value excessively padded");
        if (buffer[lenR + 6] & 128)
          throw new Error("S value is negative");
        if (lenS > 1 && buffer[lenR + 6] === 0 && !(buffer[lenR + 7] & 128))
          throw new Error("S value excessively padded");
        return {
          r: buffer.slice(4, 4 + lenR),
          s: buffer.slice(6 + lenR)
        };
      }
      exports.decode = decode;
      function encode(r, s) {
        const lenR = r.length;
        const lenS = s.length;
        if (lenR === 0)
          throw new Error("R length is zero");
        if (lenS === 0)
          throw new Error("S length is zero");
        if (lenR > 33)
          throw new Error("R length is too long");
        if (lenS > 33)
          throw new Error("S length is too long");
        if (r[0] & 128)
          throw new Error("R value is negative");
        if (s[0] & 128)
          throw new Error("S value is negative");
        if (lenR > 1 && r[0] === 0 && !(r[1] & 128))
          throw new Error("R value excessively padded");
        if (lenS > 1 && s[0] === 0 && !(s[1] & 128))
          throw new Error("S value excessively padded");
        const signature = Buffer.allocUnsafe(6 + lenR + lenS);
        signature[0] = 48;
        signature[1] = signature.length - 2;
        signature[2] = 2;
        signature[3] = r.length;
        r.copy(signature, 4);
        signature[4 + lenR] = 2;
        signature[5 + lenR] = s.length;
        s.copy(signature, 6 + lenR);
        return signature;
      }
      exports.encode = encode;
    }
  });

  // node_modules/bitcoinjs-lib/src/ops.js
  var require_ops = __commonJS({
    "node_modules/bitcoinjs-lib/src/ops.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.REVERSE_OPS = exports.OPS = void 0;
      var OPS = {
        OP_FALSE: 0,
        OP_0: 0,
        OP_PUSHDATA1: 76,
        OP_PUSHDATA2: 77,
        OP_PUSHDATA4: 78,
        OP_1NEGATE: 79,
        OP_RESERVED: 80,
        OP_TRUE: 81,
        OP_1: 81,
        OP_2: 82,
        OP_3: 83,
        OP_4: 84,
        OP_5: 85,
        OP_6: 86,
        OP_7: 87,
        OP_8: 88,
        OP_9: 89,
        OP_10: 90,
        OP_11: 91,
        OP_12: 92,
        OP_13: 93,
        OP_14: 94,
        OP_15: 95,
        OP_16: 96,
        OP_NOP: 97,
        OP_VER: 98,
        OP_IF: 99,
        OP_NOTIF: 100,
        OP_VERIF: 101,
        OP_VERNOTIF: 102,
        OP_ELSE: 103,
        OP_ENDIF: 104,
        OP_VERIFY: 105,
        OP_RETURN: 106,
        OP_TOALTSTACK: 107,
        OP_FROMALTSTACK: 108,
        OP_2DROP: 109,
        OP_2DUP: 110,
        OP_3DUP: 111,
        OP_2OVER: 112,
        OP_2ROT: 113,
        OP_2SWAP: 114,
        OP_IFDUP: 115,
        OP_DEPTH: 116,
        OP_DROP: 117,
        OP_DUP: 118,
        OP_NIP: 119,
        OP_OVER: 120,
        OP_PICK: 121,
        OP_ROLL: 122,
        OP_ROT: 123,
        OP_SWAP: 124,
        OP_TUCK: 125,
        OP_CAT: 126,
        OP_SUBSTR: 127,
        OP_LEFT: 128,
        OP_RIGHT: 129,
        OP_SIZE: 130,
        OP_INVERT: 131,
        OP_AND: 132,
        OP_OR: 133,
        OP_XOR: 134,
        OP_EQUAL: 135,
        OP_EQUALVERIFY: 136,
        OP_RESERVED1: 137,
        OP_RESERVED2: 138,
        OP_1ADD: 139,
        OP_1SUB: 140,
        OP_2MUL: 141,
        OP_2DIV: 142,
        OP_NEGATE: 143,
        OP_ABS: 144,
        OP_NOT: 145,
        OP_0NOTEQUAL: 146,
        OP_ADD: 147,
        OP_SUB: 148,
        OP_MUL: 149,
        OP_DIV: 150,
        OP_MOD: 151,
        OP_LSHIFT: 152,
        OP_RSHIFT: 153,
        OP_BOOLAND: 154,
        OP_BOOLOR: 155,
        OP_NUMEQUAL: 156,
        OP_NUMEQUALVERIFY: 157,
        OP_NUMNOTEQUAL: 158,
        OP_LESSTHAN: 159,
        OP_GREATERTHAN: 160,
        OP_LESSTHANOREQUAL: 161,
        OP_GREATERTHANOREQUAL: 162,
        OP_MIN: 163,
        OP_MAX: 164,
        OP_WITHIN: 165,
        OP_RIPEMD160: 166,
        OP_SHA1: 167,
        OP_SHA256: 168,
        OP_HASH160: 169,
        OP_HASH256: 170,
        OP_CODESEPARATOR: 171,
        OP_CHECKSIG: 172,
        OP_CHECKSIGVERIFY: 173,
        OP_CHECKMULTISIG: 174,
        OP_CHECKMULTISIGVERIFY: 175,
        OP_NOP1: 176,
        OP_NOP2: 177,
        OP_CHECKLOCKTIMEVERIFY: 177,
        OP_NOP3: 178,
        OP_CHECKSEQUENCEVERIFY: 178,
        OP_NOP4: 179,
        OP_NOP5: 180,
        OP_NOP6: 181,
        OP_NOP7: 182,
        OP_NOP8: 183,
        OP_NOP9: 184,
        OP_NOP10: 185,
        OP_CHECKSIGADD: 186,
        OP_PUBKEYHASH: 253,
        OP_PUBKEY: 254,
        OP_INVALIDOPCODE: 255
      };
      exports.OPS = OPS;
      var REVERSE_OPS = {};
      exports.REVERSE_OPS = REVERSE_OPS;
      for (const op of Object.keys(OPS)) {
        const code = OPS[op];
        REVERSE_OPS[code] = op;
      }
    }
  });

  // node_modules/bitcoinjs-lib/src/push_data.js
  var require_push_data = __commonJS({
    "node_modules/bitcoinjs-lib/src/push_data.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.decode = exports.encode = exports.encodingLength = void 0;
      var ops_1 = require_ops();
      function encodingLength(i) {
        return i < ops_1.OPS.OP_PUSHDATA1 ? 1 : i <= 255 ? 2 : i <= 65535 ? 3 : 5;
      }
      exports.encodingLength = encodingLength;
      function encode(buffer, num, offset) {
        const size = encodingLength(num);
        if (size === 1) {
          buffer.writeUInt8(num, offset);
        } else if (size === 2) {
          buffer.writeUInt8(ops_1.OPS.OP_PUSHDATA1, offset);
          buffer.writeUInt8(num, offset + 1);
        } else if (size === 3) {
          buffer.writeUInt8(ops_1.OPS.OP_PUSHDATA2, offset);
          buffer.writeUInt16LE(num, offset + 1);
        } else {
          buffer.writeUInt8(ops_1.OPS.OP_PUSHDATA4, offset);
          buffer.writeUInt32LE(num, offset + 1);
        }
        return size;
      }
      exports.encode = encode;
      function decode(buffer, offset) {
        const opcode = buffer.readUInt8(offset);
        let num;
        let size;
        if (opcode < ops_1.OPS.OP_PUSHDATA1) {
          num = opcode;
          size = 1;
        } else if (opcode === ops_1.OPS.OP_PUSHDATA1) {
          if (offset + 2 > buffer.length)
            return null;
          num = buffer.readUInt8(offset + 1);
          size = 2;
        } else if (opcode === ops_1.OPS.OP_PUSHDATA2) {
          if (offset + 3 > buffer.length)
            return null;
          num = buffer.readUInt16LE(offset + 1);
          size = 3;
        } else {
          if (offset + 5 > buffer.length)
            return null;
          if (opcode !== ops_1.OPS.OP_PUSHDATA4)
            throw new Error("Unexpected opcode");
          num = buffer.readUInt32LE(offset + 1);
          size = 5;
        }
        return {
          opcode,
          number: num,
          size
        };
      }
      exports.decode = decode;
    }
  });

  // node_modules/bitcoinjs-lib/src/script_number.js
  var require_script_number = __commonJS({
    "node_modules/bitcoinjs-lib/src/script_number.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.encode = exports.decode = void 0;
      function decode(buffer, maxLength, minimal) {
        maxLength = maxLength || 4;
        minimal = minimal === void 0 ? true : minimal;
        const length = buffer.length;
        if (length === 0)
          return 0;
        if (length > maxLength)
          throw new TypeError("Script number overflow");
        if (minimal) {
          if ((buffer[length - 1] & 127) === 0) {
            if (length <= 1 || (buffer[length - 2] & 128) === 0)
              throw new Error("Non-minimally encoded script number");
          }
        }
        if (length === 5) {
          const a = buffer.readUInt32LE(0);
          const b = buffer.readUInt8(4);
          if (b & 128)
            return -((b & ~128) * 4294967296 + a);
          return b * 4294967296 + a;
        }
        let result = 0;
        for (let i = 0; i < length; ++i) {
          result |= buffer[i] << 8 * i;
        }
        if (buffer[length - 1] & 128)
          return -(result & ~(128 << 8 * (length - 1)));
        return result;
      }
      exports.decode = decode;
      function scriptNumSize(i) {
        return i > 2147483647 ? 5 : i > 8388607 ? 4 : i > 32767 ? 3 : i > 127 ? 2 : i > 0 ? 1 : 0;
      }
      function encode(_number) {
        let value = Math.abs(_number);
        const size = scriptNumSize(value);
        const buffer = Buffer.allocUnsafe(size);
        const negative = _number < 0;
        for (let i = 0; i < size; ++i) {
          buffer.writeUInt8(value & 255, i);
          value >>= 8;
        }
        if (buffer[size - 1] & 128) {
          buffer.writeUInt8(negative ? 128 : 0, size - 1);
        } else if (negative) {
          buffer[size - 1] |= 128;
        }
        return buffer;
      }
      exports.encode = encode;
    }
  });

  // node_modules/bitcoinjs-lib/src/types.js
  var require_types2 = __commonJS({
    "node_modules/bitcoinjs-lib/src/types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.oneOf = exports.Null = exports.BufferN = exports.Function = exports.UInt32 = exports.UInt8 = exports.tuple = exports.maybe = exports.Hex = exports.Buffer = exports.String = exports.Boolean = exports.Array = exports.Number = exports.Hash256bit = exports.Hash160bit = exports.Buffer256bit = exports.isTaptree = exports.isTapleaf = exports.TAPLEAF_VERSION_MASK = exports.Network = exports.ECPoint = exports.Satoshi = exports.Signer = exports.BIP32Path = exports.UInt31 = exports.isPoint = exports.typeforce = void 0;
      var buffer_1 = require_buffer();
      exports.typeforce = require_typeforce();
      var ZERO32 = buffer_1.Buffer.alloc(32, 0);
      var EC_P = buffer_1.Buffer.from(
        "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f",
        "hex"
      );
      function isPoint(p) {
        if (!buffer_1.Buffer.isBuffer(p))
          return false;
        if (p.length < 33)
          return false;
        const t = p[0];
        const x = p.slice(1, 33);
        if (x.compare(ZERO32) === 0)
          return false;
        if (x.compare(EC_P) >= 0)
          return false;
        if ((t === 2 || t === 3) && p.length === 33) {
          return true;
        }
        const y = p.slice(33);
        if (y.compare(ZERO32) === 0)
          return false;
        if (y.compare(EC_P) >= 0)
          return false;
        if (t === 4 && p.length === 65)
          return true;
        return false;
      }
      exports.isPoint = isPoint;
      var UINT31_MAX = Math.pow(2, 31) - 1;
      function UInt31(value) {
        return exports.typeforce.UInt32(value) && value <= UINT31_MAX;
      }
      exports.UInt31 = UInt31;
      function BIP32Path(value) {
        return exports.typeforce.String(value) && !!value.match(/^(m\/)?(\d+'?\/)*\d+'?$/);
      }
      exports.BIP32Path = BIP32Path;
      BIP32Path.toJSON = () => {
        return "BIP32 derivation path";
      };
      function Signer(obj) {
        return (exports.typeforce.Buffer(obj.publicKey) || typeof obj.getPublicKey === "function") && typeof obj.sign === "function";
      }
      exports.Signer = Signer;
      var SATOSHI_MAX = 21 * 1e14;
      function Satoshi(value) {
        return exports.typeforce.UInt53(value) && value <= SATOSHI_MAX;
      }
      exports.Satoshi = Satoshi;
      exports.ECPoint = exports.typeforce.quacksLike("Point");
      exports.Network = exports.typeforce.compile({
        messagePrefix: exports.typeforce.oneOf(
          exports.typeforce.Buffer,
          exports.typeforce.String
        ),
        bip32: {
          public: exports.typeforce.UInt32,
          private: exports.typeforce.UInt32
        },
        pubKeyHash: exports.typeforce.UInt8,
        scriptHash: exports.typeforce.UInt8,
        wif: exports.typeforce.UInt8
      });
      exports.TAPLEAF_VERSION_MASK = 254;
      function isTapleaf(o) {
        if (!o || !("output" in o))
          return false;
        if (!buffer_1.Buffer.isBuffer(o.output))
          return false;
        if (o.version !== void 0)
          return (o.version & exports.TAPLEAF_VERSION_MASK) === o.version;
        return true;
      }
      exports.isTapleaf = isTapleaf;
      function isTaptree(scriptTree) {
        if (!(0, exports.Array)(scriptTree))
          return isTapleaf(scriptTree);
        if (scriptTree.length !== 2)
          return false;
        return scriptTree.every((t) => isTaptree(t));
      }
      exports.isTaptree = isTaptree;
      exports.Buffer256bit = exports.typeforce.BufferN(32);
      exports.Hash160bit = exports.typeforce.BufferN(20);
      exports.Hash256bit = exports.typeforce.BufferN(32);
      exports.Number = exports.typeforce.Number;
      exports.Array = exports.typeforce.Array;
      exports.Boolean = exports.typeforce.Boolean;
      exports.String = exports.typeforce.String;
      exports.Buffer = exports.typeforce.Buffer;
      exports.Hex = exports.typeforce.Hex;
      exports.maybe = exports.typeforce.maybe;
      exports.tuple = exports.typeforce.tuple;
      exports.UInt8 = exports.typeforce.UInt8;
      exports.UInt32 = exports.typeforce.UInt32;
      exports.Function = exports.typeforce.Function;
      exports.BufferN = exports.typeforce.BufferN;
      exports.Null = exports.typeforce.Null;
      exports.oneOf = exports.typeforce.oneOf;
    }
  });

  // node_modules/bitcoinjs-lib/src/script_signature.js
  var require_script_signature = __commonJS({
    "node_modules/bitcoinjs-lib/src/script_signature.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.encode = exports.decode = void 0;
      var bip66 = require_bip66();
      var types = require_types2();
      var { typeforce } = types;
      var ZERO = Buffer.alloc(1, 0);
      function toDER(x) {
        let i = 0;
        while (x[i] === 0)
          ++i;
        if (i === x.length)
          return ZERO;
        x = x.slice(i);
        if (x[0] & 128)
          return Buffer.concat([ZERO, x], 1 + x.length);
        return x;
      }
      function fromDER(x) {
        if (x[0] === 0)
          x = x.slice(1);
        const buffer = Buffer.alloc(32, 0);
        const bstart = Math.max(0, 32 - x.length);
        x.copy(buffer, bstart);
        return buffer;
      }
      function decode(buffer) {
        const hashType = buffer.readUInt8(buffer.length - 1);
        const hashTypeMod = hashType & ~128;
        if (hashTypeMod <= 0 || hashTypeMod >= 4)
          throw new Error("Invalid hashType " + hashType);
        const decoded = bip66.decode(buffer.slice(0, -1));
        const r = fromDER(decoded.r);
        const s = fromDER(decoded.s);
        const signature = Buffer.concat([r, s], 64);
        return { signature, hashType };
      }
      exports.decode = decode;
      function encode(signature, hashType) {
        typeforce(
          {
            signature: types.BufferN(64),
            hashType: types.UInt8
          },
          { signature, hashType }
        );
        const hashTypeMod = hashType & ~128;
        if (hashTypeMod <= 0 || hashTypeMod >= 4)
          throw new Error("Invalid hashType " + hashType);
        const hashTypeBuffer = Buffer.allocUnsafe(1);
        hashTypeBuffer.writeUInt8(hashType, 0);
        const r = toDER(signature.slice(0, 32));
        const s = toDER(signature.slice(32, 64));
        return Buffer.concat([bip66.encode(r, s), hashTypeBuffer]);
      }
      exports.encode = encode;
    }
  });

  // node_modules/bitcoinjs-lib/src/script.js
  var require_script = __commonJS({
    "node_modules/bitcoinjs-lib/src/script.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.signature = exports.number = exports.isCanonicalScriptSignature = exports.isDefinedHashType = exports.isCanonicalPubKey = exports.toStack = exports.fromASM = exports.toASM = exports.decompile = exports.compile = exports.countNonPushOnlyOPs = exports.isPushOnly = exports.OPS = void 0;
      var bip66 = require_bip66();
      var ops_1 = require_ops();
      Object.defineProperty(exports, "OPS", {
        enumerable: true,
        get: function() {
          return ops_1.OPS;
        }
      });
      var pushdata = require_push_data();
      var scriptNumber = require_script_number();
      var scriptSignature = require_script_signature();
      var types = require_types2();
      var { typeforce } = types;
      var OP_INT_BASE = ops_1.OPS.OP_RESERVED;
      function isOPInt(value) {
        return types.Number(value) && (value === ops_1.OPS.OP_0 || value >= ops_1.OPS.OP_1 && value <= ops_1.OPS.OP_16 || value === ops_1.OPS.OP_1NEGATE);
      }
      function isPushOnlyChunk(value) {
        return types.Buffer(value) || isOPInt(value);
      }
      function isPushOnly(value) {
        return types.Array(value) && value.every(isPushOnlyChunk);
      }
      exports.isPushOnly = isPushOnly;
      function countNonPushOnlyOPs(value) {
        return value.length - value.filter(isPushOnlyChunk).length;
      }
      exports.countNonPushOnlyOPs = countNonPushOnlyOPs;
      function asMinimalOP(buffer) {
        if (buffer.length === 0)
          return ops_1.OPS.OP_0;
        if (buffer.length !== 1)
          return;
        if (buffer[0] >= 1 && buffer[0] <= 16)
          return OP_INT_BASE + buffer[0];
        if (buffer[0] === 129)
          return ops_1.OPS.OP_1NEGATE;
      }
      function chunksIsBuffer(buf) {
        return Buffer.isBuffer(buf);
      }
      function chunksIsArray(buf) {
        return types.Array(buf);
      }
      function singleChunkIsBuffer(buf) {
        return Buffer.isBuffer(buf);
      }
      function compile(chunks) {
        if (chunksIsBuffer(chunks))
          return chunks;
        typeforce(types.Array, chunks);
        const bufferSize = chunks.reduce((accum, chunk) => {
          if (singleChunkIsBuffer(chunk)) {
            if (chunk.length === 1 && asMinimalOP(chunk) !== void 0) {
              return accum + 1;
            }
            return accum + pushdata.encodingLength(chunk.length) + chunk.length;
          }
          return accum + 1;
        }, 0);
        const buffer = Buffer.allocUnsafe(bufferSize);
        let offset = 0;
        chunks.forEach((chunk) => {
          if (singleChunkIsBuffer(chunk)) {
            const opcode = asMinimalOP(chunk);
            if (opcode !== void 0) {
              buffer.writeUInt8(opcode, offset);
              offset += 1;
              return;
            }
            offset += pushdata.encode(buffer, chunk.length, offset);
            chunk.copy(buffer, offset);
            offset += chunk.length;
          } else {
            buffer.writeUInt8(chunk, offset);
            offset += 1;
          }
        });
        if (offset !== buffer.length)
          throw new Error("Could not decode chunks");
        return buffer;
      }
      exports.compile = compile;
      function decompile(buffer) {
        if (chunksIsArray(buffer))
          return buffer;
        typeforce(types.Buffer, buffer);
        const chunks = [];
        let i = 0;
        while (i < buffer.length) {
          const opcode = buffer[i];
          if (opcode > ops_1.OPS.OP_0 && opcode <= ops_1.OPS.OP_PUSHDATA4) {
            const d = pushdata.decode(buffer, i);
            if (d === null)
              return null;
            i += d.size;
            if (i + d.number > buffer.length)
              return null;
            const data = buffer.slice(i, i + d.number);
            i += d.number;
            const op = asMinimalOP(data);
            if (op !== void 0) {
              chunks.push(op);
            } else {
              chunks.push(data);
            }
          } else {
            chunks.push(opcode);
            i += 1;
          }
        }
        return chunks;
      }
      exports.decompile = decompile;
      function toASM(chunks) {
        if (chunksIsBuffer(chunks)) {
          chunks = decompile(chunks);
        }
        return chunks.map((chunk) => {
          if (singleChunkIsBuffer(chunk)) {
            const op = asMinimalOP(chunk);
            if (op === void 0)
              return chunk.toString("hex");
            chunk = op;
          }
          return ops_1.REVERSE_OPS[chunk];
        }).join(" ");
      }
      exports.toASM = toASM;
      function fromASM(asm) {
        typeforce(types.String, asm);
        return compile(
          asm.split(" ").map((chunkStr) => {
            if (ops_1.OPS[chunkStr] !== void 0)
              return ops_1.OPS[chunkStr];
            typeforce(types.Hex, chunkStr);
            return Buffer.from(chunkStr, "hex");
          })
        );
      }
      exports.fromASM = fromASM;
      function toStack(chunks) {
        chunks = decompile(chunks);
        typeforce(isPushOnly, chunks);
        return chunks.map((op) => {
          if (singleChunkIsBuffer(op))
            return op;
          if (op === ops_1.OPS.OP_0)
            return Buffer.allocUnsafe(0);
          return scriptNumber.encode(op - OP_INT_BASE);
        });
      }
      exports.toStack = toStack;
      function isCanonicalPubKey(buffer) {
        return types.isPoint(buffer);
      }
      exports.isCanonicalPubKey = isCanonicalPubKey;
      function isDefinedHashType(hashType) {
        const hashTypeMod = hashType & ~128;
        return hashTypeMod > 0 && hashTypeMod < 4;
      }
      exports.isDefinedHashType = isDefinedHashType;
      function isCanonicalScriptSignature(buffer) {
        if (!Buffer.isBuffer(buffer))
          return false;
        if (!isDefinedHashType(buffer[buffer.length - 1]))
          return false;
        return bip66.check(buffer.slice(0, -1));
      }
      exports.isCanonicalScriptSignature = isCanonicalScriptSignature;
      exports.number = scriptNumber;
      exports.signature = scriptSignature;
    }
  });

  // node_modules/bitcoinjs-lib/src/payments/lazy.js
  var require_lazy = __commonJS({
    "node_modules/bitcoinjs-lib/src/payments/lazy.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.value = exports.prop = void 0;
      function prop(object, name, f) {
        Object.defineProperty(object, name, {
          configurable: true,
          enumerable: true,
          get() {
            const _value = f.call(this);
            this[name] = _value;
            return _value;
          },
          set(_value) {
            Object.defineProperty(this, name, {
              configurable: true,
              enumerable: true,
              value: _value,
              writable: true
            });
          }
        });
      }
      exports.prop = prop;
      function value(f) {
        let _value;
        return () => {
          if (_value !== void 0)
            return _value;
          _value = f();
          return _value;
        };
      }
      exports.value = value;
    }
  });

  // node_modules/bitcoinjs-lib/src/payments/embed.js
  var require_embed = __commonJS({
    "node_modules/bitcoinjs-lib/src/payments/embed.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.p2data = void 0;
      var networks_1 = require_networks2();
      var bscript = require_script();
      var types_1 = require_types2();
      var lazy = require_lazy();
      var OPS = bscript.OPS;
      function stacksEqual(a, b) {
        if (a.length !== b.length)
          return false;
        return a.every((x, i) => {
          return x.equals(b[i]);
        });
      }
      function p2data(a, opts) {
        if (!a.data && !a.output)
          throw new TypeError("Not enough data");
        opts = Object.assign({ validate: true }, opts || {});
        (0, types_1.typeforce)(
          {
            network: types_1.typeforce.maybe(types_1.typeforce.Object),
            output: types_1.typeforce.maybe(types_1.typeforce.Buffer),
            data: types_1.typeforce.maybe(
              types_1.typeforce.arrayOf(types_1.typeforce.Buffer)
            )
          },
          a
        );
        const network = a.network || networks_1.bitcoin;
        const o = { name: "embed", network };
        lazy.prop(o, "output", () => {
          if (!a.data)
            return;
          return bscript.compile([OPS.OP_RETURN].concat(a.data));
        });
        lazy.prop(o, "data", () => {
          if (!a.output)
            return;
          return bscript.decompile(a.output).slice(1);
        });
        if (opts.validate) {
          if (a.output) {
            const chunks = bscript.decompile(a.output);
            if (chunks[0] !== OPS.OP_RETURN)
              throw new TypeError("Output is invalid");
            if (!chunks.slice(1).every(types_1.typeforce.Buffer))
              throw new TypeError("Output is invalid");
            if (a.data && !stacksEqual(a.data, o.data))
              throw new TypeError("Data mismatch");
          }
        }
        return Object.assign(o, a);
      }
      exports.p2data = p2data;
    }
  });

  // node_modules/bitcoinjs-lib/src/payments/p2ms.js
  var require_p2ms = __commonJS({
    "node_modules/bitcoinjs-lib/src/payments/p2ms.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.p2ms = void 0;
      var networks_1 = require_networks2();
      var bscript = require_script();
      var types_1 = require_types2();
      var lazy = require_lazy();
      var OPS = bscript.OPS;
      var OP_INT_BASE = OPS.OP_RESERVED;
      function stacksEqual(a, b) {
        if (a.length !== b.length)
          return false;
        return a.every((x, i) => {
          return x.equals(b[i]);
        });
      }
      function p2ms(a, opts) {
        if (!a.input && !a.output && !(a.pubkeys && a.m !== void 0) && !a.signatures)
          throw new TypeError("Not enough data");
        opts = Object.assign({ validate: true }, opts || {});
        function isAcceptableSignature(x) {
          return bscript.isCanonicalScriptSignature(x) || (opts.allowIncomplete && x === OPS.OP_0) !== void 0;
        }
        (0, types_1.typeforce)(
          {
            network: types_1.typeforce.maybe(types_1.typeforce.Object),
            m: types_1.typeforce.maybe(types_1.typeforce.Number),
            n: types_1.typeforce.maybe(types_1.typeforce.Number),
            output: types_1.typeforce.maybe(types_1.typeforce.Buffer),
            pubkeys: types_1.typeforce.maybe(
              types_1.typeforce.arrayOf(types_1.isPoint)
            ),
            signatures: types_1.typeforce.maybe(
              types_1.typeforce.arrayOf(isAcceptableSignature)
            ),
            input: types_1.typeforce.maybe(types_1.typeforce.Buffer)
          },
          a
        );
        const network = a.network || networks_1.bitcoin;
        const o = { network };
        let chunks = [];
        let decoded = false;
        function decode(output) {
          if (decoded)
            return;
          decoded = true;
          chunks = bscript.decompile(output);
          o.m = chunks[0] - OP_INT_BASE;
          o.n = chunks[chunks.length - 2] - OP_INT_BASE;
          o.pubkeys = chunks.slice(1, -2);
        }
        lazy.prop(o, "output", () => {
          if (!a.m)
            return;
          if (!o.n)
            return;
          if (!a.pubkeys)
            return;
          return bscript.compile(
            [].concat(
              OP_INT_BASE + a.m,
              a.pubkeys,
              OP_INT_BASE + o.n,
              OPS.OP_CHECKMULTISIG
            )
          );
        });
        lazy.prop(o, "m", () => {
          if (!o.output)
            return;
          decode(o.output);
          return o.m;
        });
        lazy.prop(o, "n", () => {
          if (!o.pubkeys)
            return;
          return o.pubkeys.length;
        });
        lazy.prop(o, "pubkeys", () => {
          if (!a.output)
            return;
          decode(a.output);
          return o.pubkeys;
        });
        lazy.prop(o, "signatures", () => {
          if (!a.input)
            return;
          return bscript.decompile(a.input).slice(1);
        });
        lazy.prop(o, "input", () => {
          if (!a.signatures)
            return;
          return bscript.compile([OPS.OP_0].concat(a.signatures));
        });
        lazy.prop(o, "witness", () => {
          if (!o.input)
            return;
          return [];
        });
        lazy.prop(o, "name", () => {
          if (!o.m || !o.n)
            return;
          return `p2ms(${o.m} of ${o.n})`;
        });
        if (opts.validate) {
          if (a.output) {
            decode(a.output);
            if (!types_1.typeforce.Number(chunks[0]))
              throw new TypeError("Output is invalid");
            if (!types_1.typeforce.Number(chunks[chunks.length - 2]))
              throw new TypeError("Output is invalid");
            if (chunks[chunks.length - 1] !== OPS.OP_CHECKMULTISIG)
              throw new TypeError("Output is invalid");
            if (o.m <= 0 || o.n > 16 || o.m > o.n || o.n !== chunks.length - 3)
              throw new TypeError("Output is invalid");
            if (!o.pubkeys.every((x) => (0, types_1.isPoint)(x)))
              throw new TypeError("Output is invalid");
            if (a.m !== void 0 && a.m !== o.m)
              throw new TypeError("m mismatch");
            if (a.n !== void 0 && a.n !== o.n)
              throw new TypeError("n mismatch");
            if (a.pubkeys && !stacksEqual(a.pubkeys, o.pubkeys))
              throw new TypeError("Pubkeys mismatch");
          }
          if (a.pubkeys) {
            if (a.n !== void 0 && a.n !== a.pubkeys.length)
              throw new TypeError("Pubkey count mismatch");
            o.n = a.pubkeys.length;
            if (o.n < o.m)
              throw new TypeError("Pubkey count cannot be less than m");
          }
          if (a.signatures) {
            if (a.signatures.length < o.m)
              throw new TypeError("Not enough signatures provided");
            if (a.signatures.length > o.m)
              throw new TypeError("Too many signatures provided");
          }
          if (a.input) {
            if (a.input[0] !== OPS.OP_0)
              throw new TypeError("Input is invalid");
            if (o.signatures.length === 0 || !o.signatures.every(isAcceptableSignature))
              throw new TypeError("Input has invalid signature(s)");
            if (a.signatures && !stacksEqual(a.signatures, o.signatures))
              throw new TypeError("Signature mismatch");
            if (a.m !== void 0 && a.m !== a.signatures.length)
              throw new TypeError("Signature count mismatch");
          }
        }
        return Object.assign(o, a);
      }
      exports.p2ms = p2ms;
    }
  });

  // node_modules/bitcoinjs-lib/src/payments/p2pk.js
  var require_p2pk = __commonJS({
    "node_modules/bitcoinjs-lib/src/payments/p2pk.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.p2pk = void 0;
      var networks_1 = require_networks2();
      var bscript = require_script();
      var types_1 = require_types2();
      var lazy = require_lazy();
      var OPS = bscript.OPS;
      function p2pk(a, opts) {
        if (!a.input && !a.output && !a.pubkey && !a.input && !a.signature)
          throw new TypeError("Not enough data");
        opts = Object.assign({ validate: true }, opts || {});
        (0, types_1.typeforce)(
          {
            network: types_1.typeforce.maybe(types_1.typeforce.Object),
            output: types_1.typeforce.maybe(types_1.typeforce.Buffer),
            pubkey: types_1.typeforce.maybe(types_1.isPoint),
            signature: types_1.typeforce.maybe(bscript.isCanonicalScriptSignature),
            input: types_1.typeforce.maybe(types_1.typeforce.Buffer)
          },
          a
        );
        const _chunks = lazy.value(() => {
          return bscript.decompile(a.input);
        });
        const network = a.network || networks_1.bitcoin;
        const o = { name: "p2pk", network };
        lazy.prop(o, "output", () => {
          if (!a.pubkey)
            return;
          return bscript.compile([a.pubkey, OPS.OP_CHECKSIG]);
        });
        lazy.prop(o, "pubkey", () => {
          if (!a.output)
            return;
          return a.output.slice(1, -1);
        });
        lazy.prop(o, "signature", () => {
          if (!a.input)
            return;
          return _chunks()[0];
        });
        lazy.prop(o, "input", () => {
          if (!a.signature)
            return;
          return bscript.compile([a.signature]);
        });
        lazy.prop(o, "witness", () => {
          if (!o.input)
            return;
          return [];
        });
        if (opts.validate) {
          if (a.output) {
            if (a.output[a.output.length - 1] !== OPS.OP_CHECKSIG)
              throw new TypeError("Output is invalid");
            if (!(0, types_1.isPoint)(o.pubkey))
              throw new TypeError("Output pubkey is invalid");
            if (a.pubkey && !a.pubkey.equals(o.pubkey))
              throw new TypeError("Pubkey mismatch");
          }
          if (a.signature) {
            if (a.input && !a.input.equals(o.input))
              throw new TypeError("Signature mismatch");
          }
          if (a.input) {
            if (_chunks().length !== 1)
              throw new TypeError("Input is invalid");
            if (!bscript.isCanonicalScriptSignature(o.signature))
              throw new TypeError("Input has invalid signature");
          }
        }
        return Object.assign(o, a);
      }
      exports.p2pk = p2pk;
    }
  });

  // node_modules/@noble/hashes/ripemd160.js
  var require_ripemd1602 = __commonJS({
    "node_modules/@noble/hashes/ripemd160.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ripemd160 = exports.RIPEMD160 = void 0;
      var _sha2_js_1 = require_sha22();
      var utils_js_1 = require_utils();
      var Rho = /* @__PURE__ */ new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);
      var Id = /* @__PURE__ */ Uint8Array.from({ length: 16 }, (_, i) => i);
      var Pi = /* @__PURE__ */ Id.map((i) => (9 * i + 5) % 16);
      var idxL = [Id];
      var idxR = [Pi];
      for (let i = 0; i < 4; i++)
        for (let j of [idxL, idxR])
          j.push(j[i].map((k) => Rho[k]));
      var shifts = /* @__PURE__ */ [
        [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
        [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
        [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
        [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
        [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
      ].map((i) => new Uint8Array(i));
      var shiftsL = /* @__PURE__ */ idxL.map((idx, i) => idx.map((j) => shifts[i][j]));
      var shiftsR = /* @__PURE__ */ idxR.map((idx, i) => idx.map((j) => shifts[i][j]));
      var Kl = /* @__PURE__ */ new Uint32Array([
        0,
        1518500249,
        1859775393,
        2400959708,
        2840853838
      ]);
      var Kr = /* @__PURE__ */ new Uint32Array([
        1352829926,
        1548603684,
        1836072691,
        2053994217,
        0
      ]);
      var rotl = (word, shift) => word << shift | word >>> 32 - shift;
      function f(group, x, y, z) {
        if (group === 0)
          return x ^ y ^ z;
        else if (group === 1)
          return x & y | ~x & z;
        else if (group === 2)
          return (x | ~y) ^ z;
        else if (group === 3)
          return x & z | y & ~z;
        else
          return x ^ (y | ~z);
      }
      var BUF = /* @__PURE__ */ new Uint32Array(16);
      var RIPEMD160 = class extends _sha2_js_1.SHA2 {
        constructor() {
          super(64, 20, 8, true);
          this.h0 = 1732584193 | 0;
          this.h1 = 4023233417 | 0;
          this.h2 = 2562383102 | 0;
          this.h3 = 271733878 | 0;
          this.h4 = 3285377520 | 0;
        }
        get() {
          const { h0, h1, h2, h3, h4 } = this;
          return [h0, h1, h2, h3, h4];
        }
        set(h0, h1, h2, h3, h4) {
          this.h0 = h0 | 0;
          this.h1 = h1 | 0;
          this.h2 = h2 | 0;
          this.h3 = h3 | 0;
          this.h4 = h4 | 0;
        }
        process(view, offset) {
          for (let i = 0; i < 16; i++, offset += 4)
            BUF[i] = view.getUint32(offset, true);
          let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;
          for (let group = 0; group < 5; group++) {
            const rGroup = 4 - group;
            const hbl = Kl[group], hbr = Kr[group];
            const rl = idxL[group], rr = idxR[group];
            const sl = shiftsL[group], sr = shiftsR[group];
            for (let i = 0; i < 16; i++) {
              const tl = rotl(al + f(group, bl, cl, dl) + BUF[rl[i]] + hbl, sl[i]) + el | 0;
              al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl;
            }
            for (let i = 0; i < 16; i++) {
              const tr = rotl(ar + f(rGroup, br, cr, dr) + BUF[rr[i]] + hbr, sr[i]) + er | 0;
              ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr;
            }
          }
          this.set(this.h1 + cl + dr | 0, this.h2 + dl + er | 0, this.h3 + el + ar | 0, this.h4 + al + br | 0, this.h0 + bl + cr | 0);
        }
        roundClean() {
          BUF.fill(0);
        }
        destroy() {
          this.destroyed = true;
          this.buffer.fill(0);
          this.set(0, 0, 0, 0, 0);
        }
      };
      exports.RIPEMD160 = RIPEMD160;
      exports.ripemd160 = (0, utils_js_1.wrapConstructor)(() => new RIPEMD160());
    }
  });

  // node_modules/@noble/hashes/sha1.js
  var require_sha12 = __commonJS({
    "node_modules/@noble/hashes/sha1.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.sha1 = void 0;
      var _sha2_js_1 = require_sha22();
      var utils_js_1 = require_utils();
      var rotl = (word, shift) => word << shift | word >>> 32 - shift >>> 0;
      var Chi = (a, b, c) => a & b ^ ~a & c;
      var Maj = (a, b, c) => a & b ^ a & c ^ b & c;
      var IV = /* @__PURE__ */ new Uint32Array([
        1732584193,
        4023233417,
        2562383102,
        271733878,
        3285377520
      ]);
      var SHA1_W = /* @__PURE__ */ new Uint32Array(80);
      var SHA1 = class extends _sha2_js_1.SHA2 {
        constructor() {
          super(64, 20, 8, false);
          this.A = IV[0] | 0;
          this.B = IV[1] | 0;
          this.C = IV[2] | 0;
          this.D = IV[3] | 0;
          this.E = IV[4] | 0;
        }
        get() {
          const { A, B, C, D, E } = this;
          return [A, B, C, D, E];
        }
        set(A, B, C, D, E) {
          this.A = A | 0;
          this.B = B | 0;
          this.C = C | 0;
          this.D = D | 0;
          this.E = E | 0;
        }
        process(view, offset) {
          for (let i = 0; i < 16; i++, offset += 4)
            SHA1_W[i] = view.getUint32(offset, false);
          for (let i = 16; i < 80; i++)
            SHA1_W[i] = rotl(SHA1_W[i - 3] ^ SHA1_W[i - 8] ^ SHA1_W[i - 14] ^ SHA1_W[i - 16], 1);
          let { A, B, C, D, E } = this;
          for (let i = 0; i < 80; i++) {
            let F, K;
            if (i < 20) {
              F = Chi(B, C, D);
              K = 1518500249;
            } else if (i < 40) {
              F = B ^ C ^ D;
              K = 1859775393;
            } else if (i < 60) {
              F = Maj(B, C, D);
              K = 2400959708;
            } else {
              F = B ^ C ^ D;
              K = 3395469782;
            }
            const T = rotl(A, 5) + F + E + K + SHA1_W[i] | 0;
            E = D;
            D = C;
            C = rotl(B, 30);
            B = A;
            A = T;
          }
          A = A + this.A | 0;
          B = B + this.B | 0;
          C = C + this.C | 0;
          D = D + this.D | 0;
          E = E + this.E | 0;
          this.set(A, B, C, D, E);
        }
        roundClean() {
          SHA1_W.fill(0);
        }
        destroy() {
          this.set(0, 0, 0, 0, 0);
          this.buffer.fill(0);
        }
      };
      exports.sha1 = (0, utils_js_1.wrapConstructor)(() => new SHA1());
    }
  });

  // node_modules/bitcoinjs-lib/src/crypto.js
  var require_crypto3 = __commonJS({
    "node_modules/bitcoinjs-lib/src/crypto.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.taggedHash = exports.TAGGED_HASH_PREFIXES = exports.TAGS = exports.hash256 = exports.hash160 = exports.sha256 = exports.sha1 = exports.ripemd160 = void 0;
      var ripemd160_1 = require_ripemd1602();
      var sha1_1 = require_sha12();
      var sha256_1 = require_sha2562();
      function ripemd160(buffer) {
        return Buffer.from((0, ripemd160_1.ripemd160)(Uint8Array.from(buffer)));
      }
      exports.ripemd160 = ripemd160;
      function sha1(buffer) {
        return Buffer.from((0, sha1_1.sha1)(Uint8Array.from(buffer)));
      }
      exports.sha1 = sha1;
      function sha256(buffer) {
        return Buffer.from((0, sha256_1.sha256)(Uint8Array.from(buffer)));
      }
      exports.sha256 = sha256;
      function hash160(buffer) {
        return Buffer.from(
          (0, ripemd160_1.ripemd160)((0, sha256_1.sha256)(Uint8Array.from(buffer)))
        );
      }
      exports.hash160 = hash160;
      function hash256(buffer) {
        return Buffer.from(
          (0, sha256_1.sha256)((0, sha256_1.sha256)(Uint8Array.from(buffer)))
        );
      }
      exports.hash256 = hash256;
      exports.TAGS = [
        "BIP0340/challenge",
        "BIP0340/aux",
        "BIP0340/nonce",
        "TapLeaf",
        "TapBranch",
        "TapSighash",
        "TapTweak",
        "KeyAgg list",
        "KeyAgg coefficient"
      ];
      exports.TAGGED_HASH_PREFIXES = {
        "BIP0340/challenge": Buffer.from([
          123,
          181,
          45,
          122,
          159,
          239,
          88,
          50,
          62,
          177,
          191,
          122,
          64,
          125,
          179,
          130,
          210,
          243,
          242,
          216,
          27,
          177,
          34,
          79,
          73,
          254,
          81,
          143,
          109,
          72,
          211,
          124,
          123,
          181,
          45,
          122,
          159,
          239,
          88,
          50,
          62,
          177,
          191,
          122,
          64,
          125,
          179,
          130,
          210,
          243,
          242,
          216,
          27,
          177,
          34,
          79,
          73,
          254,
          81,
          143,
          109,
          72,
          211,
          124
        ]),
        "BIP0340/aux": Buffer.from([
          241,
          239,
          78,
          94,
          192,
          99,
          202,
          218,
          109,
          148,
          202,
          250,
          157,
          152,
          126,
          160,
          105,
          38,
          88,
          57,
          236,
          193,
          31,
          151,
          45,
          119,
          165,
          46,
          216,
          193,
          204,
          144,
          241,
          239,
          78,
          94,
          192,
          99,
          202,
          218,
          109,
          148,
          202,
          250,
          157,
          152,
          126,
          160,
          105,
          38,
          88,
          57,
          236,
          193,
          31,
          151,
          45,
          119,
          165,
          46,
          216,
          193,
          204,
          144
        ]),
        "BIP0340/nonce": Buffer.from([
          7,
          73,
          119,
          52,
          167,
          155,
          203,
          53,
          91,
          155,
          140,
          125,
          3,
          79,
          18,
          28,
          244,
          52,
          215,
          62,
          247,
          45,
          218,
          25,
          135,
          0,
          97,
          251,
          82,
          191,
          235,
          47,
          7,
          73,
          119,
          52,
          167,
          155,
          203,
          53,
          91,
          155,
          140,
          125,
          3,
          79,
          18,
          28,
          244,
          52,
          215,
          62,
          247,
          45,
          218,
          25,
          135,
          0,
          97,
          251,
          82,
          191,
          235,
          47
        ]),
        TapLeaf: Buffer.from([
          174,
          234,
          143,
          220,
          66,
          8,
          152,
          49,
          5,
          115,
          75,
          88,
          8,
          29,
          30,
          38,
          56,
          211,
          95,
          28,
          181,
          64,
          8,
          212,
          211,
          87,
          202,
          3,
          190,
          120,
          233,
          238,
          174,
          234,
          143,
          220,
          66,
          8,
          152,
          49,
          5,
          115,
          75,
          88,
          8,
          29,
          30,
          38,
          56,
          211,
          95,
          28,
          181,
          64,
          8,
          212,
          211,
          87,
          202,
          3,
          190,
          120,
          233,
          238
        ]),
        TapBranch: Buffer.from([
          25,
          65,
          161,
          242,
          229,
          110,
          185,
          95,
          162,
          169,
          241,
          148,
          190,
          92,
          1,
          247,
          33,
          111,
          51,
          237,
          130,
          176,
          145,
          70,
          52,
          144,
          208,
          91,
          245,
          22,
          160,
          21,
          25,
          65,
          161,
          242,
          229,
          110,
          185,
          95,
          162,
          169,
          241,
          148,
          190,
          92,
          1,
          247,
          33,
          111,
          51,
          237,
          130,
          176,
          145,
          70,
          52,
          144,
          208,
          91,
          245,
          22,
          160,
          21
        ]),
        TapSighash: Buffer.from([
          244,
          10,
          72,
          223,
          75,
          42,
          112,
          200,
          180,
          146,
          75,
          242,
          101,
          70,
          97,
          237,
          61,
          149,
          253,
          102,
          163,
          19,
          235,
          135,
          35,
          117,
          151,
          198,
          40,
          228,
          160,
          49,
          244,
          10,
          72,
          223,
          75,
          42,
          112,
          200,
          180,
          146,
          75,
          242,
          101,
          70,
          97,
          237,
          61,
          149,
          253,
          102,
          163,
          19,
          235,
          135,
          35,
          117,
          151,
          198,
          40,
          228,
          160,
          49
        ]),
        TapTweak: Buffer.from([
          232,
          15,
          225,
          99,
          156,
          156,
          160,
          80,
          227,
          175,
          27,
          57,
          193,
          67,
          198,
          62,
          66,
          156,
          188,
          235,
          21,
          217,
          64,
          251,
          181,
          197,
          161,
          244,
          175,
          87,
          197,
          233,
          232,
          15,
          225,
          99,
          156,
          156,
          160,
          80,
          227,
          175,
          27,
          57,
          193,
          67,
          198,
          62,
          66,
          156,
          188,
          235,
          21,
          217,
          64,
          251,
          181,
          197,
          161,
          244,
          175,
          87,
          197,
          233
        ]),
        "KeyAgg list": Buffer.from([
          72,
          28,
          151,
          28,
          60,
          11,
          70,
          215,
          240,
          178,
          117,
          174,
          89,
          141,
          78,
          44,
          126,
          215,
          49,
          156,
          89,
          74,
          92,
          110,
          199,
          158,
          160,
          212,
          153,
          2,
          148,
          240,
          72,
          28,
          151,
          28,
          60,
          11,
          70,
          215,
          240,
          178,
          117,
          174,
          89,
          141,
          78,
          44,
          126,
          215,
          49,
          156,
          89,
          74,
          92,
          110,
          199,
          158,
          160,
          212,
          153,
          2,
          148,
          240
        ]),
        "KeyAgg coefficient": Buffer.from([
          191,
          201,
          4,
          3,
          77,
          28,
          136,
          232,
          200,
          14,
          34,
          229,
          61,
          36,
          86,
          109,
          100,
          130,
          78,
          214,
          66,
          114,
          129,
          192,
          145,
          0,
          249,
          77,
          205,
          82,
          201,
          129,
          191,
          201,
          4,
          3,
          77,
          28,
          136,
          232,
          200,
          14,
          34,
          229,
          61,
          36,
          86,
          109,
          100,
          130,
          78,
          214,
          66,
          114,
          129,
          192,
          145,
          0,
          249,
          77,
          205,
          82,
          201,
          129
        ])
      };
      function taggedHash(prefix, data) {
        return sha256(Buffer.concat([exports.TAGGED_HASH_PREFIXES[prefix], data]));
      }
      exports.taggedHash = taggedHash;
    }
  });

  // node_modules/base-x/src/index.js
  var require_src3 = __commonJS({
    "node_modules/base-x/src/index.js"(exports, module) {
      "use strict";
      function base(ALPHABET) {
        if (ALPHABET.length >= 255) {
          throw new TypeError("Alphabet too long");
        }
        var BASE_MAP = new Uint8Array(256);
        for (var j = 0; j < BASE_MAP.length; j++) {
          BASE_MAP[j] = 255;
        }
        for (var i = 0; i < ALPHABET.length; i++) {
          var x = ALPHABET.charAt(i);
          var xc = x.charCodeAt(0);
          if (BASE_MAP[xc] !== 255) {
            throw new TypeError(x + " is ambiguous");
          }
          BASE_MAP[xc] = i;
        }
        var BASE = ALPHABET.length;
        var LEADER = ALPHABET.charAt(0);
        var FACTOR = Math.log(BASE) / Math.log(256);
        var iFACTOR = Math.log(256) / Math.log(BASE);
        function encode(source) {
          if (source instanceof Uint8Array) {
          } else if (ArrayBuffer.isView(source)) {
            source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
          } else if (Array.isArray(source)) {
            source = Uint8Array.from(source);
          }
          if (!(source instanceof Uint8Array)) {
            throw new TypeError("Expected Uint8Array");
          }
          if (source.length === 0) {
            return "";
          }
          var zeroes = 0;
          var length = 0;
          var pbegin = 0;
          var pend = source.length;
          while (pbegin !== pend && source[pbegin] === 0) {
            pbegin++;
            zeroes++;
          }
          var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
          var b58 = new Uint8Array(size);
          while (pbegin !== pend) {
            var carry = source[pbegin];
            var i2 = 0;
            for (var it1 = size - 1; (carry !== 0 || i2 < length) && it1 !== -1; it1--, i2++) {
              carry += 256 * b58[it1] >>> 0;
              b58[it1] = carry % BASE >>> 0;
              carry = carry / BASE >>> 0;
            }
            if (carry !== 0) {
              throw new Error("Non-zero carry");
            }
            length = i2;
            pbegin++;
          }
          var it2 = size - length;
          while (it2 !== size && b58[it2] === 0) {
            it2++;
          }
          var str = LEADER.repeat(zeroes);
          for (; it2 < size; ++it2) {
            str += ALPHABET.charAt(b58[it2]);
          }
          return str;
        }
        function decodeUnsafe(source) {
          if (typeof source !== "string") {
            throw new TypeError("Expected String");
          }
          if (source.length === 0) {
            return new Uint8Array();
          }
          var psz = 0;
          var zeroes = 0;
          var length = 0;
          while (source[psz] === LEADER) {
            zeroes++;
            psz++;
          }
          var size = (source.length - psz) * FACTOR + 1 >>> 0;
          var b256 = new Uint8Array(size);
          while (source[psz]) {
            var carry = BASE_MAP[source.charCodeAt(psz)];
            if (carry === 255) {
              return;
            }
            var i2 = 0;
            for (var it3 = size - 1; (carry !== 0 || i2 < length) && it3 !== -1; it3--, i2++) {
              carry += BASE * b256[it3] >>> 0;
              b256[it3] = carry % 256 >>> 0;
              carry = carry / 256 >>> 0;
            }
            if (carry !== 0) {
              throw new Error("Non-zero carry");
            }
            length = i2;
            psz++;
          }
          var it4 = size - length;
          while (it4 !== size && b256[it4] === 0) {
            it4++;
          }
          var vch = new Uint8Array(zeroes + (size - it4));
          var j2 = zeroes;
          while (it4 !== size) {
            vch[j2++] = b256[it4++];
          }
          return vch;
        }
        function decode(string) {
          var buffer = decodeUnsafe(string);
          if (buffer) {
            return buffer;
          }
          throw new Error("Non-base" + BASE + " character");
        }
        return {
          encode,
          decodeUnsafe,
          decode
        };
      }
      module.exports = base;
    }
  });

  // node_modules/bs58/index.js
  var require_bs582 = __commonJS({
    "node_modules/bs58/index.js"(exports, module) {
      var basex = require_src3();
      var ALPHABET = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
      module.exports = basex(ALPHABET);
    }
  });

  // node_modules/bs58check/base.js
  var require_base2 = __commonJS({
    "node_modules/bs58check/base.js"(exports, module) {
      "use strict";
      var base58 = require_bs582();
      module.exports = function(checksumFn) {
        function encode(payload) {
          var payloadU8 = Uint8Array.from(payload);
          var checksum = checksumFn(payloadU8);
          var length = payloadU8.length + 4;
          var both = new Uint8Array(length);
          both.set(payloadU8, 0);
          both.set(checksum.subarray(0, 4), payloadU8.length);
          return base58.encode(both, length);
        }
        function decodeRaw(buffer) {
          var payload = buffer.slice(0, -4);
          var checksum = buffer.slice(-4);
          var newChecksum = checksumFn(payload);
          if (checksum[0] ^ newChecksum[0] | checksum[1] ^ newChecksum[1] | checksum[2] ^ newChecksum[2] | checksum[3] ^ newChecksum[3])
            return;
          return payload;
        }
        function decodeUnsafe(string) {
          var buffer = base58.decodeUnsafe(string);
          if (!buffer)
            return;
          return decodeRaw(buffer);
        }
        function decode(string) {
          var buffer = base58.decode(string);
          var payload = decodeRaw(buffer, checksumFn);
          if (!payload)
            throw new Error("Invalid checksum");
          return payload;
        }
        return {
          encode,
          decode,
          decodeUnsafe
        };
      };
    }
  });

  // node_modules/bs58check/index.js
  var require_bs58check2 = __commonJS({
    "node_modules/bs58check/index.js"(exports, module) {
      "use strict";
      var { sha256 } = require_sha2562();
      var bs58checkBase = require_base2();
      function sha256x2(buffer) {
        return sha256(sha256(buffer));
      }
      module.exports = bs58checkBase(sha256x2);
    }
  });

  // node_modules/bitcoinjs-lib/src/payments/p2pkh.js
  var require_p2pkh = __commonJS({
    "node_modules/bitcoinjs-lib/src/payments/p2pkh.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.p2pkh = void 0;
      var bcrypto = require_crypto3();
      var networks_1 = require_networks2();
      var bscript = require_script();
      var types_1 = require_types2();
      var lazy = require_lazy();
      var bs58check = require_bs58check2();
      var OPS = bscript.OPS;
      function p2pkh(a, opts) {
        if (!a.address && !a.hash && !a.output && !a.pubkey && !a.input)
          throw new TypeError("Not enough data");
        opts = Object.assign({ validate: true }, opts || {});
        (0, types_1.typeforce)(
          {
            network: types_1.typeforce.maybe(types_1.typeforce.Object),
            address: types_1.typeforce.maybe(types_1.typeforce.String),
            hash: types_1.typeforce.maybe(types_1.typeforce.BufferN(20)),
            output: types_1.typeforce.maybe(types_1.typeforce.BufferN(25)),
            pubkey: types_1.typeforce.maybe(types_1.isPoint),
            signature: types_1.typeforce.maybe(bscript.isCanonicalScriptSignature),
            input: types_1.typeforce.maybe(types_1.typeforce.Buffer)
          },
          a
        );
        const _address = lazy.value(() => {
          const payload = Buffer.from(bs58check.decode(a.address));
          const version = payload.readUInt8(0);
          const hash = payload.slice(1);
          return { version, hash };
        });
        const _chunks = lazy.value(() => {
          return bscript.decompile(a.input);
        });
        const network = a.network || networks_1.bitcoin;
        const o = { name: "p2pkh", network };
        lazy.prop(o, "address", () => {
          if (!o.hash)
            return;
          const payload = Buffer.allocUnsafe(21);
          payload.writeUInt8(network.pubKeyHash, 0);
          o.hash.copy(payload, 1);
          return bs58check.encode(payload);
        });
        lazy.prop(o, "hash", () => {
          if (a.output)
            return a.output.slice(3, 23);
          if (a.address)
            return _address().hash;
          if (a.pubkey || o.pubkey)
            return bcrypto.hash160(a.pubkey || o.pubkey);
        });
        lazy.prop(o, "output", () => {
          if (!o.hash)
            return;
          return bscript.compile([
            OPS.OP_DUP,
            OPS.OP_HASH160,
            o.hash,
            OPS.OP_EQUALVERIFY,
            OPS.OP_CHECKSIG
          ]);
        });
        lazy.prop(o, "pubkey", () => {
          if (!a.input)
            return;
          return _chunks()[1];
        });
        lazy.prop(o, "signature", () => {
          if (!a.input)
            return;
          return _chunks()[0];
        });
        lazy.prop(o, "input", () => {
          if (!a.pubkey)
            return;
          if (!a.signature)
            return;
          return bscript.compile([a.signature, a.pubkey]);
        });
        lazy.prop(o, "witness", () => {
          if (!o.input)
            return;
          return [];
        });
        if (opts.validate) {
          let hash = Buffer.from([]);
          if (a.address) {
            if (_address().version !== network.pubKeyHash)
              throw new TypeError("Invalid version or Network mismatch");
            if (_address().hash.length !== 20)
              throw new TypeError("Invalid address");
            hash = _address().hash;
          }
          if (a.hash) {
            if (hash.length > 0 && !hash.equals(a.hash))
              throw new TypeError("Hash mismatch");
            else
              hash = a.hash;
          }
          if (a.output) {
            if (a.output.length !== 25 || a.output[0] !== OPS.OP_DUP || a.output[1] !== OPS.OP_HASH160 || a.output[2] !== 20 || a.output[23] !== OPS.OP_EQUALVERIFY || a.output[24] !== OPS.OP_CHECKSIG)
              throw new TypeError("Output is invalid");
            const hash2 = a.output.slice(3, 23);
            if (hash.length > 0 && !hash.equals(hash2))
              throw new TypeError("Hash mismatch");
            else
              hash = hash2;
          }
          if (a.pubkey) {
            const pkh = bcrypto.hash160(a.pubkey);
            if (hash.length > 0 && !hash.equals(pkh))
              throw new TypeError("Hash mismatch");
            else
              hash = pkh;
          }
          if (a.input) {
            const chunks = _chunks();
            if (chunks.length !== 2)
              throw new TypeError("Input is invalid");
            if (!bscript.isCanonicalScriptSignature(chunks[0]))
              throw new TypeError("Input has invalid signature");
            if (!(0, types_1.isPoint)(chunks[1]))
              throw new TypeError("Input has invalid pubkey");
            if (a.signature && !a.signature.equals(chunks[0]))
              throw new TypeError("Signature mismatch");
            if (a.pubkey && !a.pubkey.equals(chunks[1]))
              throw new TypeError("Pubkey mismatch");
            const pkh = bcrypto.hash160(chunks[1]);
            if (hash.length > 0 && !hash.equals(pkh))
              throw new TypeError("Hash mismatch");
          }
        }
        return Object.assign(o, a);
      }
      exports.p2pkh = p2pkh;
    }
  });

  // node_modules/bitcoinjs-lib/src/payments/p2sh.js
  var require_p2sh = __commonJS({
    "node_modules/bitcoinjs-lib/src/payments/p2sh.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.p2sh = void 0;
      var bcrypto = require_crypto3();
      var networks_1 = require_networks2();
      var bscript = require_script();
      var types_1 = require_types2();
      var lazy = require_lazy();
      var bs58check = require_bs58check2();
      var OPS = bscript.OPS;
      function stacksEqual(a, b) {
        if (a.length !== b.length)
          return false;
        return a.every((x, i) => {
          return x.equals(b[i]);
        });
      }
      function p2sh(a, opts) {
        if (!a.address && !a.hash && !a.output && !a.redeem && !a.input)
          throw new TypeError("Not enough data");
        opts = Object.assign({ validate: true }, opts || {});
        (0, types_1.typeforce)(
          {
            network: types_1.typeforce.maybe(types_1.typeforce.Object),
            address: types_1.typeforce.maybe(types_1.typeforce.String),
            hash: types_1.typeforce.maybe(types_1.typeforce.BufferN(20)),
            output: types_1.typeforce.maybe(types_1.typeforce.BufferN(23)),
            redeem: types_1.typeforce.maybe({
              network: types_1.typeforce.maybe(types_1.typeforce.Object),
              output: types_1.typeforce.maybe(types_1.typeforce.Buffer),
              input: types_1.typeforce.maybe(types_1.typeforce.Buffer),
              witness: types_1.typeforce.maybe(
                types_1.typeforce.arrayOf(types_1.typeforce.Buffer)
              )
            }),
            input: types_1.typeforce.maybe(types_1.typeforce.Buffer),
            witness: types_1.typeforce.maybe(
              types_1.typeforce.arrayOf(types_1.typeforce.Buffer)
            )
          },
          a
        );
        let network = a.network;
        if (!network) {
          network = a.redeem && a.redeem.network || networks_1.bitcoin;
        }
        const o = { network };
        const _address = lazy.value(() => {
          const payload = Buffer.from(bs58check.decode(a.address));
          const version = payload.readUInt8(0);
          const hash = payload.slice(1);
          return { version, hash };
        });
        const _chunks = lazy.value(() => {
          return bscript.decompile(a.input);
        });
        const _redeem = lazy.value(() => {
          const chunks = _chunks();
          const lastChunk = chunks[chunks.length - 1];
          return {
            network,
            output: lastChunk === OPS.OP_FALSE ? Buffer.from([]) : lastChunk,
            input: bscript.compile(chunks.slice(0, -1)),
            witness: a.witness || []
          };
        });
        lazy.prop(o, "address", () => {
          if (!o.hash)
            return;
          const payload = Buffer.allocUnsafe(21);
          payload.writeUInt8(o.network.scriptHash, 0);
          o.hash.copy(payload, 1);
          return bs58check.encode(payload);
        });
        lazy.prop(o, "hash", () => {
          if (a.output)
            return a.output.slice(2, 22);
          if (a.address)
            return _address().hash;
          if (o.redeem && o.redeem.output)
            return bcrypto.hash160(o.redeem.output);
        });
        lazy.prop(o, "output", () => {
          if (!o.hash)
            return;
          return bscript.compile([OPS.OP_HASH160, o.hash, OPS.OP_EQUAL]);
        });
        lazy.prop(o, "redeem", () => {
          if (!a.input)
            return;
          return _redeem();
        });
        lazy.prop(o, "input", () => {
          if (!a.redeem || !a.redeem.input || !a.redeem.output)
            return;
          return bscript.compile(
            [].concat(bscript.decompile(a.redeem.input), a.redeem.output)
          );
        });
        lazy.prop(o, "witness", () => {
          if (o.redeem && o.redeem.witness)
            return o.redeem.witness;
          if (o.input)
            return [];
        });
        lazy.prop(o, "name", () => {
          const nameParts = ["p2sh"];
          if (o.redeem !== void 0 && o.redeem.name !== void 0)
            nameParts.push(o.redeem.name);
          return nameParts.join("-");
        });
        if (opts.validate) {
          let hash = Buffer.from([]);
          if (a.address) {
            if (_address().version !== network.scriptHash)
              throw new TypeError("Invalid version or Network mismatch");
            if (_address().hash.length !== 20)
              throw new TypeError("Invalid address");
            hash = _address().hash;
          }
          if (a.hash) {
            if (hash.length > 0 && !hash.equals(a.hash))
              throw new TypeError("Hash mismatch");
            else
              hash = a.hash;
          }
          if (a.output) {
            if (a.output.length !== 23 || a.output[0] !== OPS.OP_HASH160 || a.output[1] !== 20 || a.output[22] !== OPS.OP_EQUAL)
              throw new TypeError("Output is invalid");
            const hash2 = a.output.slice(2, 22);
            if (hash.length > 0 && !hash.equals(hash2))
              throw new TypeError("Hash mismatch");
            else
              hash = hash2;
          }
          const checkRedeem = (redeem) => {
            if (redeem.output) {
              const decompile = bscript.decompile(redeem.output);
              if (!decompile || decompile.length < 1)
                throw new TypeError("Redeem.output too short");
              if (redeem.output.byteLength > 520)
                throw new TypeError(
                  "Redeem.output unspendable if larger than 520 bytes"
                );
              if (bscript.countNonPushOnlyOPs(decompile) > 201)
                throw new TypeError(
                  "Redeem.output unspendable with more than 201 non-push ops"
                );
              const hash2 = bcrypto.hash160(redeem.output);
              if (hash.length > 0 && !hash.equals(hash2))
                throw new TypeError("Hash mismatch");
              else
                hash = hash2;
            }
            if (redeem.input) {
              const hasInput = redeem.input.length > 0;
              const hasWitness = redeem.witness && redeem.witness.length > 0;
              if (!hasInput && !hasWitness)
                throw new TypeError("Empty input");
              if (hasInput && hasWitness)
                throw new TypeError("Input and witness provided");
              if (hasInput) {
                const richunks = bscript.decompile(redeem.input);
                if (!bscript.isPushOnly(richunks))
                  throw new TypeError("Non push-only scriptSig");
              }
            }
          };
          if (a.input) {
            const chunks = _chunks();
            if (!chunks || chunks.length < 1)
              throw new TypeError("Input too short");
            if (!Buffer.isBuffer(_redeem().output))
              throw new TypeError("Input is invalid");
            checkRedeem(_redeem());
          }
          if (a.redeem) {
            if (a.redeem.network && a.redeem.network !== network)
              throw new TypeError("Network mismatch");
            if (a.input) {
              const redeem = _redeem();
              if (a.redeem.output && !a.redeem.output.equals(redeem.output))
                throw new TypeError("Redeem.output mismatch");
              if (a.redeem.input && !a.redeem.input.equals(redeem.input))
                throw new TypeError("Redeem.input mismatch");
            }
            checkRedeem(a.redeem);
          }
          if (a.witness) {
            if (a.redeem && a.redeem.witness && !stacksEqual(a.redeem.witness, a.witness))
              throw new TypeError("Witness and redeem.witness mismatch");
          }
        }
        return Object.assign(o, a);
      }
      exports.p2sh = p2sh;
    }
  });

  // node_modules/bech32/dist/index.js
  var require_dist2 = __commonJS({
    "node_modules/bech32/dist/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.bech32m = exports.bech32 = void 0;
      var ALPHABET = "qpzry9x8gf2tvdw0s3jn54khce6mua7l";
      var ALPHABET_MAP = {};
      for (let z = 0; z < ALPHABET.length; z++) {
        const x = ALPHABET.charAt(z);
        ALPHABET_MAP[x] = z;
      }
      function polymodStep(pre) {
        const b = pre >> 25;
        return (pre & 33554431) << 5 ^ -(b >> 0 & 1) & 996825010 ^ -(b >> 1 & 1) & 642813549 ^ -(b >> 2 & 1) & 513874426 ^ -(b >> 3 & 1) & 1027748829 ^ -(b >> 4 & 1) & 705979059;
      }
      function prefixChk(prefix) {
        let chk = 1;
        for (let i = 0; i < prefix.length; ++i) {
          const c = prefix.charCodeAt(i);
          if (c < 33 || c > 126)
            return "Invalid prefix (" + prefix + ")";
          chk = polymodStep(chk) ^ c >> 5;
        }
        chk = polymodStep(chk);
        for (let i = 0; i < prefix.length; ++i) {
          const v = prefix.charCodeAt(i);
          chk = polymodStep(chk) ^ v & 31;
        }
        return chk;
      }
      function convert(data, inBits, outBits, pad) {
        let value = 0;
        let bits = 0;
        const maxV = (1 << outBits) - 1;
        const result = [];
        for (let i = 0; i < data.length; ++i) {
          value = value << inBits | data[i];
          bits += inBits;
          while (bits >= outBits) {
            bits -= outBits;
            result.push(value >> bits & maxV);
          }
        }
        if (pad) {
          if (bits > 0) {
            result.push(value << outBits - bits & maxV);
          }
        } else {
          if (bits >= inBits)
            return "Excess padding";
          if (value << outBits - bits & maxV)
            return "Non-zero padding";
        }
        return result;
      }
      function toWords(bytes) {
        return convert(bytes, 8, 5, true);
      }
      function fromWordsUnsafe(words) {
        const res = convert(words, 5, 8, false);
        if (Array.isArray(res))
          return res;
      }
      function fromWords(words) {
        const res = convert(words, 5, 8, false);
        if (Array.isArray(res))
          return res;
        throw new Error(res);
      }
      function getLibraryFromEncoding(encoding) {
        let ENCODING_CONST;
        if (encoding === "bech32") {
          ENCODING_CONST = 1;
        } else {
          ENCODING_CONST = 734539939;
        }
        function encode(prefix, words, LIMIT) {
          LIMIT = LIMIT || 90;
          if (prefix.length + 7 + words.length > LIMIT)
            throw new TypeError("Exceeds length limit");
          prefix = prefix.toLowerCase();
          let chk = prefixChk(prefix);
          if (typeof chk === "string")
            throw new Error(chk);
          let result = prefix + "1";
          for (let i = 0; i < words.length; ++i) {
            const x = words[i];
            if (x >> 5 !== 0)
              throw new Error("Non 5-bit word");
            chk = polymodStep(chk) ^ x;
            result += ALPHABET.charAt(x);
          }
          for (let i = 0; i < 6; ++i) {
            chk = polymodStep(chk);
          }
          chk ^= ENCODING_CONST;
          for (let i = 0; i < 6; ++i) {
            const v = chk >> (5 - i) * 5 & 31;
            result += ALPHABET.charAt(v);
          }
          return result;
        }
        function __decode(str, LIMIT) {
          LIMIT = LIMIT || 90;
          if (str.length < 8)
            return str + " too short";
          if (str.length > LIMIT)
            return "Exceeds length limit";
          const lowered = str.toLowerCase();
          const uppered = str.toUpperCase();
          if (str !== lowered && str !== uppered)
            return "Mixed-case string " + str;
          str = lowered;
          const split = str.lastIndexOf("1");
          if (split === -1)
            return "No separator character for " + str;
          if (split === 0)
            return "Missing prefix for " + str;
          const prefix = str.slice(0, split);
          const wordChars = str.slice(split + 1);
          if (wordChars.length < 6)
            return "Data too short";
          let chk = prefixChk(prefix);
          if (typeof chk === "string")
            return chk;
          const words = [];
          for (let i = 0; i < wordChars.length; ++i) {
            const c = wordChars.charAt(i);
            const v = ALPHABET_MAP[c];
            if (v === void 0)
              return "Unknown character " + c;
            chk = polymodStep(chk) ^ v;
            if (i + 6 >= wordChars.length)
              continue;
            words.push(v);
          }
          if (chk !== ENCODING_CONST)
            return "Invalid checksum for " + str;
          return { prefix, words };
        }
        function decodeUnsafe(str, LIMIT) {
          const res = __decode(str, LIMIT);
          if (typeof res === "object")
            return res;
        }
        function decode(str, LIMIT) {
          const res = __decode(str, LIMIT);
          if (typeof res === "object")
            return res;
          throw new Error(res);
        }
        return {
          decodeUnsafe,
          decode,
          encode,
          toWords,
          fromWordsUnsafe,
          fromWords
        };
      }
      exports.bech32 = getLibraryFromEncoding("bech32");
      exports.bech32m = getLibraryFromEncoding("bech32m");
    }
  });

  // node_modules/bitcoinjs-lib/src/payments/p2wpkh.js
  var require_p2wpkh = __commonJS({
    "node_modules/bitcoinjs-lib/src/payments/p2wpkh.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.p2wpkh = void 0;
      var bcrypto = require_crypto3();
      var networks_1 = require_networks2();
      var bscript = require_script();
      var types_1 = require_types2();
      var lazy = require_lazy();
      var bech32_1 = require_dist2();
      var OPS = bscript.OPS;
      var EMPTY_BUFFER = Buffer.alloc(0);
      function p2wpkh(a, opts) {
        if (!a.address && !a.hash && !a.output && !a.pubkey && !a.witness)
          throw new TypeError("Not enough data");
        opts = Object.assign({ validate: true }, opts || {});
        (0, types_1.typeforce)(
          {
            address: types_1.typeforce.maybe(types_1.typeforce.String),
            hash: types_1.typeforce.maybe(types_1.typeforce.BufferN(20)),
            input: types_1.typeforce.maybe(types_1.typeforce.BufferN(0)),
            network: types_1.typeforce.maybe(types_1.typeforce.Object),
            output: types_1.typeforce.maybe(types_1.typeforce.BufferN(22)),
            pubkey: types_1.typeforce.maybe(types_1.isPoint),
            signature: types_1.typeforce.maybe(bscript.isCanonicalScriptSignature),
            witness: types_1.typeforce.maybe(
              types_1.typeforce.arrayOf(types_1.typeforce.Buffer)
            )
          },
          a
        );
        const _address = lazy.value(() => {
          const result = bech32_1.bech32.decode(a.address);
          const version = result.words.shift();
          const data = bech32_1.bech32.fromWords(result.words);
          return {
            version,
            prefix: result.prefix,
            data: Buffer.from(data)
          };
        });
        const network = a.network || networks_1.bitcoin;
        const o = { name: "p2wpkh", network };
        lazy.prop(o, "address", () => {
          if (!o.hash)
            return;
          const words = bech32_1.bech32.toWords(o.hash);
          words.unshift(0);
          return bech32_1.bech32.encode(network.bech32, words);
        });
        lazy.prop(o, "hash", () => {
          if (a.output)
            return a.output.slice(2, 22);
          if (a.address)
            return _address().data;
          if (a.pubkey || o.pubkey)
            return bcrypto.hash160(a.pubkey || o.pubkey);
        });
        lazy.prop(o, "output", () => {
          if (!o.hash)
            return;
          return bscript.compile([OPS.OP_0, o.hash]);
        });
        lazy.prop(o, "pubkey", () => {
          if (a.pubkey)
            return a.pubkey;
          if (!a.witness)
            return;
          return a.witness[1];
        });
        lazy.prop(o, "signature", () => {
          if (!a.witness)
            return;
          return a.witness[0];
        });
        lazy.prop(o, "input", () => {
          if (!o.witness)
            return;
          return EMPTY_BUFFER;
        });
        lazy.prop(o, "witness", () => {
          if (!a.pubkey)
            return;
          if (!a.signature)
            return;
          return [a.signature, a.pubkey];
        });
        if (opts.validate) {
          let hash = Buffer.from([]);
          if (a.address) {
            if (network && network.bech32 !== _address().prefix)
              throw new TypeError("Invalid prefix or Network mismatch");
            if (_address().version !== 0)
              throw new TypeError("Invalid address version");
            if (_address().data.length !== 20)
              throw new TypeError("Invalid address data");
            hash = _address().data;
          }
          if (a.hash) {
            if (hash.length > 0 && !hash.equals(a.hash))
              throw new TypeError("Hash mismatch");
            else
              hash = a.hash;
          }
          if (a.output) {
            if (a.output.length !== 22 || a.output[0] !== OPS.OP_0 || a.output[1] !== 20)
              throw new TypeError("Output is invalid");
            if (hash.length > 0 && !hash.equals(a.output.slice(2)))
              throw new TypeError("Hash mismatch");
            else
              hash = a.output.slice(2);
          }
          if (a.pubkey) {
            const pkh = bcrypto.hash160(a.pubkey);
            if (hash.length > 0 && !hash.equals(pkh))
              throw new TypeError("Hash mismatch");
            else
              hash = pkh;
            if (!(0, types_1.isPoint)(a.pubkey) || a.pubkey.length !== 33)
              throw new TypeError("Invalid pubkey for p2wpkh");
          }
          if (a.witness) {
            if (a.witness.length !== 2)
              throw new TypeError("Witness is invalid");
            if (!bscript.isCanonicalScriptSignature(a.witness[0]))
              throw new TypeError("Witness has invalid signature");
            if (!(0, types_1.isPoint)(a.witness[1]) || a.witness[1].length !== 33)
              throw new TypeError("Witness has invalid pubkey");
            if (a.signature && !a.signature.equals(a.witness[0]))
              throw new TypeError("Signature mismatch");
            if (a.pubkey && !a.pubkey.equals(a.witness[1]))
              throw new TypeError("Pubkey mismatch");
            const pkh = bcrypto.hash160(a.witness[1]);
            if (hash.length > 0 && !hash.equals(pkh))
              throw new TypeError("Hash mismatch");
          }
        }
        return Object.assign(o, a);
      }
      exports.p2wpkh = p2wpkh;
    }
  });

  // node_modules/bitcoinjs-lib/src/payments/p2wsh.js
  var require_p2wsh = __commonJS({
    "node_modules/bitcoinjs-lib/src/payments/p2wsh.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.p2wsh = void 0;
      var bcrypto = require_crypto3();
      var networks_1 = require_networks2();
      var bscript = require_script();
      var types_1 = require_types2();
      var lazy = require_lazy();
      var bech32_1 = require_dist2();
      var OPS = bscript.OPS;
      var EMPTY_BUFFER = Buffer.alloc(0);
      function stacksEqual(a, b) {
        if (a.length !== b.length)
          return false;
        return a.every((x, i) => {
          return x.equals(b[i]);
        });
      }
      function chunkHasUncompressedPubkey(chunk) {
        if (Buffer.isBuffer(chunk) && chunk.length === 65 && chunk[0] === 4 && (0, types_1.isPoint)(chunk)) {
          return true;
        } else {
          return false;
        }
      }
      function p2wsh(a, opts) {
        if (!a.address && !a.hash && !a.output && !a.redeem && !a.witness)
          throw new TypeError("Not enough data");
        opts = Object.assign({ validate: true }, opts || {});
        (0, types_1.typeforce)(
          {
            network: types_1.typeforce.maybe(types_1.typeforce.Object),
            address: types_1.typeforce.maybe(types_1.typeforce.String),
            hash: types_1.typeforce.maybe(types_1.typeforce.BufferN(32)),
            output: types_1.typeforce.maybe(types_1.typeforce.BufferN(34)),
            redeem: types_1.typeforce.maybe({
              input: types_1.typeforce.maybe(types_1.typeforce.Buffer),
              network: types_1.typeforce.maybe(types_1.typeforce.Object),
              output: types_1.typeforce.maybe(types_1.typeforce.Buffer),
              witness: types_1.typeforce.maybe(
                types_1.typeforce.arrayOf(types_1.typeforce.Buffer)
              )
            }),
            input: types_1.typeforce.maybe(types_1.typeforce.BufferN(0)),
            witness: types_1.typeforce.maybe(
              types_1.typeforce.arrayOf(types_1.typeforce.Buffer)
            )
          },
          a
        );
        const _address = lazy.value(() => {
          const result = bech32_1.bech32.decode(a.address);
          const version = result.words.shift();
          const data = bech32_1.bech32.fromWords(result.words);
          return {
            version,
            prefix: result.prefix,
            data: Buffer.from(data)
          };
        });
        const _rchunks = lazy.value(() => {
          return bscript.decompile(a.redeem.input);
        });
        let network = a.network;
        if (!network) {
          network = a.redeem && a.redeem.network || networks_1.bitcoin;
        }
        const o = { network };
        lazy.prop(o, "address", () => {
          if (!o.hash)
            return;
          const words = bech32_1.bech32.toWords(o.hash);
          words.unshift(0);
          return bech32_1.bech32.encode(network.bech32, words);
        });
        lazy.prop(o, "hash", () => {
          if (a.output)
            return a.output.slice(2);
          if (a.address)
            return _address().data;
          if (o.redeem && o.redeem.output)
            return bcrypto.sha256(o.redeem.output);
        });
        lazy.prop(o, "output", () => {
          if (!o.hash)
            return;
          return bscript.compile([OPS.OP_0, o.hash]);
        });
        lazy.prop(o, "redeem", () => {
          if (!a.witness)
            return;
          return {
            output: a.witness[a.witness.length - 1],
            input: EMPTY_BUFFER,
            witness: a.witness.slice(0, -1)
          };
        });
        lazy.prop(o, "input", () => {
          if (!o.witness)
            return;
          return EMPTY_BUFFER;
        });
        lazy.prop(o, "witness", () => {
          if (a.redeem && a.redeem.input && a.redeem.input.length > 0 && a.redeem.output && a.redeem.output.length > 0) {
            const stack = bscript.toStack(_rchunks());
            o.redeem = Object.assign({ witness: stack }, a.redeem);
            o.redeem.input = EMPTY_BUFFER;
            return [].concat(stack, a.redeem.output);
          }
          if (!a.redeem)
            return;
          if (!a.redeem.output)
            return;
          if (!a.redeem.witness)
            return;
          return [].concat(a.redeem.witness, a.redeem.output);
        });
        lazy.prop(o, "name", () => {
          const nameParts = ["p2wsh"];
          if (o.redeem !== void 0 && o.redeem.name !== void 0)
            nameParts.push(o.redeem.name);
          return nameParts.join("-");
        });
        if (opts.validate) {
          let hash = Buffer.from([]);
          if (a.address) {
            if (_address().prefix !== network.bech32)
              throw new TypeError("Invalid prefix or Network mismatch");
            if (_address().version !== 0)
              throw new TypeError("Invalid address version");
            if (_address().data.length !== 32)
              throw new TypeError("Invalid address data");
            hash = _address().data;
          }
          if (a.hash) {
            if (hash.length > 0 && !hash.equals(a.hash))
              throw new TypeError("Hash mismatch");
            else
              hash = a.hash;
          }
          if (a.output) {
            if (a.output.length !== 34 || a.output[0] !== OPS.OP_0 || a.output[1] !== 32)
              throw new TypeError("Output is invalid");
            const hash2 = a.output.slice(2);
            if (hash.length > 0 && !hash.equals(hash2))
              throw new TypeError("Hash mismatch");
            else
              hash = hash2;
          }
          if (a.redeem) {
            if (a.redeem.network && a.redeem.network !== network)
              throw new TypeError("Network mismatch");
            if (a.redeem.input && a.redeem.input.length > 0 && a.redeem.witness && a.redeem.witness.length > 0)
              throw new TypeError("Ambiguous witness source");
            if (a.redeem.output) {
              const decompile = bscript.decompile(a.redeem.output);
              if (!decompile || decompile.length < 1)
                throw new TypeError("Redeem.output is invalid");
              if (a.redeem.output.byteLength > 3600)
                throw new TypeError(
                  "Redeem.output unspendable if larger than 3600 bytes"
                );
              if (bscript.countNonPushOnlyOPs(decompile) > 201)
                throw new TypeError(
                  "Redeem.output unspendable with more than 201 non-push ops"
                );
              const hash2 = bcrypto.sha256(a.redeem.output);
              if (hash.length > 0 && !hash.equals(hash2))
                throw new TypeError("Hash mismatch");
              else
                hash = hash2;
            }
            if (a.redeem.input && !bscript.isPushOnly(_rchunks()))
              throw new TypeError("Non push-only scriptSig");
            if (a.witness && a.redeem.witness && !stacksEqual(a.witness, a.redeem.witness))
              throw new TypeError("Witness and redeem.witness mismatch");
            if (a.redeem.input && _rchunks().some(chunkHasUncompressedPubkey) || a.redeem.output && (bscript.decompile(a.redeem.output) || []).some(
              chunkHasUncompressedPubkey
            )) {
              throw new TypeError(
                "redeem.input or redeem.output contains uncompressed pubkey"
              );
            }
          }
          if (a.witness && a.witness.length > 0) {
            const wScript = a.witness[a.witness.length - 1];
            if (a.redeem && a.redeem.output && !a.redeem.output.equals(wScript))
              throw new TypeError("Witness and redeem.output mismatch");
            if (a.witness.some(chunkHasUncompressedPubkey) || (bscript.decompile(wScript) || []).some(chunkHasUncompressedPubkey))
              throw new TypeError("Witness contains uncompressed pubkey");
          }
        }
        return Object.assign(o, a);
      }
      exports.p2wsh = p2wsh;
    }
  });

  // node_modules/bitcoinjs-lib/src/ecc_lib.js
  var require_ecc_lib = __commonJS({
    "node_modules/bitcoinjs-lib/src/ecc_lib.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getEccLib = exports.initEccLib = void 0;
      var _ECCLIB_CACHE = {};
      function initEccLib(eccLib) {
        if (!eccLib) {
          _ECCLIB_CACHE.eccLib = eccLib;
        } else if (eccLib !== _ECCLIB_CACHE.eccLib) {
          verifyEcc(eccLib);
          _ECCLIB_CACHE.eccLib = eccLib;
        }
      }
      exports.initEccLib = initEccLib;
      function getEccLib() {
        if (!_ECCLIB_CACHE.eccLib)
          throw new Error(
            "No ECC Library provided. You must call initEccLib() with a valid TinySecp256k1Interface instance"
          );
        return _ECCLIB_CACHE.eccLib;
      }
      exports.getEccLib = getEccLib;
      var h = (hex) => Buffer.from(hex, "hex");
      function verifyEcc(ecc3) {
        assert(typeof ecc3.isXOnlyPoint === "function");
        assert(
          ecc3.isXOnlyPoint(
            h("79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798")
          )
        );
        assert(
          ecc3.isXOnlyPoint(
            h("fffffffffffffffffffffffffffffffffffffffffffffffffffffffeeffffc2e")
          )
        );
        assert(
          ecc3.isXOnlyPoint(
            h("f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9")
          )
        );
        assert(
          ecc3.isXOnlyPoint(
            h("0000000000000000000000000000000000000000000000000000000000000001")
          )
        );
        assert(
          !ecc3.isXOnlyPoint(
            h("0000000000000000000000000000000000000000000000000000000000000000")
          )
        );
        assert(
          !ecc3.isXOnlyPoint(
            h("fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f")
          )
        );
        assert(typeof ecc3.xOnlyPointAddTweak === "function");
        tweakAddVectors.forEach((t) => {
          const r = ecc3.xOnlyPointAddTweak(h(t.pubkey), h(t.tweak));
          if (t.result === null) {
            assert(r === null);
          } else {
            assert(r !== null);
            assert(r.parity === t.parity);
            assert(Buffer.from(r.xOnlyPubkey).equals(h(t.result)));
          }
        });
      }
      function assert(bool) {
        if (!bool)
          throw new Error("ecc library invalid");
      }
      var tweakAddVectors = [
        {
          pubkey: "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
          tweak: "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140",
          parity: -1,
          result: null
        },
        {
          pubkey: "1617d38ed8d8657da4d4761e8057bc396ea9e4b9d29776d4be096016dbd2509b",
          tweak: "a8397a935f0dfceba6ba9618f6451ef4d80637abf4e6af2669fbc9de6a8fd2ac",
          parity: 1,
          result: "e478f99dab91052ab39a33ea35fd5e6e4933f4d28023cd597c9a1f6760346adf"
        },
        {
          pubkey: "2c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991",
          tweak: "823c3cd2142744b075a87eade7e1b8678ba308d566226a0056ca2b7a76f86b47",
          parity: 0,
          result: "9534f8dc8c6deda2dc007655981c78b49c5d96c778fbf363462a11ec9dfd948c"
        }
      ];
    }
  });

  // node_modules/varuint-bitcoin/index.js
  var require_varuint_bitcoin = __commonJS({
    "node_modules/varuint-bitcoin/index.js"(exports, module) {
      "use strict";
      var Buffer2 = require_safe_buffer().Buffer;
      var MAX_SAFE_INTEGER = 9007199254740991;
      function checkUInt53(n) {
        if (n < 0 || n > MAX_SAFE_INTEGER || n % 1 !== 0)
          throw new RangeError("value out of range");
      }
      function encode(number, buffer, offset) {
        checkUInt53(number);
        if (!buffer)
          buffer = Buffer2.allocUnsafe(encodingLength(number));
        if (!Buffer2.isBuffer(buffer))
          throw new TypeError("buffer must be a Buffer instance");
        if (!offset)
          offset = 0;
        if (number < 253) {
          buffer.writeUInt8(number, offset);
          encode.bytes = 1;
        } else if (number <= 65535) {
          buffer.writeUInt8(253, offset);
          buffer.writeUInt16LE(number, offset + 1);
          encode.bytes = 3;
        } else if (number <= 4294967295) {
          buffer.writeUInt8(254, offset);
          buffer.writeUInt32LE(number, offset + 1);
          encode.bytes = 5;
        } else {
          buffer.writeUInt8(255, offset);
          buffer.writeUInt32LE(number >>> 0, offset + 1);
          buffer.writeUInt32LE(number / 4294967296 | 0, offset + 5);
          encode.bytes = 9;
        }
        return buffer;
      }
      function decode(buffer, offset) {
        if (!Buffer2.isBuffer(buffer))
          throw new TypeError("buffer must be a Buffer instance");
        if (!offset)
          offset = 0;
        var first = buffer.readUInt8(offset);
        if (first < 253) {
          decode.bytes = 1;
          return first;
        } else if (first === 253) {
          decode.bytes = 3;
          return buffer.readUInt16LE(offset + 1);
        } else if (first === 254) {
          decode.bytes = 5;
          return buffer.readUInt32LE(offset + 1);
        } else {
          decode.bytes = 9;
          var lo = buffer.readUInt32LE(offset + 1);
          var hi = buffer.readUInt32LE(offset + 5);
          var number = hi * 4294967296 + lo;
          checkUInt53(number);
          return number;
        }
      }
      function encodingLength(number) {
        checkUInt53(number);
        return number < 253 ? 1 : number <= 65535 ? 3 : number <= 4294967295 ? 5 : 9;
      }
      module.exports = { encode, decode, encodingLength };
    }
  });

  // node_modules/bitcoinjs-lib/src/bufferutils.js
  var require_bufferutils = __commonJS({
    "node_modules/bitcoinjs-lib/src/bufferutils.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.BufferReader = exports.BufferWriter = exports.cloneBuffer = exports.reverseBuffer = exports.writeUInt64LE = exports.readUInt64LE = exports.varuint = void 0;
      var types = require_types2();
      var { typeforce } = types;
      var varuint = require_varuint_bitcoin();
      exports.varuint = varuint;
      function verifuint(value, max) {
        if (typeof value !== "number")
          throw new Error("cannot write a non-number as a number");
        if (value < 0)
          throw new Error("specified a negative value for writing an unsigned value");
        if (value > max)
          throw new Error("RangeError: value out of range");
        if (Math.floor(value) !== value)
          throw new Error("value has a fractional component");
      }
      function readUInt64LE(buffer, offset) {
        const a = buffer.readUInt32LE(offset);
        let b = buffer.readUInt32LE(offset + 4);
        b *= 4294967296;
        verifuint(b + a, 9007199254740991);
        return b + a;
      }
      exports.readUInt64LE = readUInt64LE;
      function writeUInt64LE(buffer, value, offset) {
        verifuint(value, 9007199254740991);
        buffer.writeInt32LE(value & -1, offset);
        buffer.writeUInt32LE(Math.floor(value / 4294967296), offset + 4);
        return offset + 8;
      }
      exports.writeUInt64LE = writeUInt64LE;
      function reverseBuffer(buffer) {
        if (buffer.length < 1)
          return buffer;
        let j = buffer.length - 1;
        let tmp = 0;
        for (let i = 0; i < buffer.length / 2; i++) {
          tmp = buffer[i];
          buffer[i] = buffer[j];
          buffer[j] = tmp;
          j--;
        }
        return buffer;
      }
      exports.reverseBuffer = reverseBuffer;
      function cloneBuffer(buffer) {
        const clone = Buffer.allocUnsafe(buffer.length);
        buffer.copy(clone);
        return clone;
      }
      exports.cloneBuffer = cloneBuffer;
      var BufferWriter = class _BufferWriter {
        static withCapacity(size) {
          return new _BufferWriter(Buffer.alloc(size));
        }
        constructor(buffer, offset = 0) {
          this.buffer = buffer;
          this.offset = offset;
          typeforce(types.tuple(types.Buffer, types.UInt32), [buffer, offset]);
        }
        writeUInt8(i) {
          this.offset = this.buffer.writeUInt8(i, this.offset);
        }
        writeInt32(i) {
          this.offset = this.buffer.writeInt32LE(i, this.offset);
        }
        writeUInt32(i) {
          this.offset = this.buffer.writeUInt32LE(i, this.offset);
        }
        writeUInt64(i) {
          this.offset = writeUInt64LE(this.buffer, i, this.offset);
        }
        writeVarInt(i) {
          varuint.encode(i, this.buffer, this.offset);
          this.offset += varuint.encode.bytes;
        }
        writeSlice(slice) {
          if (this.buffer.length < this.offset + slice.length) {
            throw new Error("Cannot write slice out of bounds");
          }
          this.offset += slice.copy(this.buffer, this.offset);
        }
        writeVarSlice(slice) {
          this.writeVarInt(slice.length);
          this.writeSlice(slice);
        }
        writeVector(vector) {
          this.writeVarInt(vector.length);
          vector.forEach((buf) => this.writeVarSlice(buf));
        }
        end() {
          if (this.buffer.length === this.offset) {
            return this.buffer;
          }
          throw new Error(`buffer size ${this.buffer.length}, offset ${this.offset}`);
        }
      };
      exports.BufferWriter = BufferWriter;
      var BufferReader = class {
        constructor(buffer, offset = 0) {
          this.buffer = buffer;
          this.offset = offset;
          typeforce(types.tuple(types.Buffer, types.UInt32), [buffer, offset]);
        }
        readUInt8() {
          const result = this.buffer.readUInt8(this.offset);
          this.offset++;
          return result;
        }
        readInt32() {
          const result = this.buffer.readInt32LE(this.offset);
          this.offset += 4;
          return result;
        }
        readUInt32() {
          const result = this.buffer.readUInt32LE(this.offset);
          this.offset += 4;
          return result;
        }
        readUInt64() {
          const result = readUInt64LE(this.buffer, this.offset);
          this.offset += 8;
          return result;
        }
        readVarInt() {
          const vi = varuint.decode(this.buffer, this.offset);
          this.offset += varuint.decode.bytes;
          return vi;
        }
        readSlice(n) {
          if (this.buffer.length < this.offset + n) {
            throw new Error("Cannot read slice out of bounds");
          }
          const result = this.buffer.slice(this.offset, this.offset + n);
          this.offset += n;
          return result;
        }
        readVarSlice() {
          return this.readSlice(this.readVarInt());
        }
        readVector() {
          const count = this.readVarInt();
          const vector = [];
          for (let i = 0; i < count; i++)
            vector.push(this.readVarSlice());
          return vector;
        }
      };
      exports.BufferReader = BufferReader;
    }
  });

  // node_modules/bitcoinjs-lib/src/payments/bip341.js
  var require_bip341 = __commonJS({
    "node_modules/bitcoinjs-lib/src/payments/bip341.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.tweakKey = exports.tapTweakHash = exports.tapleafHash = exports.findScriptPath = exports.toHashTree = exports.rootHashFromPath = exports.MAX_TAPTREE_DEPTH = exports.LEAF_VERSION_TAPSCRIPT = void 0;
      var buffer_1 = require_buffer();
      var ecc_lib_1 = require_ecc_lib();
      var bcrypto = require_crypto3();
      var bufferutils_1 = require_bufferutils();
      var types_1 = require_types2();
      exports.LEAF_VERSION_TAPSCRIPT = 192;
      exports.MAX_TAPTREE_DEPTH = 128;
      var isHashBranch = (ht) => "left" in ht && "right" in ht;
      function rootHashFromPath(controlBlock, leafHash) {
        if (controlBlock.length < 33)
          throw new TypeError(
            `The control-block length is too small. Got ${controlBlock.length}, expected min 33.`
          );
        const m = (controlBlock.length - 33) / 32;
        let kj = leafHash;
        for (let j = 0; j < m; j++) {
          const ej = controlBlock.slice(33 + 32 * j, 65 + 32 * j);
          if (kj.compare(ej) < 0) {
            kj = tapBranchHash(kj, ej);
          } else {
            kj = tapBranchHash(ej, kj);
          }
        }
        return kj;
      }
      exports.rootHashFromPath = rootHashFromPath;
      function toHashTree(scriptTree) {
        if ((0, types_1.isTapleaf)(scriptTree))
          return { hash: tapleafHash(scriptTree) };
        const hashes = [toHashTree(scriptTree[0]), toHashTree(scriptTree[1])];
        hashes.sort((a, b) => a.hash.compare(b.hash));
        const [left, right] = hashes;
        return {
          hash: tapBranchHash(left.hash, right.hash),
          left,
          right
        };
      }
      exports.toHashTree = toHashTree;
      function findScriptPath(node, hash) {
        if (isHashBranch(node)) {
          const leftPath = findScriptPath(node.left, hash);
          if (leftPath !== void 0)
            return [...leftPath, node.right.hash];
          const rightPath = findScriptPath(node.right, hash);
          if (rightPath !== void 0)
            return [...rightPath, node.left.hash];
        } else if (node.hash.equals(hash)) {
          return [];
        }
        return void 0;
      }
      exports.findScriptPath = findScriptPath;
      function tapleafHash(leaf) {
        const version = leaf.version || exports.LEAF_VERSION_TAPSCRIPT;
        return bcrypto.taggedHash(
          "TapLeaf",
          buffer_1.Buffer.concat([
            buffer_1.Buffer.from([version]),
            serializeScript(leaf.output)
          ])
        );
      }
      exports.tapleafHash = tapleafHash;
      function tapTweakHash(pubKey, h) {
        return bcrypto.taggedHash(
          "TapTweak",
          buffer_1.Buffer.concat(h ? [pubKey, h] : [pubKey])
        );
      }
      exports.tapTweakHash = tapTweakHash;
      function tweakKey(pubKey, h) {
        if (!buffer_1.Buffer.isBuffer(pubKey))
          return null;
        if (pubKey.length !== 32)
          return null;
        if (h && h.length !== 32)
          return null;
        const tweakHash = tapTweakHash(pubKey, h);
        const res = (0, ecc_lib_1.getEccLib)().xOnlyPointAddTweak(pubKey, tweakHash);
        if (!res || res.xOnlyPubkey === null)
          return null;
        return {
          parity: res.parity,
          x: buffer_1.Buffer.from(res.xOnlyPubkey)
        };
      }
      exports.tweakKey = tweakKey;
      function tapBranchHash(a, b) {
        return bcrypto.taggedHash("TapBranch", buffer_1.Buffer.concat([a, b]));
      }
      function serializeScript(s) {
        const varintLen = bufferutils_1.varuint.encodingLength(s.length);
        const buffer = buffer_1.Buffer.allocUnsafe(varintLen);
        bufferutils_1.varuint.encode(s.length, buffer);
        return buffer_1.Buffer.concat([buffer, s]);
      }
    }
  });

  // node_modules/bitcoinjs-lib/src/payments/p2tr.js
  var require_p2tr = __commonJS({
    "node_modules/bitcoinjs-lib/src/payments/p2tr.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.p2tr = void 0;
      var buffer_1 = require_buffer();
      var networks_1 = require_networks2();
      var bscript = require_script();
      var types_1 = require_types2();
      var ecc_lib_1 = require_ecc_lib();
      var bip341_1 = require_bip341();
      var lazy = require_lazy();
      var bech32_1 = require_dist2();
      var OPS = bscript.OPS;
      var TAPROOT_WITNESS_VERSION = 1;
      var ANNEX_PREFIX = 80;
      function p2tr(a, opts) {
        if (!a.address && !a.output && !a.pubkey && !a.internalPubkey && !(a.witness && a.witness.length > 1))
          throw new TypeError("Not enough data");
        opts = Object.assign({ validate: true }, opts || {});
        (0, types_1.typeforce)(
          {
            address: types_1.typeforce.maybe(types_1.typeforce.String),
            input: types_1.typeforce.maybe(types_1.typeforce.BufferN(0)),
            network: types_1.typeforce.maybe(types_1.typeforce.Object),
            output: types_1.typeforce.maybe(types_1.typeforce.BufferN(34)),
            internalPubkey: types_1.typeforce.maybe(types_1.typeforce.BufferN(32)),
            hash: types_1.typeforce.maybe(types_1.typeforce.BufferN(32)),
            pubkey: types_1.typeforce.maybe(types_1.typeforce.BufferN(32)),
            signature: types_1.typeforce.maybe(
              types_1.typeforce.anyOf(
                types_1.typeforce.BufferN(64),
                types_1.typeforce.BufferN(65)
              )
            ),
            witness: types_1.typeforce.maybe(
              types_1.typeforce.arrayOf(types_1.typeforce.Buffer)
            ),
            scriptTree: types_1.typeforce.maybe(types_1.isTaptree),
            redeem: types_1.typeforce.maybe({
              output: types_1.typeforce.maybe(types_1.typeforce.Buffer),
              redeemVersion: types_1.typeforce.maybe(types_1.typeforce.Number),
              witness: types_1.typeforce.maybe(
                types_1.typeforce.arrayOf(types_1.typeforce.Buffer)
              )
            }),
            redeemVersion: types_1.typeforce.maybe(types_1.typeforce.Number)
          },
          a
        );
        const _address = lazy.value(() => {
          const result = bech32_1.bech32m.decode(a.address);
          const version = result.words.shift();
          const data = bech32_1.bech32m.fromWords(result.words);
          return {
            version,
            prefix: result.prefix,
            data: buffer_1.Buffer.from(data)
          };
        });
        const _witness = lazy.value(() => {
          if (!a.witness || !a.witness.length)
            return;
          if (a.witness.length >= 2 && a.witness[a.witness.length - 1][0] === ANNEX_PREFIX) {
            return a.witness.slice(0, -1);
          }
          return a.witness.slice();
        });
        const _hashTree = lazy.value(() => {
          if (a.scriptTree)
            return (0, bip341_1.toHashTree)(a.scriptTree);
          if (a.hash)
            return { hash: a.hash };
          return;
        });
        const network = a.network || networks_1.bitcoin;
        const o = { name: "p2tr", network };
        lazy.prop(o, "address", () => {
          if (!o.pubkey)
            return;
          const words = bech32_1.bech32m.toWords(o.pubkey);
          words.unshift(TAPROOT_WITNESS_VERSION);
          return bech32_1.bech32m.encode(network.bech32, words);
        });
        lazy.prop(o, "hash", () => {
          const hashTree = _hashTree();
          if (hashTree)
            return hashTree.hash;
          const w = _witness();
          if (w && w.length > 1) {
            const controlBlock = w[w.length - 1];
            const leafVersion = controlBlock[0] & types_1.TAPLEAF_VERSION_MASK;
            const script2 = w[w.length - 2];
            const leafHash = (0, bip341_1.tapleafHash)({
              output: script2,
              version: leafVersion
            });
            return (0, bip341_1.rootHashFromPath)(controlBlock, leafHash);
          }
          return null;
        });
        lazy.prop(o, "output", () => {
          if (!o.pubkey)
            return;
          return bscript.compile([OPS.OP_1, o.pubkey]);
        });
        lazy.prop(o, "redeemVersion", () => {
          if (a.redeemVersion)
            return a.redeemVersion;
          if (a.redeem && a.redeem.redeemVersion !== void 0 && a.redeem.redeemVersion !== null) {
            return a.redeem.redeemVersion;
          }
          return bip341_1.LEAF_VERSION_TAPSCRIPT;
        });
        lazy.prop(o, "redeem", () => {
          const witness = _witness();
          if (!witness || witness.length < 2)
            return;
          return {
            output: witness[witness.length - 2],
            witness: witness.slice(0, -2),
            redeemVersion: witness[witness.length - 1][0] & types_1.TAPLEAF_VERSION_MASK
          };
        });
        lazy.prop(o, "pubkey", () => {
          if (a.pubkey)
            return a.pubkey;
          if (a.output)
            return a.output.slice(2);
          if (a.address)
            return _address().data;
          if (o.internalPubkey) {
            const tweakedKey = (0, bip341_1.tweakKey)(o.internalPubkey, o.hash);
            if (tweakedKey)
              return tweakedKey.x;
          }
        });
        lazy.prop(o, "internalPubkey", () => {
          if (a.internalPubkey)
            return a.internalPubkey;
          const witness = _witness();
          if (witness && witness.length > 1)
            return witness[witness.length - 1].slice(1, 33);
        });
        lazy.prop(o, "signature", () => {
          if (a.signature)
            return a.signature;
          const witness = _witness();
          if (!witness || witness.length !== 1)
            return;
          return witness[0];
        });
        lazy.prop(o, "witness", () => {
          if (a.witness)
            return a.witness;
          const hashTree = _hashTree();
          if (hashTree && a.redeem && a.redeem.output && a.internalPubkey) {
            const leafHash = (0, bip341_1.tapleafHash)({
              output: a.redeem.output,
              version: o.redeemVersion
            });
            const path = (0, bip341_1.findScriptPath)(hashTree, leafHash);
            if (!path)
              return;
            const outputKey = (0, bip341_1.tweakKey)(a.internalPubkey, hashTree.hash);
            if (!outputKey)
              return;
            const controlBock = buffer_1.Buffer.concat(
              [
                buffer_1.Buffer.from([o.redeemVersion | outputKey.parity]),
                a.internalPubkey
              ].concat(path)
            );
            return [a.redeem.output, controlBock];
          }
          if (a.signature)
            return [a.signature];
        });
        if (opts.validate) {
          let pubkey = buffer_1.Buffer.from([]);
          if (a.address) {
            if (network && network.bech32 !== _address().prefix)
              throw new TypeError("Invalid prefix or Network mismatch");
            if (_address().version !== TAPROOT_WITNESS_VERSION)
              throw new TypeError("Invalid address version");
            if (_address().data.length !== 32)
              throw new TypeError("Invalid address data");
            pubkey = _address().data;
          }
          if (a.pubkey) {
            if (pubkey.length > 0 && !pubkey.equals(a.pubkey))
              throw new TypeError("Pubkey mismatch");
            else
              pubkey = a.pubkey;
          }
          if (a.output) {
            if (a.output.length !== 34 || a.output[0] !== OPS.OP_1 || a.output[1] !== 32)
              throw new TypeError("Output is invalid");
            if (pubkey.length > 0 && !pubkey.equals(a.output.slice(2)))
              throw new TypeError("Pubkey mismatch");
            else
              pubkey = a.output.slice(2);
          }
          if (a.internalPubkey) {
            const tweakedKey = (0, bip341_1.tweakKey)(a.internalPubkey, o.hash);
            if (pubkey.length > 0 && !pubkey.equals(tweakedKey.x))
              throw new TypeError("Pubkey mismatch");
            else
              pubkey = tweakedKey.x;
          }
          if (pubkey && pubkey.length) {
            if (!(0, ecc_lib_1.getEccLib)().isXOnlyPoint(pubkey))
              throw new TypeError("Invalid pubkey for p2tr");
          }
          const hashTree = _hashTree();
          if (a.hash && hashTree) {
            if (!a.hash.equals(hashTree.hash))
              throw new TypeError("Hash mismatch");
          }
          if (a.redeem && a.redeem.output && hashTree) {
            const leafHash = (0, bip341_1.tapleafHash)({
              output: a.redeem.output,
              version: o.redeemVersion
            });
            if (!(0, bip341_1.findScriptPath)(hashTree, leafHash))
              throw new TypeError("Redeem script not in tree");
          }
          const witness = _witness();
          if (a.redeem && o.redeem) {
            if (a.redeem.redeemVersion) {
              if (a.redeem.redeemVersion !== o.redeem.redeemVersion)
                throw new TypeError("Redeem.redeemVersion and witness mismatch");
            }
            if (a.redeem.output) {
              if (bscript.decompile(a.redeem.output).length === 0)
                throw new TypeError("Redeem.output is invalid");
              if (o.redeem.output && !a.redeem.output.equals(o.redeem.output))
                throw new TypeError("Redeem.output and witness mismatch");
            }
            if (a.redeem.witness) {
              if (o.redeem.witness && !stacksEqual(a.redeem.witness, o.redeem.witness))
                throw new TypeError("Redeem.witness and witness mismatch");
            }
          }
          if (witness && witness.length) {
            if (witness.length === 1) {
              if (a.signature && !a.signature.equals(witness[0]))
                throw new TypeError("Signature mismatch");
            } else {
              const controlBlock = witness[witness.length - 1];
              if (controlBlock.length < 33)
                throw new TypeError(
                  `The control-block length is too small. Got ${controlBlock.length}, expected min 33.`
                );
              if ((controlBlock.length - 33) % 32 !== 0)
                throw new TypeError(
                  `The control-block length of ${controlBlock.length} is incorrect!`
                );
              const m = (controlBlock.length - 33) / 32;
              if (m > 128)
                throw new TypeError(
                  `The script path is too long. Got ${m}, expected max 128.`
                );
              const internalPubkey = controlBlock.slice(1, 33);
              if (a.internalPubkey && !a.internalPubkey.equals(internalPubkey))
                throw new TypeError("Internal pubkey mismatch");
              if (!(0, ecc_lib_1.getEccLib)().isXOnlyPoint(internalPubkey))
                throw new TypeError("Invalid internalPubkey for p2tr witness");
              const leafVersion = controlBlock[0] & types_1.TAPLEAF_VERSION_MASK;
              const script2 = witness[witness.length - 2];
              const leafHash = (0, bip341_1.tapleafHash)({
                output: script2,
                version: leafVersion
              });
              const hash = (0, bip341_1.rootHashFromPath)(controlBlock, leafHash);
              const outputKey = (0, bip341_1.tweakKey)(internalPubkey, hash);
              if (!outputKey)
                throw new TypeError("Invalid outputKey for p2tr witness");
              if (pubkey.length && !pubkey.equals(outputKey.x))
                throw new TypeError("Pubkey mismatch for p2tr witness");
              if (outputKey.parity !== (controlBlock[0] & 1))
                throw new Error("Incorrect parity");
            }
          }
        }
        return Object.assign(o, a);
      }
      exports.p2tr = p2tr;
      function stacksEqual(a, b) {
        if (a.length !== b.length)
          return false;
        return a.every((x, i) => {
          return x.equals(b[i]);
        });
      }
    }
  });

  // node_modules/bitcoinjs-lib/src/payments/index.js
  var require_payments = __commonJS({
    "node_modules/bitcoinjs-lib/src/payments/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.p2tr = exports.p2wsh = exports.p2wpkh = exports.p2sh = exports.p2pkh = exports.p2pk = exports.p2ms = exports.embed = void 0;
      var embed_1 = require_embed();
      Object.defineProperty(exports, "embed", {
        enumerable: true,
        get: function() {
          return embed_1.p2data;
        }
      });
      var p2ms_1 = require_p2ms();
      Object.defineProperty(exports, "p2ms", {
        enumerable: true,
        get: function() {
          return p2ms_1.p2ms;
        }
      });
      var p2pk_1 = require_p2pk();
      Object.defineProperty(exports, "p2pk", {
        enumerable: true,
        get: function() {
          return p2pk_1.p2pk;
        }
      });
      var p2pkh_1 = require_p2pkh();
      Object.defineProperty(exports, "p2pkh", {
        enumerable: true,
        get: function() {
          return p2pkh_1.p2pkh;
        }
      });
      var p2sh_1 = require_p2sh();
      Object.defineProperty(exports, "p2sh", {
        enumerable: true,
        get: function() {
          return p2sh_1.p2sh;
        }
      });
      var p2wpkh_1 = require_p2wpkh();
      Object.defineProperty(exports, "p2wpkh", {
        enumerable: true,
        get: function() {
          return p2wpkh_1.p2wpkh;
        }
      });
      var p2wsh_1 = require_p2wsh();
      Object.defineProperty(exports, "p2wsh", {
        enumerable: true,
        get: function() {
          return p2wsh_1.p2wsh;
        }
      });
      var p2tr_1 = require_p2tr();
      Object.defineProperty(exports, "p2tr", {
        enumerable: true,
        get: function() {
          return p2tr_1.p2tr;
        }
      });
    }
  });

  // node_modules/bitcoinjs-lib/src/address.js
  var require_address = __commonJS({
    "node_modules/bitcoinjs-lib/src/address.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toOutputScript = exports.fromOutputScript = exports.toBech32 = exports.toBase58Check = exports.fromBech32 = exports.fromBase58Check = void 0;
      var networks4 = require_networks2();
      var payments2 = require_payments();
      var bscript = require_script();
      var types_1 = require_types2();
      var bech32_1 = require_dist2();
      var bs58check = require_bs58check2();
      var FUTURE_SEGWIT_MAX_SIZE = 40;
      var FUTURE_SEGWIT_MIN_SIZE = 2;
      var FUTURE_SEGWIT_MAX_VERSION = 16;
      var FUTURE_SEGWIT_MIN_VERSION = 2;
      var FUTURE_SEGWIT_VERSION_DIFF = 80;
      var FUTURE_SEGWIT_VERSION_WARNING = "WARNING: Sending to a future segwit version address can lead to loss of funds. End users MUST be warned carefully in the GUI and asked if they wish to proceed with caution. Wallets should verify the segwit version from the output of fromBech32, then decide when it is safe to use which version of segwit.";
      function _toFutureSegwitAddress(output, network) {
        const data = output.slice(2);
        if (data.length < FUTURE_SEGWIT_MIN_SIZE || data.length > FUTURE_SEGWIT_MAX_SIZE)
          throw new TypeError("Invalid program length for segwit address");
        const version = output[0] - FUTURE_SEGWIT_VERSION_DIFF;
        if (version < FUTURE_SEGWIT_MIN_VERSION || version > FUTURE_SEGWIT_MAX_VERSION)
          throw new TypeError("Invalid version for segwit address");
        if (output[1] !== data.length)
          throw new TypeError("Invalid script for segwit address");
        console.warn(FUTURE_SEGWIT_VERSION_WARNING);
        return toBech32(data, version, network.bech32);
      }
      function fromBase58Check(address) {
        const payload = Buffer.from(bs58check.decode(address));
        if (payload.length < 21)
          throw new TypeError(address + " is too short");
        if (payload.length > 21)
          throw new TypeError(address + " is too long");
        const version = payload.readUInt8(0);
        const hash = payload.slice(1);
        return { version, hash };
      }
      exports.fromBase58Check = fromBase58Check;
      function fromBech32(address) {
        let result;
        let version;
        try {
          result = bech32_1.bech32.decode(address);
        } catch (e) {
        }
        if (result) {
          version = result.words[0];
          if (version !== 0)
            throw new TypeError(address + " uses wrong encoding");
        } else {
          result = bech32_1.bech32m.decode(address);
          version = result.words[0];
          if (version === 0)
            throw new TypeError(address + " uses wrong encoding");
        }
        const data = bech32_1.bech32.fromWords(result.words.slice(1));
        return {
          version,
          prefix: result.prefix,
          data: Buffer.from(data)
        };
      }
      exports.fromBech32 = fromBech32;
      function toBase58Check(hash, version) {
        (0, types_1.typeforce)(
          (0, types_1.tuple)(types_1.Hash160bit, types_1.UInt8),
          arguments
        );
        const payload = Buffer.allocUnsafe(21);
        payload.writeUInt8(version, 0);
        hash.copy(payload, 1);
        return bs58check.encode(payload);
      }
      exports.toBase58Check = toBase58Check;
      function toBech32(data, version, prefix) {
        const words = bech32_1.bech32.toWords(data);
        words.unshift(version);
        return version === 0 ? bech32_1.bech32.encode(prefix, words) : bech32_1.bech32m.encode(prefix, words);
      }
      exports.toBech32 = toBech32;
      function fromOutputScript(output, network) {
        network = network || networks4.bitcoin;
        try {
          return payments2.p2pkh({ output, network }).address;
        } catch (e) {
        }
        try {
          return payments2.p2sh({ output, network }).address;
        } catch (e) {
        }
        try {
          return payments2.p2wpkh({ output, network }).address;
        } catch (e) {
        }
        try {
          return payments2.p2wsh({ output, network }).address;
        } catch (e) {
        }
        try {
          return payments2.p2tr({ output, network }).address;
        } catch (e) {
        }
        try {
          return _toFutureSegwitAddress(output, network);
        } catch (e) {
        }
        throw new Error(bscript.toASM(output) + " has no matching Address");
      }
      exports.fromOutputScript = fromOutputScript;
      function toOutputScript(address, network) {
        network = network || networks4.bitcoin;
        let decodeBase58;
        let decodeBech32;
        try {
          decodeBase58 = fromBase58Check(address);
        } catch (e) {
        }
        if (decodeBase58) {
          if (decodeBase58.version === network.pubKeyHash)
            return payments2.p2pkh({ hash: decodeBase58.hash }).output;
          if (decodeBase58.version === network.scriptHash)
            return payments2.p2sh({ hash: decodeBase58.hash }).output;
        } else {
          try {
            decodeBech32 = fromBech32(address);
          } catch (e) {
          }
          if (decodeBech32) {
            if (decodeBech32.prefix !== network.bech32)
              throw new Error(address + " has an invalid prefix");
            if (decodeBech32.version === 0) {
              if (decodeBech32.data.length === 20)
                return payments2.p2wpkh({ hash: decodeBech32.data }).output;
              if (decodeBech32.data.length === 32)
                return payments2.p2wsh({ hash: decodeBech32.data }).output;
            } else if (decodeBech32.version === 1) {
              if (decodeBech32.data.length === 32)
                return payments2.p2tr({ pubkey: decodeBech32.data }).output;
            } else if (decodeBech32.version >= FUTURE_SEGWIT_MIN_VERSION && decodeBech32.version <= FUTURE_SEGWIT_MAX_VERSION && decodeBech32.data.length >= FUTURE_SEGWIT_MIN_SIZE && decodeBech32.data.length <= FUTURE_SEGWIT_MAX_SIZE) {
              console.warn(FUTURE_SEGWIT_VERSION_WARNING);
              return bscript.compile([
                decodeBech32.version + FUTURE_SEGWIT_VERSION_DIFF,
                decodeBech32.data
              ]);
            }
          }
        }
        throw new Error(address + " has no matching Script");
      }
      exports.toOutputScript = toOutputScript;
    }
  });

  // node_modules/bitcoinjs-lib/src/merkle.js
  var require_merkle = __commonJS({
    "node_modules/bitcoinjs-lib/src/merkle.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.fastMerkleRoot = void 0;
      function fastMerkleRoot(values, digestFn) {
        if (!Array.isArray(values))
          throw TypeError("Expected values Array");
        if (typeof digestFn !== "function")
          throw TypeError("Expected digest Function");
        let length = values.length;
        const results = values.concat();
        while (length > 1) {
          let j = 0;
          for (let i = 0; i < length; i += 2, ++j) {
            const left = results[i];
            const right = i + 1 === length ? left : results[i + 1];
            const data = Buffer.concat([left, right]);
            results[j] = digestFn(data);
          }
          length = j;
        }
        return results[0];
      }
      exports.fastMerkleRoot = fastMerkleRoot;
    }
  });

  // node_modules/bitcoinjs-lib/src/transaction.js
  var require_transaction = __commonJS({
    "node_modules/bitcoinjs-lib/src/transaction.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Transaction = void 0;
      var bufferutils_1 = require_bufferutils();
      var bcrypto = require_crypto3();
      var bscript = require_script();
      var script_1 = require_script();
      var types = require_types2();
      var { typeforce } = types;
      function varSliceSize(someScript) {
        const length = someScript.length;
        return bufferutils_1.varuint.encodingLength(length) + length;
      }
      function vectorSize(someVector) {
        const length = someVector.length;
        return bufferutils_1.varuint.encodingLength(length) + someVector.reduce((sum, witness) => {
          return sum + varSliceSize(witness);
        }, 0);
      }
      var EMPTY_BUFFER = Buffer.allocUnsafe(0);
      var EMPTY_WITNESS = [];
      var ZERO = Buffer.from(
        "0000000000000000000000000000000000000000000000000000000000000000",
        "hex"
      );
      var ONE = Buffer.from(
        "0000000000000000000000000000000000000000000000000000000000000001",
        "hex"
      );
      var VALUE_UINT64_MAX = Buffer.from("ffffffffffffffff", "hex");
      var BLANK_OUTPUT = {
        script: EMPTY_BUFFER,
        valueBuffer: VALUE_UINT64_MAX
      };
      function isOutput(out) {
        return out.value !== void 0;
      }
      var Transaction = class _Transaction {
        constructor() {
          this.version = 1;
          this.locktime = 0;
          this.ins = [];
          this.outs = [];
        }
        static fromBuffer(buffer, _NO_STRICT) {
          const bufferReader = new bufferutils_1.BufferReader(buffer);
          const tx = new _Transaction();
          tx.version = bufferReader.readInt32();
          const marker = bufferReader.readUInt8();
          const flag = bufferReader.readUInt8();
          let hasWitnesses = false;
          if (marker === _Transaction.ADVANCED_TRANSACTION_MARKER && flag === _Transaction.ADVANCED_TRANSACTION_FLAG) {
            hasWitnesses = true;
          } else {
            bufferReader.offset -= 2;
          }
          const vinLen = bufferReader.readVarInt();
          for (let i = 0; i < vinLen; ++i) {
            tx.ins.push({
              hash: bufferReader.readSlice(32),
              index: bufferReader.readUInt32(),
              script: bufferReader.readVarSlice(),
              sequence: bufferReader.readUInt32(),
              witness: EMPTY_WITNESS
            });
          }
          const voutLen = bufferReader.readVarInt();
          for (let i = 0; i < voutLen; ++i) {
            tx.outs.push({
              value: bufferReader.readUInt64(),
              script: bufferReader.readVarSlice()
            });
          }
          if (hasWitnesses) {
            for (let i = 0; i < vinLen; ++i) {
              tx.ins[i].witness = bufferReader.readVector();
            }
            if (!tx.hasWitnesses())
              throw new Error("Transaction has superfluous witness data");
          }
          tx.locktime = bufferReader.readUInt32();
          if (_NO_STRICT)
            return tx;
          if (bufferReader.offset !== buffer.length)
            throw new Error("Transaction has unexpected data");
          return tx;
        }
        static fromHex(hex) {
          return _Transaction.fromBuffer(Buffer.from(hex, "hex"), false);
        }
        static isCoinbaseHash(buffer) {
          typeforce(types.Hash256bit, buffer);
          for (let i = 0; i < 32; ++i) {
            if (buffer[i] !== 0)
              return false;
          }
          return true;
        }
        isCoinbase() {
          return this.ins.length === 1 && _Transaction.isCoinbaseHash(this.ins[0].hash);
        }
        addInput(hash, index, sequence, scriptSig) {
          typeforce(
            types.tuple(
              types.Hash256bit,
              types.UInt32,
              types.maybe(types.UInt32),
              types.maybe(types.Buffer)
            ),
            arguments
          );
          if (types.Null(sequence)) {
            sequence = _Transaction.DEFAULT_SEQUENCE;
          }
          return this.ins.push({
            hash,
            index,
            script: scriptSig || EMPTY_BUFFER,
            sequence,
            witness: EMPTY_WITNESS
          }) - 1;
        }
        addOutput(scriptPubKey, value) {
          typeforce(types.tuple(types.Buffer, types.Satoshi), arguments);
          return this.outs.push({
            script: scriptPubKey,
            value
          }) - 1;
        }
        hasWitnesses() {
          return this.ins.some((x) => {
            return x.witness.length !== 0;
          });
        }
        weight() {
          const base = this.byteLength(false);
          const total = this.byteLength(true);
          return base * 3 + total;
        }
        virtualSize() {
          return Math.ceil(this.weight() / 4);
        }
        byteLength(_ALLOW_WITNESS = true) {
          const hasWitnesses = _ALLOW_WITNESS && this.hasWitnesses();
          return (hasWitnesses ? 10 : 8) + bufferutils_1.varuint.encodingLength(this.ins.length) + bufferutils_1.varuint.encodingLength(this.outs.length) + this.ins.reduce((sum, input) => {
            return sum + 40 + varSliceSize(input.script);
          }, 0) + this.outs.reduce((sum, output) => {
            return sum + 8 + varSliceSize(output.script);
          }, 0) + (hasWitnesses ? this.ins.reduce((sum, input) => {
            return sum + vectorSize(input.witness);
          }, 0) : 0);
        }
        clone() {
          const newTx = new _Transaction();
          newTx.version = this.version;
          newTx.locktime = this.locktime;
          newTx.ins = this.ins.map((txIn) => {
            return {
              hash: txIn.hash,
              index: txIn.index,
              script: txIn.script,
              sequence: txIn.sequence,
              witness: txIn.witness
            };
          });
          newTx.outs = this.outs.map((txOut) => {
            return {
              script: txOut.script,
              value: txOut.value
            };
          });
          return newTx;
        }
        /**
         * Hash transaction for signing a specific input.
         *
         * Bitcoin uses a different hash for each signed transaction input.
         * This method copies the transaction, makes the necessary changes based on the
         * hashType, and then hashes the result.
         * This hash can then be used to sign the provided transaction input.
         */
        hashForSignature(inIndex, prevOutScript, hashType) {
          typeforce(
            types.tuple(
              types.UInt32,
              types.Buffer,
              /* types.UInt8 */
              types.Number
            ),
            arguments
          );
          if (inIndex >= this.ins.length)
            return ONE;
          const ourScript = bscript.compile(
            bscript.decompile(prevOutScript).filter((x) => {
              return x !== script_1.OPS.OP_CODESEPARATOR;
            })
          );
          const txTmp = this.clone();
          if ((hashType & 31) === _Transaction.SIGHASH_NONE) {
            txTmp.outs = [];
            txTmp.ins.forEach((input, i) => {
              if (i === inIndex)
                return;
              input.sequence = 0;
            });
          } else if ((hashType & 31) === _Transaction.SIGHASH_SINGLE) {
            if (inIndex >= this.outs.length)
              return ONE;
            txTmp.outs.length = inIndex + 1;
            for (let i = 0; i < inIndex; i++) {
              txTmp.outs[i] = BLANK_OUTPUT;
            }
            txTmp.ins.forEach((input, y) => {
              if (y === inIndex)
                return;
              input.sequence = 0;
            });
          }
          if (hashType & _Transaction.SIGHASH_ANYONECANPAY) {
            txTmp.ins = [txTmp.ins[inIndex]];
            txTmp.ins[0].script = ourScript;
          } else {
            txTmp.ins.forEach((input) => {
              input.script = EMPTY_BUFFER;
            });
            txTmp.ins[inIndex].script = ourScript;
          }
          const buffer = Buffer.allocUnsafe(txTmp.byteLength(false) + 4);
          buffer.writeInt32LE(hashType, buffer.length - 4);
          txTmp.__toBuffer(buffer, 0, false);
          return bcrypto.hash256(buffer);
        }
        hashForWitnessV1(inIndex, prevOutScripts, values, hashType, leafHash, annex) {
          typeforce(
            types.tuple(
              types.UInt32,
              typeforce.arrayOf(types.Buffer),
              typeforce.arrayOf(types.Satoshi),
              types.UInt32
            ),
            arguments
          );
          if (values.length !== this.ins.length || prevOutScripts.length !== this.ins.length) {
            throw new Error("Must supply prevout script and value for all inputs");
          }
          const outputType = hashType === _Transaction.SIGHASH_DEFAULT ? _Transaction.SIGHASH_ALL : hashType & _Transaction.SIGHASH_OUTPUT_MASK;
          const inputType = hashType & _Transaction.SIGHASH_INPUT_MASK;
          const isAnyoneCanPay = inputType === _Transaction.SIGHASH_ANYONECANPAY;
          const isNone = outputType === _Transaction.SIGHASH_NONE;
          const isSingle = outputType === _Transaction.SIGHASH_SINGLE;
          let hashPrevouts = EMPTY_BUFFER;
          let hashAmounts = EMPTY_BUFFER;
          let hashScriptPubKeys = EMPTY_BUFFER;
          let hashSequences = EMPTY_BUFFER;
          let hashOutputs = EMPTY_BUFFER;
          if (!isAnyoneCanPay) {
            let bufferWriter = bufferutils_1.BufferWriter.withCapacity(
              36 * this.ins.length
            );
            this.ins.forEach((txIn) => {
              bufferWriter.writeSlice(txIn.hash);
              bufferWriter.writeUInt32(txIn.index);
            });
            hashPrevouts = bcrypto.sha256(bufferWriter.end());
            bufferWriter = bufferutils_1.BufferWriter.withCapacity(
              8 * this.ins.length
            );
            values.forEach((value) => bufferWriter.writeUInt64(value));
            hashAmounts = bcrypto.sha256(bufferWriter.end());
            bufferWriter = bufferutils_1.BufferWriter.withCapacity(
              prevOutScripts.map(varSliceSize).reduce((a, b) => a + b)
            );
            prevOutScripts.forEach(
              (prevOutScript) => bufferWriter.writeVarSlice(prevOutScript)
            );
            hashScriptPubKeys = bcrypto.sha256(bufferWriter.end());
            bufferWriter = bufferutils_1.BufferWriter.withCapacity(
              4 * this.ins.length
            );
            this.ins.forEach((txIn) => bufferWriter.writeUInt32(txIn.sequence));
            hashSequences = bcrypto.sha256(bufferWriter.end());
          }
          if (!(isNone || isSingle)) {
            const txOutsSize = this.outs.map((output) => 8 + varSliceSize(output.script)).reduce((a, b) => a + b);
            const bufferWriter = bufferutils_1.BufferWriter.withCapacity(txOutsSize);
            this.outs.forEach((out) => {
              bufferWriter.writeUInt64(out.value);
              bufferWriter.writeVarSlice(out.script);
            });
            hashOutputs = bcrypto.sha256(bufferWriter.end());
          } else if (isSingle && inIndex < this.outs.length) {
            const output = this.outs[inIndex];
            const bufferWriter = bufferutils_1.BufferWriter.withCapacity(
              8 + varSliceSize(output.script)
            );
            bufferWriter.writeUInt64(output.value);
            bufferWriter.writeVarSlice(output.script);
            hashOutputs = bcrypto.sha256(bufferWriter.end());
          }
          const spendType = (leafHash ? 2 : 0) + (annex ? 1 : 0);
          const sigMsgSize = 174 - (isAnyoneCanPay ? 49 : 0) - (isNone ? 32 : 0) + (annex ? 32 : 0) + (leafHash ? 37 : 0);
          const sigMsgWriter = bufferutils_1.BufferWriter.withCapacity(sigMsgSize);
          sigMsgWriter.writeUInt8(hashType);
          sigMsgWriter.writeInt32(this.version);
          sigMsgWriter.writeUInt32(this.locktime);
          sigMsgWriter.writeSlice(hashPrevouts);
          sigMsgWriter.writeSlice(hashAmounts);
          sigMsgWriter.writeSlice(hashScriptPubKeys);
          sigMsgWriter.writeSlice(hashSequences);
          if (!(isNone || isSingle)) {
            sigMsgWriter.writeSlice(hashOutputs);
          }
          sigMsgWriter.writeUInt8(spendType);
          if (isAnyoneCanPay) {
            const input = this.ins[inIndex];
            sigMsgWriter.writeSlice(input.hash);
            sigMsgWriter.writeUInt32(input.index);
            sigMsgWriter.writeUInt64(values[inIndex]);
            sigMsgWriter.writeVarSlice(prevOutScripts[inIndex]);
            sigMsgWriter.writeUInt32(input.sequence);
          } else {
            sigMsgWriter.writeUInt32(inIndex);
          }
          if (annex) {
            const bufferWriter = bufferutils_1.BufferWriter.withCapacity(
              varSliceSize(annex)
            );
            bufferWriter.writeVarSlice(annex);
            sigMsgWriter.writeSlice(bcrypto.sha256(bufferWriter.end()));
          }
          if (isSingle) {
            sigMsgWriter.writeSlice(hashOutputs);
          }
          if (leafHash) {
            sigMsgWriter.writeSlice(leafHash);
            sigMsgWriter.writeUInt8(0);
            sigMsgWriter.writeUInt32(4294967295);
          }
          return bcrypto.taggedHash(
            "TapSighash",
            Buffer.concat([Buffer.from([0]), sigMsgWriter.end()])
          );
        }
        hashForWitnessV0(inIndex, prevOutScript, value, hashType) {
          typeforce(
            types.tuple(types.UInt32, types.Buffer, types.Satoshi, types.UInt32),
            arguments
          );
          let tbuffer = Buffer.from([]);
          let bufferWriter;
          let hashOutputs = ZERO;
          let hashPrevouts = ZERO;
          let hashSequence = ZERO;
          if (!(hashType & _Transaction.SIGHASH_ANYONECANPAY)) {
            tbuffer = Buffer.allocUnsafe(36 * this.ins.length);
            bufferWriter = new bufferutils_1.BufferWriter(tbuffer, 0);
            this.ins.forEach((txIn) => {
              bufferWriter.writeSlice(txIn.hash);
              bufferWriter.writeUInt32(txIn.index);
            });
            hashPrevouts = bcrypto.hash256(tbuffer);
          }
          if (!(hashType & _Transaction.SIGHASH_ANYONECANPAY) && (hashType & 31) !== _Transaction.SIGHASH_SINGLE && (hashType & 31) !== _Transaction.SIGHASH_NONE) {
            tbuffer = Buffer.allocUnsafe(4 * this.ins.length);
            bufferWriter = new bufferutils_1.BufferWriter(tbuffer, 0);
            this.ins.forEach((txIn) => {
              bufferWriter.writeUInt32(txIn.sequence);
            });
            hashSequence = bcrypto.hash256(tbuffer);
          }
          if ((hashType & 31) !== _Transaction.SIGHASH_SINGLE && (hashType & 31) !== _Transaction.SIGHASH_NONE) {
            const txOutsSize = this.outs.reduce((sum, output) => {
              return sum + 8 + varSliceSize(output.script);
            }, 0);
            tbuffer = Buffer.allocUnsafe(txOutsSize);
            bufferWriter = new bufferutils_1.BufferWriter(tbuffer, 0);
            this.outs.forEach((out) => {
              bufferWriter.writeUInt64(out.value);
              bufferWriter.writeVarSlice(out.script);
            });
            hashOutputs = bcrypto.hash256(tbuffer);
          } else if ((hashType & 31) === _Transaction.SIGHASH_SINGLE && inIndex < this.outs.length) {
            const output = this.outs[inIndex];
            tbuffer = Buffer.allocUnsafe(8 + varSliceSize(output.script));
            bufferWriter = new bufferutils_1.BufferWriter(tbuffer, 0);
            bufferWriter.writeUInt64(output.value);
            bufferWriter.writeVarSlice(output.script);
            hashOutputs = bcrypto.hash256(tbuffer);
          }
          tbuffer = Buffer.allocUnsafe(156 + varSliceSize(prevOutScript));
          bufferWriter = new bufferutils_1.BufferWriter(tbuffer, 0);
          const input = this.ins[inIndex];
          bufferWriter.writeInt32(this.version);
          bufferWriter.writeSlice(hashPrevouts);
          bufferWriter.writeSlice(hashSequence);
          bufferWriter.writeSlice(input.hash);
          bufferWriter.writeUInt32(input.index);
          bufferWriter.writeVarSlice(prevOutScript);
          bufferWriter.writeUInt64(value);
          bufferWriter.writeUInt32(input.sequence);
          bufferWriter.writeSlice(hashOutputs);
          bufferWriter.writeUInt32(this.locktime);
          bufferWriter.writeUInt32(hashType);
          return bcrypto.hash256(tbuffer);
        }
        getHash(forWitness) {
          if (forWitness && this.isCoinbase())
            return Buffer.alloc(32, 0);
          return bcrypto.hash256(this.__toBuffer(void 0, void 0, forWitness));
        }
        getId() {
          return (0, bufferutils_1.reverseBuffer)(this.getHash(false)).toString(
            "hex"
          );
        }
        toBuffer(buffer, initialOffset) {
          return this.__toBuffer(buffer, initialOffset, true);
        }
        toHex() {
          return this.toBuffer(void 0, void 0).toString("hex");
        }
        setInputScript(index, scriptSig) {
          typeforce(types.tuple(types.Number, types.Buffer), arguments);
          this.ins[index].script = scriptSig;
        }
        setWitness(index, witness) {
          typeforce(types.tuple(types.Number, [types.Buffer]), arguments);
          this.ins[index].witness = witness;
        }
        __toBuffer(buffer, initialOffset, _ALLOW_WITNESS = false) {
          if (!buffer)
            buffer = Buffer.allocUnsafe(this.byteLength(_ALLOW_WITNESS));
          const bufferWriter = new bufferutils_1.BufferWriter(
            buffer,
            initialOffset || 0
          );
          bufferWriter.writeInt32(this.version);
          const hasWitnesses = _ALLOW_WITNESS && this.hasWitnesses();
          if (hasWitnesses) {
            bufferWriter.writeUInt8(_Transaction.ADVANCED_TRANSACTION_MARKER);
            bufferWriter.writeUInt8(_Transaction.ADVANCED_TRANSACTION_FLAG);
          }
          bufferWriter.writeVarInt(this.ins.length);
          this.ins.forEach((txIn) => {
            bufferWriter.writeSlice(txIn.hash);
            bufferWriter.writeUInt32(txIn.index);
            bufferWriter.writeVarSlice(txIn.script);
            bufferWriter.writeUInt32(txIn.sequence);
          });
          bufferWriter.writeVarInt(this.outs.length);
          this.outs.forEach((txOut) => {
            if (isOutput(txOut)) {
              bufferWriter.writeUInt64(txOut.value);
            } else {
              bufferWriter.writeSlice(txOut.valueBuffer);
            }
            bufferWriter.writeVarSlice(txOut.script);
          });
          if (hasWitnesses) {
            this.ins.forEach((input) => {
              bufferWriter.writeVector(input.witness);
            });
          }
          bufferWriter.writeUInt32(this.locktime);
          if (initialOffset !== void 0)
            return buffer.slice(initialOffset, bufferWriter.offset);
          return buffer;
        }
      };
      exports.Transaction = Transaction;
      Transaction.DEFAULT_SEQUENCE = 4294967295;
      Transaction.SIGHASH_DEFAULT = 0;
      Transaction.SIGHASH_ALL = 1;
      Transaction.SIGHASH_NONE = 2;
      Transaction.SIGHASH_SINGLE = 3;
      Transaction.SIGHASH_ANYONECANPAY = 128;
      Transaction.SIGHASH_OUTPUT_MASK = 3;
      Transaction.SIGHASH_INPUT_MASK = 128;
      Transaction.ADVANCED_TRANSACTION_MARKER = 0;
      Transaction.ADVANCED_TRANSACTION_FLAG = 1;
    }
  });

  // node_modules/bitcoinjs-lib/src/block.js
  var require_block = __commonJS({
    "node_modules/bitcoinjs-lib/src/block.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Block = void 0;
      var bufferutils_1 = require_bufferutils();
      var bcrypto = require_crypto3();
      var merkle_1 = require_merkle();
      var transaction_1 = require_transaction();
      var types = require_types2();
      var { typeforce } = types;
      var errorMerkleNoTxes = new TypeError(
        "Cannot compute merkle root for zero transactions"
      );
      var errorWitnessNotSegwit = new TypeError(
        "Cannot compute witness commit for non-segwit block"
      );
      var Block = class _Block {
        constructor() {
          this.version = 1;
          this.prevHash = void 0;
          this.merkleRoot = void 0;
          this.timestamp = 0;
          this.witnessCommit = void 0;
          this.bits = 0;
          this.nonce = 0;
          this.transactions = void 0;
        }
        static fromBuffer(buffer) {
          if (buffer.length < 80)
            throw new Error("Buffer too small (< 80 bytes)");
          const bufferReader = new bufferutils_1.BufferReader(buffer);
          const block = new _Block();
          block.version = bufferReader.readInt32();
          block.prevHash = bufferReader.readSlice(32);
          block.merkleRoot = bufferReader.readSlice(32);
          block.timestamp = bufferReader.readUInt32();
          block.bits = bufferReader.readUInt32();
          block.nonce = bufferReader.readUInt32();
          if (buffer.length === 80)
            return block;
          const readTransaction = () => {
            const tx = transaction_1.Transaction.fromBuffer(
              bufferReader.buffer.slice(bufferReader.offset),
              true
            );
            bufferReader.offset += tx.byteLength();
            return tx;
          };
          const nTransactions = bufferReader.readVarInt();
          block.transactions = [];
          for (let i = 0; i < nTransactions; ++i) {
            const tx = readTransaction();
            block.transactions.push(tx);
          }
          const witnessCommit = block.getWitnessCommit();
          if (witnessCommit)
            block.witnessCommit = witnessCommit;
          return block;
        }
        static fromHex(hex) {
          return _Block.fromBuffer(Buffer.from(hex, "hex"));
        }
        static calculateTarget(bits) {
          const exponent = ((bits & 4278190080) >> 24) - 3;
          const mantissa = bits & 8388607;
          const target = Buffer.alloc(32, 0);
          target.writeUIntBE(mantissa, 29 - exponent, 3);
          return target;
        }
        static calculateMerkleRoot(transactions, forWitness) {
          typeforce([{ getHash: types.Function }], transactions);
          if (transactions.length === 0)
            throw errorMerkleNoTxes;
          if (forWitness && !txesHaveWitnessCommit(transactions))
            throw errorWitnessNotSegwit;
          const hashes = transactions.map(
            (transaction) => transaction.getHash(forWitness)
          );
          const rootHash = (0, merkle_1.fastMerkleRoot)(hashes, bcrypto.hash256);
          return forWitness ? bcrypto.hash256(
            Buffer.concat([rootHash, transactions[0].ins[0].witness[0]])
          ) : rootHash;
        }
        getWitnessCommit() {
          if (!txesHaveWitnessCommit(this.transactions))
            return null;
          const witnessCommits = this.transactions[0].outs.filter(
            (out) => out.script.slice(0, 6).equals(Buffer.from("6a24aa21a9ed", "hex"))
          ).map((out) => out.script.slice(6, 38));
          if (witnessCommits.length === 0)
            return null;
          const result = witnessCommits[witnessCommits.length - 1];
          if (!(result instanceof Buffer && result.length === 32))
            return null;
          return result;
        }
        hasWitnessCommit() {
          if (this.witnessCommit instanceof Buffer && this.witnessCommit.length === 32)
            return true;
          if (this.getWitnessCommit() !== null)
            return true;
          return false;
        }
        hasWitness() {
          return anyTxHasWitness(this.transactions);
        }
        weight() {
          const base = this.byteLength(false, false);
          const total = this.byteLength(false, true);
          return base * 3 + total;
        }
        byteLength(headersOnly, allowWitness = true) {
          if (headersOnly || !this.transactions)
            return 80;
          return 80 + bufferutils_1.varuint.encodingLength(this.transactions.length) + this.transactions.reduce((a, x) => a + x.byteLength(allowWitness), 0);
        }
        getHash() {
          return bcrypto.hash256(this.toBuffer(true));
        }
        getId() {
          return (0, bufferutils_1.reverseBuffer)(this.getHash()).toString("hex");
        }
        getUTCDate() {
          const date = /* @__PURE__ */ new Date(0);
          date.setUTCSeconds(this.timestamp);
          return date;
        }
        // TODO: buffer, offset compatibility
        toBuffer(headersOnly) {
          const buffer = Buffer.allocUnsafe(this.byteLength(headersOnly));
          const bufferWriter = new bufferutils_1.BufferWriter(buffer);
          bufferWriter.writeInt32(this.version);
          bufferWriter.writeSlice(this.prevHash);
          bufferWriter.writeSlice(this.merkleRoot);
          bufferWriter.writeUInt32(this.timestamp);
          bufferWriter.writeUInt32(this.bits);
          bufferWriter.writeUInt32(this.nonce);
          if (headersOnly || !this.transactions)
            return buffer;
          bufferutils_1.varuint.encode(
            this.transactions.length,
            buffer,
            bufferWriter.offset
          );
          bufferWriter.offset += bufferutils_1.varuint.encode.bytes;
          this.transactions.forEach((tx) => {
            const txSize = tx.byteLength();
            tx.toBuffer(buffer, bufferWriter.offset);
            bufferWriter.offset += txSize;
          });
          return buffer;
        }
        toHex(headersOnly) {
          return this.toBuffer(headersOnly).toString("hex");
        }
        checkTxRoots() {
          const hasWitnessCommit = this.hasWitnessCommit();
          if (!hasWitnessCommit && this.hasWitness())
            return false;
          return this.__checkMerkleRoot() && (hasWitnessCommit ? this.__checkWitnessCommit() : true);
        }
        checkProofOfWork() {
          const hash = (0, bufferutils_1.reverseBuffer)(this.getHash());
          const target = _Block.calculateTarget(this.bits);
          return hash.compare(target) <= 0;
        }
        __checkMerkleRoot() {
          if (!this.transactions)
            throw errorMerkleNoTxes;
          const actualMerkleRoot = _Block.calculateMerkleRoot(this.transactions);
          return this.merkleRoot.compare(actualMerkleRoot) === 0;
        }
        __checkWitnessCommit() {
          if (!this.transactions)
            throw errorMerkleNoTxes;
          if (!this.hasWitnessCommit())
            throw errorWitnessNotSegwit;
          const actualWitnessCommit = _Block.calculateMerkleRoot(
            this.transactions,
            true
          );
          return this.witnessCommit.compare(actualWitnessCommit) === 0;
        }
      };
      exports.Block = Block;
      function txesHaveWitnessCommit(transactions) {
        return transactions instanceof Array && transactions[0] && transactions[0].ins && transactions[0].ins instanceof Array && transactions[0].ins[0] && transactions[0].ins[0].witness && transactions[0].ins[0].witness instanceof Array && transactions[0].ins[0].witness.length > 0;
      }
      function anyTxHasWitness(transactions) {
        return transactions instanceof Array && transactions.some(
          (tx) => typeof tx === "object" && tx.ins instanceof Array && tx.ins.some(
            (input) => typeof input === "object" && input.witness instanceof Array && input.witness.length > 0
          )
        );
      }
    }
  });

  // node_modules/bip174/src/lib/typeFields.js
  var require_typeFields = __commonJS({
    "node_modules/bip174/src/lib/typeFields.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var GlobalTypes;
      (function(GlobalTypes2) {
        GlobalTypes2[GlobalTypes2["UNSIGNED_TX"] = 0] = "UNSIGNED_TX";
        GlobalTypes2[GlobalTypes2["GLOBAL_XPUB"] = 1] = "GLOBAL_XPUB";
      })(GlobalTypes = exports.GlobalTypes || (exports.GlobalTypes = {}));
      exports.GLOBAL_TYPE_NAMES = ["unsignedTx", "globalXpub"];
      var InputTypes;
      (function(InputTypes2) {
        InputTypes2[InputTypes2["NON_WITNESS_UTXO"] = 0] = "NON_WITNESS_UTXO";
        InputTypes2[InputTypes2["WITNESS_UTXO"] = 1] = "WITNESS_UTXO";
        InputTypes2[InputTypes2["PARTIAL_SIG"] = 2] = "PARTIAL_SIG";
        InputTypes2[InputTypes2["SIGHASH_TYPE"] = 3] = "SIGHASH_TYPE";
        InputTypes2[InputTypes2["REDEEM_SCRIPT"] = 4] = "REDEEM_SCRIPT";
        InputTypes2[InputTypes2["WITNESS_SCRIPT"] = 5] = "WITNESS_SCRIPT";
        InputTypes2[InputTypes2["BIP32_DERIVATION"] = 6] = "BIP32_DERIVATION";
        InputTypes2[InputTypes2["FINAL_SCRIPTSIG"] = 7] = "FINAL_SCRIPTSIG";
        InputTypes2[InputTypes2["FINAL_SCRIPTWITNESS"] = 8] = "FINAL_SCRIPTWITNESS";
        InputTypes2[InputTypes2["POR_COMMITMENT"] = 9] = "POR_COMMITMENT";
        InputTypes2[InputTypes2["TAP_KEY_SIG"] = 19] = "TAP_KEY_SIG";
        InputTypes2[InputTypes2["TAP_SCRIPT_SIG"] = 20] = "TAP_SCRIPT_SIG";
        InputTypes2[InputTypes2["TAP_LEAF_SCRIPT"] = 21] = "TAP_LEAF_SCRIPT";
        InputTypes2[InputTypes2["TAP_BIP32_DERIVATION"] = 22] = "TAP_BIP32_DERIVATION";
        InputTypes2[InputTypes2["TAP_INTERNAL_KEY"] = 23] = "TAP_INTERNAL_KEY";
        InputTypes2[InputTypes2["TAP_MERKLE_ROOT"] = 24] = "TAP_MERKLE_ROOT";
      })(InputTypes = exports.InputTypes || (exports.InputTypes = {}));
      exports.INPUT_TYPE_NAMES = [
        "nonWitnessUtxo",
        "witnessUtxo",
        "partialSig",
        "sighashType",
        "redeemScript",
        "witnessScript",
        "bip32Derivation",
        "finalScriptSig",
        "finalScriptWitness",
        "porCommitment",
        "tapKeySig",
        "tapScriptSig",
        "tapLeafScript",
        "tapBip32Derivation",
        "tapInternalKey",
        "tapMerkleRoot"
      ];
      var OutputTypes;
      (function(OutputTypes2) {
        OutputTypes2[OutputTypes2["REDEEM_SCRIPT"] = 0] = "REDEEM_SCRIPT";
        OutputTypes2[OutputTypes2["WITNESS_SCRIPT"] = 1] = "WITNESS_SCRIPT";
        OutputTypes2[OutputTypes2["BIP32_DERIVATION"] = 2] = "BIP32_DERIVATION";
        OutputTypes2[OutputTypes2["TAP_INTERNAL_KEY"] = 5] = "TAP_INTERNAL_KEY";
        OutputTypes2[OutputTypes2["TAP_TREE"] = 6] = "TAP_TREE";
        OutputTypes2[OutputTypes2["TAP_BIP32_DERIVATION"] = 7] = "TAP_BIP32_DERIVATION";
      })(OutputTypes = exports.OutputTypes || (exports.OutputTypes = {}));
      exports.OUTPUT_TYPE_NAMES = [
        "redeemScript",
        "witnessScript",
        "bip32Derivation",
        "tapInternalKey",
        "tapTree",
        "tapBip32Derivation"
      ];
    }
  });

  // node_modules/bip174/src/lib/converter/global/globalXpub.js
  var require_globalXpub = __commonJS({
    "node_modules/bip174/src/lib/converter/global/globalXpub.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var typeFields_1 = require_typeFields();
      var range = (n) => [...Array(n).keys()];
      function decode(keyVal) {
        if (keyVal.key[0] !== typeFields_1.GlobalTypes.GLOBAL_XPUB) {
          throw new Error(
            "Decode Error: could not decode globalXpub with key 0x" + keyVal.key.toString("hex")
          );
        }
        if (keyVal.key.length !== 79 || ![2, 3].includes(keyVal.key[46])) {
          throw new Error(
            "Decode Error: globalXpub has invalid extended pubkey in key 0x" + keyVal.key.toString("hex")
          );
        }
        if (keyVal.value.length / 4 % 1 !== 0) {
          throw new Error(
            "Decode Error: Global GLOBAL_XPUB value length should be multiple of 4"
          );
        }
        const extendedPubkey = keyVal.key.slice(1);
        const data = {
          masterFingerprint: keyVal.value.slice(0, 4),
          extendedPubkey,
          path: "m"
        };
        for (const i of range(keyVal.value.length / 4 - 1)) {
          const val = keyVal.value.readUInt32LE(i * 4 + 4);
          const isHard = !!(val & 2147483648);
          const idx = val & 2147483647;
          data.path += "/" + idx.toString(10) + (isHard ? "'" : "");
        }
        return data;
      }
      exports.decode = decode;
      function encode(data) {
        const head = Buffer.from([typeFields_1.GlobalTypes.GLOBAL_XPUB]);
        const key = Buffer.concat([head, data.extendedPubkey]);
        const splitPath = data.path.split("/");
        const value = Buffer.allocUnsafe(splitPath.length * 4);
        data.masterFingerprint.copy(value, 0);
        let offset = 4;
        splitPath.slice(1).forEach((level) => {
          const isHard = level.slice(-1) === "'";
          let num = 2147483647 & parseInt(isHard ? level.slice(0, -1) : level, 10);
          if (isHard)
            num += 2147483648;
          value.writeUInt32LE(num, offset);
          offset += 4;
        });
        return {
          key,
          value
        };
      }
      exports.encode = encode;
      exports.expected = "{ masterFingerprint: Buffer; extendedPubkey: Buffer; path: string; }";
      function check(data) {
        const epk = data.extendedPubkey;
        const mfp = data.masterFingerprint;
        const p = data.path;
        return Buffer.isBuffer(epk) && epk.length === 78 && [2, 3].indexOf(epk[45]) > -1 && Buffer.isBuffer(mfp) && mfp.length === 4 && typeof p === "string" && !!p.match(/^m(\/\d+'?)*$/);
      }
      exports.check = check;
      function canAddToArray(array, item, dupeSet) {
        const dupeString = item.extendedPubkey.toString("hex");
        if (dupeSet.has(dupeString))
          return false;
        dupeSet.add(dupeString);
        return array.filter((v) => v.extendedPubkey.equals(item.extendedPubkey)).length === 0;
      }
      exports.canAddToArray = canAddToArray;
    }
  });

  // node_modules/bip174/src/lib/converter/global/unsignedTx.js
  var require_unsignedTx = __commonJS({
    "node_modules/bip174/src/lib/converter/global/unsignedTx.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var typeFields_1 = require_typeFields();
      function encode(data) {
        return {
          key: Buffer.from([typeFields_1.GlobalTypes.UNSIGNED_TX]),
          value: data.toBuffer()
        };
      }
      exports.encode = encode;
    }
  });

  // node_modules/bip174/src/lib/converter/input/finalScriptSig.js
  var require_finalScriptSig = __commonJS({
    "node_modules/bip174/src/lib/converter/input/finalScriptSig.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var typeFields_1 = require_typeFields();
      function decode(keyVal) {
        if (keyVal.key[0] !== typeFields_1.InputTypes.FINAL_SCRIPTSIG) {
          throw new Error(
            "Decode Error: could not decode finalScriptSig with key 0x" + keyVal.key.toString("hex")
          );
        }
        return keyVal.value;
      }
      exports.decode = decode;
      function encode(data) {
        const key = Buffer.from([typeFields_1.InputTypes.FINAL_SCRIPTSIG]);
        return {
          key,
          value: data
        };
      }
      exports.encode = encode;
      exports.expected = "Buffer";
      function check(data) {
        return Buffer.isBuffer(data);
      }
      exports.check = check;
      function canAdd(currentData, newData) {
        return !!currentData && !!newData && currentData.finalScriptSig === void 0;
      }
      exports.canAdd = canAdd;
    }
  });

  // node_modules/bip174/src/lib/converter/input/finalScriptWitness.js
  var require_finalScriptWitness = __commonJS({
    "node_modules/bip174/src/lib/converter/input/finalScriptWitness.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var typeFields_1 = require_typeFields();
      function decode(keyVal) {
        if (keyVal.key[0] !== typeFields_1.InputTypes.FINAL_SCRIPTWITNESS) {
          throw new Error(
            "Decode Error: could not decode finalScriptWitness with key 0x" + keyVal.key.toString("hex")
          );
        }
        return keyVal.value;
      }
      exports.decode = decode;
      function encode(data) {
        const key = Buffer.from([typeFields_1.InputTypes.FINAL_SCRIPTWITNESS]);
        return {
          key,
          value: data
        };
      }
      exports.encode = encode;
      exports.expected = "Buffer";
      function check(data) {
        return Buffer.isBuffer(data);
      }
      exports.check = check;
      function canAdd(currentData, newData) {
        return !!currentData && !!newData && currentData.finalScriptWitness === void 0;
      }
      exports.canAdd = canAdd;
    }
  });

  // node_modules/bip174/src/lib/converter/input/nonWitnessUtxo.js
  var require_nonWitnessUtxo = __commonJS({
    "node_modules/bip174/src/lib/converter/input/nonWitnessUtxo.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var typeFields_1 = require_typeFields();
      function decode(keyVal) {
        if (keyVal.key[0] !== typeFields_1.InputTypes.NON_WITNESS_UTXO) {
          throw new Error(
            "Decode Error: could not decode nonWitnessUtxo with key 0x" + keyVal.key.toString("hex")
          );
        }
        return keyVal.value;
      }
      exports.decode = decode;
      function encode(data) {
        return {
          key: Buffer.from([typeFields_1.InputTypes.NON_WITNESS_UTXO]),
          value: data
        };
      }
      exports.encode = encode;
      exports.expected = "Buffer";
      function check(data) {
        return Buffer.isBuffer(data);
      }
      exports.check = check;
      function canAdd(currentData, newData) {
        return !!currentData && !!newData && currentData.nonWitnessUtxo === void 0;
      }
      exports.canAdd = canAdd;
    }
  });

  // node_modules/bip174/src/lib/converter/input/partialSig.js
  var require_partialSig = __commonJS({
    "node_modules/bip174/src/lib/converter/input/partialSig.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var typeFields_1 = require_typeFields();
      function decode(keyVal) {
        if (keyVal.key[0] !== typeFields_1.InputTypes.PARTIAL_SIG) {
          throw new Error(
            "Decode Error: could not decode partialSig with key 0x" + keyVal.key.toString("hex")
          );
        }
        if (!(keyVal.key.length === 34 || keyVal.key.length === 66) || ![2, 3, 4].includes(keyVal.key[1])) {
          throw new Error(
            "Decode Error: partialSig has invalid pubkey in key 0x" + keyVal.key.toString("hex")
          );
        }
        const pubkey = keyVal.key.slice(1);
        return {
          pubkey,
          signature: keyVal.value
        };
      }
      exports.decode = decode;
      function encode(pSig) {
        const head = Buffer.from([typeFields_1.InputTypes.PARTIAL_SIG]);
        return {
          key: Buffer.concat([head, pSig.pubkey]),
          value: pSig.signature
        };
      }
      exports.encode = encode;
      exports.expected = "{ pubkey: Buffer; signature: Buffer; }";
      function check(data) {
        return Buffer.isBuffer(data.pubkey) && Buffer.isBuffer(data.signature) && [33, 65].includes(data.pubkey.length) && [2, 3, 4].includes(data.pubkey[0]) && isDerSigWithSighash(data.signature);
      }
      exports.check = check;
      function isDerSigWithSighash(buf) {
        if (!Buffer.isBuffer(buf) || buf.length < 9)
          return false;
        if (buf[0] !== 48)
          return false;
        if (buf.length !== buf[1] + 3)
          return false;
        if (buf[2] !== 2)
          return false;
        const rLen = buf[3];
        if (rLen > 33 || rLen < 1)
          return false;
        if (buf[3 + rLen + 1] !== 2)
          return false;
        const sLen = buf[3 + rLen + 2];
        if (sLen > 33 || sLen < 1)
          return false;
        if (buf.length !== 3 + rLen + 2 + sLen + 2)
          return false;
        return true;
      }
      function canAddToArray(array, item, dupeSet) {
        const dupeString = item.pubkey.toString("hex");
        if (dupeSet.has(dupeString))
          return false;
        dupeSet.add(dupeString);
        return array.filter((v) => v.pubkey.equals(item.pubkey)).length === 0;
      }
      exports.canAddToArray = canAddToArray;
    }
  });

  // node_modules/bip174/src/lib/converter/input/porCommitment.js
  var require_porCommitment = __commonJS({
    "node_modules/bip174/src/lib/converter/input/porCommitment.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var typeFields_1 = require_typeFields();
      function decode(keyVal) {
        if (keyVal.key[0] !== typeFields_1.InputTypes.POR_COMMITMENT) {
          throw new Error(
            "Decode Error: could not decode porCommitment with key 0x" + keyVal.key.toString("hex")
          );
        }
        return keyVal.value.toString("utf8");
      }
      exports.decode = decode;
      function encode(data) {
        const key = Buffer.from([typeFields_1.InputTypes.POR_COMMITMENT]);
        return {
          key,
          value: Buffer.from(data, "utf8")
        };
      }
      exports.encode = encode;
      exports.expected = "string";
      function check(data) {
        return typeof data === "string";
      }
      exports.check = check;
      function canAdd(currentData, newData) {
        return !!currentData && !!newData && currentData.porCommitment === void 0;
      }
      exports.canAdd = canAdd;
    }
  });

  // node_modules/bip174/src/lib/converter/input/sighashType.js
  var require_sighashType = __commonJS({
    "node_modules/bip174/src/lib/converter/input/sighashType.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var typeFields_1 = require_typeFields();
      function decode(keyVal) {
        if (keyVal.key[0] !== typeFields_1.InputTypes.SIGHASH_TYPE) {
          throw new Error(
            "Decode Error: could not decode sighashType with key 0x" + keyVal.key.toString("hex")
          );
        }
        return keyVal.value.readUInt32LE(0);
      }
      exports.decode = decode;
      function encode(data) {
        const key = Buffer.from([typeFields_1.InputTypes.SIGHASH_TYPE]);
        const value = Buffer.allocUnsafe(4);
        value.writeUInt32LE(data, 0);
        return {
          key,
          value
        };
      }
      exports.encode = encode;
      exports.expected = "number";
      function check(data) {
        return typeof data === "number";
      }
      exports.check = check;
      function canAdd(currentData, newData) {
        return !!currentData && !!newData && currentData.sighashType === void 0;
      }
      exports.canAdd = canAdd;
    }
  });

  // node_modules/bip174/src/lib/converter/input/tapKeySig.js
  var require_tapKeySig = __commonJS({
    "node_modules/bip174/src/lib/converter/input/tapKeySig.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var typeFields_1 = require_typeFields();
      function decode(keyVal) {
        if (keyVal.key[0] !== typeFields_1.InputTypes.TAP_KEY_SIG || keyVal.key.length !== 1) {
          throw new Error(
            "Decode Error: could not decode tapKeySig with key 0x" + keyVal.key.toString("hex")
          );
        }
        if (!check(keyVal.value)) {
          throw new Error(
            "Decode Error: tapKeySig not a valid 64-65-byte BIP340 signature"
          );
        }
        return keyVal.value;
      }
      exports.decode = decode;
      function encode(value) {
        const key = Buffer.from([typeFields_1.InputTypes.TAP_KEY_SIG]);
        return { key, value };
      }
      exports.encode = encode;
      exports.expected = "Buffer";
      function check(data) {
        return Buffer.isBuffer(data) && (data.length === 64 || data.length === 65);
      }
      exports.check = check;
      function canAdd(currentData, newData) {
        return !!currentData && !!newData && currentData.tapKeySig === void 0;
      }
      exports.canAdd = canAdd;
    }
  });

  // node_modules/bip174/src/lib/converter/input/tapLeafScript.js
  var require_tapLeafScript = __commonJS({
    "node_modules/bip174/src/lib/converter/input/tapLeafScript.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var typeFields_1 = require_typeFields();
      function decode(keyVal) {
        if (keyVal.key[0] !== typeFields_1.InputTypes.TAP_LEAF_SCRIPT) {
          throw new Error(
            "Decode Error: could not decode tapLeafScript with key 0x" + keyVal.key.toString("hex")
          );
        }
        if ((keyVal.key.length - 2) % 32 !== 0) {
          throw new Error(
            "Decode Error: tapLeafScript has invalid control block in key 0x" + keyVal.key.toString("hex")
          );
        }
        const leafVersion = keyVal.value[keyVal.value.length - 1];
        if ((keyVal.key[1] & 254) !== leafVersion) {
          throw new Error(
            "Decode Error: tapLeafScript bad leaf version in key 0x" + keyVal.key.toString("hex")
          );
        }
        const script2 = keyVal.value.slice(0, -1);
        const controlBlock = keyVal.key.slice(1);
        return { controlBlock, script: script2, leafVersion };
      }
      exports.decode = decode;
      function encode(tScript) {
        const head = Buffer.from([typeFields_1.InputTypes.TAP_LEAF_SCRIPT]);
        const verBuf = Buffer.from([tScript.leafVersion]);
        return {
          key: Buffer.concat([head, tScript.controlBlock]),
          value: Buffer.concat([tScript.script, verBuf])
        };
      }
      exports.encode = encode;
      exports.expected = "{ controlBlock: Buffer; leafVersion: number, script: Buffer; }";
      function check(data) {
        return Buffer.isBuffer(data.controlBlock) && (data.controlBlock.length - 1) % 32 === 0 && (data.controlBlock[0] & 254) === data.leafVersion && Buffer.isBuffer(data.script);
      }
      exports.check = check;
      function canAddToArray(array, item, dupeSet) {
        const dupeString = item.controlBlock.toString("hex");
        if (dupeSet.has(dupeString))
          return false;
        dupeSet.add(dupeString);
        return array.filter((v) => v.controlBlock.equals(item.controlBlock)).length === 0;
      }
      exports.canAddToArray = canAddToArray;
    }
  });

  // node_modules/bip174/src/lib/converter/input/tapMerkleRoot.js
  var require_tapMerkleRoot = __commonJS({
    "node_modules/bip174/src/lib/converter/input/tapMerkleRoot.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var typeFields_1 = require_typeFields();
      function decode(keyVal) {
        if (keyVal.key[0] !== typeFields_1.InputTypes.TAP_MERKLE_ROOT || keyVal.key.length !== 1) {
          throw new Error(
            "Decode Error: could not decode tapMerkleRoot with key 0x" + keyVal.key.toString("hex")
          );
        }
        if (!check(keyVal.value)) {
          throw new Error("Decode Error: tapMerkleRoot not a 32-byte hash");
        }
        return keyVal.value;
      }
      exports.decode = decode;
      function encode(value) {
        const key = Buffer.from([typeFields_1.InputTypes.TAP_MERKLE_ROOT]);
        return { key, value };
      }
      exports.encode = encode;
      exports.expected = "Buffer";
      function check(data) {
        return Buffer.isBuffer(data) && data.length === 32;
      }
      exports.check = check;
      function canAdd(currentData, newData) {
        return !!currentData && !!newData && currentData.tapMerkleRoot === void 0;
      }
      exports.canAdd = canAdd;
    }
  });

  // node_modules/bip174/src/lib/converter/input/tapScriptSig.js
  var require_tapScriptSig = __commonJS({
    "node_modules/bip174/src/lib/converter/input/tapScriptSig.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var typeFields_1 = require_typeFields();
      function decode(keyVal) {
        if (keyVal.key[0] !== typeFields_1.InputTypes.TAP_SCRIPT_SIG) {
          throw new Error(
            "Decode Error: could not decode tapScriptSig with key 0x" + keyVal.key.toString("hex")
          );
        }
        if (keyVal.key.length !== 65) {
          throw new Error(
            "Decode Error: tapScriptSig has invalid key 0x" + keyVal.key.toString("hex")
          );
        }
        if (keyVal.value.length !== 64 && keyVal.value.length !== 65) {
          throw new Error(
            "Decode Error: tapScriptSig has invalid signature in key 0x" + keyVal.key.toString("hex")
          );
        }
        const pubkey = keyVal.key.slice(1, 33);
        const leafHash = keyVal.key.slice(33);
        return {
          pubkey,
          leafHash,
          signature: keyVal.value
        };
      }
      exports.decode = decode;
      function encode(tSig) {
        const head = Buffer.from([typeFields_1.InputTypes.TAP_SCRIPT_SIG]);
        return {
          key: Buffer.concat([head, tSig.pubkey, tSig.leafHash]),
          value: tSig.signature
        };
      }
      exports.encode = encode;
      exports.expected = "{ pubkey: Buffer; leafHash: Buffer; signature: Buffer; }";
      function check(data) {
        return Buffer.isBuffer(data.pubkey) && Buffer.isBuffer(data.leafHash) && Buffer.isBuffer(data.signature) && data.pubkey.length === 32 && data.leafHash.length === 32 && (data.signature.length === 64 || data.signature.length === 65);
      }
      exports.check = check;
      function canAddToArray(array, item, dupeSet) {
        const dupeString = item.pubkey.toString("hex") + item.leafHash.toString("hex");
        if (dupeSet.has(dupeString))
          return false;
        dupeSet.add(dupeString);
        return array.filter(
          (v) => v.pubkey.equals(item.pubkey) && v.leafHash.equals(item.leafHash)
        ).length === 0;
      }
      exports.canAddToArray = canAddToArray;
    }
  });

  // node_modules/bip174/src/lib/converter/varint.js
  var require_varint = __commonJS({
    "node_modules/bip174/src/lib/converter/varint.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var MAX_SAFE_INTEGER = 9007199254740991;
      function checkUInt53(n) {
        if (n < 0 || n > MAX_SAFE_INTEGER || n % 1 !== 0)
          throw new RangeError("value out of range");
      }
      function encode(_number, buffer, offset) {
        checkUInt53(_number);
        if (!buffer)
          buffer = Buffer.allocUnsafe(encodingLength(_number));
        if (!Buffer.isBuffer(buffer))
          throw new TypeError("buffer must be a Buffer instance");
        if (!offset)
          offset = 0;
        if (_number < 253) {
          buffer.writeUInt8(_number, offset);
          Object.assign(encode, { bytes: 1 });
        } else if (_number <= 65535) {
          buffer.writeUInt8(253, offset);
          buffer.writeUInt16LE(_number, offset + 1);
          Object.assign(encode, { bytes: 3 });
        } else if (_number <= 4294967295) {
          buffer.writeUInt8(254, offset);
          buffer.writeUInt32LE(_number, offset + 1);
          Object.assign(encode, { bytes: 5 });
        } else {
          buffer.writeUInt8(255, offset);
          buffer.writeUInt32LE(_number >>> 0, offset + 1);
          buffer.writeUInt32LE(_number / 4294967296 | 0, offset + 5);
          Object.assign(encode, { bytes: 9 });
        }
        return buffer;
      }
      exports.encode = encode;
      function decode(buffer, offset) {
        if (!Buffer.isBuffer(buffer))
          throw new TypeError("buffer must be a Buffer instance");
        if (!offset)
          offset = 0;
        const first = buffer.readUInt8(offset);
        if (first < 253) {
          Object.assign(decode, { bytes: 1 });
          return first;
        } else if (first === 253) {
          Object.assign(decode, { bytes: 3 });
          return buffer.readUInt16LE(offset + 1);
        } else if (first === 254) {
          Object.assign(decode, { bytes: 5 });
          return buffer.readUInt32LE(offset + 1);
        } else {
          Object.assign(decode, { bytes: 9 });
          const lo = buffer.readUInt32LE(offset + 1);
          const hi = buffer.readUInt32LE(offset + 5);
          const _number = hi * 4294967296 + lo;
          checkUInt53(_number);
          return _number;
        }
      }
      exports.decode = decode;
      function encodingLength(_number) {
        checkUInt53(_number);
        return _number < 253 ? 1 : _number <= 65535 ? 3 : _number <= 4294967295 ? 5 : 9;
      }
      exports.encodingLength = encodingLength;
    }
  });

  // node_modules/bip174/src/lib/converter/tools.js
  var require_tools = __commonJS({
    "node_modules/bip174/src/lib/converter/tools.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var varuint = require_varint();
      exports.range = (n) => [...Array(n).keys()];
      function reverseBuffer(buffer) {
        if (buffer.length < 1)
          return buffer;
        let j = buffer.length - 1;
        let tmp = 0;
        for (let i = 0; i < buffer.length / 2; i++) {
          tmp = buffer[i];
          buffer[i] = buffer[j];
          buffer[j] = tmp;
          j--;
        }
        return buffer;
      }
      exports.reverseBuffer = reverseBuffer;
      function keyValsToBuffer(keyVals) {
        const buffers = keyVals.map(keyValToBuffer);
        buffers.push(Buffer.from([0]));
        return Buffer.concat(buffers);
      }
      exports.keyValsToBuffer = keyValsToBuffer;
      function keyValToBuffer(keyVal) {
        const keyLen = keyVal.key.length;
        const valLen = keyVal.value.length;
        const keyVarIntLen = varuint.encodingLength(keyLen);
        const valVarIntLen = varuint.encodingLength(valLen);
        const buffer = Buffer.allocUnsafe(
          keyVarIntLen + keyLen + valVarIntLen + valLen
        );
        varuint.encode(keyLen, buffer, 0);
        keyVal.key.copy(buffer, keyVarIntLen);
        varuint.encode(valLen, buffer, keyVarIntLen + keyLen);
        keyVal.value.copy(buffer, keyVarIntLen + keyLen + valVarIntLen);
        return buffer;
      }
      exports.keyValToBuffer = keyValToBuffer;
      function verifuint(value, max) {
        if (typeof value !== "number")
          throw new Error("cannot write a non-number as a number");
        if (value < 0)
          throw new Error("specified a negative value for writing an unsigned value");
        if (value > max)
          throw new Error("RangeError: value out of range");
        if (Math.floor(value) !== value)
          throw new Error("value has a fractional component");
      }
      function readUInt64LE(buffer, offset) {
        const a = buffer.readUInt32LE(offset);
        let b = buffer.readUInt32LE(offset + 4);
        b *= 4294967296;
        verifuint(b + a, 9007199254740991);
        return b + a;
      }
      exports.readUInt64LE = readUInt64LE;
      function writeUInt64LE(buffer, value, offset) {
        verifuint(value, 9007199254740991);
        buffer.writeInt32LE(value & -1, offset);
        buffer.writeUInt32LE(Math.floor(value / 4294967296), offset + 4);
        return offset + 8;
      }
      exports.writeUInt64LE = writeUInt64LE;
    }
  });

  // node_modules/bip174/src/lib/converter/input/witnessUtxo.js
  var require_witnessUtxo = __commonJS({
    "node_modules/bip174/src/lib/converter/input/witnessUtxo.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var typeFields_1 = require_typeFields();
      var tools_1 = require_tools();
      var varuint = require_varint();
      function decode(keyVal) {
        if (keyVal.key[0] !== typeFields_1.InputTypes.WITNESS_UTXO) {
          throw new Error(
            "Decode Error: could not decode witnessUtxo with key 0x" + keyVal.key.toString("hex")
          );
        }
        const value = tools_1.readUInt64LE(keyVal.value, 0);
        let _offset = 8;
        const scriptLen = varuint.decode(keyVal.value, _offset);
        _offset += varuint.encodingLength(scriptLen);
        const script2 = keyVal.value.slice(_offset);
        if (script2.length !== scriptLen) {
          throw new Error("Decode Error: WITNESS_UTXO script is not proper length");
        }
        return {
          script: script2,
          value
        };
      }
      exports.decode = decode;
      function encode(data) {
        const { script: script2, value } = data;
        const varintLen = varuint.encodingLength(script2.length);
        const result = Buffer.allocUnsafe(8 + varintLen + script2.length);
        tools_1.writeUInt64LE(result, value, 0);
        varuint.encode(script2.length, result, 8);
        script2.copy(result, 8 + varintLen);
        return {
          key: Buffer.from([typeFields_1.InputTypes.WITNESS_UTXO]),
          value: result
        };
      }
      exports.encode = encode;
      exports.expected = "{ script: Buffer; value: number; }";
      function check(data) {
        return Buffer.isBuffer(data.script) && typeof data.value === "number";
      }
      exports.check = check;
      function canAdd(currentData, newData) {
        return !!currentData && !!newData && currentData.witnessUtxo === void 0;
      }
      exports.canAdd = canAdd;
    }
  });

  // node_modules/bip174/src/lib/converter/output/tapTree.js
  var require_tapTree = __commonJS({
    "node_modules/bip174/src/lib/converter/output/tapTree.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var typeFields_1 = require_typeFields();
      var varuint = require_varint();
      function decode(keyVal) {
        if (keyVal.key[0] !== typeFields_1.OutputTypes.TAP_TREE || keyVal.key.length !== 1) {
          throw new Error(
            "Decode Error: could not decode tapTree with key 0x" + keyVal.key.toString("hex")
          );
        }
        let _offset = 0;
        const data = [];
        while (_offset < keyVal.value.length) {
          const depth = keyVal.value[_offset++];
          const leafVersion = keyVal.value[_offset++];
          const scriptLen = varuint.decode(keyVal.value, _offset);
          _offset += varuint.encodingLength(scriptLen);
          data.push({
            depth,
            leafVersion,
            script: keyVal.value.slice(_offset, _offset + scriptLen)
          });
          _offset += scriptLen;
        }
        return { leaves: data };
      }
      exports.decode = decode;
      function encode(tree) {
        const key = Buffer.from([typeFields_1.OutputTypes.TAP_TREE]);
        const bufs = [].concat(
          ...tree.leaves.map((tapLeaf) => [
            Buffer.of(tapLeaf.depth, tapLeaf.leafVersion),
            varuint.encode(tapLeaf.script.length),
            tapLeaf.script
          ])
        );
        return {
          key,
          value: Buffer.concat(bufs)
        };
      }
      exports.encode = encode;
      exports.expected = "{ leaves: [{ depth: number; leafVersion: number, script: Buffer; }] }";
      function check(data) {
        return Array.isArray(data.leaves) && data.leaves.every(
          (tapLeaf) => tapLeaf.depth >= 0 && tapLeaf.depth <= 128 && (tapLeaf.leafVersion & 254) === tapLeaf.leafVersion && Buffer.isBuffer(tapLeaf.script)
        );
      }
      exports.check = check;
      function canAdd(currentData, newData) {
        return !!currentData && !!newData && currentData.tapTree === void 0;
      }
      exports.canAdd = canAdd;
    }
  });

  // node_modules/bip174/src/lib/converter/shared/bip32Derivation.js
  var require_bip32Derivation = __commonJS({
    "node_modules/bip174/src/lib/converter/shared/bip32Derivation.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var range = (n) => [...Array(n).keys()];
      var isValidDERKey = (pubkey) => pubkey.length === 33 && [2, 3].includes(pubkey[0]) || pubkey.length === 65 && 4 === pubkey[0];
      function makeConverter(TYPE_BYTE, isValidPubkey = isValidDERKey) {
        function decode(keyVal) {
          if (keyVal.key[0] !== TYPE_BYTE) {
            throw new Error(
              "Decode Error: could not decode bip32Derivation with key 0x" + keyVal.key.toString("hex")
            );
          }
          const pubkey = keyVal.key.slice(1);
          if (!isValidPubkey(pubkey)) {
            throw new Error(
              "Decode Error: bip32Derivation has invalid pubkey in key 0x" + keyVal.key.toString("hex")
            );
          }
          if (keyVal.value.length / 4 % 1 !== 0) {
            throw new Error(
              "Decode Error: Input BIP32_DERIVATION value length should be multiple of 4"
            );
          }
          const data = {
            masterFingerprint: keyVal.value.slice(0, 4),
            pubkey,
            path: "m"
          };
          for (const i of range(keyVal.value.length / 4 - 1)) {
            const val = keyVal.value.readUInt32LE(i * 4 + 4);
            const isHard = !!(val & 2147483648);
            const idx = val & 2147483647;
            data.path += "/" + idx.toString(10) + (isHard ? "'" : "");
          }
          return data;
        }
        function encode(data) {
          const head = Buffer.from([TYPE_BYTE]);
          const key = Buffer.concat([head, data.pubkey]);
          const splitPath = data.path.split("/");
          const value = Buffer.allocUnsafe(splitPath.length * 4);
          data.masterFingerprint.copy(value, 0);
          let offset = 4;
          splitPath.slice(1).forEach((level) => {
            const isHard = level.slice(-1) === "'";
            let num = 2147483647 & parseInt(isHard ? level.slice(0, -1) : level, 10);
            if (isHard)
              num += 2147483648;
            value.writeUInt32LE(num, offset);
            offset += 4;
          });
          return {
            key,
            value
          };
        }
        const expected = "{ masterFingerprint: Buffer; pubkey: Buffer; path: string; }";
        function check(data) {
          return Buffer.isBuffer(data.pubkey) && Buffer.isBuffer(data.masterFingerprint) && typeof data.path === "string" && isValidPubkey(data.pubkey) && data.masterFingerprint.length === 4;
        }
        function canAddToArray(array, item, dupeSet) {
          const dupeString = item.pubkey.toString("hex");
          if (dupeSet.has(dupeString))
            return false;
          dupeSet.add(dupeString);
          return array.filter((v) => v.pubkey.equals(item.pubkey)).length === 0;
        }
        return {
          decode,
          encode,
          check,
          expected,
          canAddToArray
        };
      }
      exports.makeConverter = makeConverter;
    }
  });

  // node_modules/bip174/src/lib/converter/shared/checkPubkey.js
  var require_checkPubkey = __commonJS({
    "node_modules/bip174/src/lib/converter/shared/checkPubkey.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function makeChecker(pubkeyTypes) {
        return checkPubkey;
        function checkPubkey(keyVal) {
          let pubkey;
          if (pubkeyTypes.includes(keyVal.key[0])) {
            pubkey = keyVal.key.slice(1);
            if (!(pubkey.length === 33 || pubkey.length === 65) || ![2, 3, 4].includes(pubkey[0])) {
              throw new Error(
                "Format Error: invalid pubkey in key 0x" + keyVal.key.toString("hex")
              );
            }
          }
          return pubkey;
        }
      }
      exports.makeChecker = makeChecker;
    }
  });

  // node_modules/bip174/src/lib/converter/shared/redeemScript.js
  var require_redeemScript = __commonJS({
    "node_modules/bip174/src/lib/converter/shared/redeemScript.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function makeConverter(TYPE_BYTE) {
        function decode(keyVal) {
          if (keyVal.key[0] !== TYPE_BYTE) {
            throw new Error(
              "Decode Error: could not decode redeemScript with key 0x" + keyVal.key.toString("hex")
            );
          }
          return keyVal.value;
        }
        function encode(data) {
          const key = Buffer.from([TYPE_BYTE]);
          return {
            key,
            value: data
          };
        }
        const expected = "Buffer";
        function check(data) {
          return Buffer.isBuffer(data);
        }
        function canAdd(currentData, newData) {
          return !!currentData && !!newData && currentData.redeemScript === void 0;
        }
        return {
          decode,
          encode,
          check,
          expected,
          canAdd
        };
      }
      exports.makeConverter = makeConverter;
    }
  });

  // node_modules/bip174/src/lib/converter/shared/tapBip32Derivation.js
  var require_tapBip32Derivation = __commonJS({
    "node_modules/bip174/src/lib/converter/shared/tapBip32Derivation.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var varuint = require_varint();
      var bip32Derivation = require_bip32Derivation();
      var isValidBIP340Key = (pubkey) => pubkey.length === 32;
      function makeConverter(TYPE_BYTE) {
        const parent = bip32Derivation.makeConverter(TYPE_BYTE, isValidBIP340Key);
        function decode(keyVal) {
          const nHashes = varuint.decode(keyVal.value);
          const nHashesLen = varuint.encodingLength(nHashes);
          const base = parent.decode({
            key: keyVal.key,
            value: keyVal.value.slice(nHashesLen + nHashes * 32)
          });
          const leafHashes = new Array(nHashes);
          for (let i = 0, _offset = nHashesLen; i < nHashes; i++, _offset += 32) {
            leafHashes[i] = keyVal.value.slice(_offset, _offset + 32);
          }
          return Object.assign({}, base, { leafHashes });
        }
        function encode(data) {
          const base = parent.encode(data);
          const nHashesLen = varuint.encodingLength(data.leafHashes.length);
          const nHashesBuf = Buffer.allocUnsafe(nHashesLen);
          varuint.encode(data.leafHashes.length, nHashesBuf);
          const value = Buffer.concat([nHashesBuf, ...data.leafHashes, base.value]);
          return Object.assign({}, base, { value });
        }
        const expected = "{ masterFingerprint: Buffer; pubkey: Buffer; path: string; leafHashes: Buffer[]; }";
        function check(data) {
          return Array.isArray(data.leafHashes) && data.leafHashes.every(
            (leafHash) => Buffer.isBuffer(leafHash) && leafHash.length === 32
          ) && parent.check(data);
        }
        return {
          decode,
          encode,
          check,
          expected,
          canAddToArray: parent.canAddToArray
        };
      }
      exports.makeConverter = makeConverter;
    }
  });

  // node_modules/bip174/src/lib/converter/shared/tapInternalKey.js
  var require_tapInternalKey = __commonJS({
    "node_modules/bip174/src/lib/converter/shared/tapInternalKey.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function makeConverter(TYPE_BYTE) {
        function decode(keyVal) {
          if (keyVal.key[0] !== TYPE_BYTE || keyVal.key.length !== 1) {
            throw new Error(
              "Decode Error: could not decode tapInternalKey with key 0x" + keyVal.key.toString("hex")
            );
          }
          if (keyVal.value.length !== 32) {
            throw new Error(
              "Decode Error: tapInternalKey not a 32-byte x-only pubkey"
            );
          }
          return keyVal.value;
        }
        function encode(value) {
          const key = Buffer.from([TYPE_BYTE]);
          return { key, value };
        }
        const expected = "Buffer";
        function check(data) {
          return Buffer.isBuffer(data) && data.length === 32;
        }
        function canAdd(currentData, newData) {
          return !!currentData && !!newData && currentData.tapInternalKey === void 0;
        }
        return {
          decode,
          encode,
          check,
          expected,
          canAdd
        };
      }
      exports.makeConverter = makeConverter;
    }
  });

  // node_modules/bip174/src/lib/converter/shared/witnessScript.js
  var require_witnessScript = __commonJS({
    "node_modules/bip174/src/lib/converter/shared/witnessScript.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function makeConverter(TYPE_BYTE) {
        function decode(keyVal) {
          if (keyVal.key[0] !== TYPE_BYTE) {
            throw new Error(
              "Decode Error: could not decode witnessScript with key 0x" + keyVal.key.toString("hex")
            );
          }
          return keyVal.value;
        }
        function encode(data) {
          const key = Buffer.from([TYPE_BYTE]);
          return {
            key,
            value: data
          };
        }
        const expected = "Buffer";
        function check(data) {
          return Buffer.isBuffer(data);
        }
        function canAdd(currentData, newData) {
          return !!currentData && !!newData && currentData.witnessScript === void 0;
        }
        return {
          decode,
          encode,
          check,
          expected,
          canAdd
        };
      }
      exports.makeConverter = makeConverter;
    }
  });

  // node_modules/bip174/src/lib/converter/index.js
  var require_converter = __commonJS({
    "node_modules/bip174/src/lib/converter/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var typeFields_1 = require_typeFields();
      var globalXpub = require_globalXpub();
      var unsignedTx = require_unsignedTx();
      var finalScriptSig = require_finalScriptSig();
      var finalScriptWitness = require_finalScriptWitness();
      var nonWitnessUtxo = require_nonWitnessUtxo();
      var partialSig = require_partialSig();
      var porCommitment = require_porCommitment();
      var sighashType = require_sighashType();
      var tapKeySig = require_tapKeySig();
      var tapLeafScript = require_tapLeafScript();
      var tapMerkleRoot = require_tapMerkleRoot();
      var tapScriptSig = require_tapScriptSig();
      var witnessUtxo = require_witnessUtxo();
      var tapTree = require_tapTree();
      var bip32Derivation = require_bip32Derivation();
      var checkPubkey = require_checkPubkey();
      var redeemScript = require_redeemScript();
      var tapBip32Derivation = require_tapBip32Derivation();
      var tapInternalKey = require_tapInternalKey();
      var witnessScript = require_witnessScript();
      var globals = {
        unsignedTx,
        globalXpub,
        // pass an Array of key bytes that require pubkey beside the key
        checkPubkey: checkPubkey.makeChecker([])
      };
      exports.globals = globals;
      var inputs = {
        nonWitnessUtxo,
        partialSig,
        sighashType,
        finalScriptSig,
        finalScriptWitness,
        porCommitment,
        witnessUtxo,
        bip32Derivation: bip32Derivation.makeConverter(
          typeFields_1.InputTypes.BIP32_DERIVATION
        ),
        redeemScript: redeemScript.makeConverter(
          typeFields_1.InputTypes.REDEEM_SCRIPT
        ),
        witnessScript: witnessScript.makeConverter(
          typeFields_1.InputTypes.WITNESS_SCRIPT
        ),
        checkPubkey: checkPubkey.makeChecker([
          typeFields_1.InputTypes.PARTIAL_SIG,
          typeFields_1.InputTypes.BIP32_DERIVATION
        ]),
        tapKeySig,
        tapScriptSig,
        tapLeafScript,
        tapBip32Derivation: tapBip32Derivation.makeConverter(
          typeFields_1.InputTypes.TAP_BIP32_DERIVATION
        ),
        tapInternalKey: tapInternalKey.makeConverter(
          typeFields_1.InputTypes.TAP_INTERNAL_KEY
        ),
        tapMerkleRoot
      };
      exports.inputs = inputs;
      var outputs = {
        bip32Derivation: bip32Derivation.makeConverter(
          typeFields_1.OutputTypes.BIP32_DERIVATION
        ),
        redeemScript: redeemScript.makeConverter(
          typeFields_1.OutputTypes.REDEEM_SCRIPT
        ),
        witnessScript: witnessScript.makeConverter(
          typeFields_1.OutputTypes.WITNESS_SCRIPT
        ),
        checkPubkey: checkPubkey.makeChecker([
          typeFields_1.OutputTypes.BIP32_DERIVATION
        ]),
        tapBip32Derivation: tapBip32Derivation.makeConverter(
          typeFields_1.OutputTypes.TAP_BIP32_DERIVATION
        ),
        tapTree,
        tapInternalKey: tapInternalKey.makeConverter(
          typeFields_1.OutputTypes.TAP_INTERNAL_KEY
        )
      };
      exports.outputs = outputs;
    }
  });

  // node_modules/bip174/src/lib/parser/fromBuffer.js
  var require_fromBuffer = __commonJS({
    "node_modules/bip174/src/lib/parser/fromBuffer.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var convert = require_converter();
      var tools_1 = require_tools();
      var varuint = require_varint();
      var typeFields_1 = require_typeFields();
      function psbtFromBuffer(buffer, txGetter) {
        let offset = 0;
        function varSlice() {
          const keyLen = varuint.decode(buffer, offset);
          offset += varuint.encodingLength(keyLen);
          const key = buffer.slice(offset, offset + keyLen);
          offset += keyLen;
          return key;
        }
        function readUInt32BE() {
          const num = buffer.readUInt32BE(offset);
          offset += 4;
          return num;
        }
        function readUInt8() {
          const num = buffer.readUInt8(offset);
          offset += 1;
          return num;
        }
        function getKeyValue() {
          const key = varSlice();
          const value = varSlice();
          return {
            key,
            value
          };
        }
        function checkEndOfKeyValPairs() {
          if (offset >= buffer.length) {
            throw new Error("Format Error: Unexpected End of PSBT");
          }
          const isEnd = buffer.readUInt8(offset) === 0;
          if (isEnd) {
            offset++;
          }
          return isEnd;
        }
        if (readUInt32BE() !== 1886610036) {
          throw new Error("Format Error: Invalid Magic Number");
        }
        if (readUInt8() !== 255) {
          throw new Error(
            "Format Error: Magic Number must be followed by 0xff separator"
          );
        }
        const globalMapKeyVals = [];
        const globalKeyIndex = {};
        while (!checkEndOfKeyValPairs()) {
          const keyVal = getKeyValue();
          const hexKey = keyVal.key.toString("hex");
          if (globalKeyIndex[hexKey]) {
            throw new Error(
              "Format Error: Keys must be unique for global keymap: key " + hexKey
            );
          }
          globalKeyIndex[hexKey] = 1;
          globalMapKeyVals.push(keyVal);
        }
        const unsignedTxMaps = globalMapKeyVals.filter(
          (keyVal) => keyVal.key[0] === typeFields_1.GlobalTypes.UNSIGNED_TX
        );
        if (unsignedTxMaps.length !== 1) {
          throw new Error("Format Error: Only one UNSIGNED_TX allowed");
        }
        const unsignedTx = txGetter(unsignedTxMaps[0].value);
        const { inputCount, outputCount } = unsignedTx.getInputOutputCounts();
        const inputKeyVals = [];
        const outputKeyVals = [];
        for (const index of tools_1.range(inputCount)) {
          const inputKeyIndex = {};
          const input = [];
          while (!checkEndOfKeyValPairs()) {
            const keyVal = getKeyValue();
            const hexKey = keyVal.key.toString("hex");
            if (inputKeyIndex[hexKey]) {
              throw new Error(
                "Format Error: Keys must be unique for each input: input index " + index + " key " + hexKey
              );
            }
            inputKeyIndex[hexKey] = 1;
            input.push(keyVal);
          }
          inputKeyVals.push(input);
        }
        for (const index of tools_1.range(outputCount)) {
          const outputKeyIndex = {};
          const output = [];
          while (!checkEndOfKeyValPairs()) {
            const keyVal = getKeyValue();
            const hexKey = keyVal.key.toString("hex");
            if (outputKeyIndex[hexKey]) {
              throw new Error(
                "Format Error: Keys must be unique for each output: output index " + index + " key " + hexKey
              );
            }
            outputKeyIndex[hexKey] = 1;
            output.push(keyVal);
          }
          outputKeyVals.push(output);
        }
        return psbtFromKeyVals(unsignedTx, {
          globalMapKeyVals,
          inputKeyVals,
          outputKeyVals
        });
      }
      exports.psbtFromBuffer = psbtFromBuffer;
      function checkKeyBuffer(type, keyBuf, keyNum) {
        if (!keyBuf.equals(Buffer.from([keyNum]))) {
          throw new Error(
            `Format Error: Invalid ${type} key: ${keyBuf.toString("hex")}`
          );
        }
      }
      exports.checkKeyBuffer = checkKeyBuffer;
      function psbtFromKeyVals(unsignedTx, { globalMapKeyVals, inputKeyVals, outputKeyVals }) {
        const globalMap = {
          unsignedTx
        };
        let txCount = 0;
        for (const keyVal of globalMapKeyVals) {
          switch (keyVal.key[0]) {
            case typeFields_1.GlobalTypes.UNSIGNED_TX:
              checkKeyBuffer(
                "global",
                keyVal.key,
                typeFields_1.GlobalTypes.UNSIGNED_TX
              );
              if (txCount > 0) {
                throw new Error("Format Error: GlobalMap has multiple UNSIGNED_TX");
              }
              txCount++;
              break;
            case typeFields_1.GlobalTypes.GLOBAL_XPUB:
              if (globalMap.globalXpub === void 0) {
                globalMap.globalXpub = [];
              }
              globalMap.globalXpub.push(convert.globals.globalXpub.decode(keyVal));
              break;
            default:
              if (!globalMap.unknownKeyVals)
                globalMap.unknownKeyVals = [];
              globalMap.unknownKeyVals.push(keyVal);
          }
        }
        const inputCount = inputKeyVals.length;
        const outputCount = outputKeyVals.length;
        const inputs = [];
        const outputs = [];
        for (const index of tools_1.range(inputCount)) {
          const input = {};
          for (const keyVal of inputKeyVals[index]) {
            convert.inputs.checkPubkey(keyVal);
            switch (keyVal.key[0]) {
              case typeFields_1.InputTypes.NON_WITNESS_UTXO:
                checkKeyBuffer(
                  "input",
                  keyVal.key,
                  typeFields_1.InputTypes.NON_WITNESS_UTXO
                );
                if (input.nonWitnessUtxo !== void 0) {
                  throw new Error(
                    "Format Error: Input has multiple NON_WITNESS_UTXO"
                  );
                }
                input.nonWitnessUtxo = convert.inputs.nonWitnessUtxo.decode(keyVal);
                break;
              case typeFields_1.InputTypes.WITNESS_UTXO:
                checkKeyBuffer(
                  "input",
                  keyVal.key,
                  typeFields_1.InputTypes.WITNESS_UTXO
                );
                if (input.witnessUtxo !== void 0) {
                  throw new Error("Format Error: Input has multiple WITNESS_UTXO");
                }
                input.witnessUtxo = convert.inputs.witnessUtxo.decode(keyVal);
                break;
              case typeFields_1.InputTypes.PARTIAL_SIG:
                if (input.partialSig === void 0) {
                  input.partialSig = [];
                }
                input.partialSig.push(convert.inputs.partialSig.decode(keyVal));
                break;
              case typeFields_1.InputTypes.SIGHASH_TYPE:
                checkKeyBuffer(
                  "input",
                  keyVal.key,
                  typeFields_1.InputTypes.SIGHASH_TYPE
                );
                if (input.sighashType !== void 0) {
                  throw new Error("Format Error: Input has multiple SIGHASH_TYPE");
                }
                input.sighashType = convert.inputs.sighashType.decode(keyVal);
                break;
              case typeFields_1.InputTypes.REDEEM_SCRIPT:
                checkKeyBuffer(
                  "input",
                  keyVal.key,
                  typeFields_1.InputTypes.REDEEM_SCRIPT
                );
                if (input.redeemScript !== void 0) {
                  throw new Error("Format Error: Input has multiple REDEEM_SCRIPT");
                }
                input.redeemScript = convert.inputs.redeemScript.decode(keyVal);
                break;
              case typeFields_1.InputTypes.WITNESS_SCRIPT:
                checkKeyBuffer(
                  "input",
                  keyVal.key,
                  typeFields_1.InputTypes.WITNESS_SCRIPT
                );
                if (input.witnessScript !== void 0) {
                  throw new Error("Format Error: Input has multiple WITNESS_SCRIPT");
                }
                input.witnessScript = convert.inputs.witnessScript.decode(keyVal);
                break;
              case typeFields_1.InputTypes.BIP32_DERIVATION:
                if (input.bip32Derivation === void 0) {
                  input.bip32Derivation = [];
                }
                input.bip32Derivation.push(
                  convert.inputs.bip32Derivation.decode(keyVal)
                );
                break;
              case typeFields_1.InputTypes.FINAL_SCRIPTSIG:
                checkKeyBuffer(
                  "input",
                  keyVal.key,
                  typeFields_1.InputTypes.FINAL_SCRIPTSIG
                );
                input.finalScriptSig = convert.inputs.finalScriptSig.decode(keyVal);
                break;
              case typeFields_1.InputTypes.FINAL_SCRIPTWITNESS:
                checkKeyBuffer(
                  "input",
                  keyVal.key,
                  typeFields_1.InputTypes.FINAL_SCRIPTWITNESS
                );
                input.finalScriptWitness = convert.inputs.finalScriptWitness.decode(
                  keyVal
                );
                break;
              case typeFields_1.InputTypes.POR_COMMITMENT:
                checkKeyBuffer(
                  "input",
                  keyVal.key,
                  typeFields_1.InputTypes.POR_COMMITMENT
                );
                input.porCommitment = convert.inputs.porCommitment.decode(keyVal);
                break;
              case typeFields_1.InputTypes.TAP_KEY_SIG:
                checkKeyBuffer(
                  "input",
                  keyVal.key,
                  typeFields_1.InputTypes.TAP_KEY_SIG
                );
                input.tapKeySig = convert.inputs.tapKeySig.decode(keyVal);
                break;
              case typeFields_1.InputTypes.TAP_SCRIPT_SIG:
                if (input.tapScriptSig === void 0) {
                  input.tapScriptSig = [];
                }
                input.tapScriptSig.push(convert.inputs.tapScriptSig.decode(keyVal));
                break;
              case typeFields_1.InputTypes.TAP_LEAF_SCRIPT:
                if (input.tapLeafScript === void 0) {
                  input.tapLeafScript = [];
                }
                input.tapLeafScript.push(convert.inputs.tapLeafScript.decode(keyVal));
                break;
              case typeFields_1.InputTypes.TAP_BIP32_DERIVATION:
                if (input.tapBip32Derivation === void 0) {
                  input.tapBip32Derivation = [];
                }
                input.tapBip32Derivation.push(
                  convert.inputs.tapBip32Derivation.decode(keyVal)
                );
                break;
              case typeFields_1.InputTypes.TAP_INTERNAL_KEY:
                checkKeyBuffer(
                  "input",
                  keyVal.key,
                  typeFields_1.InputTypes.TAP_INTERNAL_KEY
                );
                input.tapInternalKey = convert.inputs.tapInternalKey.decode(keyVal);
                break;
              case typeFields_1.InputTypes.TAP_MERKLE_ROOT:
                checkKeyBuffer(
                  "input",
                  keyVal.key,
                  typeFields_1.InputTypes.TAP_MERKLE_ROOT
                );
                input.tapMerkleRoot = convert.inputs.tapMerkleRoot.decode(keyVal);
                break;
              default:
                if (!input.unknownKeyVals)
                  input.unknownKeyVals = [];
                input.unknownKeyVals.push(keyVal);
            }
          }
          inputs.push(input);
        }
        for (const index of tools_1.range(outputCount)) {
          const output = {};
          for (const keyVal of outputKeyVals[index]) {
            convert.outputs.checkPubkey(keyVal);
            switch (keyVal.key[0]) {
              case typeFields_1.OutputTypes.REDEEM_SCRIPT:
                checkKeyBuffer(
                  "output",
                  keyVal.key,
                  typeFields_1.OutputTypes.REDEEM_SCRIPT
                );
                if (output.redeemScript !== void 0) {
                  throw new Error("Format Error: Output has multiple REDEEM_SCRIPT");
                }
                output.redeemScript = convert.outputs.redeemScript.decode(keyVal);
                break;
              case typeFields_1.OutputTypes.WITNESS_SCRIPT:
                checkKeyBuffer(
                  "output",
                  keyVal.key,
                  typeFields_1.OutputTypes.WITNESS_SCRIPT
                );
                if (output.witnessScript !== void 0) {
                  throw new Error("Format Error: Output has multiple WITNESS_SCRIPT");
                }
                output.witnessScript = convert.outputs.witnessScript.decode(keyVal);
                break;
              case typeFields_1.OutputTypes.BIP32_DERIVATION:
                if (output.bip32Derivation === void 0) {
                  output.bip32Derivation = [];
                }
                output.bip32Derivation.push(
                  convert.outputs.bip32Derivation.decode(keyVal)
                );
                break;
              case typeFields_1.OutputTypes.TAP_INTERNAL_KEY:
                checkKeyBuffer(
                  "output",
                  keyVal.key,
                  typeFields_1.OutputTypes.TAP_INTERNAL_KEY
                );
                output.tapInternalKey = convert.outputs.tapInternalKey.decode(keyVal);
                break;
              case typeFields_1.OutputTypes.TAP_TREE:
                checkKeyBuffer(
                  "output",
                  keyVal.key,
                  typeFields_1.OutputTypes.TAP_TREE
                );
                output.tapTree = convert.outputs.tapTree.decode(keyVal);
                break;
              case typeFields_1.OutputTypes.TAP_BIP32_DERIVATION:
                if (output.tapBip32Derivation === void 0) {
                  output.tapBip32Derivation = [];
                }
                output.tapBip32Derivation.push(
                  convert.outputs.tapBip32Derivation.decode(keyVal)
                );
                break;
              default:
                if (!output.unknownKeyVals)
                  output.unknownKeyVals = [];
                output.unknownKeyVals.push(keyVal);
            }
          }
          outputs.push(output);
        }
        return { globalMap, inputs, outputs };
      }
      exports.psbtFromKeyVals = psbtFromKeyVals;
    }
  });

  // node_modules/bip174/src/lib/parser/toBuffer.js
  var require_toBuffer = __commonJS({
    "node_modules/bip174/src/lib/parser/toBuffer.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var convert = require_converter();
      var tools_1 = require_tools();
      function psbtToBuffer({ globalMap, inputs, outputs }) {
        const { globalKeyVals, inputKeyVals, outputKeyVals } = psbtToKeyVals({
          globalMap,
          inputs,
          outputs
        });
        const globalBuffer = tools_1.keyValsToBuffer(globalKeyVals);
        const keyValsOrEmptyToBuffer = (keyVals) => keyVals.length === 0 ? [Buffer.from([0])] : keyVals.map(tools_1.keyValsToBuffer);
        const inputBuffers = keyValsOrEmptyToBuffer(inputKeyVals);
        const outputBuffers = keyValsOrEmptyToBuffer(outputKeyVals);
        const header = Buffer.allocUnsafe(5);
        header.writeUIntBE(482972169471, 0, 5);
        return Buffer.concat(
          [header, globalBuffer].concat(inputBuffers, outputBuffers)
        );
      }
      exports.psbtToBuffer = psbtToBuffer;
      var sortKeyVals = (a, b) => {
        return a.key.compare(b.key);
      };
      function keyValsFromMap(keyValMap, converterFactory) {
        const keyHexSet = /* @__PURE__ */ new Set();
        const keyVals = Object.entries(keyValMap).reduce((result, [key, value]) => {
          if (key === "unknownKeyVals")
            return result;
          const converter = converterFactory[key];
          if (converter === void 0)
            return result;
          const encodedKeyVals = (Array.isArray(value) ? value : [value]).map(
            converter.encode
          );
          const keyHexes = encodedKeyVals.map((kv) => kv.key.toString("hex"));
          keyHexes.forEach((hex) => {
            if (keyHexSet.has(hex))
              throw new Error("Serialize Error: Duplicate key: " + hex);
            keyHexSet.add(hex);
          });
          return result.concat(encodedKeyVals);
        }, []);
        const otherKeyVals = keyValMap.unknownKeyVals ? keyValMap.unknownKeyVals.filter((keyVal) => {
          return !keyHexSet.has(keyVal.key.toString("hex"));
        }) : [];
        return keyVals.concat(otherKeyVals).sort(sortKeyVals);
      }
      function psbtToKeyVals({ globalMap, inputs, outputs }) {
        return {
          globalKeyVals: keyValsFromMap(globalMap, convert.globals),
          inputKeyVals: inputs.map((i) => keyValsFromMap(i, convert.inputs)),
          outputKeyVals: outputs.map((o) => keyValsFromMap(o, convert.outputs))
        };
      }
      exports.psbtToKeyVals = psbtToKeyVals;
    }
  });

  // node_modules/bip174/src/lib/parser/index.js
  var require_parser = __commonJS({
    "node_modules/bip174/src/lib/parser/index.js"(exports) {
      "use strict";
      function __export(m) {
        for (var p in m)
          if (!exports.hasOwnProperty(p))
            exports[p] = m[p];
      }
      Object.defineProperty(exports, "__esModule", { value: true });
      __export(require_fromBuffer());
      __export(require_toBuffer());
    }
  });

  // node_modules/bip174/src/lib/combiner/index.js
  var require_combiner = __commonJS({
    "node_modules/bip174/src/lib/combiner/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var parser_1 = require_parser();
      function combine(psbts) {
        const self2 = psbts[0];
        const selfKeyVals = parser_1.psbtToKeyVals(self2);
        const others = psbts.slice(1);
        if (others.length === 0)
          throw new Error("Combine: Nothing to combine");
        const selfTx = getTx(self2);
        if (selfTx === void 0) {
          throw new Error("Combine: Self missing transaction");
        }
        const selfGlobalSet = getKeySet(selfKeyVals.globalKeyVals);
        const selfInputSets = selfKeyVals.inputKeyVals.map(getKeySet);
        const selfOutputSets = selfKeyVals.outputKeyVals.map(getKeySet);
        for (const other of others) {
          const otherTx = getTx(other);
          if (otherTx === void 0 || !otherTx.toBuffer().equals(selfTx.toBuffer())) {
            throw new Error(
              "Combine: One of the Psbts does not have the same transaction."
            );
          }
          const otherKeyVals = parser_1.psbtToKeyVals(other);
          const otherGlobalSet = getKeySet(otherKeyVals.globalKeyVals);
          otherGlobalSet.forEach(
            keyPusher(
              selfGlobalSet,
              selfKeyVals.globalKeyVals,
              otherKeyVals.globalKeyVals
            )
          );
          const otherInputSets = otherKeyVals.inputKeyVals.map(getKeySet);
          otherInputSets.forEach(
            (inputSet, idx) => inputSet.forEach(
              keyPusher(
                selfInputSets[idx],
                selfKeyVals.inputKeyVals[idx],
                otherKeyVals.inputKeyVals[idx]
              )
            )
          );
          const otherOutputSets = otherKeyVals.outputKeyVals.map(getKeySet);
          otherOutputSets.forEach(
            (outputSet, idx) => outputSet.forEach(
              keyPusher(
                selfOutputSets[idx],
                selfKeyVals.outputKeyVals[idx],
                otherKeyVals.outputKeyVals[idx]
              )
            )
          );
        }
        return parser_1.psbtFromKeyVals(selfTx, {
          globalMapKeyVals: selfKeyVals.globalKeyVals,
          inputKeyVals: selfKeyVals.inputKeyVals,
          outputKeyVals: selfKeyVals.outputKeyVals
        });
      }
      exports.combine = combine;
      function keyPusher(selfSet, selfKeyVals, otherKeyVals) {
        return (key) => {
          if (selfSet.has(key))
            return;
          const newKv = otherKeyVals.filter((kv) => kv.key.toString("hex") === key)[0];
          selfKeyVals.push(newKv);
          selfSet.add(key);
        };
      }
      function getTx(psbt) {
        return psbt.globalMap.unsignedTx;
      }
      function getKeySet(keyVals) {
        const set = /* @__PURE__ */ new Set();
        keyVals.forEach((keyVal) => {
          const hex = keyVal.key.toString("hex");
          if (set.has(hex))
            throw new Error("Combine: KeyValue Map keys should be unique");
          set.add(hex);
        });
        return set;
      }
    }
  });

  // node_modules/bip174/src/lib/utils.js
  var require_utils2 = __commonJS({
    "node_modules/bip174/src/lib/utils.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var converter = require_converter();
      function checkForInput(inputs, inputIndex) {
        const input = inputs[inputIndex];
        if (input === void 0)
          throw new Error(`No input #${inputIndex}`);
        return input;
      }
      exports.checkForInput = checkForInput;
      function checkForOutput(outputs, outputIndex) {
        const output = outputs[outputIndex];
        if (output === void 0)
          throw new Error(`No output #${outputIndex}`);
        return output;
      }
      exports.checkForOutput = checkForOutput;
      function checkHasKey(checkKeyVal, keyVals, enumLength) {
        if (checkKeyVal.key[0] < enumLength) {
          throw new Error(
            `Use the method for your specific key instead of addUnknownKeyVal*`
          );
        }
        if (keyVals && keyVals.filter((kv) => kv.key.equals(checkKeyVal.key)).length !== 0) {
          throw new Error(`Duplicate Key: ${checkKeyVal.key.toString("hex")}`);
        }
      }
      exports.checkHasKey = checkHasKey;
      function getEnumLength(myenum) {
        let count = 0;
        Object.keys(myenum).forEach((val) => {
          if (Number(isNaN(Number(val)))) {
            count++;
          }
        });
        return count;
      }
      exports.getEnumLength = getEnumLength;
      function inputCheckUncleanFinalized(inputIndex, input) {
        let result = false;
        if (input.nonWitnessUtxo || input.witnessUtxo) {
          const needScriptSig = !!input.redeemScript;
          const needWitnessScript = !!input.witnessScript;
          const scriptSigOK = !needScriptSig || !!input.finalScriptSig;
          const witnessScriptOK = !needWitnessScript || !!input.finalScriptWitness;
          const hasOneFinal = !!input.finalScriptSig || !!input.finalScriptWitness;
          result = scriptSigOK && witnessScriptOK && hasOneFinal;
        }
        if (result === false) {
          throw new Error(
            `Input #${inputIndex} has too much or too little data to clean`
          );
        }
      }
      exports.inputCheckUncleanFinalized = inputCheckUncleanFinalized;
      function throwForUpdateMaker(typeName, name, expected, data) {
        throw new Error(
          `Data for ${typeName} key ${name} is incorrect: Expected ${expected} and got ${JSON.stringify(data)}`
        );
      }
      function updateMaker(typeName) {
        return (updateData, mainData) => {
          for (const name of Object.keys(updateData)) {
            const data = updateData[name];
            const { canAdd, canAddToArray, check, expected } = (
              // @ts-ignore
              converter[typeName + "s"][name] || {}
            );
            const isArray = !!canAddToArray;
            if (check) {
              if (isArray) {
                if (!Array.isArray(data) || // @ts-ignore
                mainData[name] && !Array.isArray(mainData[name])) {
                  throw new Error(`Key type ${name} must be an array`);
                }
                if (!data.every(check)) {
                  throwForUpdateMaker(typeName, name, expected, data);
                }
                const arr = mainData[name] || [];
                const dupeCheckSet = /* @__PURE__ */ new Set();
                if (!data.every((v) => canAddToArray(arr, v, dupeCheckSet))) {
                  throw new Error("Can not add duplicate data to array");
                }
                mainData[name] = arr.concat(data);
              } else {
                if (!check(data)) {
                  throwForUpdateMaker(typeName, name, expected, data);
                }
                if (!canAdd(mainData, data)) {
                  throw new Error(`Can not add duplicate data to ${typeName}`);
                }
                mainData[name] = data;
              }
            }
          }
        };
      }
      exports.updateGlobal = updateMaker("global");
      exports.updateInput = updateMaker("input");
      exports.updateOutput = updateMaker("output");
      function addInputAttributes(inputs, data) {
        const index = inputs.length - 1;
        const input = checkForInput(inputs, index);
        exports.updateInput(data, input);
      }
      exports.addInputAttributes = addInputAttributes;
      function addOutputAttributes(outputs, data) {
        const index = outputs.length - 1;
        const output = checkForOutput(outputs, index);
        exports.updateOutput(data, output);
      }
      exports.addOutputAttributes = addOutputAttributes;
      function defaultVersionSetter(version, txBuf) {
        if (!Buffer.isBuffer(txBuf) || txBuf.length < 4) {
          throw new Error("Set Version: Invalid Transaction");
        }
        txBuf.writeUInt32LE(version, 0);
        return txBuf;
      }
      exports.defaultVersionSetter = defaultVersionSetter;
      function defaultLocktimeSetter(locktime, txBuf) {
        if (!Buffer.isBuffer(txBuf) || txBuf.length < 4) {
          throw new Error("Set Locktime: Invalid Transaction");
        }
        txBuf.writeUInt32LE(locktime, txBuf.length - 4);
        return txBuf;
      }
      exports.defaultLocktimeSetter = defaultLocktimeSetter;
    }
  });

  // node_modules/bip174/src/lib/psbt.js
  var require_psbt = __commonJS({
    "node_modules/bip174/src/lib/psbt.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var combiner_1 = require_combiner();
      var parser_1 = require_parser();
      var typeFields_1 = require_typeFields();
      var utils_1 = require_utils2();
      var Psbt = class {
        constructor(tx) {
          this.inputs = [];
          this.outputs = [];
          this.globalMap = {
            unsignedTx: tx
          };
        }
        static fromBase64(data, txFromBuffer) {
          const buffer = Buffer.from(data, "base64");
          return this.fromBuffer(buffer, txFromBuffer);
        }
        static fromHex(data, txFromBuffer) {
          const buffer = Buffer.from(data, "hex");
          return this.fromBuffer(buffer, txFromBuffer);
        }
        static fromBuffer(buffer, txFromBuffer) {
          const results = parser_1.psbtFromBuffer(buffer, txFromBuffer);
          const psbt = new this(results.globalMap.unsignedTx);
          Object.assign(psbt, results);
          return psbt;
        }
        toBase64() {
          const buffer = this.toBuffer();
          return buffer.toString("base64");
        }
        toHex() {
          const buffer = this.toBuffer();
          return buffer.toString("hex");
        }
        toBuffer() {
          return parser_1.psbtToBuffer(this);
        }
        updateGlobal(updateData) {
          utils_1.updateGlobal(updateData, this.globalMap);
          return this;
        }
        updateInput(inputIndex, updateData) {
          const input = utils_1.checkForInput(this.inputs, inputIndex);
          utils_1.updateInput(updateData, input);
          return this;
        }
        updateOutput(outputIndex, updateData) {
          const output = utils_1.checkForOutput(this.outputs, outputIndex);
          utils_1.updateOutput(updateData, output);
          return this;
        }
        addUnknownKeyValToGlobal(keyVal) {
          utils_1.checkHasKey(
            keyVal,
            this.globalMap.unknownKeyVals,
            utils_1.getEnumLength(typeFields_1.GlobalTypes)
          );
          if (!this.globalMap.unknownKeyVals)
            this.globalMap.unknownKeyVals = [];
          this.globalMap.unknownKeyVals.push(keyVal);
          return this;
        }
        addUnknownKeyValToInput(inputIndex, keyVal) {
          const input = utils_1.checkForInput(this.inputs, inputIndex);
          utils_1.checkHasKey(
            keyVal,
            input.unknownKeyVals,
            utils_1.getEnumLength(typeFields_1.InputTypes)
          );
          if (!input.unknownKeyVals)
            input.unknownKeyVals = [];
          input.unknownKeyVals.push(keyVal);
          return this;
        }
        addUnknownKeyValToOutput(outputIndex, keyVal) {
          const output = utils_1.checkForOutput(this.outputs, outputIndex);
          utils_1.checkHasKey(
            keyVal,
            output.unknownKeyVals,
            utils_1.getEnumLength(typeFields_1.OutputTypes)
          );
          if (!output.unknownKeyVals)
            output.unknownKeyVals = [];
          output.unknownKeyVals.push(keyVal);
          return this;
        }
        addInput(inputData) {
          this.globalMap.unsignedTx.addInput(inputData);
          this.inputs.push({
            unknownKeyVals: []
          });
          const addKeyVals = inputData.unknownKeyVals || [];
          const inputIndex = this.inputs.length - 1;
          if (!Array.isArray(addKeyVals)) {
            throw new Error("unknownKeyVals must be an Array");
          }
          addKeyVals.forEach(
            (keyVal) => this.addUnknownKeyValToInput(inputIndex, keyVal)
          );
          utils_1.addInputAttributes(this.inputs, inputData);
          return this;
        }
        addOutput(outputData) {
          this.globalMap.unsignedTx.addOutput(outputData);
          this.outputs.push({
            unknownKeyVals: []
          });
          const addKeyVals = outputData.unknownKeyVals || [];
          const outputIndex = this.outputs.length - 1;
          if (!Array.isArray(addKeyVals)) {
            throw new Error("unknownKeyVals must be an Array");
          }
          addKeyVals.forEach(
            (keyVal) => this.addUnknownKeyValToOutput(outputIndex, keyVal)
          );
          utils_1.addOutputAttributes(this.outputs, outputData);
          return this;
        }
        clearFinalizedInput(inputIndex) {
          const input = utils_1.checkForInput(this.inputs, inputIndex);
          utils_1.inputCheckUncleanFinalized(inputIndex, input);
          for (const key of Object.keys(input)) {
            if (![
              "witnessUtxo",
              "nonWitnessUtxo",
              "finalScriptSig",
              "finalScriptWitness",
              "unknownKeyVals"
            ].includes(key)) {
              delete input[key];
            }
          }
          return this;
        }
        combine(...those) {
          const result = combiner_1.combine([this].concat(those));
          Object.assign(this, result);
          return this;
        }
        getTransaction() {
          return this.globalMap.unsignedTx.toBuffer();
        }
      };
      exports.Psbt = Psbt;
    }
  });

  // node_modules/bitcoinjs-lib/src/psbt/psbtutils.js
  var require_psbtutils = __commonJS({
    "node_modules/bitcoinjs-lib/src/psbt/psbtutils.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.signatureBlocksAction = exports.checkInputForSig = exports.pubkeyInScript = exports.pubkeyPositionInScript = exports.witnessStackToScriptWitness = exports.isP2TR = exports.isP2SHScript = exports.isP2WSHScript = exports.isP2WPKH = exports.isP2PKH = exports.isP2PK = exports.isP2MS = void 0;
      var varuint = require_varint();
      var bscript = require_script();
      var transaction_1 = require_transaction();
      var crypto_1 = require_crypto3();
      var payments2 = require_payments();
      function isPaymentFactory(payment) {
        return (script2) => {
          try {
            payment({ output: script2 });
            return true;
          } catch (err) {
            return false;
          }
        };
      }
      exports.isP2MS = isPaymentFactory(payments2.p2ms);
      exports.isP2PK = isPaymentFactory(payments2.p2pk);
      exports.isP2PKH = isPaymentFactory(payments2.p2pkh);
      exports.isP2WPKH = isPaymentFactory(payments2.p2wpkh);
      exports.isP2WSHScript = isPaymentFactory(payments2.p2wsh);
      exports.isP2SHScript = isPaymentFactory(payments2.p2sh);
      exports.isP2TR = isPaymentFactory(payments2.p2tr);
      function witnessStackToScriptWitness(witness) {
        let buffer = Buffer.allocUnsafe(0);
        function writeSlice(slice) {
          buffer = Buffer.concat([buffer, Buffer.from(slice)]);
        }
        function writeVarInt(i) {
          const currentLen = buffer.length;
          const varintLen = varuint.encodingLength(i);
          buffer = Buffer.concat([buffer, Buffer.allocUnsafe(varintLen)]);
          varuint.encode(i, buffer, currentLen);
        }
        function writeVarSlice(slice) {
          writeVarInt(slice.length);
          writeSlice(slice);
        }
        function writeVector(vector) {
          writeVarInt(vector.length);
          vector.forEach(writeVarSlice);
        }
        writeVector(witness);
        return buffer;
      }
      exports.witnessStackToScriptWitness = witnessStackToScriptWitness;
      function pubkeyPositionInScript(pubkey, script2) {
        const pubkeyHash = (0, crypto_1.hash160)(pubkey);
        const pubkeyXOnly = pubkey.slice(1, 33);
        const decompiled = bscript.decompile(script2);
        if (decompiled === null)
          throw new Error("Unknown script error");
        return decompiled.findIndex((element) => {
          if (typeof element === "number")
            return false;
          return element.equals(pubkey) || element.equals(pubkeyHash) || element.equals(pubkeyXOnly);
        });
      }
      exports.pubkeyPositionInScript = pubkeyPositionInScript;
      function pubkeyInScript(pubkey, script2) {
        return pubkeyPositionInScript(pubkey, script2) !== -1;
      }
      exports.pubkeyInScript = pubkeyInScript;
      function checkInputForSig(input, action) {
        const pSigs = extractPartialSigs(input);
        return pSigs.some(
          (pSig) => signatureBlocksAction(pSig, bscript.signature.decode, action)
        );
      }
      exports.checkInputForSig = checkInputForSig;
      function signatureBlocksAction(signature, signatureDecodeFn, action) {
        const { hashType } = signatureDecodeFn(signature);
        const whitelist = [];
        const isAnyoneCanPay = hashType & transaction_1.Transaction.SIGHASH_ANYONECANPAY;
        if (isAnyoneCanPay)
          whitelist.push("addInput");
        const hashMod = hashType & 31;
        switch (hashMod) {
          case transaction_1.Transaction.SIGHASH_ALL:
            break;
          case transaction_1.Transaction.SIGHASH_SINGLE:
          case transaction_1.Transaction.SIGHASH_NONE:
            whitelist.push("addOutput");
            whitelist.push("setInputSequence");
            break;
        }
        if (whitelist.indexOf(action) === -1) {
          return true;
        }
        return false;
      }
      exports.signatureBlocksAction = signatureBlocksAction;
      function extractPartialSigs(input) {
        let pSigs = [];
        if ((input.partialSig || []).length === 0) {
          if (!input.finalScriptSig && !input.finalScriptWitness)
            return [];
          pSigs = getPsigsFromInputFinalScripts(input);
        } else {
          pSigs = input.partialSig;
        }
        return pSigs.map((p) => p.signature);
      }
      function getPsigsFromInputFinalScripts(input) {
        const scriptItems = !input.finalScriptSig ? [] : bscript.decompile(input.finalScriptSig) || [];
        const witnessItems = !input.finalScriptWitness ? [] : bscript.decompile(input.finalScriptWitness) || [];
        return scriptItems.concat(witnessItems).filter((item) => {
          return Buffer.isBuffer(item) && bscript.isCanonicalScriptSignature(item);
        }).map((sig) => ({ signature: sig }));
      }
    }
  });

  // node_modules/bitcoinjs-lib/src/psbt/bip371.js
  var require_bip371 = __commonJS({
    "node_modules/bitcoinjs-lib/src/psbt/bip371.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.checkTaprootInputForSigs = exports.tapTreeFromList = exports.tapTreeToList = exports.tweakInternalPubKey = exports.checkTaprootOutputFields = exports.checkTaprootInputFields = exports.isTaprootOutput = exports.isTaprootInput = exports.serializeTaprootSignature = exports.tapScriptFinalizer = exports.toXOnly = void 0;
      var types_1 = require_types2();
      var transaction_1 = require_transaction();
      var psbtutils_1 = require_psbtutils();
      var bip341_1 = require_bip341();
      var payments_1 = require_payments();
      var psbtutils_2 = require_psbtutils();
      var toXOnly = (pubKey) => pubKey.length === 32 ? pubKey : pubKey.slice(1, 33);
      exports.toXOnly = toXOnly;
      function tapScriptFinalizer(inputIndex, input, tapLeafHashToFinalize) {
        const tapLeaf = findTapLeafToFinalize(
          input,
          inputIndex,
          tapLeafHashToFinalize
        );
        try {
          const sigs = sortSignatures(input, tapLeaf);
          const witness = sigs.concat(tapLeaf.script).concat(tapLeaf.controlBlock);
          return {
            finalScriptWitness: (0, psbtutils_1.witnessStackToScriptWitness)(witness)
          };
        } catch (err) {
          throw new Error(`Can not finalize taproot input #${inputIndex}: ${err}`);
        }
      }
      exports.tapScriptFinalizer = tapScriptFinalizer;
      function serializeTaprootSignature(sig, sighashType) {
        const sighashTypeByte = sighashType ? Buffer.from([sighashType]) : Buffer.from([]);
        return Buffer.concat([sig, sighashTypeByte]);
      }
      exports.serializeTaprootSignature = serializeTaprootSignature;
      function isTaprootInput(input) {
        return input && !!(input.tapInternalKey || input.tapMerkleRoot || input.tapLeafScript && input.tapLeafScript.length || input.tapBip32Derivation && input.tapBip32Derivation.length || input.witnessUtxo && (0, psbtutils_1.isP2TR)(input.witnessUtxo.script));
      }
      exports.isTaprootInput = isTaprootInput;
      function isTaprootOutput(output, script2) {
        return output && !!(output.tapInternalKey || output.tapTree || output.tapBip32Derivation && output.tapBip32Derivation.length || script2 && (0, psbtutils_1.isP2TR)(script2));
      }
      exports.isTaprootOutput = isTaprootOutput;
      function checkTaprootInputFields(inputData, newInputData, action) {
        checkMixedTaprootAndNonTaprootInputFields(inputData, newInputData, action);
        checkIfTapLeafInTree(inputData, newInputData, action);
      }
      exports.checkTaprootInputFields = checkTaprootInputFields;
      function checkTaprootOutputFields(outputData, newOutputData, action) {
        checkMixedTaprootAndNonTaprootOutputFields(outputData, newOutputData, action);
        checkTaprootScriptPubkey(outputData, newOutputData);
      }
      exports.checkTaprootOutputFields = checkTaprootOutputFields;
      function checkTaprootScriptPubkey(outputData, newOutputData) {
        if (!newOutputData.tapTree && !newOutputData.tapInternalKey)
          return;
        const tapInternalKey = newOutputData.tapInternalKey || outputData.tapInternalKey;
        const tapTree = newOutputData.tapTree || outputData.tapTree;
        if (tapInternalKey) {
          const { script: scriptPubkey } = outputData;
          const script2 = getTaprootScripPubkey(tapInternalKey, tapTree);
          if (scriptPubkey && !scriptPubkey.equals(script2))
            throw new Error("Error adding output. Script or address missmatch.");
        }
      }
      function getTaprootScripPubkey(tapInternalKey, tapTree) {
        const scriptTree = tapTree && tapTreeFromList(tapTree.leaves);
        const { output } = (0, payments_1.p2tr)({
          internalPubkey: tapInternalKey,
          scriptTree
        });
        return output;
      }
      function tweakInternalPubKey(inputIndex, input) {
        const tapInternalKey = input.tapInternalKey;
        const outputKey = tapInternalKey && (0, bip341_1.tweakKey)(tapInternalKey, input.tapMerkleRoot);
        if (!outputKey)
          throw new Error(
            `Cannot tweak tap internal key for input #${inputIndex}. Public key: ${tapInternalKey && tapInternalKey.toString("hex")}`
          );
        return outputKey.x;
      }
      exports.tweakInternalPubKey = tweakInternalPubKey;
      function tapTreeToList(tree) {
        if (!(0, types_1.isTaptree)(tree))
          throw new Error(
            "Cannot convert taptree to tapleaf list. Expecting a tapree structure."
          );
        return _tapTreeToList(tree);
      }
      exports.tapTreeToList = tapTreeToList;
      function tapTreeFromList(leaves = []) {
        if (leaves.length === 1 && leaves[0].depth === 0)
          return {
            output: leaves[0].script,
            version: leaves[0].leafVersion
          };
        return instertLeavesInTree(leaves);
      }
      exports.tapTreeFromList = tapTreeFromList;
      function checkTaprootInputForSigs(input, action) {
        const sigs = extractTaprootSigs(input);
        return sigs.some(
          (sig) => (0, psbtutils_2.signatureBlocksAction)(sig, decodeSchnorrSignature, action)
        );
      }
      exports.checkTaprootInputForSigs = checkTaprootInputForSigs;
      function decodeSchnorrSignature(signature) {
        return {
          signature: signature.slice(0, 64),
          hashType: signature.slice(64)[0] || transaction_1.Transaction.SIGHASH_DEFAULT
        };
      }
      function extractTaprootSigs(input) {
        const sigs = [];
        if (input.tapKeySig)
          sigs.push(input.tapKeySig);
        if (input.tapScriptSig)
          sigs.push(...input.tapScriptSig.map((s) => s.signature));
        if (!sigs.length) {
          const finalTapKeySig = getTapKeySigFromWithness(input.finalScriptWitness);
          if (finalTapKeySig)
            sigs.push(finalTapKeySig);
        }
        return sigs;
      }
      function getTapKeySigFromWithness(finalScriptWitness) {
        if (!finalScriptWitness)
          return;
        const witness = finalScriptWitness.slice(2);
        if (witness.length === 64 || witness.length === 65)
          return witness;
      }
      function _tapTreeToList(tree, leaves = [], depth = 0) {
        if (depth > bip341_1.MAX_TAPTREE_DEPTH)
          throw new Error("Max taptree depth exceeded.");
        if (!tree)
          return [];
        if ((0, types_1.isTapleaf)(tree)) {
          leaves.push({
            depth,
            leafVersion: tree.version || bip341_1.LEAF_VERSION_TAPSCRIPT,
            script: tree.output
          });
          return leaves;
        }
        if (tree[0])
          _tapTreeToList(tree[0], leaves, depth + 1);
        if (tree[1])
          _tapTreeToList(tree[1], leaves, depth + 1);
        return leaves;
      }
      function instertLeavesInTree(leaves) {
        let tree;
        for (const leaf of leaves) {
          tree = instertLeafInTree(leaf, tree);
          if (!tree)
            throw new Error(`No room left to insert tapleaf in tree`);
        }
        return tree;
      }
      function instertLeafInTree(leaf, tree, depth = 0) {
        if (depth > bip341_1.MAX_TAPTREE_DEPTH)
          throw new Error("Max taptree depth exceeded.");
        if (leaf.depth === depth) {
          if (!tree)
            return {
              output: leaf.script,
              version: leaf.leafVersion
            };
          return;
        }
        if ((0, types_1.isTapleaf)(tree))
          return;
        const leftSide = instertLeafInTree(leaf, tree && tree[0], depth + 1);
        if (leftSide)
          return [leftSide, tree && tree[1]];
        const rightSide = instertLeafInTree(leaf, tree && tree[1], depth + 1);
        if (rightSide)
          return [tree && tree[0], rightSide];
      }
      function checkMixedTaprootAndNonTaprootInputFields(inputData, newInputData, action) {
        const isBadTaprootUpdate = isTaprootInput(inputData) && hasNonTaprootFields(newInputData);
        const isBadNonTaprootUpdate = hasNonTaprootFields(inputData) && isTaprootInput(newInputData);
        const hasMixedFields = inputData === newInputData && isTaprootInput(newInputData) && hasNonTaprootFields(newInputData);
        if (isBadTaprootUpdate || isBadNonTaprootUpdate || hasMixedFields)
          throw new Error(
            `Invalid arguments for Psbt.${action}. Cannot use both taproot and non-taproot fields.`
          );
      }
      function checkMixedTaprootAndNonTaprootOutputFields(inputData, newInputData, action) {
        const isBadTaprootUpdate = isTaprootOutput(inputData) && hasNonTaprootFields(newInputData);
        const isBadNonTaprootUpdate = hasNonTaprootFields(inputData) && isTaprootOutput(newInputData);
        const hasMixedFields = inputData === newInputData && isTaprootOutput(newInputData) && hasNonTaprootFields(newInputData);
        if (isBadTaprootUpdate || isBadNonTaprootUpdate || hasMixedFields)
          throw new Error(
            `Invalid arguments for Psbt.${action}. Cannot use both taproot and non-taproot fields.`
          );
      }
      function checkIfTapLeafInTree(inputData, newInputData, action) {
        if (newInputData.tapMerkleRoot) {
          const newLeafsInTree = (newInputData.tapLeafScript || []).every(
            (l) => isTapLeafInTree(l, newInputData.tapMerkleRoot)
          );
          const oldLeafsInTree = (inputData.tapLeafScript || []).every(
            (l) => isTapLeafInTree(l, newInputData.tapMerkleRoot)
          );
          if (!newLeafsInTree || !oldLeafsInTree)
            throw new Error(
              `Invalid arguments for Psbt.${action}. Tapleaf not part of taptree.`
            );
        } else if (inputData.tapMerkleRoot) {
          const newLeafsInTree = (newInputData.tapLeafScript || []).every(
            (l) => isTapLeafInTree(l, inputData.tapMerkleRoot)
          );
          if (!newLeafsInTree)
            throw new Error(
              `Invalid arguments for Psbt.${action}. Tapleaf not part of taptree.`
            );
        }
      }
      function isTapLeafInTree(tapLeaf, merkleRoot) {
        if (!merkleRoot)
          return true;
        const leafHash = (0, bip341_1.tapleafHash)({
          output: tapLeaf.script,
          version: tapLeaf.leafVersion
        });
        const rootHash = (0, bip341_1.rootHashFromPath)(
          tapLeaf.controlBlock,
          leafHash
        );
        return rootHash.equals(merkleRoot);
      }
      function sortSignatures(input, tapLeaf) {
        const leafHash = (0, bip341_1.tapleafHash)({
          output: tapLeaf.script,
          version: tapLeaf.leafVersion
        });
        return (input.tapScriptSig || []).filter((tss) => tss.leafHash.equals(leafHash)).map((tss) => addPubkeyPositionInScript(tapLeaf.script, tss)).sort((t1, t2) => t2.positionInScript - t1.positionInScript).map((t) => t.signature);
      }
      function addPubkeyPositionInScript(script2, tss) {
        return Object.assign(
          {
            positionInScript: (0, psbtutils_1.pubkeyPositionInScript)(
              tss.pubkey,
              script2
            )
          },
          tss
        );
      }
      function findTapLeafToFinalize(input, inputIndex, leafHashToFinalize) {
        if (!input.tapScriptSig || !input.tapScriptSig.length)
          throw new Error(
            `Can not finalize taproot input #${inputIndex}. No tapleaf script signature provided.`
          );
        const tapLeaf = (input.tapLeafScript || []).sort((a, b) => a.controlBlock.length - b.controlBlock.length).find(
          (leaf) => canFinalizeLeaf(leaf, input.tapScriptSig, leafHashToFinalize)
        );
        if (!tapLeaf)
          throw new Error(
            `Can not finalize taproot input #${inputIndex}. Signature for tapleaf script not found.`
          );
        return tapLeaf;
      }
      function canFinalizeLeaf(leaf, tapScriptSig, hash) {
        const leafHash = (0, bip341_1.tapleafHash)({
          output: leaf.script,
          version: leaf.leafVersion
        });
        const whiteListedHash = !hash || hash.equals(leafHash);
        return whiteListedHash && tapScriptSig.find((tss) => tss.leafHash.equals(leafHash)) !== void 0;
      }
      function hasNonTaprootFields(io) {
        return io && !!(io.redeemScript || io.witnessScript || io.bip32Derivation && io.bip32Derivation.length);
      }
    }
  });

  // node_modules/bitcoinjs-lib/src/psbt.js
  var require_psbt2 = __commonJS({
    "node_modules/bitcoinjs-lib/src/psbt.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Psbt = void 0;
      var bip174_1 = require_psbt();
      var varuint = require_varint();
      var utils_1 = require_utils2();
      var address_1 = require_address();
      var bufferutils_1 = require_bufferutils();
      var networks_1 = require_networks2();
      var payments2 = require_payments();
      var bip341_1 = require_bip341();
      var bscript = require_script();
      var transaction_1 = require_transaction();
      var bip371_1 = require_bip371();
      var psbtutils_1 = require_psbtutils();
      var DEFAULT_OPTS = {
        /**
         * A bitcoinjs Network object. This is only used if you pass an `address`
         * parameter to addOutput. Otherwise it is not needed and can be left default.
         */
        network: networks_1.bitcoin,
        /**
         * When extractTransaction is called, the fee rate is checked.
         * THIS IS NOT TO BE RELIED ON.
         * It is only here as a last ditch effort to prevent sending a 500 BTC fee etc.
         */
        maximumFeeRate: 5e3
        // satoshi per byte
      };
      var Psbt = class _Psbt {
        static fromBase64(data, opts = {}) {
          const buffer = Buffer.from(data, "base64");
          return this.fromBuffer(buffer, opts);
        }
        static fromHex(data, opts = {}) {
          const buffer = Buffer.from(data, "hex");
          return this.fromBuffer(buffer, opts);
        }
        static fromBuffer(buffer, opts = {}) {
          const psbtBase = bip174_1.Psbt.fromBuffer(buffer, transactionFromBuffer);
          const psbt = new _Psbt(opts, psbtBase);
          checkTxForDupeIns(psbt.__CACHE.__TX, psbt.__CACHE);
          return psbt;
        }
        constructor(opts = {}, data = new bip174_1.Psbt(new PsbtTransaction())) {
          this.data = data;
          this.opts = Object.assign({}, DEFAULT_OPTS, opts);
          this.__CACHE = {
            __NON_WITNESS_UTXO_TX_CACHE: [],
            __NON_WITNESS_UTXO_BUF_CACHE: [],
            __TX_IN_CACHE: {},
            __TX: this.data.globalMap.unsignedTx.tx,
            // Psbt's predecesor (TransactionBuilder - now removed) behavior
            // was to not confirm input values  before signing.
            // Even though we highly encourage people to get
            // the full parent transaction to verify values, the ability to
            // sign non-segwit inputs without the full transaction was often
            // requested. So the only way to activate is to use @ts-ignore.
            // We will disable exporting the Psbt when unsafe sign is active.
            // because it is not BIP174 compliant.
            __UNSAFE_SIGN_NONSEGWIT: false
          };
          if (this.data.inputs.length === 0)
            this.setVersion(2);
          const dpew = (obj, attr, enumerable, writable) => Object.defineProperty(obj, attr, {
            enumerable,
            writable
          });
          dpew(this, "__CACHE", false, true);
          dpew(this, "opts", false, true);
        }
        get inputCount() {
          return this.data.inputs.length;
        }
        get version() {
          return this.__CACHE.__TX.version;
        }
        set version(version) {
          this.setVersion(version);
        }
        get locktime() {
          return this.__CACHE.__TX.locktime;
        }
        set locktime(locktime) {
          this.setLocktime(locktime);
        }
        get txInputs() {
          return this.__CACHE.__TX.ins.map((input) => ({
            hash: (0, bufferutils_1.cloneBuffer)(input.hash),
            index: input.index,
            sequence: input.sequence
          }));
        }
        get txOutputs() {
          return this.__CACHE.__TX.outs.map((output) => {
            let address;
            try {
              address = (0, address_1.fromOutputScript)(
                output.script,
                this.opts.network
              );
            } catch (_) {
            }
            return {
              script: (0, bufferutils_1.cloneBuffer)(output.script),
              value: output.value,
              address
            };
          });
        }
        combine(...those) {
          this.data.combine(...those.map((o) => o.data));
          return this;
        }
        clone() {
          const res = _Psbt.fromBuffer(this.data.toBuffer());
          res.opts = JSON.parse(JSON.stringify(this.opts));
          return res;
        }
        setMaximumFeeRate(satoshiPerByte) {
          check32Bit(satoshiPerByte);
          this.opts.maximumFeeRate = satoshiPerByte;
        }
        setVersion(version) {
          check32Bit(version);
          checkInputsForPartialSig(this.data.inputs, "setVersion");
          const c = this.__CACHE;
          c.__TX.version = version;
          c.__EXTRACTED_TX = void 0;
          return this;
        }
        setLocktime(locktime) {
          check32Bit(locktime);
          checkInputsForPartialSig(this.data.inputs, "setLocktime");
          const c = this.__CACHE;
          c.__TX.locktime = locktime;
          c.__EXTRACTED_TX = void 0;
          return this;
        }
        setInputSequence(inputIndex, sequence) {
          check32Bit(sequence);
          checkInputsForPartialSig(this.data.inputs, "setInputSequence");
          const c = this.__CACHE;
          if (c.__TX.ins.length <= inputIndex) {
            throw new Error("Input index too high");
          }
          c.__TX.ins[inputIndex].sequence = sequence;
          c.__EXTRACTED_TX = void 0;
          return this;
        }
        addInputs(inputDatas) {
          inputDatas.forEach((inputData) => this.addInput(inputData));
          return this;
        }
        addInput(inputData) {
          if (arguments.length > 1 || !inputData || inputData.hash === void 0 || inputData.index === void 0) {
            throw new Error(
              `Invalid arguments for Psbt.addInput. Requires single object with at least [hash] and [index]`
            );
          }
          (0, bip371_1.checkTaprootInputFields)(inputData, inputData, "addInput");
          checkInputsForPartialSig(this.data.inputs, "addInput");
          if (inputData.witnessScript)
            checkInvalidP2WSH(inputData.witnessScript);
          const c = this.__CACHE;
          this.data.addInput(inputData);
          const txIn = c.__TX.ins[c.__TX.ins.length - 1];
          checkTxInputCache(c, txIn);
          const inputIndex = this.data.inputs.length - 1;
          const input = this.data.inputs[inputIndex];
          if (input.nonWitnessUtxo) {
            addNonWitnessTxCache(this.__CACHE, input, inputIndex);
          }
          c.__FEE = void 0;
          c.__FEE_RATE = void 0;
          c.__EXTRACTED_TX = void 0;
          return this;
        }
        addOutputs(outputDatas) {
          outputDatas.forEach((outputData) => this.addOutput(outputData));
          return this;
        }
        addOutput(outputData) {
          if (arguments.length > 1 || !outputData || outputData.value === void 0 || outputData.address === void 0 && outputData.script === void 0) {
            throw new Error(
              `Invalid arguments for Psbt.addOutput. Requires single object with at least [script or address] and [value]`
            );
          }
          checkInputsForPartialSig(this.data.inputs, "addOutput");
          const { address } = outputData;
          if (typeof address === "string") {
            const { network } = this.opts;
            const script2 = (0, address_1.toOutputScript)(address, network);
            outputData = Object.assign(outputData, { script: script2 });
          }
          (0, bip371_1.checkTaprootOutputFields)(outputData, outputData, "addOutput");
          const c = this.__CACHE;
          this.data.addOutput(outputData);
          c.__FEE = void 0;
          c.__FEE_RATE = void 0;
          c.__EXTRACTED_TX = void 0;
          return this;
        }
        extractTransaction(disableFeeCheck) {
          if (!this.data.inputs.every(isFinalized))
            throw new Error("Not finalized");
          const c = this.__CACHE;
          if (!disableFeeCheck) {
            checkFees(this, c, this.opts);
          }
          if (c.__EXTRACTED_TX)
            return c.__EXTRACTED_TX;
          const tx = c.__TX.clone();
          inputFinalizeGetAmts(this.data.inputs, tx, c, true);
          return tx;
        }
        getFeeRate() {
          return getTxCacheValue(
            "__FEE_RATE",
            "fee rate",
            this.data.inputs,
            this.__CACHE
          );
        }
        getFee() {
          return getTxCacheValue("__FEE", "fee", this.data.inputs, this.__CACHE);
        }
        finalizeAllInputs() {
          (0, utils_1.checkForInput)(this.data.inputs, 0);
          range(this.data.inputs.length).forEach((idx) => this.finalizeInput(idx));
          return this;
        }
        finalizeInput(inputIndex, finalScriptsFunc) {
          const input = (0, utils_1.checkForInput)(this.data.inputs, inputIndex);
          if ((0, bip371_1.isTaprootInput)(input))
            return this._finalizeTaprootInput(
              inputIndex,
              input,
              void 0,
              finalScriptsFunc
            );
          return this._finalizeInput(inputIndex, input, finalScriptsFunc);
        }
        finalizeTaprootInput(inputIndex, tapLeafHashToFinalize, finalScriptsFunc = bip371_1.tapScriptFinalizer) {
          const input = (0, utils_1.checkForInput)(this.data.inputs, inputIndex);
          if ((0, bip371_1.isTaprootInput)(input))
            return this._finalizeTaprootInput(
              inputIndex,
              input,
              tapLeafHashToFinalize,
              finalScriptsFunc
            );
          throw new Error(`Cannot finalize input #${inputIndex}. Not Taproot.`);
        }
        _finalizeInput(inputIndex, input, finalScriptsFunc = getFinalScripts) {
          const { script: script2, isP2SH, isP2WSH, isSegwit } = getScriptFromInput(
            inputIndex,
            input,
            this.__CACHE
          );
          if (!script2)
            throw new Error(`No script found for input #${inputIndex}`);
          checkPartialSigSighashes(input);
          const { finalScriptSig, finalScriptWitness } = finalScriptsFunc(
            inputIndex,
            input,
            script2,
            isSegwit,
            isP2SH,
            isP2WSH
          );
          if (finalScriptSig)
            this.data.updateInput(inputIndex, { finalScriptSig });
          if (finalScriptWitness)
            this.data.updateInput(inputIndex, { finalScriptWitness });
          if (!finalScriptSig && !finalScriptWitness)
            throw new Error(`Unknown error finalizing input #${inputIndex}`);
          this.data.clearFinalizedInput(inputIndex);
          return this;
        }
        _finalizeTaprootInput(inputIndex, input, tapLeafHashToFinalize, finalScriptsFunc = bip371_1.tapScriptFinalizer) {
          if (!input.witnessUtxo)
            throw new Error(
              `Cannot finalize input #${inputIndex}. Missing withness utxo.`
            );
          if (input.tapKeySig) {
            const payment = payments2.p2tr({
              output: input.witnessUtxo.script,
              signature: input.tapKeySig
            });
            const finalScriptWitness = (0, psbtutils_1.witnessStackToScriptWitness)(
              payment.witness
            );
            this.data.updateInput(inputIndex, { finalScriptWitness });
          } else {
            const { finalScriptWitness } = finalScriptsFunc(
              inputIndex,
              input,
              tapLeafHashToFinalize
            );
            this.data.updateInput(inputIndex, { finalScriptWitness });
          }
          this.data.clearFinalizedInput(inputIndex);
          return this;
        }
        getInputType(inputIndex) {
          const input = (0, utils_1.checkForInput)(this.data.inputs, inputIndex);
          const script2 = getScriptFromUtxo(inputIndex, input, this.__CACHE);
          const result = getMeaningfulScript(
            script2,
            inputIndex,
            "input",
            input.redeemScript || redeemFromFinalScriptSig(input.finalScriptSig),
            input.witnessScript || redeemFromFinalWitnessScript(input.finalScriptWitness)
          );
          const type = result.type === "raw" ? "" : result.type + "-";
          const mainType = classifyScript(result.meaningfulScript);
          return type + mainType;
        }
        inputHasPubkey(inputIndex, pubkey) {
          const input = (0, utils_1.checkForInput)(this.data.inputs, inputIndex);
          return pubkeyInInput(pubkey, input, inputIndex, this.__CACHE);
        }
        inputHasHDKey(inputIndex, root) {
          const input = (0, utils_1.checkForInput)(this.data.inputs, inputIndex);
          const derivationIsMine = bip32DerivationIsMine(root);
          return !!input.bip32Derivation && input.bip32Derivation.some(derivationIsMine);
        }
        outputHasPubkey(outputIndex, pubkey) {
          const output = (0, utils_1.checkForOutput)(this.data.outputs, outputIndex);
          return pubkeyInOutput(pubkey, output, outputIndex, this.__CACHE);
        }
        outputHasHDKey(outputIndex, root) {
          const output = (0, utils_1.checkForOutput)(this.data.outputs, outputIndex);
          const derivationIsMine = bip32DerivationIsMine(root);
          return !!output.bip32Derivation && output.bip32Derivation.some(derivationIsMine);
        }
        validateSignaturesOfAllInputs(validator) {
          (0, utils_1.checkForInput)(this.data.inputs, 0);
          const results = range(this.data.inputs.length).map(
            (idx) => this.validateSignaturesOfInput(idx, validator)
          );
          return results.reduce((final, res) => res === true && final, true);
        }
        validateSignaturesOfInput(inputIndex, validator, pubkey) {
          const input = this.data.inputs[inputIndex];
          if ((0, bip371_1.isTaprootInput)(input))
            return this.validateSignaturesOfTaprootInput(
              inputIndex,
              validator,
              pubkey
            );
          return this._validateSignaturesOfInput(inputIndex, validator, pubkey);
        }
        _validateSignaturesOfInput(inputIndex, validator, pubkey) {
          const input = this.data.inputs[inputIndex];
          const partialSig = (input || {}).partialSig;
          if (!input || !partialSig || partialSig.length < 1)
            throw new Error("No signatures to validate");
          if (typeof validator !== "function")
            throw new Error("Need validator function to validate signatures");
          const mySigs = pubkey ? partialSig.filter((sig) => sig.pubkey.equals(pubkey)) : partialSig;
          if (mySigs.length < 1)
            throw new Error("No signatures for this pubkey");
          const results = [];
          let hashCache;
          let scriptCache;
          let sighashCache;
          for (const pSig of mySigs) {
            const sig = bscript.signature.decode(pSig.signature);
            const { hash, script: script2 } = sighashCache !== sig.hashType ? getHashForSig(
              inputIndex,
              Object.assign({}, input, { sighashType: sig.hashType }),
              this.__CACHE,
              true
            ) : { hash: hashCache, script: scriptCache };
            sighashCache = sig.hashType;
            hashCache = hash;
            scriptCache = script2;
            checkScriptForPubkey(pSig.pubkey, script2, "verify");
            results.push(validator(pSig.pubkey, hash, sig.signature));
          }
          return results.every((res) => res === true);
        }
        validateSignaturesOfTaprootInput(inputIndex, validator, pubkey) {
          const input = this.data.inputs[inputIndex];
          const tapKeySig = (input || {}).tapKeySig;
          const tapScriptSig = (input || {}).tapScriptSig;
          if (!input && !tapKeySig && !(tapScriptSig && !tapScriptSig.length))
            throw new Error("No signatures to validate");
          if (typeof validator !== "function")
            throw new Error("Need validator function to validate signatures");
          pubkey = pubkey && (0, bip371_1.toXOnly)(pubkey);
          const allHashses = pubkey ? getTaprootHashesForSig(
            inputIndex,
            input,
            this.data.inputs,
            pubkey,
            this.__CACHE
          ) : getAllTaprootHashesForSig(
            inputIndex,
            input,
            this.data.inputs,
            this.__CACHE
          );
          if (!allHashses.length)
            throw new Error("No signatures for this pubkey");
          const tapKeyHash = allHashses.find((h) => !h.leafHash);
          let validationResultCount = 0;
          if (tapKeySig && tapKeyHash) {
            const isValidTapkeySig = validator(
              tapKeyHash.pubkey,
              tapKeyHash.hash,
              trimTaprootSig(tapKeySig)
            );
            if (!isValidTapkeySig)
              return false;
            validationResultCount++;
          }
          if (tapScriptSig) {
            for (const tapSig of tapScriptSig) {
              const tapSigHash = allHashses.find((h) => tapSig.pubkey.equals(h.pubkey));
              if (tapSigHash) {
                const isValidTapScriptSig = validator(
                  tapSig.pubkey,
                  tapSigHash.hash,
                  trimTaprootSig(tapSig.signature)
                );
                if (!isValidTapScriptSig)
                  return false;
                validationResultCount++;
              }
            }
          }
          return validationResultCount > 0;
        }
        signAllInputsHD(hdKeyPair, sighashTypes = [transaction_1.Transaction.SIGHASH_ALL]) {
          if (!hdKeyPair || !hdKeyPair.publicKey || !hdKeyPair.fingerprint) {
            throw new Error("Need HDSigner to sign input");
          }
          const results = [];
          for (const i of range(this.data.inputs.length)) {
            try {
              this.signInputHD(i, hdKeyPair, sighashTypes);
              results.push(true);
            } catch (err) {
              results.push(false);
            }
          }
          if (results.every((v) => v === false)) {
            throw new Error("No inputs were signed");
          }
          return this;
        }
        signAllInputsHDAsync(hdKeyPair, sighashTypes = [transaction_1.Transaction.SIGHASH_ALL]) {
          return new Promise((resolve, reject) => {
            if (!hdKeyPair || !hdKeyPair.publicKey || !hdKeyPair.fingerprint) {
              return reject(new Error("Need HDSigner to sign input"));
            }
            const results = [];
            const promises = [];
            for (const i of range(this.data.inputs.length)) {
              promises.push(
                this.signInputHDAsync(i, hdKeyPair, sighashTypes).then(
                  () => {
                    results.push(true);
                  },
                  () => {
                    results.push(false);
                  }
                )
              );
            }
            return Promise.all(promises).then(() => {
              if (results.every((v) => v === false)) {
                return reject(new Error("No inputs were signed"));
              }
              resolve();
            });
          });
        }
        signInputHD(inputIndex, hdKeyPair, sighashTypes = [transaction_1.Transaction.SIGHASH_ALL]) {
          if (!hdKeyPair || !hdKeyPair.publicKey || !hdKeyPair.fingerprint) {
            throw new Error("Need HDSigner to sign input");
          }
          const signers = getSignersFromHD(inputIndex, this.data.inputs, hdKeyPair);
          signers.forEach((signer) => this.signInput(inputIndex, signer, sighashTypes));
          return this;
        }
        signInputHDAsync(inputIndex, hdKeyPair, sighashTypes = [transaction_1.Transaction.SIGHASH_ALL]) {
          return new Promise((resolve, reject) => {
            if (!hdKeyPair || !hdKeyPair.publicKey || !hdKeyPair.fingerprint) {
              return reject(new Error("Need HDSigner to sign input"));
            }
            const signers = getSignersFromHD(inputIndex, this.data.inputs, hdKeyPair);
            const promises = signers.map(
              (signer) => this.signInputAsync(inputIndex, signer, sighashTypes)
            );
            return Promise.all(promises).then(() => {
              resolve();
            }).catch(reject);
          });
        }
        signAllInputs(keyPair, sighashTypes) {
          if (!keyPair || !keyPair.publicKey)
            throw new Error("Need Signer to sign input");
          const results = [];
          for (const i of range(this.data.inputs.length)) {
            try {
              this.signInput(i, keyPair, sighashTypes);
              results.push(true);
            } catch (err) {
              results.push(false);
            }
          }
          if (results.every((v) => v === false)) {
            throw new Error("No inputs were signed");
          }
          return this;
        }
        signAllInputsAsync(keyPair, sighashTypes) {
          return new Promise((resolve, reject) => {
            if (!keyPair || !keyPair.publicKey)
              return reject(new Error("Need Signer to sign input"));
            const results = [];
            const promises = [];
            for (const [i] of this.data.inputs.entries()) {
              promises.push(
                this.signInputAsync(i, keyPair, sighashTypes).then(
                  () => {
                    results.push(true);
                  },
                  () => {
                    results.push(false);
                  }
                )
              );
            }
            return Promise.all(promises).then(() => {
              if (results.every((v) => v === false)) {
                return reject(new Error("No inputs were signed"));
              }
              resolve();
            });
          });
        }
        signInput(inputIndex, keyPair, sighashTypes) {
          if (!keyPair || !keyPair.publicKey)
            throw new Error("Need Signer to sign input");
          const input = (0, utils_1.checkForInput)(this.data.inputs, inputIndex);
          if ((0, bip371_1.isTaprootInput)(input)) {
            return this._signTaprootInput(
              inputIndex,
              input,
              keyPair,
              void 0,
              sighashTypes
            );
          }
          return this._signInput(inputIndex, keyPair, sighashTypes);
        }
        signTaprootInput(inputIndex, keyPair, tapLeafHashToSign, sighashTypes) {
          if (!keyPair || !keyPair.publicKey)
            throw new Error("Need Signer to sign input");
          const input = (0, utils_1.checkForInput)(this.data.inputs, inputIndex);
          if ((0, bip371_1.isTaprootInput)(input))
            return this._signTaprootInput(
              inputIndex,
              input,
              keyPair,
              tapLeafHashToSign,
              sighashTypes
            );
          throw new Error(`Input #${inputIndex} is not of type Taproot.`);
        }
        _signInput(inputIndex, keyPair, sighashTypes = [transaction_1.Transaction.SIGHASH_ALL]) {
          const { hash, sighashType } = getHashAndSighashType(
            this.data.inputs,
            inputIndex,
            keyPair.publicKey,
            this.__CACHE,
            sighashTypes
          );
          const partialSig = [
            {
              pubkey: keyPair.publicKey,
              signature: bscript.signature.encode(keyPair.sign(hash), sighashType)
            }
          ];
          this.data.updateInput(inputIndex, { partialSig });
          return this;
        }
        _signTaprootInput(inputIndex, input, keyPair, tapLeafHashToSign, allowedSighashTypes = [transaction_1.Transaction.SIGHASH_DEFAULT]) {
          const hashesForSig = this.checkTaprootHashesForSig(
            inputIndex,
            input,
            keyPair,
            tapLeafHashToSign,
            allowedSighashTypes
          );
          const tapKeySig = hashesForSig.filter((h) => !h.leafHash).map(
            (h) => (0, bip371_1.serializeTaprootSignature)(
              keyPair.signSchnorr(h.hash),
              input.sighashType
            )
          )[0];
          const tapScriptSig = hashesForSig.filter((h) => !!h.leafHash).map((h) => ({
            pubkey: (0, bip371_1.toXOnly)(keyPair.publicKey),
            signature: (0, bip371_1.serializeTaprootSignature)(
              keyPair.signSchnorr(h.hash),
              input.sighashType
            ),
            leafHash: h.leafHash
          }));
          if (tapKeySig) {
            this.data.updateInput(inputIndex, { tapKeySig });
          }
          if (tapScriptSig.length) {
            this.data.updateInput(inputIndex, { tapScriptSig });
          }
          return this;
        }
        signInputAsync(inputIndex, keyPair, sighashTypes) {
          return Promise.resolve().then(() => {
            if (!keyPair || !keyPair.publicKey)
              throw new Error("Need Signer to sign input");
            const input = (0, utils_1.checkForInput)(this.data.inputs, inputIndex);
            if ((0, bip371_1.isTaprootInput)(input))
              return this._signTaprootInputAsync(
                inputIndex,
                input,
                keyPair,
                void 0,
                sighashTypes
              );
            return this._signInputAsync(inputIndex, keyPair, sighashTypes);
          });
        }
        signTaprootInputAsync(inputIndex, keyPair, tapLeafHash, sighashTypes) {
          return Promise.resolve().then(() => {
            if (!keyPair || !keyPair.publicKey)
              throw new Error("Need Signer to sign input");
            const input = (0, utils_1.checkForInput)(this.data.inputs, inputIndex);
            if ((0, bip371_1.isTaprootInput)(input))
              return this._signTaprootInputAsync(
                inputIndex,
                input,
                keyPair,
                tapLeafHash,
                sighashTypes
              );
            throw new Error(`Input #${inputIndex} is not of type Taproot.`);
          });
        }
        _signInputAsync(inputIndex, keyPair, sighashTypes = [transaction_1.Transaction.SIGHASH_ALL]) {
          const { hash, sighashType } = getHashAndSighashType(
            this.data.inputs,
            inputIndex,
            keyPair.publicKey,
            this.__CACHE,
            sighashTypes
          );
          return Promise.resolve(keyPair.sign(hash)).then((signature) => {
            const partialSig = [
              {
                pubkey: keyPair.publicKey,
                signature: bscript.signature.encode(signature, sighashType)
              }
            ];
            this.data.updateInput(inputIndex, { partialSig });
          });
        }
        async _signTaprootInputAsync(inputIndex, input, keyPair, tapLeafHash, sighashTypes = [transaction_1.Transaction.SIGHASH_DEFAULT]) {
          const hashesForSig = this.checkTaprootHashesForSig(
            inputIndex,
            input,
            keyPair,
            tapLeafHash,
            sighashTypes
          );
          const signaturePromises = [];
          const tapKeyHash = hashesForSig.filter((h) => !h.leafHash)[0];
          if (tapKeyHash) {
            const tapKeySigPromise = Promise.resolve(
              keyPair.signSchnorr(tapKeyHash.hash)
            ).then((sig) => {
              return {
                tapKeySig: (0, bip371_1.serializeTaprootSignature)(
                  sig,
                  input.sighashType
                )
              };
            });
            signaturePromises.push(tapKeySigPromise);
          }
          const tapScriptHashes = hashesForSig.filter((h) => !!h.leafHash);
          if (tapScriptHashes.length) {
            const tapScriptSigPromises = tapScriptHashes.map((tsh) => {
              return Promise.resolve(keyPair.signSchnorr(tsh.hash)).then(
                (signature) => {
                  const tapScriptSig = [
                    {
                      pubkey: (0, bip371_1.toXOnly)(keyPair.publicKey),
                      signature: (0, bip371_1.serializeTaprootSignature)(
                        signature,
                        input.sighashType
                      ),
                      leafHash: tsh.leafHash
                    }
                  ];
                  return { tapScriptSig };
                }
              );
            });
            signaturePromises.push(...tapScriptSigPromises);
          }
          return Promise.all(signaturePromises).then((results) => {
            results.forEach((v) => this.data.updateInput(inputIndex, v));
          });
        }
        checkTaprootHashesForSig(inputIndex, input, keyPair, tapLeafHashToSign, allowedSighashTypes) {
          if (typeof keyPair.signSchnorr !== "function")
            throw new Error(
              `Need Schnorr Signer to sign taproot input #${inputIndex}.`
            );
          const hashesForSig = getTaprootHashesForSig(
            inputIndex,
            input,
            this.data.inputs,
            keyPair.publicKey,
            this.__CACHE,
            tapLeafHashToSign,
            allowedSighashTypes
          );
          if (!hashesForSig || !hashesForSig.length)
            throw new Error(
              `Can not sign for input #${inputIndex} with the key ${keyPair.publicKey.toString(
                "hex"
              )}`
            );
          return hashesForSig;
        }
        toBuffer() {
          checkCache(this.__CACHE);
          return this.data.toBuffer();
        }
        toHex() {
          checkCache(this.__CACHE);
          return this.data.toHex();
        }
        toBase64() {
          checkCache(this.__CACHE);
          return this.data.toBase64();
        }
        updateGlobal(updateData) {
          this.data.updateGlobal(updateData);
          return this;
        }
        updateInput(inputIndex, updateData) {
          if (updateData.witnessScript)
            checkInvalidP2WSH(updateData.witnessScript);
          (0, bip371_1.checkTaprootInputFields)(
            this.data.inputs[inputIndex],
            updateData,
            "updateInput"
          );
          this.data.updateInput(inputIndex, updateData);
          if (updateData.nonWitnessUtxo) {
            addNonWitnessTxCache(
              this.__CACHE,
              this.data.inputs[inputIndex],
              inputIndex
            );
          }
          return this;
        }
        updateOutput(outputIndex, updateData) {
          const outputData = this.data.outputs[outputIndex];
          (0, bip371_1.checkTaprootOutputFields)(
            outputData,
            updateData,
            "updateOutput"
          );
          this.data.updateOutput(outputIndex, updateData);
          return this;
        }
        addUnknownKeyValToGlobal(keyVal) {
          this.data.addUnknownKeyValToGlobal(keyVal);
          return this;
        }
        addUnknownKeyValToInput(inputIndex, keyVal) {
          this.data.addUnknownKeyValToInput(inputIndex, keyVal);
          return this;
        }
        addUnknownKeyValToOutput(outputIndex, keyVal) {
          this.data.addUnknownKeyValToOutput(outputIndex, keyVal);
          return this;
        }
        clearFinalizedInput(inputIndex) {
          this.data.clearFinalizedInput(inputIndex);
          return this;
        }
      };
      exports.Psbt = Psbt;
      var transactionFromBuffer = (buffer) => new PsbtTransaction(buffer);
      var PsbtTransaction = class {
        constructor(buffer = Buffer.from([2, 0, 0, 0, 0, 0, 0, 0, 0, 0])) {
          this.tx = transaction_1.Transaction.fromBuffer(buffer);
          checkTxEmpty(this.tx);
          Object.defineProperty(this, "tx", {
            enumerable: false,
            writable: true
          });
        }
        getInputOutputCounts() {
          return {
            inputCount: this.tx.ins.length,
            outputCount: this.tx.outs.length
          };
        }
        addInput(input) {
          if (input.hash === void 0 || input.index === void 0 || !Buffer.isBuffer(input.hash) && typeof input.hash !== "string" || typeof input.index !== "number") {
            throw new Error("Error adding input.");
          }
          const hash = typeof input.hash === "string" ? (0, bufferutils_1.reverseBuffer)(Buffer.from(input.hash, "hex")) : input.hash;
          this.tx.addInput(hash, input.index, input.sequence);
        }
        addOutput(output) {
          if (output.script === void 0 || output.value === void 0 || !Buffer.isBuffer(output.script) || typeof output.value !== "number") {
            throw new Error("Error adding output.");
          }
          this.tx.addOutput(output.script, output.value);
        }
        toBuffer() {
          return this.tx.toBuffer();
        }
      };
      function canFinalize(input, script2, scriptType) {
        switch (scriptType) {
          case "pubkey":
          case "pubkeyhash":
          case "witnesspubkeyhash":
            return hasSigs(1, input.partialSig);
          case "multisig":
            const p2ms = payments2.p2ms({ output: script2 });
            return hasSigs(p2ms.m, input.partialSig, p2ms.pubkeys);
          default:
            return false;
        }
      }
      function checkCache(cache) {
        if (cache.__UNSAFE_SIGN_NONSEGWIT !== false) {
          throw new Error("Not BIP174 compliant, can not export");
        }
      }
      function hasSigs(neededSigs, partialSig, pubkeys) {
        if (!partialSig)
          return false;
        let sigs;
        if (pubkeys) {
          sigs = pubkeys.map((pkey) => {
            const pubkey = compressPubkey(pkey);
            return partialSig.find((pSig) => pSig.pubkey.equals(pubkey));
          }).filter((v) => !!v);
        } else {
          sigs = partialSig;
        }
        if (sigs.length > neededSigs)
          throw new Error("Too many signatures");
        return sigs.length === neededSigs;
      }
      function isFinalized(input) {
        return !!input.finalScriptSig || !!input.finalScriptWitness;
      }
      function bip32DerivationIsMine(root) {
        return (d) => {
          if (!d.masterFingerprint.equals(root.fingerprint))
            return false;
          if (!root.derivePath(d.path).publicKey.equals(d.pubkey))
            return false;
          return true;
        };
      }
      function check32Bit(num) {
        if (typeof num !== "number" || num !== Math.floor(num) || num > 4294967295 || num < 0) {
          throw new Error("Invalid 32 bit integer");
        }
      }
      function checkFees(psbt, cache, opts) {
        const feeRate = cache.__FEE_RATE || psbt.getFeeRate();
        const vsize = cache.__EXTRACTED_TX.virtualSize();
        const satoshis = feeRate * vsize;
        if (feeRate >= opts.maximumFeeRate) {
          throw new Error(
            `Warning: You are paying around ${(satoshis / 1e8).toFixed(8)} in fees, which is ${feeRate} satoshi per byte for a transaction with a VSize of ${vsize} bytes (segwit counted as 0.25 byte per byte). Use setMaximumFeeRate method to raise your threshold, or pass true to the first arg of extractTransaction.`
          );
        }
      }
      function checkInputsForPartialSig(inputs, action) {
        inputs.forEach((input) => {
          const throws = (0, bip371_1.isTaprootInput)(input) ? (0, bip371_1.checkTaprootInputForSigs)(input, action) : (0, psbtutils_1.checkInputForSig)(input, action);
          if (throws)
            throw new Error("Can not modify transaction, signatures exist.");
        });
      }
      function checkPartialSigSighashes(input) {
        if (!input.sighashType || !input.partialSig)
          return;
        const { partialSig, sighashType } = input;
        partialSig.forEach((pSig) => {
          const { hashType } = bscript.signature.decode(pSig.signature);
          if (sighashType !== hashType) {
            throw new Error("Signature sighash does not match input sighash type");
          }
        });
      }
      function checkScriptForPubkey(pubkey, script2, action) {
        if (!(0, psbtutils_1.pubkeyInScript)(pubkey, script2)) {
          throw new Error(
            `Can not ${action} for this input with the key ${pubkey.toString("hex")}`
          );
        }
      }
      function checkTxEmpty(tx) {
        const isEmpty = tx.ins.every(
          (input) => input.script && input.script.length === 0 && input.witness && input.witness.length === 0
        );
        if (!isEmpty) {
          throw new Error("Format Error: Transaction ScriptSigs are not empty");
        }
      }
      function checkTxForDupeIns(tx, cache) {
        tx.ins.forEach((input) => {
          checkTxInputCache(cache, input);
        });
      }
      function checkTxInputCache(cache, input) {
        const key = (0, bufferutils_1.reverseBuffer)(Buffer.from(input.hash)).toString("hex") + ":" + input.index;
        if (cache.__TX_IN_CACHE[key])
          throw new Error("Duplicate input detected.");
        cache.__TX_IN_CACHE[key] = 1;
      }
      function scriptCheckerFactory(payment, paymentScriptName) {
        return (inputIndex, scriptPubKey, redeemScript, ioType) => {
          const redeemScriptOutput = payment({
            redeem: { output: redeemScript }
          }).output;
          if (!scriptPubKey.equals(redeemScriptOutput)) {
            throw new Error(
              `${paymentScriptName} for ${ioType} #${inputIndex} doesn't match the scriptPubKey in the prevout`
            );
          }
        };
      }
      var checkRedeemScript = scriptCheckerFactory(payments2.p2sh, "Redeem script");
      var checkWitnessScript = scriptCheckerFactory(
        payments2.p2wsh,
        "Witness script"
      );
      function getTxCacheValue(key, name, inputs, c) {
        if (!inputs.every(isFinalized))
          throw new Error(`PSBT must be finalized to calculate ${name}`);
        if (key === "__FEE_RATE" && c.__FEE_RATE)
          return c.__FEE_RATE;
        if (key === "__FEE" && c.__FEE)
          return c.__FEE;
        let tx;
        let mustFinalize = true;
        if (c.__EXTRACTED_TX) {
          tx = c.__EXTRACTED_TX;
          mustFinalize = false;
        } else {
          tx = c.__TX.clone();
        }
        inputFinalizeGetAmts(inputs, tx, c, mustFinalize);
        if (key === "__FEE_RATE")
          return c.__FEE_RATE;
        else if (key === "__FEE")
          return c.__FEE;
      }
      function getFinalScripts(inputIndex, input, script2, isSegwit, isP2SH, isP2WSH) {
        const scriptType = classifyScript(script2);
        if (!canFinalize(input, script2, scriptType))
          throw new Error(`Can not finalize input #${inputIndex}`);
        return prepareFinalScripts(
          script2,
          scriptType,
          input.partialSig,
          isSegwit,
          isP2SH,
          isP2WSH
        );
      }
      function prepareFinalScripts(script2, scriptType, partialSig, isSegwit, isP2SH, isP2WSH) {
        let finalScriptSig;
        let finalScriptWitness;
        const payment = getPayment(script2, scriptType, partialSig);
        const p2wsh = !isP2WSH ? null : payments2.p2wsh({ redeem: payment });
        const p2sh = !isP2SH ? null : payments2.p2sh({ redeem: p2wsh || payment });
        if (isSegwit) {
          if (p2wsh) {
            finalScriptWitness = (0, psbtutils_1.witnessStackToScriptWitness)(
              p2wsh.witness
            );
          } else {
            finalScriptWitness = (0, psbtutils_1.witnessStackToScriptWitness)(
              payment.witness
            );
          }
          if (p2sh) {
            finalScriptSig = p2sh.input;
          }
        } else {
          if (p2sh) {
            finalScriptSig = p2sh.input;
          } else {
            finalScriptSig = payment.input;
          }
        }
        return {
          finalScriptSig,
          finalScriptWitness
        };
      }
      function getHashAndSighashType(inputs, inputIndex, pubkey, cache, sighashTypes) {
        const input = (0, utils_1.checkForInput)(inputs, inputIndex);
        const { hash, sighashType, script: script2 } = getHashForSig(
          inputIndex,
          input,
          cache,
          false,
          sighashTypes
        );
        checkScriptForPubkey(pubkey, script2, "sign");
        return {
          hash,
          sighashType
        };
      }
      function getHashForSig(inputIndex, input, cache, forValidate, sighashTypes) {
        const unsignedTx = cache.__TX;
        const sighashType = input.sighashType || transaction_1.Transaction.SIGHASH_ALL;
        checkSighashTypeAllowed(sighashType, sighashTypes);
        let hash;
        let prevout;
        if (input.nonWitnessUtxo) {
          const nonWitnessUtxoTx = nonWitnessUtxoTxFromCache(
            cache,
            input,
            inputIndex
          );
          const prevoutHash = unsignedTx.ins[inputIndex].hash;
          const utxoHash = nonWitnessUtxoTx.getHash();
          if (!prevoutHash.equals(utxoHash)) {
            throw new Error(
              `Non-witness UTXO hash for input #${inputIndex} doesn't match the hash specified in the prevout`
            );
          }
          const prevoutIndex = unsignedTx.ins[inputIndex].index;
          prevout = nonWitnessUtxoTx.outs[prevoutIndex];
        } else if (input.witnessUtxo) {
          prevout = input.witnessUtxo;
        } else {
          throw new Error("Need a Utxo input item for signing");
        }
        const { meaningfulScript, type } = getMeaningfulScript(
          prevout.script,
          inputIndex,
          "input",
          input.redeemScript,
          input.witnessScript
        );
        if (["p2sh-p2wsh", "p2wsh"].indexOf(type) >= 0) {
          hash = unsignedTx.hashForWitnessV0(
            inputIndex,
            meaningfulScript,
            prevout.value,
            sighashType
          );
        } else if ((0, psbtutils_1.isP2WPKH)(meaningfulScript)) {
          const signingScript = payments2.p2pkh({
            hash: meaningfulScript.slice(2)
          }).output;
          hash = unsignedTx.hashForWitnessV0(
            inputIndex,
            signingScript,
            prevout.value,
            sighashType
          );
        } else {
          if (input.nonWitnessUtxo === void 0 && cache.__UNSAFE_SIGN_NONSEGWIT === false)
            throw new Error(
              `Input #${inputIndex} has witnessUtxo but non-segwit script: ${meaningfulScript.toString("hex")}`
            );
          if (!forValidate && cache.__UNSAFE_SIGN_NONSEGWIT !== false)
            console.warn(
              "Warning: Signing non-segwit inputs without the full parent transaction means there is a chance that a miner could feed you incorrect information to trick you into paying large fees. This behavior is the same as Psbt's predecesor (TransactionBuilder - now removed) when signing non-segwit scripts. You are not able to export this Psbt with toBuffer|toBase64|toHex since it is not BIP174 compliant.\n*********************\nPROCEED WITH CAUTION!\n*********************"
            );
          hash = unsignedTx.hashForSignature(
            inputIndex,
            meaningfulScript,
            sighashType
          );
        }
        return {
          script: meaningfulScript,
          sighashType,
          hash
        };
      }
      function getAllTaprootHashesForSig(inputIndex, input, inputs, cache) {
        const allPublicKeys = [];
        if (input.tapInternalKey) {
          const key = getPrevoutTaprootKey(inputIndex, input, cache);
          if (key) {
            allPublicKeys.push(key);
          }
        }
        if (input.tapScriptSig) {
          const tapScriptPubkeys = input.tapScriptSig.map((tss) => tss.pubkey);
          allPublicKeys.push(...tapScriptPubkeys);
        }
        const allHashes = allPublicKeys.map(
          (pubicKey) => getTaprootHashesForSig(inputIndex, input, inputs, pubicKey, cache)
        );
        return allHashes.flat();
      }
      function getPrevoutTaprootKey(inputIndex, input, cache) {
        const { script: script2 } = getScriptAndAmountFromUtxo(inputIndex, input, cache);
        return (0, psbtutils_1.isP2TR)(script2) ? script2.subarray(2, 34) : null;
      }
      function trimTaprootSig(signature) {
        return signature.length === 64 ? signature : signature.subarray(0, 64);
      }
      function getTaprootHashesForSig(inputIndex, input, inputs, pubkey, cache, tapLeafHashToSign, allowedSighashTypes) {
        const unsignedTx = cache.__TX;
        const sighashType = input.sighashType || transaction_1.Transaction.SIGHASH_DEFAULT;
        checkSighashTypeAllowed(sighashType, allowedSighashTypes);
        const prevOuts = inputs.map(
          (i, index) => getScriptAndAmountFromUtxo(index, i, cache)
        );
        const signingScripts = prevOuts.map((o) => o.script);
        const values = prevOuts.map((o) => o.value);
        const hashes = [];
        if (input.tapInternalKey && !tapLeafHashToSign) {
          const outputKey = getPrevoutTaprootKey(inputIndex, input, cache) || Buffer.from([]);
          if ((0, bip371_1.toXOnly)(pubkey).equals(outputKey)) {
            const tapKeyHash = unsignedTx.hashForWitnessV1(
              inputIndex,
              signingScripts,
              values,
              sighashType
            );
            hashes.push({ pubkey, hash: tapKeyHash });
          }
        }
        const tapLeafHashes = (input.tapLeafScript || []).filter((tapLeaf) => (0, psbtutils_1.pubkeyInScript)(pubkey, tapLeaf.script)).map((tapLeaf) => {
          const hash = (0, bip341_1.tapleafHash)({
            output: tapLeaf.script,
            version: tapLeaf.leafVersion
          });
          return Object.assign({ hash }, tapLeaf);
        }).filter(
          (tapLeaf) => !tapLeafHashToSign || tapLeafHashToSign.equals(tapLeaf.hash)
        ).map((tapLeaf) => {
          const tapScriptHash = unsignedTx.hashForWitnessV1(
            inputIndex,
            signingScripts,
            values,
            transaction_1.Transaction.SIGHASH_DEFAULT,
            tapLeaf.hash
          );
          return {
            pubkey,
            hash: tapScriptHash,
            leafHash: tapLeaf.hash
          };
        });
        return hashes.concat(tapLeafHashes);
      }
      function checkSighashTypeAllowed(sighashType, sighashTypes) {
        if (sighashTypes && sighashTypes.indexOf(sighashType) < 0) {
          const str = sighashTypeToString(sighashType);
          throw new Error(
            `Sighash type is not allowed. Retry the sign method passing the sighashTypes array of whitelisted types. Sighash type: ${str}`
          );
        }
      }
      function getPayment(script2, scriptType, partialSig) {
        let payment;
        switch (scriptType) {
          case "multisig":
            const sigs = getSortedSigs(script2, partialSig);
            payment = payments2.p2ms({
              output: script2,
              signatures: sigs
            });
            break;
          case "pubkey":
            payment = payments2.p2pk({
              output: script2,
              signature: partialSig[0].signature
            });
            break;
          case "pubkeyhash":
            payment = payments2.p2pkh({
              output: script2,
              pubkey: partialSig[0].pubkey,
              signature: partialSig[0].signature
            });
            break;
          case "witnesspubkeyhash":
            payment = payments2.p2wpkh({
              output: script2,
              pubkey: partialSig[0].pubkey,
              signature: partialSig[0].signature
            });
            break;
        }
        return payment;
      }
      function getScriptFromInput(inputIndex, input, cache) {
        const unsignedTx = cache.__TX;
        const res = {
          script: null,
          isSegwit: false,
          isP2SH: false,
          isP2WSH: false
        };
        res.isP2SH = !!input.redeemScript;
        res.isP2WSH = !!input.witnessScript;
        if (input.witnessScript) {
          res.script = input.witnessScript;
        } else if (input.redeemScript) {
          res.script = input.redeemScript;
        } else {
          if (input.nonWitnessUtxo) {
            const nonWitnessUtxoTx = nonWitnessUtxoTxFromCache(
              cache,
              input,
              inputIndex
            );
            const prevoutIndex = unsignedTx.ins[inputIndex].index;
            res.script = nonWitnessUtxoTx.outs[prevoutIndex].script;
          } else if (input.witnessUtxo) {
            res.script = input.witnessUtxo.script;
          }
        }
        if (input.witnessScript || (0, psbtutils_1.isP2WPKH)(res.script)) {
          res.isSegwit = true;
        }
        return res;
      }
      function getSignersFromHD(inputIndex, inputs, hdKeyPair) {
        const input = (0, utils_1.checkForInput)(inputs, inputIndex);
        if (!input.bip32Derivation || input.bip32Derivation.length === 0) {
          throw new Error("Need bip32Derivation to sign with HD");
        }
        const myDerivations = input.bip32Derivation.map((bipDv) => {
          if (bipDv.masterFingerprint.equals(hdKeyPair.fingerprint)) {
            return bipDv;
          } else {
            return;
          }
        }).filter((v) => !!v);
        if (myDerivations.length === 0) {
          throw new Error(
            "Need one bip32Derivation masterFingerprint to match the HDSigner fingerprint"
          );
        }
        const signers = myDerivations.map((bipDv) => {
          const node = hdKeyPair.derivePath(bipDv.path);
          if (!bipDv.pubkey.equals(node.publicKey)) {
            throw new Error("pubkey did not match bip32Derivation");
          }
          return node;
        });
        return signers;
      }
      function getSortedSigs(script2, partialSig) {
        const p2ms = payments2.p2ms({ output: script2 });
        return p2ms.pubkeys.map((pk) => {
          return (partialSig.filter((ps) => {
            return ps.pubkey.equals(pk);
          })[0] || {}).signature;
        }).filter((v) => !!v);
      }
      function scriptWitnessToWitnessStack(buffer) {
        let offset = 0;
        function readSlice(n) {
          offset += n;
          return buffer.slice(offset - n, offset);
        }
        function readVarInt() {
          const vi = varuint.decode(buffer, offset);
          offset += varuint.decode.bytes;
          return vi;
        }
        function readVarSlice() {
          return readSlice(readVarInt());
        }
        function readVector() {
          const count = readVarInt();
          const vector = [];
          for (let i = 0; i < count; i++)
            vector.push(readVarSlice());
          return vector;
        }
        return readVector();
      }
      function sighashTypeToString(sighashType) {
        let text = sighashType & transaction_1.Transaction.SIGHASH_ANYONECANPAY ? "SIGHASH_ANYONECANPAY | " : "";
        const sigMod = sighashType & 31;
        switch (sigMod) {
          case transaction_1.Transaction.SIGHASH_ALL:
            text += "SIGHASH_ALL";
            break;
          case transaction_1.Transaction.SIGHASH_SINGLE:
            text += "SIGHASH_SINGLE";
            break;
          case transaction_1.Transaction.SIGHASH_NONE:
            text += "SIGHASH_NONE";
            break;
        }
        return text;
      }
      function addNonWitnessTxCache(cache, input, inputIndex) {
        cache.__NON_WITNESS_UTXO_BUF_CACHE[inputIndex] = input.nonWitnessUtxo;
        const tx = transaction_1.Transaction.fromBuffer(input.nonWitnessUtxo);
        cache.__NON_WITNESS_UTXO_TX_CACHE[inputIndex] = tx;
        const self2 = cache;
        const selfIndex = inputIndex;
        delete input.nonWitnessUtxo;
        Object.defineProperty(input, "nonWitnessUtxo", {
          enumerable: true,
          get() {
            const buf = self2.__NON_WITNESS_UTXO_BUF_CACHE[selfIndex];
            const txCache = self2.__NON_WITNESS_UTXO_TX_CACHE[selfIndex];
            if (buf !== void 0) {
              return buf;
            } else {
              const newBuf = txCache.toBuffer();
              self2.__NON_WITNESS_UTXO_BUF_CACHE[selfIndex] = newBuf;
              return newBuf;
            }
          },
          set(data) {
            self2.__NON_WITNESS_UTXO_BUF_CACHE[selfIndex] = data;
          }
        });
      }
      function inputFinalizeGetAmts(inputs, tx, cache, mustFinalize) {
        let inputAmount = 0;
        inputs.forEach((input, idx) => {
          if (mustFinalize && input.finalScriptSig)
            tx.ins[idx].script = input.finalScriptSig;
          if (mustFinalize && input.finalScriptWitness) {
            tx.ins[idx].witness = scriptWitnessToWitnessStack(
              input.finalScriptWitness
            );
          }
          if (input.witnessUtxo) {
            inputAmount += input.witnessUtxo.value;
          } else if (input.nonWitnessUtxo) {
            const nwTx = nonWitnessUtxoTxFromCache(cache, input, idx);
            const vout = tx.ins[idx].index;
            const out = nwTx.outs[vout];
            inputAmount += out.value;
          }
        });
        const outputAmount = tx.outs.reduce((total, o) => total + o.value, 0);
        const fee = inputAmount - outputAmount;
        if (fee < 0) {
          throw new Error("Outputs are spending more than Inputs");
        }
        const bytes = tx.virtualSize();
        cache.__FEE = fee;
        cache.__EXTRACTED_TX = tx;
        cache.__FEE_RATE = Math.floor(fee / bytes);
      }
      function nonWitnessUtxoTxFromCache(cache, input, inputIndex) {
        const c = cache.__NON_WITNESS_UTXO_TX_CACHE;
        if (!c[inputIndex]) {
          addNonWitnessTxCache(cache, input, inputIndex);
        }
        return c[inputIndex];
      }
      function getScriptFromUtxo(inputIndex, input, cache) {
        const { script: script2 } = getScriptAndAmountFromUtxo(inputIndex, input, cache);
        return script2;
      }
      function getScriptAndAmountFromUtxo(inputIndex, input, cache) {
        if (input.witnessUtxo !== void 0) {
          return {
            script: input.witnessUtxo.script,
            value: input.witnessUtxo.value
          };
        } else if (input.nonWitnessUtxo !== void 0) {
          const nonWitnessUtxoTx = nonWitnessUtxoTxFromCache(
            cache,
            input,
            inputIndex
          );
          const o = nonWitnessUtxoTx.outs[cache.__TX.ins[inputIndex].index];
          return { script: o.script, value: o.value };
        } else {
          throw new Error("Can't find pubkey in input without Utxo data");
        }
      }
      function pubkeyInInput(pubkey, input, inputIndex, cache) {
        const script2 = getScriptFromUtxo(inputIndex, input, cache);
        const { meaningfulScript } = getMeaningfulScript(
          script2,
          inputIndex,
          "input",
          input.redeemScript,
          input.witnessScript
        );
        return (0, psbtutils_1.pubkeyInScript)(pubkey, meaningfulScript);
      }
      function pubkeyInOutput(pubkey, output, outputIndex, cache) {
        const script2 = cache.__TX.outs[outputIndex].script;
        const { meaningfulScript } = getMeaningfulScript(
          script2,
          outputIndex,
          "output",
          output.redeemScript,
          output.witnessScript
        );
        return (0, psbtutils_1.pubkeyInScript)(pubkey, meaningfulScript);
      }
      function redeemFromFinalScriptSig(finalScript) {
        if (!finalScript)
          return;
        const decomp = bscript.decompile(finalScript);
        if (!decomp)
          return;
        const lastItem = decomp[decomp.length - 1];
        if (!Buffer.isBuffer(lastItem) || isPubkeyLike(lastItem) || isSigLike(lastItem))
          return;
        const sDecomp = bscript.decompile(lastItem);
        if (!sDecomp)
          return;
        return lastItem;
      }
      function redeemFromFinalWitnessScript(finalScript) {
        if (!finalScript)
          return;
        const decomp = scriptWitnessToWitnessStack(finalScript);
        const lastItem = decomp[decomp.length - 1];
        if (isPubkeyLike(lastItem))
          return;
        const sDecomp = bscript.decompile(lastItem);
        if (!sDecomp)
          return;
        return lastItem;
      }
      function compressPubkey(pubkey) {
        if (pubkey.length === 65) {
          const parity = pubkey[64] & 1;
          const newKey = pubkey.slice(0, 33);
          newKey[0] = 2 | parity;
          return newKey;
        }
        return pubkey.slice();
      }
      function isPubkeyLike(buf) {
        return buf.length === 33 && bscript.isCanonicalPubKey(buf);
      }
      function isSigLike(buf) {
        return bscript.isCanonicalScriptSignature(buf);
      }
      function getMeaningfulScript(script2, index, ioType, redeemScript, witnessScript) {
        const isP2SH = (0, psbtutils_1.isP2SHScript)(script2);
        const isP2SHP2WSH = isP2SH && redeemScript && (0, psbtutils_1.isP2WSHScript)(redeemScript);
        const isP2WSH = (0, psbtutils_1.isP2WSHScript)(script2);
        if (isP2SH && redeemScript === void 0)
          throw new Error("scriptPubkey is P2SH but redeemScript missing");
        if ((isP2WSH || isP2SHP2WSH) && witnessScript === void 0)
          throw new Error(
            "scriptPubkey or redeemScript is P2WSH but witnessScript missing"
          );
        let meaningfulScript;
        if (isP2SHP2WSH) {
          meaningfulScript = witnessScript;
          checkRedeemScript(index, script2, redeemScript, ioType);
          checkWitnessScript(index, redeemScript, witnessScript, ioType);
          checkInvalidP2WSH(meaningfulScript);
        } else if (isP2WSH) {
          meaningfulScript = witnessScript;
          checkWitnessScript(index, script2, witnessScript, ioType);
          checkInvalidP2WSH(meaningfulScript);
        } else if (isP2SH) {
          meaningfulScript = redeemScript;
          checkRedeemScript(index, script2, redeemScript, ioType);
        } else {
          meaningfulScript = script2;
        }
        return {
          meaningfulScript,
          type: isP2SHP2WSH ? "p2sh-p2wsh" : isP2SH ? "p2sh" : isP2WSH ? "p2wsh" : "raw"
        };
      }
      function checkInvalidP2WSH(script2) {
        if ((0, psbtutils_1.isP2WPKH)(script2) || (0, psbtutils_1.isP2SHScript)(script2)) {
          throw new Error("P2WPKH or P2SH can not be contained within P2WSH");
        }
      }
      function classifyScript(script2) {
        if ((0, psbtutils_1.isP2WPKH)(script2))
          return "witnesspubkeyhash";
        if ((0, psbtutils_1.isP2PKH)(script2))
          return "pubkeyhash";
        if ((0, psbtutils_1.isP2MS)(script2))
          return "multisig";
        if ((0, psbtutils_1.isP2PK)(script2))
          return "pubkey";
        return "nonstandard";
      }
      function range(n) {
        return [...Array(n).keys()];
      }
    }
  });

  // node_modules/bitcoinjs-lib/src/index.js
  var require_src4 = __commonJS({
    "node_modules/bitcoinjs-lib/src/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.initEccLib = exports.Transaction = exports.opcodes = exports.Psbt = exports.Block = exports.script = exports.payments = exports.networks = exports.crypto = exports.address = void 0;
      var address = require_address();
      exports.address = address;
      var crypto2 = require_crypto3();
      exports.crypto = crypto2;
      var networks4 = require_networks2();
      exports.networks = networks4;
      var payments2 = require_payments();
      exports.payments = payments2;
      var script2 = require_script();
      exports.script = script2;
      var block_1 = require_block();
      Object.defineProperty(exports, "Block", {
        enumerable: true,
        get: function() {
          return block_1.Block;
        }
      });
      var psbt_1 = require_psbt2();
      Object.defineProperty(exports, "Psbt", {
        enumerable: true,
        get: function() {
          return psbt_1.Psbt;
        }
      });
      var ops_1 = require_ops();
      Object.defineProperty(exports, "opcodes", {
        enumerable: true,
        get: function() {
          return ops_1.OPS;
        }
      });
      var transaction_1 = require_transaction();
      Object.defineProperty(exports, "Transaction", {
        enumerable: true,
        get: function() {
          return transaction_1.Transaction;
        }
      });
      var ecc_lib_1 = require_ecc_lib();
      Object.defineProperty(exports, "initEccLib", {
        enumerable: true,
        get: function() {
          return ecc_lib_1.initEccLib;
        }
      });
    }
  });

  // node_modules/@noble/hashes/_u64.js
  var require_u64 = __commonJS({
    "node_modules/@noble/hashes/_u64.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.add5L = exports.add5H = exports.add4H = exports.add4L = exports.add3H = exports.add3L = exports.add = exports.rotlBL = exports.rotlBH = exports.rotlSL = exports.rotlSH = exports.rotr32L = exports.rotr32H = exports.rotrBL = exports.rotrBH = exports.rotrSL = exports.rotrSH = exports.shrSL = exports.shrSH = exports.toBig = exports.split = exports.fromBig = void 0;
      var U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);
      var _32n = /* @__PURE__ */ BigInt(32);
      function fromBig(n, le = false) {
        if (le)
          return { h: Number(n & U32_MASK64), l: Number(n >> _32n & U32_MASK64) };
        return { h: Number(n >> _32n & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };
      }
      exports.fromBig = fromBig;
      function split(lst, le = false) {
        let Ah = new Uint32Array(lst.length);
        let Al = new Uint32Array(lst.length);
        for (let i = 0; i < lst.length; i++) {
          const { h, l } = fromBig(lst[i], le);
          [Ah[i], Al[i]] = [h, l];
        }
        return [Ah, Al];
      }
      exports.split = split;
      var toBig = (h, l) => BigInt(h >>> 0) << _32n | BigInt(l >>> 0);
      exports.toBig = toBig;
      var shrSH = (h, _l, s) => h >>> s;
      exports.shrSH = shrSH;
      var shrSL = (h, l, s) => h << 32 - s | l >>> s;
      exports.shrSL = shrSL;
      var rotrSH = (h, l, s) => h >>> s | l << 32 - s;
      exports.rotrSH = rotrSH;
      var rotrSL = (h, l, s) => h << 32 - s | l >>> s;
      exports.rotrSL = rotrSL;
      var rotrBH = (h, l, s) => h << 64 - s | l >>> s - 32;
      exports.rotrBH = rotrBH;
      var rotrBL = (h, l, s) => h >>> s - 32 | l << 64 - s;
      exports.rotrBL = rotrBL;
      var rotr32H = (_h, l) => l;
      exports.rotr32H = rotr32H;
      var rotr32L = (h, _l) => h;
      exports.rotr32L = rotr32L;
      var rotlSH = (h, l, s) => h << s | l >>> 32 - s;
      exports.rotlSH = rotlSH;
      var rotlSL = (h, l, s) => l << s | h >>> 32 - s;
      exports.rotlSL = rotlSL;
      var rotlBH = (h, l, s) => l << s - 32 | h >>> 64 - s;
      exports.rotlBH = rotlBH;
      var rotlBL = (h, l, s) => h << s - 32 | l >>> 64 - s;
      exports.rotlBL = rotlBL;
      function add(Ah, Al, Bh, Bl) {
        const l = (Al >>> 0) + (Bl >>> 0);
        return { h: Ah + Bh + (l / 2 ** 32 | 0) | 0, l: l | 0 };
      }
      exports.add = add;
      var add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
      exports.add3L = add3L;
      var add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
      exports.add3H = add3H;
      var add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
      exports.add4L = add4L;
      var add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
      exports.add4H = add4H;
      var add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
      exports.add5L = add5L;
      var add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;
      exports.add5H = add5H;
      var u64 = {
        fromBig,
        split,
        toBig,
        shrSH,
        shrSL,
        rotrSH,
        rotrSL,
        rotrBH,
        rotrBL,
        rotr32H,
        rotr32L,
        rotlSH,
        rotlSL,
        rotlBH,
        rotlBL,
        add,
        add3L,
        add3H,
        add4L,
        add4H,
        add5H,
        add5L
      };
      exports.default = u64;
    }
  });

  // node_modules/@noble/hashes/sha512.js
  var require_sha5122 = __commonJS({
    "node_modules/@noble/hashes/sha512.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.sha384 = exports.sha512_256 = exports.sha512_224 = exports.sha512 = exports.SHA512 = void 0;
      var _sha2_js_1 = require_sha22();
      var _u64_js_1 = require_u64();
      var utils_js_1 = require_utils();
      var [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (() => _u64_js_1.default.split([
        "0x428a2f98d728ae22",
        "0x7137449123ef65cd",
        "0xb5c0fbcfec4d3b2f",
        "0xe9b5dba58189dbbc",
        "0x3956c25bf348b538",
        "0x59f111f1b605d019",
        "0x923f82a4af194f9b",
        "0xab1c5ed5da6d8118",
        "0xd807aa98a3030242",
        "0x12835b0145706fbe",
        "0x243185be4ee4b28c",
        "0x550c7dc3d5ffb4e2",
        "0x72be5d74f27b896f",
        "0x80deb1fe3b1696b1",
        "0x9bdc06a725c71235",
        "0xc19bf174cf692694",
        "0xe49b69c19ef14ad2",
        "0xefbe4786384f25e3",
        "0x0fc19dc68b8cd5b5",
        "0x240ca1cc77ac9c65",
        "0x2de92c6f592b0275",
        "0x4a7484aa6ea6e483",
        "0x5cb0a9dcbd41fbd4",
        "0x76f988da831153b5",
        "0x983e5152ee66dfab",
        "0xa831c66d2db43210",
        "0xb00327c898fb213f",
        "0xbf597fc7beef0ee4",
        "0xc6e00bf33da88fc2",
        "0xd5a79147930aa725",
        "0x06ca6351e003826f",
        "0x142929670a0e6e70",
        "0x27b70a8546d22ffc",
        "0x2e1b21385c26c926",
        "0x4d2c6dfc5ac42aed",
        "0x53380d139d95b3df",
        "0x650a73548baf63de",
        "0x766a0abb3c77b2a8",
        "0x81c2c92e47edaee6",
        "0x92722c851482353b",
        "0xa2bfe8a14cf10364",
        "0xa81a664bbc423001",
        "0xc24b8b70d0f89791",
        "0xc76c51a30654be30",
        "0xd192e819d6ef5218",
        "0xd69906245565a910",
        "0xf40e35855771202a",
        "0x106aa07032bbd1b8",
        "0x19a4c116b8d2d0c8",
        "0x1e376c085141ab53",
        "0x2748774cdf8eeb99",
        "0x34b0bcb5e19b48a8",
        "0x391c0cb3c5c95a63",
        "0x4ed8aa4ae3418acb",
        "0x5b9cca4f7763e373",
        "0x682e6ff3d6b2b8a3",
        "0x748f82ee5defb2fc",
        "0x78a5636f43172f60",
        "0x84c87814a1f0ab72",
        "0x8cc702081a6439ec",
        "0x90befffa23631e28",
        "0xa4506cebde82bde9",
        "0xbef9a3f7b2c67915",
        "0xc67178f2e372532b",
        "0xca273eceea26619c",
        "0xd186b8c721c0c207",
        "0xeada7dd6cde0eb1e",
        "0xf57d4f7fee6ed178",
        "0x06f067aa72176fba",
        "0x0a637dc5a2c898a6",
        "0x113f9804bef90dae",
        "0x1b710b35131c471b",
        "0x28db77f523047d84",
        "0x32caab7b40c72493",
        "0x3c9ebe0a15c9bebc",
        "0x431d67c49c100d4c",
        "0x4cc5d4becb3e42b6",
        "0x597f299cfc657e2a",
        "0x5fcb6fab3ad6faec",
        "0x6c44198c4a475817"
      ].map((n) => BigInt(n))))();
      var SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);
      var SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);
      var SHA512 = class extends _sha2_js_1.SHA2 {
        constructor() {
          super(128, 64, 16, false);
          this.Ah = 1779033703 | 0;
          this.Al = 4089235720 | 0;
          this.Bh = 3144134277 | 0;
          this.Bl = 2227873595 | 0;
          this.Ch = 1013904242 | 0;
          this.Cl = 4271175723 | 0;
          this.Dh = 2773480762 | 0;
          this.Dl = 1595750129 | 0;
          this.Eh = 1359893119 | 0;
          this.El = 2917565137 | 0;
          this.Fh = 2600822924 | 0;
          this.Fl = 725511199 | 0;
          this.Gh = 528734635 | 0;
          this.Gl = 4215389547 | 0;
          this.Hh = 1541459225 | 0;
          this.Hl = 327033209 | 0;
        }
        // prettier-ignore
        get() {
          const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
          return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];
        }
        // prettier-ignore
        set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
          this.Ah = Ah | 0;
          this.Al = Al | 0;
          this.Bh = Bh | 0;
          this.Bl = Bl | 0;
          this.Ch = Ch | 0;
          this.Cl = Cl | 0;
          this.Dh = Dh | 0;
          this.Dl = Dl | 0;
          this.Eh = Eh | 0;
          this.El = El | 0;
          this.Fh = Fh | 0;
          this.Fl = Fl | 0;
          this.Gh = Gh | 0;
          this.Gl = Gl | 0;
          this.Hh = Hh | 0;
          this.Hl = Hl | 0;
        }
        process(view, offset) {
          for (let i = 0; i < 16; i++, offset += 4) {
            SHA512_W_H[i] = view.getUint32(offset);
            SHA512_W_L[i] = view.getUint32(offset += 4);
          }
          for (let i = 16; i < 80; i++) {
            const W15h = SHA512_W_H[i - 15] | 0;
            const W15l = SHA512_W_L[i - 15] | 0;
            const s0h = _u64_js_1.default.rotrSH(W15h, W15l, 1) ^ _u64_js_1.default.rotrSH(W15h, W15l, 8) ^ _u64_js_1.default.shrSH(W15h, W15l, 7);
            const s0l = _u64_js_1.default.rotrSL(W15h, W15l, 1) ^ _u64_js_1.default.rotrSL(W15h, W15l, 8) ^ _u64_js_1.default.shrSL(W15h, W15l, 7);
            const W2h = SHA512_W_H[i - 2] | 0;
            const W2l = SHA512_W_L[i - 2] | 0;
            const s1h = _u64_js_1.default.rotrSH(W2h, W2l, 19) ^ _u64_js_1.default.rotrBH(W2h, W2l, 61) ^ _u64_js_1.default.shrSH(W2h, W2l, 6);
            const s1l = _u64_js_1.default.rotrSL(W2h, W2l, 19) ^ _u64_js_1.default.rotrBL(W2h, W2l, 61) ^ _u64_js_1.default.shrSL(W2h, W2l, 6);
            const SUMl = _u64_js_1.default.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);
            const SUMh = _u64_js_1.default.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);
            SHA512_W_H[i] = SUMh | 0;
            SHA512_W_L[i] = SUMl | 0;
          }
          let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
          for (let i = 0; i < 80; i++) {
            const sigma1h = _u64_js_1.default.rotrSH(Eh, El, 14) ^ _u64_js_1.default.rotrSH(Eh, El, 18) ^ _u64_js_1.default.rotrBH(Eh, El, 41);
            const sigma1l = _u64_js_1.default.rotrSL(Eh, El, 14) ^ _u64_js_1.default.rotrSL(Eh, El, 18) ^ _u64_js_1.default.rotrBL(Eh, El, 41);
            const CHIh = Eh & Fh ^ ~Eh & Gh;
            const CHIl = El & Fl ^ ~El & Gl;
            const T1ll = _u64_js_1.default.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);
            const T1h = _u64_js_1.default.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);
            const T1l = T1ll | 0;
            const sigma0h = _u64_js_1.default.rotrSH(Ah, Al, 28) ^ _u64_js_1.default.rotrBH(Ah, Al, 34) ^ _u64_js_1.default.rotrBH(Ah, Al, 39);
            const sigma0l = _u64_js_1.default.rotrSL(Ah, Al, 28) ^ _u64_js_1.default.rotrBL(Ah, Al, 34) ^ _u64_js_1.default.rotrBL(Ah, Al, 39);
            const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;
            const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;
            Hh = Gh | 0;
            Hl = Gl | 0;
            Gh = Fh | 0;
            Gl = Fl | 0;
            Fh = Eh | 0;
            Fl = El | 0;
            ({ h: Eh, l: El } = _u64_js_1.default.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
            Dh = Ch | 0;
            Dl = Cl | 0;
            Ch = Bh | 0;
            Cl = Bl | 0;
            Bh = Ah | 0;
            Bl = Al | 0;
            const All = _u64_js_1.default.add3L(T1l, sigma0l, MAJl);
            Ah = _u64_js_1.default.add3H(All, T1h, sigma0h, MAJh);
            Al = All | 0;
          }
          ({ h: Ah, l: Al } = _u64_js_1.default.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
          ({ h: Bh, l: Bl } = _u64_js_1.default.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
          ({ h: Ch, l: Cl } = _u64_js_1.default.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
          ({ h: Dh, l: Dl } = _u64_js_1.default.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
          ({ h: Eh, l: El } = _u64_js_1.default.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
          ({ h: Fh, l: Fl } = _u64_js_1.default.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
          ({ h: Gh, l: Gl } = _u64_js_1.default.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
          ({ h: Hh, l: Hl } = _u64_js_1.default.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
          this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
        }
        roundClean() {
          SHA512_W_H.fill(0);
          SHA512_W_L.fill(0);
        }
        destroy() {
          this.buffer.fill(0);
          this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        }
      };
      exports.SHA512 = SHA512;
      var SHA512_224 = class extends SHA512 {
        constructor() {
          super();
          this.Ah = 2352822216 | 0;
          this.Al = 424955298 | 0;
          this.Bh = 1944164710 | 0;
          this.Bl = 2312950998 | 0;
          this.Ch = 502970286 | 0;
          this.Cl = 855612546 | 0;
          this.Dh = 1738396948 | 0;
          this.Dl = 1479516111 | 0;
          this.Eh = 258812777 | 0;
          this.El = 2077511080 | 0;
          this.Fh = 2011393907 | 0;
          this.Fl = 79989058 | 0;
          this.Gh = 1067287976 | 0;
          this.Gl = 1780299464 | 0;
          this.Hh = 286451373 | 0;
          this.Hl = 2446758561 | 0;
          this.outputLen = 28;
        }
      };
      var SHA512_256 = class extends SHA512 {
        constructor() {
          super();
          this.Ah = 573645204 | 0;
          this.Al = 4230739756 | 0;
          this.Bh = 2673172387 | 0;
          this.Bl = 3360449730 | 0;
          this.Ch = 596883563 | 0;
          this.Cl = 1867755857 | 0;
          this.Dh = 2520282905 | 0;
          this.Dl = 1497426621 | 0;
          this.Eh = 2519219938 | 0;
          this.El = 2827943907 | 0;
          this.Fh = 3193839141 | 0;
          this.Fl = 1401305490 | 0;
          this.Gh = 721525244 | 0;
          this.Gl = 746961066 | 0;
          this.Hh = 246885852 | 0;
          this.Hl = 2177182882 | 0;
          this.outputLen = 32;
        }
      };
      var SHA384 = class extends SHA512 {
        constructor() {
          super();
          this.Ah = 3418070365 | 0;
          this.Al = 3238371032 | 0;
          this.Bh = 1654270250 | 0;
          this.Bl = 914150663 | 0;
          this.Ch = 2438529370 | 0;
          this.Cl = 812702999 | 0;
          this.Dh = 355462360 | 0;
          this.Dl = 4144912697 | 0;
          this.Eh = 1731405415 | 0;
          this.El = 4290775857 | 0;
          this.Fh = 2394180231 | 0;
          this.Fl = 1750603025 | 0;
          this.Gh = 3675008525 | 0;
          this.Gl = 1694076839 | 0;
          this.Hh = 1203062813 | 0;
          this.Hl = 3204075428 | 0;
          this.outputLen = 48;
        }
      };
      exports.sha512 = (0, utils_js_1.wrapConstructor)(() => new SHA512());
      exports.sha512_224 = (0, utils_js_1.wrapConstructor)(() => new SHA512_224());
      exports.sha512_256 = (0, utils_js_1.wrapConstructor)(() => new SHA512_256());
      exports.sha384 = (0, utils_js_1.wrapConstructor)(() => new SHA384());
    }
  });

  // node_modules/@noble/hashes/pbkdf2.js
  var require_pbkdf2 = __commonJS({
    "node_modules/@noble/hashes/pbkdf2.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.pbkdf2Async = exports.pbkdf2 = void 0;
      var _assert_js_1 = require_assert();
      var hmac_js_1 = require_hmac();
      var utils_js_1 = require_utils();
      function pbkdf2Init(hash, _password, _salt, _opts) {
        (0, _assert_js_1.hash)(hash);
        const opts = (0, utils_js_1.checkOpts)({ dkLen: 32, asyncTick: 10 }, _opts);
        const { c, dkLen, asyncTick } = opts;
        (0, _assert_js_1.number)(c);
        (0, _assert_js_1.number)(dkLen);
        (0, _assert_js_1.number)(asyncTick);
        if (c < 1)
          throw new Error("PBKDF2: iterations (c) should be >= 1");
        const password = (0, utils_js_1.toBytes)(_password);
        const salt = (0, utils_js_1.toBytes)(_salt);
        const DK = new Uint8Array(dkLen);
        const PRF = hmac_js_1.hmac.create(hash, password);
        const PRFSalt = PRF._cloneInto().update(salt);
        return { c, dkLen, asyncTick, DK, PRF, PRFSalt };
      }
      function pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {
        PRF.destroy();
        PRFSalt.destroy();
        if (prfW)
          prfW.destroy();
        u.fill(0);
        return DK;
      }
      function pbkdf2(hash, password, salt, opts) {
        const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);
        let prfW;
        const arr = new Uint8Array(4);
        const view = (0, utils_js_1.createView)(arr);
        const u = new Uint8Array(PRF.outputLen);
        for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
          const Ti = DK.subarray(pos, pos + PRF.outputLen);
          view.setInt32(0, ti, false);
          (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
          Ti.set(u.subarray(0, Ti.length));
          for (let ui = 1; ui < c; ui++) {
            PRF._cloneInto(prfW).update(u).digestInto(u);
            for (let i = 0; i < Ti.length; i++)
              Ti[i] ^= u[i];
          }
        }
        return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
      }
      exports.pbkdf2 = pbkdf2;
      async function pbkdf2Async(hash, password, salt, opts) {
        const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);
        let prfW;
        const arr = new Uint8Array(4);
        const view = (0, utils_js_1.createView)(arr);
        const u = new Uint8Array(PRF.outputLen);
        for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
          const Ti = DK.subarray(pos, pos + PRF.outputLen);
          view.setInt32(0, ti, false);
          (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
          Ti.set(u.subarray(0, Ti.length));
          await (0, utils_js_1.asyncLoop)(c - 1, asyncTick, () => {
            PRF._cloneInto(prfW).update(u).digestInto(u);
            for (let i = 0; i < Ti.length; i++)
              Ti[i] ^= u[i];
          });
        }
        return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
      }
      exports.pbkdf2Async = pbkdf2Async;
    }
  });

  // node_modules/bip39/src/wordlists/czech.json
  var require_czech = __commonJS({
    "node_modules/bip39/src/wordlists/czech.json"(exports, module) {
      module.exports = [
        "abdikace",
        "abeceda",
        "adresa",
        "agrese",
        "akce",
        "aktovka",
        "alej",
        "alkohol",
        "amputace",
        "ananas",
        "andulka",
        "anekdota",
        "anketa",
        "antika",
        "anulovat",
        "archa",
        "arogance",
        "asfalt",
        "asistent",
        "aspirace",
        "astma",
        "astronom",
        "atlas",
        "atletika",
        "atol",
        "autobus",
        "azyl",
        "babka",
        "bachor",
        "bacil",
        "baculka",
        "badatel",
        "bageta",
        "bagr",
        "bahno",
        "bakterie",
        "balada",
        "baletka",
        "balkon",
        "balonek",
        "balvan",
        "balza",
        "bambus",
        "bankomat",
        "barbar",
        "baret",
        "barman",
        "baroko",
        "barva",
        "baterka",
        "batoh",
        "bavlna",
        "bazalka",
        "bazilika",
        "bazuka",
        "bedna",
        "beran",
        "beseda",
        "bestie",
        "beton",
        "bezinka",
        "bezmoc",
        "beztak",
        "bicykl",
        "bidlo",
        "biftek",
        "bikiny",
        "bilance",
        "biograf",
        "biolog",
        "bitva",
        "bizon",
        "blahobyt",
        "blatouch",
        "blecha",
        "bledule",
        "blesk",
        "blikat",
        "blizna",
        "blokovat",
        "bloudit",
        "blud",
        "bobek",
        "bobr",
        "bodlina",
        "bodnout",
        "bohatost",
        "bojkot",
        "bojovat",
        "bokorys",
        "bolest",
        "borec",
        "borovice",
        "bota",
        "boubel",
        "bouchat",
        "bouda",
        "boule",
        "bourat",
        "boxer",
        "bradavka",
        "brambora",
        "branka",
        "bratr",
        "brepta",
        "briketa",
        "brko",
        "brloh",
        "bronz",
        "broskev",
        "brunetka",
        "brusinka",
        "brzda",
        "brzy",
        "bublina",
        "bubnovat",
        "buchta",
        "buditel",
        "budka",
        "budova",
        "bufet",
        "bujarost",
        "bukvice",
        "buldok",
        "bulva",
        "bunda",
        "bunkr",
        "burza",
        "butik",
        "buvol",
        "buzola",
        "bydlet",
        "bylina",
        "bytovka",
        "bzukot",
        "capart",
        "carevna",
        "cedr",
        "cedule",
        "cejch",
        "cejn",
        "cela",
        "celer",
        "celkem",
        "celnice",
        "cenina",
        "cennost",
        "cenovka",
        "centrum",
        "cenzor",
        "cestopis",
        "cetka",
        "chalupa",
        "chapadlo",
        "charita",
        "chata",
        "chechtat",
        "chemie",
        "chichot",
        "chirurg",
        "chlad",
        "chleba",
        "chlubit",
        "chmel",
        "chmura",
        "chobot",
        "chochol",
        "chodba",
        "cholera",
        "chomout",
        "chopit",
        "choroba",
        "chov",
        "chrapot",
        "chrlit",
        "chrt",
        "chrup",
        "chtivost",
        "chudina",
        "chutnat",
        "chvat",
        "chvilka",
        "chvost",
        "chyba",
        "chystat",
        "chytit",
        "cibule",
        "cigareta",
        "cihelna",
        "cihla",
        "cinkot",
        "cirkus",
        "cisterna",
        "citace",
        "citrus",
        "cizinec",
        "cizost",
        "clona",
        "cokoliv",
        "couvat",
        "ctitel",
        "ctnost",
        "cudnost",
        "cuketa",
        "cukr",
        "cupot",
        "cvaknout",
        "cval",
        "cvik",
        "cvrkot",
        "cyklista",
        "daleko",
        "dareba",
        "datel",
        "datum",
        "dcera",
        "debata",
        "dechovka",
        "decibel",
        "deficit",
        "deflace",
        "dekl",
        "dekret",
        "demokrat",
        "deprese",
        "derby",
        "deska",
        "detektiv",
        "dikobraz",
        "diktovat",
        "dioda",
        "diplom",
        "disk",
        "displej",
        "divadlo",
        "divoch",
        "dlaha",
        "dlouho",
        "dluhopis",
        "dnes",
        "dobro",
        "dobytek",
        "docent",
        "dochutit",
        "dodnes",
        "dohled",
        "dohoda",
        "dohra",
        "dojem",
        "dojnice",
        "doklad",
        "dokola",
        "doktor",
        "dokument",
        "dolar",
        "doleva",
        "dolina",
        "doma",
        "dominant",
        "domluvit",
        "domov",
        "donutit",
        "dopad",
        "dopis",
        "doplnit",
        "doposud",
        "doprovod",
        "dopustit",
        "dorazit",
        "dorost",
        "dort",
        "dosah",
        "doslov",
        "dostatek",
        "dosud",
        "dosyta",
        "dotaz",
        "dotek",
        "dotknout",
        "doufat",
        "doutnat",
        "dovozce",
        "dozadu",
        "doznat",
        "dozorce",
        "drahota",
        "drak",
        "dramatik",
        "dravec",
        "draze",
        "drdol",
        "drobnost",
        "drogerie",
        "drozd",
        "drsnost",
        "drtit",
        "drzost",
        "duben",
        "duchovno",
        "dudek",
        "duha",
        "duhovka",
        "dusit",
        "dusno",
        "dutost",
        "dvojice",
        "dvorec",
        "dynamit",
        "ekolog",
        "ekonomie",
        "elektron",
        "elipsa",
        "email",
        "emise",
        "emoce",
        "empatie",
        "epizoda",
        "epocha",
        "epopej",
        "epos",
        "esej",
        "esence",
        "eskorta",
        "eskymo",
        "etiketa",
        "euforie",
        "evoluce",
        "exekuce",
        "exkurze",
        "expedice",
        "exploze",
        "export",
        "extrakt",
        "facka",
        "fajfka",
        "fakulta",
        "fanatik",
        "fantazie",
        "farmacie",
        "favorit",
        "fazole",
        "federace",
        "fejeton",
        "fenka",
        "fialka",
        "figurant",
        "filozof",
        "filtr",
        "finance",
        "finta",
        "fixace",
        "fjord",
        "flanel",
        "flirt",
        "flotila",
        "fond",
        "fosfor",
        "fotbal",
        "fotka",
        "foton",
        "frakce",
        "freska",
        "fronta",
        "fukar",
        "funkce",
        "fyzika",
        "galeje",
        "garant",
        "genetika",
        "geolog",
        "gilotina",
        "glazura",
        "glejt",
        "golem",
        "golfista",
        "gotika",
        "graf",
        "gramofon",
        "granule",
        "grep",
        "gril",
        "grog",
        "groteska",
        "guma",
        "hadice",
        "hadr",
        "hala",
        "halenka",
        "hanba",
        "hanopis",
        "harfa",
        "harpuna",
        "havran",
        "hebkost",
        "hejkal",
        "hejno",
        "hejtman",
        "hektar",
        "helma",
        "hematom",
        "herec",
        "herna",
        "heslo",
        "hezky",
        "historik",
        "hladovka",
        "hlasivky",
        "hlava",
        "hledat",
        "hlen",
        "hlodavec",
        "hloh",
        "hloupost",
        "hltat",
        "hlubina",
        "hluchota",
        "hmat",
        "hmota",
        "hmyz",
        "hnis",
        "hnojivo",
        "hnout",
        "hoblina",
        "hoboj",
        "hoch",
        "hodiny",
        "hodlat",
        "hodnota",
        "hodovat",
        "hojnost",
        "hokej",
        "holinka",
        "holka",
        "holub",
        "homole",
        "honitba",
        "honorace",
        "horal",
        "horda",
        "horizont",
        "horko",
        "horlivec",
        "hormon",
        "hornina",
        "horoskop",
        "horstvo",
        "hospoda",
        "hostina",
        "hotovost",
        "houba",
        "houf",
        "houpat",
        "houska",
        "hovor",
        "hradba",
        "hranice",
        "hravost",
        "hrazda",
        "hrbolek",
        "hrdina",
        "hrdlo",
        "hrdost",
        "hrnek",
        "hrobka",
        "hromada",
        "hrot",
        "hrouda",
        "hrozen",
        "hrstka",
        "hrubost",
        "hryzat",
        "hubenost",
        "hubnout",
        "hudba",
        "hukot",
        "humr",
        "husita",
        "hustota",
        "hvozd",
        "hybnost",
        "hydrant",
        "hygiena",
        "hymna",
        "hysterik",
        "idylka",
        "ihned",
        "ikona",
        "iluze",
        "imunita",
        "infekce",
        "inflace",
        "inkaso",
        "inovace",
        "inspekce",
        "internet",
        "invalida",
        "investor",
        "inzerce",
        "ironie",
        "jablko",
        "jachta",
        "jahoda",
        "jakmile",
        "jakost",
        "jalovec",
        "jantar",
        "jarmark",
        "jaro",
        "jasan",
        "jasno",
        "jatka",
        "javor",
        "jazyk",
        "jedinec",
        "jedle",
        "jednatel",
        "jehlan",
        "jekot",
        "jelen",
        "jelito",
        "jemnost",
        "jenom",
        "jepice",
        "jeseter",
        "jevit",
        "jezdec",
        "jezero",
        "jinak",
        "jindy",
        "jinoch",
        "jiskra",
        "jistota",
        "jitrnice",
        "jizva",
        "jmenovat",
        "jogurt",
        "jurta",
        "kabaret",
        "kabel",
        "kabinet",
        "kachna",
        "kadet",
        "kadidlo",
        "kahan",
        "kajak",
        "kajuta",
        "kakao",
        "kaktus",
        "kalamita",
        "kalhoty",
        "kalibr",
        "kalnost",
        "kamera",
        "kamkoliv",
        "kamna",
        "kanibal",
        "kanoe",
        "kantor",
        "kapalina",
        "kapela",
        "kapitola",
        "kapka",
        "kaple",
        "kapota",
        "kapr",
        "kapusta",
        "kapybara",
        "karamel",
        "karotka",
        "karton",
        "kasa",
        "katalog",
        "katedra",
        "kauce",
        "kauza",
        "kavalec",
        "kazajka",
        "kazeta",
        "kazivost",
        "kdekoliv",
        "kdesi",
        "kedluben",
        "kemp",
        "keramika",
        "kino",
        "klacek",
        "kladivo",
        "klam",
        "klapot",
        "klasika",
        "klaun",
        "klec",
        "klenba",
        "klepat",
        "klesnout",
        "klid",
        "klima",
        "klisna",
        "klobouk",
        "klokan",
        "klopa",
        "kloub",
        "klubovna",
        "klusat",
        "kluzkost",
        "kmen",
        "kmitat",
        "kmotr",
        "kniha",
        "knot",
        "koalice",
        "koberec",
        "kobka",
        "kobliha",
        "kobyla",
        "kocour",
        "kohout",
        "kojenec",
        "kokos",
        "koktejl",
        "kolaps",
        "koleda",
        "kolize",
        "kolo",
        "komando",
        "kometa",
        "komik",
        "komnata",
        "komora",
        "kompas",
        "komunita",
        "konat",
        "koncept",
        "kondice",
        "konec",
        "konfese",
        "kongres",
        "konina",
        "konkurs",
        "kontakt",
        "konzerva",
        "kopanec",
        "kopie",
        "kopnout",
        "koprovka",
        "korbel",
        "korektor",
        "kormidlo",
        "koroptev",
        "korpus",
        "koruna",
        "koryto",
        "korzet",
        "kosatec",
        "kostka",
        "kotel",
        "kotleta",
        "kotoul",
        "koukat",
        "koupelna",
        "kousek",
        "kouzlo",
        "kovboj",
        "koza",
        "kozoroh",
        "krabice",
        "krach",
        "krajina",
        "kralovat",
        "krasopis",
        "kravata",
        "kredit",
        "krejcar",
        "kresba",
        "kreveta",
        "kriket",
        "kritik",
        "krize",
        "krkavec",
        "krmelec",
        "krmivo",
        "krocan",
        "krok",
        "kronika",
        "kropit",
        "kroupa",
        "krovka",
        "krtek",
        "kruhadlo",
        "krupice",
        "krutost",
        "krvinka",
        "krychle",
        "krypta",
        "krystal",
        "kryt",
        "kudlanka",
        "kufr",
        "kujnost",
        "kukla",
        "kulajda",
        "kulich",
        "kulka",
        "kulomet",
        "kultura",
        "kuna",
        "kupodivu",
        "kurt",
        "kurzor",
        "kutil",
        "kvalita",
        "kvasinka",
        "kvestor",
        "kynolog",
        "kyselina",
        "kytara",
        "kytice",
        "kytka",
        "kytovec",
        "kyvadlo",
        "labrador",
        "lachtan",
        "ladnost",
        "laik",
        "lakomec",
        "lamela",
        "lampa",
        "lanovka",
        "lasice",
        "laso",
        "lastura",
        "latinka",
        "lavina",
        "lebka",
        "leckdy",
        "leden",
        "lednice",
        "ledovka",
        "ledvina",
        "legenda",
        "legie",
        "legrace",
        "lehce",
        "lehkost",
        "lehnout",
        "lektvar",
        "lenochod",
        "lentilka",
        "lepenka",
        "lepidlo",
        "letadlo",
        "letec",
        "letmo",
        "letokruh",
        "levhart",
        "levitace",
        "levobok",
        "libra",
        "lichotka",
        "lidojed",
        "lidskost",
        "lihovina",
        "lijavec",
        "lilek",
        "limetka",
        "linie",
        "linka",
        "linoleum",
        "listopad",
        "litina",
        "litovat",
        "lobista",
        "lodivod",
        "logika",
        "logoped",
        "lokalita",
        "loket",
        "lomcovat",
        "lopata",
        "lopuch",
        "lord",
        "losos",
        "lotr",
        "loudal",
        "louh",
        "louka",
        "louskat",
        "lovec",
        "lstivost",
        "lucerna",
        "lucifer",
        "lump",
        "lusk",
        "lustrace",
        "lvice",
        "lyra",
        "lyrika",
        "lysina",
        "madam",
        "madlo",
        "magistr",
        "mahagon",
        "majetek",
        "majitel",
        "majorita",
        "makak",
        "makovice",
        "makrela",
        "malba",
        "malina",
        "malovat",
        "malvice",
        "maminka",
        "mandle",
        "manko",
        "marnost",
        "masakr",
        "maskot",
        "masopust",
        "matice",
        "matrika",
        "maturita",
        "mazanec",
        "mazivo",
        "mazlit",
        "mazurka",
        "mdloba",
        "mechanik",
        "meditace",
        "medovina",
        "melasa",
        "meloun",
        "mentolka",
        "metla",
        "metoda",
        "metr",
        "mezera",
        "migrace",
        "mihnout",
        "mihule",
        "mikina",
        "mikrofon",
        "milenec",
        "milimetr",
        "milost",
        "mimika",
        "mincovna",
        "minibar",
        "minomet",
        "minulost",
        "miska",
        "mistr",
        "mixovat",
        "mladost",
        "mlha",
        "mlhovina",
        "mlok",
        "mlsat",
        "mluvit",
        "mnich",
        "mnohem",
        "mobil",
        "mocnost",
        "modelka",
        "modlitba",
        "mohyla",
        "mokro",
        "molekula",
        "momentka",
        "monarcha",
        "monokl",
        "monstrum",
        "montovat",
        "monzun",
        "mosaz",
        "moskyt",
        "most",
        "motivace",
        "motorka",
        "motyka",
        "moucha",
        "moudrost",
        "mozaika",
        "mozek",
        "mozol",
        "mramor",
        "mravenec",
        "mrkev",
        "mrtvola",
        "mrzet",
        "mrzutost",
        "mstitel",
        "mudrc",
        "muflon",
        "mulat",
        "mumie",
        "munice",
        "muset",
        "mutace",
        "muzeum",
        "muzikant",
        "myslivec",
        "mzda",
        "nabourat",
        "nachytat",
        "nadace",
        "nadbytek",
        "nadhoz",
        "nadobro",
        "nadpis",
        "nahlas",
        "nahnat",
        "nahodile",
        "nahradit",
        "naivita",
        "najednou",
        "najisto",
        "najmout",
        "naklonit",
        "nakonec",
        "nakrmit",
        "nalevo",
        "namazat",
        "namluvit",
        "nanometr",
        "naoko",
        "naopak",
        "naostro",
        "napadat",
        "napevno",
        "naplnit",
        "napnout",
        "naposled",
        "naprosto",
        "narodit",
        "naruby",
        "narychlo",
        "nasadit",
        "nasekat",
        "naslepo",
        "nastat",
        "natolik",
        "navenek",
        "navrch",
        "navzdory",
        "nazvat",
        "nebe",
        "nechat",
        "necky",
        "nedaleko",
        "nedbat",
        "neduh",
        "negace",
        "nehet",
        "nehoda",
        "nejen",
        "nejprve",
        "neklid",
        "nelibost",
        "nemilost",
        "nemoc",
        "neochota",
        "neonka",
        "nepokoj",
        "nerost",
        "nerv",
        "nesmysl",
        "nesoulad",
        "netvor",
        "neuron",
        "nevina",
        "nezvykle",
        "nicota",
        "nijak",
        "nikam",
        "nikdy",
        "nikl",
        "nikterak",
        "nitro",
        "nocleh",
        "nohavice",
        "nominace",
        "nora",
        "norek",
        "nositel",
        "nosnost",
        "nouze",
        "noviny",
        "novota",
        "nozdra",
        "nuda",
        "nudle",
        "nuget",
        "nutit",
        "nutnost",
        "nutrie",
        "nymfa",
        "obal",
        "obarvit",
        "obava",
        "obdiv",
        "obec",
        "obehnat",
        "obejmout",
        "obezita",
        "obhajoba",
        "obilnice",
        "objasnit",
        "objekt",
        "obklopit",
        "oblast",
        "oblek",
        "obliba",
        "obloha",
        "obluda",
        "obnos",
        "obohatit",
        "obojek",
        "obout",
        "obrazec",
        "obrna",
        "obruba",
        "obrys",
        "obsah",
        "obsluha",
        "obstarat",
        "obuv",
        "obvaz",
        "obvinit",
        "obvod",
        "obvykle",
        "obyvatel",
        "obzor",
        "ocas",
        "ocel",
        "ocenit",
        "ochladit",
        "ochota",
        "ochrana",
        "ocitnout",
        "odboj",
        "odbyt",
        "odchod",
        "odcizit",
        "odebrat",
        "odeslat",
        "odevzdat",
        "odezva",
        "odhadce",
        "odhodit",
        "odjet",
        "odjinud",
        "odkaz",
        "odkoupit",
        "odliv",
        "odluka",
        "odmlka",
        "odolnost",
        "odpad",
        "odpis",
        "odplout",
        "odpor",
        "odpustit",
        "odpykat",
        "odrazka",
        "odsoudit",
        "odstup",
        "odsun",
        "odtok",
        "odtud",
        "odvaha",
        "odveta",
        "odvolat",
        "odvracet",
        "odznak",
        "ofina",
        "ofsajd",
        "ohlas",
        "ohnisko",
        "ohrada",
        "ohrozit",
        "ohryzek",
        "okap",
        "okenice",
        "oklika",
        "okno",
        "okouzlit",
        "okovy",
        "okrasa",
        "okres",
        "okrsek",
        "okruh",
        "okupant",
        "okurka",
        "okusit",
        "olejnina",
        "olizovat",
        "omak",
        "omeleta",
        "omezit",
        "omladina",
        "omlouvat",
        "omluva",
        "omyl",
        "onehdy",
        "opakovat",
        "opasek",
        "operace",
        "opice",
        "opilost",
        "opisovat",
        "opora",
        "opozice",
        "opravdu",
        "oproti",
        "orbital",
        "orchestr",
        "orgie",
        "orlice",
        "orloj",
        "ortel",
        "osada",
        "oschnout",
        "osika",
        "osivo",
        "oslava",
        "oslepit",
        "oslnit",
        "oslovit",
        "osnova",
        "osoba",
        "osolit",
        "ospalec",
        "osten",
        "ostraha",
        "ostuda",
        "ostych",
        "osvojit",
        "oteplit",
        "otisk",
        "otop",
        "otrhat",
        "otrlost",
        "otrok",
        "otruby",
        "otvor",
        "ovanout",
        "ovar",
        "oves",
        "ovlivnit",
        "ovoce",
        "oxid",
        "ozdoba",
        "pachatel",
        "pacient",
        "padouch",
        "pahorek",
        "pakt",
        "palanda",
        "palec",
        "palivo",
        "paluba",
        "pamflet",
        "pamlsek",
        "panenka",
        "panika",
        "panna",
        "panovat",
        "panstvo",
        "pantofle",
        "paprika",
        "parketa",
        "parodie",
        "parta",
        "paruka",
        "paryba",
        "paseka",
        "pasivita",
        "pastelka",
        "patent",
        "patrona",
        "pavouk",
        "pazneht",
        "pazourek",
        "pecka",
        "pedagog",
        "pejsek",
        "peklo",
        "peloton",
        "penalta",
        "pendrek",
        "penze",
        "periskop",
        "pero",
        "pestrost",
        "petarda",
        "petice",
        "petrolej",
        "pevnina",
        "pexeso",
        "pianista",
        "piha",
        "pijavice",
        "pikle",
        "piknik",
        "pilina",
        "pilnost",
        "pilulka",
        "pinzeta",
        "pipeta",
        "pisatel",
        "pistole",
        "pitevna",
        "pivnice",
        "pivovar",
        "placenta",
        "plakat",
        "plamen",
        "planeta",
        "plastika",
        "platit",
        "plavidlo",
        "plaz",
        "plech",
        "plemeno",
        "plenta",
        "ples",
        "pletivo",
        "plevel",
        "plivat",
        "plnit",
        "plno",
        "plocha",
        "plodina",
        "plomba",
        "plout",
        "pluk",
        "plyn",
        "pobavit",
        "pobyt",
        "pochod",
        "pocit",
        "poctivec",
        "podat",
        "podcenit",
        "podepsat",
        "podhled",
        "podivit",
        "podklad",
        "podmanit",
        "podnik",
        "podoba",
        "podpora",
        "podraz",
        "podstata",
        "podvod",
        "podzim",
        "poezie",
        "pohanka",
        "pohnutka",
        "pohovor",
        "pohroma",
        "pohyb",
        "pointa",
        "pojistka",
        "pojmout",
        "pokazit",
        "pokles",
        "pokoj",
        "pokrok",
        "pokuta",
        "pokyn",
        "poledne",
        "polibek",
        "polknout",
        "poloha",
        "polynom",
        "pomalu",
        "pominout",
        "pomlka",
        "pomoc",
        "pomsta",
        "pomyslet",
        "ponechat",
        "ponorka",
        "ponurost",
        "popadat",
        "popel",
        "popisek",
        "poplach",
        "poprosit",
        "popsat",
        "popud",
        "poradce",
        "porce",
        "porod",
        "porucha",
        "poryv",
        "posadit",
        "posed",
        "posila",
        "poskok",
        "poslanec",
        "posoudit",
        "pospolu",
        "postava",
        "posudek",
        "posyp",
        "potah",
        "potkan",
        "potlesk",
        "potomek",
        "potrava",
        "potupa",
        "potvora",
        "poukaz",
        "pouto",
        "pouzdro",
        "povaha",
        "povidla",
        "povlak",
        "povoz",
        "povrch",
        "povstat",
        "povyk",
        "povzdech",
        "pozdrav",
        "pozemek",
        "poznatek",
        "pozor",
        "pozvat",
        "pracovat",
        "prahory",
        "praktika",
        "prales",
        "praotec",
        "praporek",
        "prase",
        "pravda",
        "princip",
        "prkno",
        "probudit",
        "procento",
        "prodej",
        "profese",
        "prohra",
        "projekt",
        "prolomit",
        "promile",
        "pronikat",
        "propad",
        "prorok",
        "prosba",
        "proton",
        "proutek",
        "provaz",
        "prskavka",
        "prsten",
        "prudkost",
        "prut",
        "prvek",
        "prvohory",
        "psanec",
        "psovod",
        "pstruh",
        "ptactvo",
        "puberta",
        "puch",
        "pudl",
        "pukavec",
        "puklina",
        "pukrle",
        "pult",
        "pumpa",
        "punc",
        "pupen",
        "pusa",
        "pusinka",
        "pustina",
        "putovat",
        "putyka",
        "pyramida",
        "pysk",
        "pytel",
        "racek",
        "rachot",
        "radiace",
        "radnice",
        "radon",
        "raft",
        "ragby",
        "raketa",
        "rakovina",
        "rameno",
        "rampouch",
        "rande",
        "rarach",
        "rarita",
        "rasovna",
        "rastr",
        "ratolest",
        "razance",
        "razidlo",
        "reagovat",
        "reakce",
        "recept",
        "redaktor",
        "referent",
        "reflex",
        "rejnok",
        "reklama",
        "rekord",
        "rekrut",
        "rektor",
        "reputace",
        "revize",
        "revma",
        "revolver",
        "rezerva",
        "riskovat",
        "riziko",
        "robotika",
        "rodokmen",
        "rohovka",
        "rokle",
        "rokoko",
        "romaneto",
        "ropovod",
        "ropucha",
        "rorejs",
        "rosol",
        "rostlina",
        "rotmistr",
        "rotoped",
        "rotunda",
        "roubenka",
        "roucho",
        "roup",
        "roura",
        "rovina",
        "rovnice",
        "rozbor",
        "rozchod",
        "rozdat",
        "rozeznat",
        "rozhodce",
        "rozinka",
        "rozjezd",
        "rozkaz",
        "rozloha",
        "rozmar",
        "rozpad",
        "rozruch",
        "rozsah",
        "roztok",
        "rozum",
        "rozvod",
        "rubrika",
        "ruchadlo",
        "rukavice",
        "rukopis",
        "ryba",
        "rybolov",
        "rychlost",
        "rydlo",
        "rypadlo",
        "rytina",
        "ryzost",
        "sadista",
        "sahat",
        "sako",
        "samec",
        "samizdat",
        "samota",
        "sanitka",
        "sardinka",
        "sasanka",
        "satelit",
        "sazba",
        "sazenice",
        "sbor",
        "schovat",
        "sebranka",
        "secese",
        "sedadlo",
        "sediment",
        "sedlo",
        "sehnat",
        "sejmout",
        "sekera",
        "sekta",
        "sekunda",
        "sekvoje",
        "semeno",
        "seno",
        "servis",
        "sesadit",
        "seshora",
        "seskok",
        "seslat",
        "sestra",
        "sesuv",
        "sesypat",
        "setba",
        "setina",
        "setkat",
        "setnout",
        "setrvat",
        "sever",
        "seznam",
        "shoda",
        "shrnout",
        "sifon",
        "silnice",
        "sirka",
        "sirotek",
        "sirup",
        "situace",
        "skafandr",
        "skalisko",
        "skanzen",
        "skaut",
        "skeptik",
        "skica",
        "skladba",
        "sklenice",
        "sklo",
        "skluz",
        "skoba",
        "skokan",
        "skoro",
        "skripta",
        "skrz",
        "skupina",
        "skvost",
        "skvrna",
        "slabika",
        "sladidlo",
        "slanina",
        "slast",
        "slavnost",
        "sledovat",
        "slepec",
        "sleva",
        "slezina",
        "slib",
        "slina",
        "sliznice",
        "slon",
        "sloupek",
        "slovo",
        "sluch",
        "sluha",
        "slunce",
        "slupka",
        "slza",
        "smaragd",
        "smetana",
        "smilstvo",
        "smlouva",
        "smog",
        "smrad",
        "smrk",
        "smrtka",
        "smutek",
        "smysl",
        "snad",
        "snaha",
        "snob",
        "sobota",
        "socha",
        "sodovka",
        "sokol",
        "sopka",
        "sotva",
        "souboj",
        "soucit",
        "soudce",
        "souhlas",
        "soulad",
        "soumrak",
        "souprava",
        "soused",
        "soutok",
        "souviset",
        "spalovna",
        "spasitel",
        "spis",
        "splav",
        "spodek",
        "spojenec",
        "spolu",
        "sponzor",
        "spornost",
        "spousta",
        "sprcha",
        "spustit",
        "sranda",
        "sraz",
        "srdce",
        "srna",
        "srnec",
        "srovnat",
        "srpen",
        "srst",
        "srub",
        "stanice",
        "starosta",
        "statika",
        "stavba",
        "stehno",
        "stezka",
        "stodola",
        "stolek",
        "stopa",
        "storno",
        "stoupat",
        "strach",
        "stres",
        "strhnout",
        "strom",
        "struna",
        "studna",
        "stupnice",
        "stvol",
        "styk",
        "subjekt",
        "subtropy",
        "suchar",
        "sudost",
        "sukno",
        "sundat",
        "sunout",
        "surikata",
        "surovina",
        "svah",
        "svalstvo",
        "svetr",
        "svatba",
        "svazek",
        "svisle",
        "svitek",
        "svoboda",
        "svodidlo",
        "svorka",
        "svrab",
        "sykavka",
        "sykot",
        "synek",
        "synovec",
        "sypat",
        "sypkost",
        "syrovost",
        "sysel",
        "sytost",
        "tabletka",
        "tabule",
        "tahoun",
        "tajemno",
        "tajfun",
        "tajga",
        "tajit",
        "tajnost",
        "taktika",
        "tamhle",
        "tampon",
        "tancovat",
        "tanec",
        "tanker",
        "tapeta",
        "tavenina",
        "tazatel",
        "technika",
        "tehdy",
        "tekutina",
        "telefon",
        "temnota",
        "tendence",
        "tenista",
        "tenor",
        "teplota",
        "tepna",
        "teprve",
        "terapie",
        "termoska",
        "textil",
        "ticho",
        "tiskopis",
        "titulek",
        "tkadlec",
        "tkanina",
        "tlapka",
        "tleskat",
        "tlukot",
        "tlupa",
        "tmel",
        "toaleta",
        "topinka",
        "topol",
        "torzo",
        "touha",
        "toulec",
        "tradice",
        "traktor",
        "tramp",
        "trasa",
        "traverza",
        "trefit",
        "trest",
        "trezor",
        "trhavina",
        "trhlina",
        "trochu",
        "trojice",
        "troska",
        "trouba",
        "trpce",
        "trpitel",
        "trpkost",
        "trubec",
        "truchlit",
        "truhlice",
        "trus",
        "trvat",
        "tudy",
        "tuhnout",
        "tuhost",
        "tundra",
        "turista",
        "turnaj",
        "tuzemsko",
        "tvaroh",
        "tvorba",
        "tvrdost",
        "tvrz",
        "tygr",
        "tykev",
        "ubohost",
        "uboze",
        "ubrat",
        "ubrousek",
        "ubrus",
        "ubytovna",
        "ucho",
        "uctivost",
        "udivit",
        "uhradit",
        "ujednat",
        "ujistit",
        "ujmout",
        "ukazatel",
        "uklidnit",
        "uklonit",
        "ukotvit",
        "ukrojit",
        "ulice",
        "ulita",
        "ulovit",
        "umyvadlo",
        "unavit",
        "uniforma",
        "uniknout",
        "upadnout",
        "uplatnit",
        "uplynout",
        "upoutat",
        "upravit",
        "uran",
        "urazit",
        "usednout",
        "usilovat",
        "usmrtit",
        "usnadnit",
        "usnout",
        "usoudit",
        "ustlat",
        "ustrnout",
        "utahovat",
        "utkat",
        "utlumit",
        "utonout",
        "utopenec",
        "utrousit",
        "uvalit",
        "uvolnit",
        "uvozovka",
        "uzdravit",
        "uzel",
        "uzenina",
        "uzlina",
        "uznat",
        "vagon",
        "valcha",
        "valoun",
        "vana",
        "vandal",
        "vanilka",
        "varan",
        "varhany",
        "varovat",
        "vcelku",
        "vchod",
        "vdova",
        "vedro",
        "vegetace",
        "vejce",
        "velbloud",
        "veletrh",
        "velitel",
        "velmoc",
        "velryba",
        "venkov",
        "veranda",
        "verze",
        "veselka",
        "veskrze",
        "vesnice",
        "vespodu",
        "vesta",
        "veterina",
        "veverka",
        "vibrace",
        "vichr",
        "videohra",
        "vidina",
        "vidle",
        "vila",
        "vinice",
        "viset",
        "vitalita",
        "vize",
        "vizitka",
        "vjezd",
        "vklad",
        "vkus",
        "vlajka",
        "vlak",
        "vlasec",
        "vlevo",
        "vlhkost",
        "vliv",
        "vlnovka",
        "vloupat",
        "vnucovat",
        "vnuk",
        "voda",
        "vodivost",
        "vodoznak",
        "vodstvo",
        "vojensky",
        "vojna",
        "vojsko",
        "volant",
        "volba",
        "volit",
        "volno",
        "voskovka",
        "vozidlo",
        "vozovna",
        "vpravo",
        "vrabec",
        "vracet",
        "vrah",
        "vrata",
        "vrba",
        "vrcholek",
        "vrhat",
        "vrstva",
        "vrtule",
        "vsadit",
        "vstoupit",
        "vstup",
        "vtip",
        "vybavit",
        "vybrat",
        "vychovat",
        "vydat",
        "vydra",
        "vyfotit",
        "vyhledat",
        "vyhnout",
        "vyhodit",
        "vyhradit",
        "vyhubit",
        "vyjasnit",
        "vyjet",
        "vyjmout",
        "vyklopit",
        "vykonat",
        "vylekat",
        "vymazat",
        "vymezit",
        "vymizet",
        "vymyslet",
        "vynechat",
        "vynikat",
        "vynutit",
        "vypadat",
        "vyplatit",
        "vypravit",
        "vypustit",
        "vyrazit",
        "vyrovnat",
        "vyrvat",
        "vyslovit",
        "vysoko",
        "vystavit",
        "vysunout",
        "vysypat",
        "vytasit",
        "vytesat",
        "vytratit",
        "vyvinout",
        "vyvolat",
        "vyvrhel",
        "vyzdobit",
        "vyznat",
        "vzadu",
        "vzbudit",
        "vzchopit",
        "vzdor",
        "vzduch",
        "vzdychat",
        "vzestup",
        "vzhledem",
        "vzkaz",
        "vzlykat",
        "vznik",
        "vzorek",
        "vzpoura",
        "vztah",
        "vztek",
        "xylofon",
        "zabrat",
        "zabydlet",
        "zachovat",
        "zadarmo",
        "zadusit",
        "zafoukat",
        "zahltit",
        "zahodit",
        "zahrada",
        "zahynout",
        "zajatec",
        "zajet",
        "zajistit",
        "zaklepat",
        "zakoupit",
        "zalepit",
        "zamezit",
        "zamotat",
        "zamyslet",
        "zanechat",
        "zanikat",
        "zaplatit",
        "zapojit",
        "zapsat",
        "zarazit",
        "zastavit",
        "zasunout",
        "zatajit",
        "zatemnit",
        "zatknout",
        "zaujmout",
        "zavalit",
        "zavelet",
        "zavinit",
        "zavolat",
        "zavrtat",
        "zazvonit",
        "zbavit",
        "zbrusu",
        "zbudovat",
        "zbytek",
        "zdaleka",
        "zdarma",
        "zdatnost",
        "zdivo",
        "zdobit",
        "zdroj",
        "zdvih",
        "zdymadlo",
        "zelenina",
        "zeman",
        "zemina",
        "zeptat",
        "zezadu",
        "zezdola",
        "zhatit",
        "zhltnout",
        "zhluboka",
        "zhotovit",
        "zhruba",
        "zima",
        "zimnice",
        "zjemnit",
        "zklamat",
        "zkoumat",
        "zkratka",
        "zkumavka",
        "zlato",
        "zlehka",
        "zloba",
        "zlom",
        "zlost",
        "zlozvyk",
        "zmapovat",
        "zmar",
        "zmatek",
        "zmije",
        "zmizet",
        "zmocnit",
        "zmodrat",
        "zmrzlina",
        "zmutovat",
        "znak",
        "znalost",
        "znamenat",
        "znovu",
        "zobrazit",
        "zotavit",
        "zoubek",
        "zoufale",
        "zplodit",
        "zpomalit",
        "zprava",
        "zprostit",
        "zprudka",
        "zprvu",
        "zrada",
        "zranit",
        "zrcadlo",
        "zrnitost",
        "zrno",
        "zrovna",
        "zrychlit",
        "zrzavost",
        "zticha",
        "ztratit",
        "zubovina",
        "zubr",
        "zvednout",
        "zvenku",
        "zvesela",
        "zvon",
        "zvrat",
        "zvukovod",
        "zvyk"
      ];
    }
  });

  // node_modules/bip39/src/wordlists/chinese_simplified.json
  var require_chinese_simplified = __commonJS({
    "node_modules/bip39/src/wordlists/chinese_simplified.json"(exports, module) {
      module.exports = [
        "\u7684",
        "\u4E00",
        "\u662F",
        "\u5728",
        "\u4E0D",
        "\u4E86",
        "\u6709",
        "\u548C",
        "\u4EBA",
        "\u8FD9",
        "\u4E2D",
        "\u5927",
        "\u4E3A",
        "\u4E0A",
        "\u4E2A",
        "\u56FD",
        "\u6211",
        "\u4EE5",
        "\u8981",
        "\u4ED6",
        "\u65F6",
        "\u6765",
        "\u7528",
        "\u4EEC",
        "\u751F",
        "\u5230",
        "\u4F5C",
        "\u5730",
        "\u4E8E",
        "\u51FA",
        "\u5C31",
        "\u5206",
        "\u5BF9",
        "\u6210",
        "\u4F1A",
        "\u53EF",
        "\u4E3B",
        "\u53D1",
        "\u5E74",
        "\u52A8",
        "\u540C",
        "\u5DE5",
        "\u4E5F",
        "\u80FD",
        "\u4E0B",
        "\u8FC7",
        "\u5B50",
        "\u8BF4",
        "\u4EA7",
        "\u79CD",
        "\u9762",
        "\u800C",
        "\u65B9",
        "\u540E",
        "\u591A",
        "\u5B9A",
        "\u884C",
        "\u5B66",
        "\u6CD5",
        "\u6240",
        "\u6C11",
        "\u5F97",
        "\u7ECF",
        "\u5341",
        "\u4E09",
        "\u4E4B",
        "\u8FDB",
        "\u7740",
        "\u7B49",
        "\u90E8",
        "\u5EA6",
        "\u5BB6",
        "\u7535",
        "\u529B",
        "\u91CC",
        "\u5982",
        "\u6C34",
        "\u5316",
        "\u9AD8",
        "\u81EA",
        "\u4E8C",
        "\u7406",
        "\u8D77",
        "\u5C0F",
        "\u7269",
        "\u73B0",
        "\u5B9E",
        "\u52A0",
        "\u91CF",
        "\u90FD",
        "\u4E24",
        "\u4F53",
        "\u5236",
        "\u673A",
        "\u5F53",
        "\u4F7F",
        "\u70B9",
        "\u4ECE",
        "\u4E1A",
        "\u672C",
        "\u53BB",
        "\u628A",
        "\u6027",
        "\u597D",
        "\u5E94",
        "\u5F00",
        "\u5B83",
        "\u5408",
        "\u8FD8",
        "\u56E0",
        "\u7531",
        "\u5176",
        "\u4E9B",
        "\u7136",
        "\u524D",
        "\u5916",
        "\u5929",
        "\u653F",
        "\u56DB",
        "\u65E5",
        "\u90A3",
        "\u793E",
        "\u4E49",
        "\u4E8B",
        "\u5E73",
        "\u5F62",
        "\u76F8",
        "\u5168",
        "\u8868",
        "\u95F4",
        "\u6837",
        "\u4E0E",
        "\u5173",
        "\u5404",
        "\u91CD",
        "\u65B0",
        "\u7EBF",
        "\u5185",
        "\u6570",
        "\u6B63",
        "\u5FC3",
        "\u53CD",
        "\u4F60",
        "\u660E",
        "\u770B",
        "\u539F",
        "\u53C8",
        "\u4E48",
        "\u5229",
        "\u6BD4",
        "\u6216",
        "\u4F46",
        "\u8D28",
        "\u6C14",
        "\u7B2C",
        "\u5411",
        "\u9053",
        "\u547D",
        "\u6B64",
        "\u53D8",
        "\u6761",
        "\u53EA",
        "\u6CA1",
        "\u7ED3",
        "\u89E3",
        "\u95EE",
        "\u610F",
        "\u5EFA",
        "\u6708",
        "\u516C",
        "\u65E0",
        "\u7CFB",
        "\u519B",
        "\u5F88",
        "\u60C5",
        "\u8005",
        "\u6700",
        "\u7ACB",
        "\u4EE3",
        "\u60F3",
        "\u5DF2",
        "\u901A",
        "\u5E76",
        "\u63D0",
        "\u76F4",
        "\u9898",
        "\u515A",
        "\u7A0B",
        "\u5C55",
        "\u4E94",
        "\u679C",
        "\u6599",
        "\u8C61",
        "\u5458",
        "\u9769",
        "\u4F4D",
        "\u5165",
        "\u5E38",
        "\u6587",
        "\u603B",
        "\u6B21",
        "\u54C1",
        "\u5F0F",
        "\u6D3B",
        "\u8BBE",
        "\u53CA",
        "\u7BA1",
        "\u7279",
        "\u4EF6",
        "\u957F",
        "\u6C42",
        "\u8001",
        "\u5934",
        "\u57FA",
        "\u8D44",
        "\u8FB9",
        "\u6D41",
        "\u8DEF",
        "\u7EA7",
        "\u5C11",
        "\u56FE",
        "\u5C71",
        "\u7EDF",
        "\u63A5",
        "\u77E5",
        "\u8F83",
        "\u5C06",
        "\u7EC4",
        "\u89C1",
        "\u8BA1",
        "\u522B",
        "\u5979",
        "\u624B",
        "\u89D2",
        "\u671F",
        "\u6839",
        "\u8BBA",
        "\u8FD0",
        "\u519C",
        "\u6307",
        "\u51E0",
        "\u4E5D",
        "\u533A",
        "\u5F3A",
        "\u653E",
        "\u51B3",
        "\u897F",
        "\u88AB",
        "\u5E72",
        "\u505A",
        "\u5FC5",
        "\u6218",
        "\u5148",
        "\u56DE",
        "\u5219",
        "\u4EFB",
        "\u53D6",
        "\u636E",
        "\u5904",
        "\u961F",
        "\u5357",
        "\u7ED9",
        "\u8272",
        "\u5149",
        "\u95E8",
        "\u5373",
        "\u4FDD",
        "\u6CBB",
        "\u5317",
        "\u9020",
        "\u767E",
        "\u89C4",
        "\u70ED",
        "\u9886",
        "\u4E03",
        "\u6D77",
        "\u53E3",
        "\u4E1C",
        "\u5BFC",
        "\u5668",
        "\u538B",
        "\u5FD7",
        "\u4E16",
        "\u91D1",
        "\u589E",
        "\u4E89",
        "\u6D4E",
        "\u9636",
        "\u6CB9",
        "\u601D",
        "\u672F",
        "\u6781",
        "\u4EA4",
        "\u53D7",
        "\u8054",
        "\u4EC0",
        "\u8BA4",
        "\u516D",
        "\u5171",
        "\u6743",
        "\u6536",
        "\u8BC1",
        "\u6539",
        "\u6E05",
        "\u7F8E",
        "\u518D",
        "\u91C7",
        "\u8F6C",
        "\u66F4",
        "\u5355",
        "\u98CE",
        "\u5207",
        "\u6253",
        "\u767D",
        "\u6559",
        "\u901F",
        "\u82B1",
        "\u5E26",
        "\u5B89",
        "\u573A",
        "\u8EAB",
        "\u8F66",
        "\u4F8B",
        "\u771F",
        "\u52A1",
        "\u5177",
        "\u4E07",
        "\u6BCF",
        "\u76EE",
        "\u81F3",
        "\u8FBE",
        "\u8D70",
        "\u79EF",
        "\u793A",
        "\u8BAE",
        "\u58F0",
        "\u62A5",
        "\u6597",
        "\u5B8C",
        "\u7C7B",
        "\u516B",
        "\u79BB",
        "\u534E",
        "\u540D",
        "\u786E",
        "\u624D",
        "\u79D1",
        "\u5F20",
        "\u4FE1",
        "\u9A6C",
        "\u8282",
        "\u8BDD",
        "\u7C73",
        "\u6574",
        "\u7A7A",
        "\u5143",
        "\u51B5",
        "\u4ECA",
        "\u96C6",
        "\u6E29",
        "\u4F20",
        "\u571F",
        "\u8BB8",
        "\u6B65",
        "\u7FA4",
        "\u5E7F",
        "\u77F3",
        "\u8BB0",
        "\u9700",
        "\u6BB5",
        "\u7814",
        "\u754C",
        "\u62C9",
        "\u6797",
        "\u5F8B",
        "\u53EB",
        "\u4E14",
        "\u7A76",
        "\u89C2",
        "\u8D8A",
        "\u7EC7",
        "\u88C5",
        "\u5F71",
        "\u7B97",
        "\u4F4E",
        "\u6301",
        "\u97F3",
        "\u4F17",
        "\u4E66",
        "\u5E03",
        "\u590D",
        "\u5BB9",
        "\u513F",
        "\u987B",
        "\u9645",
        "\u5546",
        "\u975E",
        "\u9A8C",
        "\u8FDE",
        "\u65AD",
        "\u6DF1",
        "\u96BE",
        "\u8FD1",
        "\u77FF",
        "\u5343",
        "\u5468",
        "\u59D4",
        "\u7D20",
        "\u6280",
        "\u5907",
        "\u534A",
        "\u529E",
        "\u9752",
        "\u7701",
        "\u5217",
        "\u4E60",
        "\u54CD",
        "\u7EA6",
        "\u652F",
        "\u822C",
        "\u53F2",
        "\u611F",
        "\u52B3",
        "\u4FBF",
        "\u56E2",
        "\u5F80",
        "\u9178",
        "\u5386",
        "\u5E02",
        "\u514B",
        "\u4F55",
        "\u9664",
        "\u6D88",
        "\u6784",
        "\u5E9C",
        "\u79F0",
        "\u592A",
        "\u51C6",
        "\u7CBE",
        "\u503C",
        "\u53F7",
        "\u7387",
        "\u65CF",
        "\u7EF4",
        "\u5212",
        "\u9009",
        "\u6807",
        "\u5199",
        "\u5B58",
        "\u5019",
        "\u6BDB",
        "\u4EB2",
        "\u5FEB",
        "\u6548",
        "\u65AF",
        "\u9662",
        "\u67E5",
        "\u6C5F",
        "\u578B",
        "\u773C",
        "\u738B",
        "\u6309",
        "\u683C",
        "\u517B",
        "\u6613",
        "\u7F6E",
        "\u6D3E",
        "\u5C42",
        "\u7247",
        "\u59CB",
        "\u5374",
        "\u4E13",
        "\u72B6",
        "\u80B2",
        "\u5382",
        "\u4EAC",
        "\u8BC6",
        "\u9002",
        "\u5C5E",
        "\u5706",
        "\u5305",
        "\u706B",
        "\u4F4F",
        "\u8C03",
        "\u6EE1",
        "\u53BF",
        "\u5C40",
        "\u7167",
        "\u53C2",
        "\u7EA2",
        "\u7EC6",
        "\u5F15",
        "\u542C",
        "\u8BE5",
        "\u94C1",
        "\u4EF7",
        "\u4E25",
        "\u9996",
        "\u5E95",
        "\u6DB2",
        "\u5B98",
        "\u5FB7",
        "\u968F",
        "\u75C5",
        "\u82CF",
        "\u5931",
        "\u5C14",
        "\u6B7B",
        "\u8BB2",
        "\u914D",
        "\u5973",
        "\u9EC4",
        "\u63A8",
        "\u663E",
        "\u8C08",
        "\u7F6A",
        "\u795E",
        "\u827A",
        "\u5462",
        "\u5E2D",
        "\u542B",
        "\u4F01",
        "\u671B",
        "\u5BC6",
        "\u6279",
        "\u8425",
        "\u9879",
        "\u9632",
        "\u4E3E",
        "\u7403",
        "\u82F1",
        "\u6C27",
        "\u52BF",
        "\u544A",
        "\u674E",
        "\u53F0",
        "\u843D",
        "\u6728",
        "\u5E2E",
        "\u8F6E",
        "\u7834",
        "\u4E9A",
        "\u5E08",
        "\u56F4",
        "\u6CE8",
        "\u8FDC",
        "\u5B57",
        "\u6750",
        "\u6392",
        "\u4F9B",
        "\u6CB3",
        "\u6001",
        "\u5C01",
        "\u53E6",
        "\u65BD",
        "\u51CF",
        "\u6811",
        "\u6EB6",
        "\u600E",
        "\u6B62",
        "\u6848",
        "\u8A00",
        "\u58EB",
        "\u5747",
        "\u6B66",
        "\u56FA",
        "\u53F6",
        "\u9C7C",
        "\u6CE2",
        "\u89C6",
        "\u4EC5",
        "\u8D39",
        "\u7D27",
        "\u7231",
        "\u5DE6",
        "\u7AE0",
        "\u65E9",
        "\u671D",
        "\u5BB3",
        "\u7EED",
        "\u8F7B",
        "\u670D",
        "\u8BD5",
        "\u98DF",
        "\u5145",
        "\u5175",
        "\u6E90",
        "\u5224",
        "\u62A4",
        "\u53F8",
        "\u8DB3",
        "\u67D0",
        "\u7EC3",
        "\u5DEE",
        "\u81F4",
        "\u677F",
        "\u7530",
        "\u964D",
        "\u9ED1",
        "\u72AF",
        "\u8D1F",
        "\u51FB",
        "\u8303",
        "\u7EE7",
        "\u5174",
        "\u4F3C",
        "\u4F59",
        "\u575A",
        "\u66F2",
        "\u8F93",
        "\u4FEE",
        "\u6545",
        "\u57CE",
        "\u592B",
        "\u591F",
        "\u9001",
        "\u7B14",
        "\u8239",
        "\u5360",
        "\u53F3",
        "\u8D22",
        "\u5403",
        "\u5BCC",
        "\u6625",
        "\u804C",
        "\u89C9",
        "\u6C49",
        "\u753B",
        "\u529F",
        "\u5DF4",
        "\u8DDF",
        "\u867D",
        "\u6742",
        "\u98DE",
        "\u68C0",
        "\u5438",
        "\u52A9",
        "\u5347",
        "\u9633",
        "\u4E92",
        "\u521D",
        "\u521B",
        "\u6297",
        "\u8003",
        "\u6295",
        "\u574F",
        "\u7B56",
        "\u53E4",
        "\u5F84",
        "\u6362",
        "\u672A",
        "\u8DD1",
        "\u7559",
        "\u94A2",
        "\u66FE",
        "\u7AEF",
        "\u8D23",
        "\u7AD9",
        "\u7B80",
        "\u8FF0",
        "\u94B1",
        "\u526F",
        "\u5C3D",
        "\u5E1D",
        "\u5C04",
        "\u8349",
        "\u51B2",
        "\u627F",
        "\u72EC",
        "\u4EE4",
        "\u9650",
        "\u963F",
        "\u5BA3",
        "\u73AF",
        "\u53CC",
        "\u8BF7",
        "\u8D85",
        "\u5FAE",
        "\u8BA9",
        "\u63A7",
        "\u5DDE",
        "\u826F",
        "\u8F74",
        "\u627E",
        "\u5426",
        "\u7EAA",
        "\u76CA",
        "\u4F9D",
        "\u4F18",
        "\u9876",
        "\u7840",
        "\u8F7D",
        "\u5012",
        "\u623F",
        "\u7A81",
        "\u5750",
        "\u7C89",
        "\u654C",
        "\u7565",
        "\u5BA2",
        "\u8881",
        "\u51B7",
        "\u80DC",
        "\u7EDD",
        "\u6790",
        "\u5757",
        "\u5242",
        "\u6D4B",
        "\u4E1D",
        "\u534F",
        "\u8BC9",
        "\u5FF5",
        "\u9648",
        "\u4ECD",
        "\u7F57",
        "\u76D0",
        "\u53CB",
        "\u6D0B",
        "\u9519",
        "\u82E6",
        "\u591C",
        "\u5211",
        "\u79FB",
        "\u9891",
        "\u9010",
        "\u9760",
        "\u6DF7",
        "\u6BCD",
        "\u77ED",
        "\u76AE",
        "\u7EC8",
        "\u805A",
        "\u6C7D",
        "\u6751",
        "\u4E91",
        "\u54EA",
        "\u65E2",
        "\u8DDD",
        "\u536B",
        "\u505C",
        "\u70C8",
        "\u592E",
        "\u5BDF",
        "\u70E7",
        "\u8FC5",
        "\u5883",
        "\u82E5",
        "\u5370",
        "\u6D32",
        "\u523B",
        "\u62EC",
        "\u6FC0",
        "\u5B54",
        "\u641E",
        "\u751A",
        "\u5BA4",
        "\u5F85",
        "\u6838",
        "\u6821",
        "\u6563",
        "\u4FB5",
        "\u5427",
        "\u7532",
        "\u6E38",
        "\u4E45",
        "\u83DC",
        "\u5473",
        "\u65E7",
        "\u6A21",
        "\u6E56",
        "\u8D27",
        "\u635F",
        "\u9884",
        "\u963B",
        "\u6BEB",
        "\u666E",
        "\u7A33",
        "\u4E59",
        "\u5988",
        "\u690D",
        "\u606F",
        "\u6269",
        "\u94F6",
        "\u8BED",
        "\u6325",
        "\u9152",
        "\u5B88",
        "\u62FF",
        "\u5E8F",
        "\u7EB8",
        "\u533B",
        "\u7F3A",
        "\u96E8",
        "\u5417",
        "\u9488",
        "\u5218",
        "\u554A",
        "\u6025",
        "\u5531",
        "\u8BEF",
        "\u8BAD",
        "\u613F",
        "\u5BA1",
        "\u9644",
        "\u83B7",
        "\u8336",
        "\u9C9C",
        "\u7CAE",
        "\u65A4",
        "\u5B69",
        "\u8131",
        "\u786B",
        "\u80A5",
        "\u5584",
        "\u9F99",
        "\u6F14",
        "\u7236",
        "\u6E10",
        "\u8840",
        "\u6B22",
        "\u68B0",
        "\u638C",
        "\u6B4C",
        "\u6C99",
        "\u521A",
        "\u653B",
        "\u8C13",
        "\u76FE",
        "\u8BA8",
        "\u665A",
        "\u7C92",
        "\u4E71",
        "\u71C3",
        "\u77DB",
        "\u4E4E",
        "\u6740",
        "\u836F",
        "\u5B81",
        "\u9C81",
        "\u8D35",
        "\u949F",
        "\u7164",
        "\u8BFB",
        "\u73ED",
        "\u4F2F",
        "\u9999",
        "\u4ECB",
        "\u8FEB",
        "\u53E5",
        "\u4E30",
        "\u57F9",
        "\u63E1",
        "\u5170",
        "\u62C5",
        "\u5F26",
        "\u86CB",
        "\u6C89",
        "\u5047",
        "\u7A7F",
        "\u6267",
        "\u7B54",
        "\u4E50",
        "\u8C01",
        "\u987A",
        "\u70DF",
        "\u7F29",
        "\u5F81",
        "\u8138",
        "\u559C",
        "\u677E",
        "\u811A",
        "\u56F0",
        "\u5F02",
        "\u514D",
        "\u80CC",
        "\u661F",
        "\u798F",
        "\u4E70",
        "\u67D3",
        "\u4E95",
        "\u6982",
        "\u6162",
        "\u6015",
        "\u78C1",
        "\u500D",
        "\u7956",
        "\u7687",
        "\u4FC3",
        "\u9759",
        "\u8865",
        "\u8BC4",
        "\u7FFB",
        "\u8089",
        "\u8DF5",
        "\u5C3C",
        "\u8863",
        "\u5BBD",
        "\u626C",
        "\u68C9",
        "\u5E0C",
        "\u4F24",
        "\u64CD",
        "\u5782",
        "\u79CB",
        "\u5B9C",
        "\u6C22",
        "\u5957",
        "\u7763",
        "\u632F",
        "\u67B6",
        "\u4EAE",
        "\u672B",
        "\u5BAA",
        "\u5E86",
        "\u7F16",
        "\u725B",
        "\u89E6",
        "\u6620",
        "\u96F7",
        "\u9500",
        "\u8BD7",
        "\u5EA7",
        "\u5C45",
        "\u6293",
        "\u88C2",
        "\u80DE",
        "\u547C",
        "\u5A18",
        "\u666F",
        "\u5A01",
        "\u7EFF",
        "\u6676",
        "\u539A",
        "\u76DF",
        "\u8861",
        "\u9E21",
        "\u5B59",
        "\u5EF6",
        "\u5371",
        "\u80F6",
        "\u5C4B",
        "\u4E61",
        "\u4E34",
        "\u9646",
        "\u987E",
        "\u6389",
        "\u5440",
        "\u706F",
        "\u5C81",
        "\u63AA",
        "\u675F",
        "\u8010",
        "\u5267",
        "\u7389",
        "\u8D75",
        "\u8DF3",
        "\u54E5",
        "\u5B63",
        "\u8BFE",
        "\u51EF",
        "\u80E1",
        "\u989D",
        "\u6B3E",
        "\u7ECD",
        "\u5377",
        "\u9F50",
        "\u4F1F",
        "\u84B8",
        "\u6B96",
        "\u6C38",
        "\u5B97",
        "\u82D7",
        "\u5DDD",
        "\u7089",
        "\u5CA9",
        "\u5F31",
        "\u96F6",
        "\u6768",
        "\u594F",
        "\u6CBF",
        "\u9732",
        "\u6746",
        "\u63A2",
        "\u6ED1",
        "\u9547",
        "\u996D",
        "\u6D53",
        "\u822A",
        "\u6000",
        "\u8D76",
        "\u5E93",
        "\u593A",
        "\u4F0A",
        "\u7075",
        "\u7A0E",
        "\u9014",
        "\u706D",
        "\u8D5B",
        "\u5F52",
        "\u53EC",
        "\u9F13",
        "\u64AD",
        "\u76D8",
        "\u88C1",
        "\u9669",
        "\u5EB7",
        "\u552F",
        "\u5F55",
        "\u83CC",
        "\u7EAF",
        "\u501F",
        "\u7CD6",
        "\u76D6",
        "\u6A2A",
        "\u7B26",
        "\u79C1",
        "\u52AA",
        "\u5802",
        "\u57DF",
        "\u67AA",
        "\u6DA6",
        "\u5E45",
        "\u54C8",
        "\u7ADF",
        "\u719F",
        "\u866B",
        "\u6CFD",
        "\u8111",
        "\u58E4",
        "\u78B3",
        "\u6B27",
        "\u904D",
        "\u4FA7",
        "\u5BE8",
        "\u6562",
        "\u5F7B",
        "\u8651",
        "\u659C",
        "\u8584",
        "\u5EAD",
        "\u7EB3",
        "\u5F39",
        "\u9972",
        "\u4F38",
        "\u6298",
        "\u9EA6",
        "\u6E7F",
        "\u6697",
        "\u8377",
        "\u74E6",
        "\u585E",
        "\u5E8A",
        "\u7B51",
        "\u6076",
        "\u6237",
        "\u8BBF",
        "\u5854",
        "\u5947",
        "\u900F",
        "\u6881",
        "\u5200",
        "\u65CB",
        "\u8FF9",
        "\u5361",
        "\u6C2F",
        "\u9047",
        "\u4EFD",
        "\u6BD2",
        "\u6CE5",
        "\u9000",
        "\u6D17",
        "\u6446",
        "\u7070",
        "\u5F69",
        "\u5356",
        "\u8017",
        "\u590F",
        "\u62E9",
        "\u5FD9",
        "\u94DC",
        "\u732E",
        "\u786C",
        "\u4E88",
        "\u7E41",
        "\u5708",
        "\u96EA",
        "\u51FD",
        "\u4EA6",
        "\u62BD",
        "\u7BC7",
        "\u9635",
        "\u9634",
        "\u4E01",
        "\u5C3A",
        "\u8FFD",
        "\u5806",
        "\u96C4",
        "\u8FCE",
        "\u6CDB",
        "\u7238",
        "\u697C",
        "\u907F",
        "\u8C0B",
        "\u5428",
        "\u91CE",
        "\u732A",
        "\u65D7",
        "\u7D2F",
        "\u504F",
        "\u5178",
        "\u9986",
        "\u7D22",
        "\u79E6",
        "\u8102",
        "\u6F6E",
        "\u7237",
        "\u8C46",
        "\u5FFD",
        "\u6258",
        "\u60CA",
        "\u5851",
        "\u9057",
        "\u6108",
        "\u6731",
        "\u66FF",
        "\u7EA4",
        "\u7C97",
        "\u503E",
        "\u5C1A",
        "\u75DB",
        "\u695A",
        "\u8C22",
        "\u594B",
        "\u8D2D",
        "\u78E8",
        "\u541B",
        "\u6C60",
        "\u65C1",
        "\u788E",
        "\u9AA8",
        "\u76D1",
        "\u6355",
        "\u5F1F",
        "\u66B4",
        "\u5272",
        "\u8D2F",
        "\u6B8A",
        "\u91CA",
        "\u8BCD",
        "\u4EA1",
        "\u58C1",
        "\u987F",
        "\u5B9D",
        "\u5348",
        "\u5C18",
        "\u95FB",
        "\u63ED",
        "\u70AE",
        "\u6B8B",
        "\u51AC",
        "\u6865",
        "\u5987",
        "\u8B66",
        "\u7EFC",
        "\u62DB",
        "\u5434",
        "\u4ED8",
        "\u6D6E",
        "\u906D",
        "\u5F90",
        "\u60A8",
        "\u6447",
        "\u8C37",
        "\u8D5E",
        "\u7BB1",
        "\u9694",
        "\u8BA2",
        "\u7537",
        "\u5439",
        "\u56ED",
        "\u7EB7",
        "\u5510",
        "\u8D25",
        "\u5B8B",
        "\u73BB",
        "\u5DE8",
        "\u8015",
        "\u5766",
        "\u8363",
        "\u95ED",
        "\u6E7E",
        "\u952E",
        "\u51E1",
        "\u9A7B",
        "\u9505",
        "\u6551",
        "\u6069",
        "\u5265",
        "\u51DD",
        "\u78B1",
        "\u9F7F",
        "\u622A",
        "\u70BC",
        "\u9EBB",
        "\u7EBA",
        "\u7981",
        "\u5E9F",
        "\u76DB",
        "\u7248",
        "\u7F13",
        "\u51C0",
        "\u775B",
        "\u660C",
        "\u5A5A",
        "\u6D89",
        "\u7B52",
        "\u5634",
        "\u63D2",
        "\u5CB8",
        "\u6717",
        "\u5E84",
        "\u8857",
        "\u85CF",
        "\u59D1",
        "\u8D38",
        "\u8150",
        "\u5974",
        "\u5566",
        "\u60EF",
        "\u4E58",
        "\u4F19",
        "\u6062",
        "\u5300",
        "\u7EB1",
        "\u624E",
        "\u8FA9",
        "\u8033",
        "\u5F6A",
        "\u81E3",
        "\u4EBF",
        "\u7483",
        "\u62B5",
        "\u8109",
        "\u79C0",
        "\u8428",
        "\u4FC4",
        "\u7F51",
        "\u821E",
        "\u5E97",
        "\u55B7",
        "\u7EB5",
        "\u5BF8",
        "\u6C57",
        "\u6302",
        "\u6D2A",
        "\u8D3A",
        "\u95EA",
        "\u67EC",
        "\u7206",
        "\u70EF",
        "\u6D25",
        "\u7A3B",
        "\u5899",
        "\u8F6F",
        "\u52C7",
        "\u50CF",
        "\u6EDA",
        "\u5398",
        "\u8499",
        "\u82B3",
        "\u80AF",
        "\u5761",
        "\u67F1",
        "\u8361",
        "\u817F",
        "\u4EEA",
        "\u65C5",
        "\u5C3E",
        "\u8F67",
        "\u51B0",
        "\u8D21",
        "\u767B",
        "\u9ECE",
        "\u524A",
        "\u94BB",
        "\u52D2",
        "\u9003",
        "\u969C",
        "\u6C28",
        "\u90ED",
        "\u5CF0",
        "\u5E01",
        "\u6E2F",
        "\u4F0F",
        "\u8F68",
        "\u4EA9",
        "\u6BD5",
        "\u64E6",
        "\u83AB",
        "\u523A",
        "\u6D6A",
        "\u79D8",
        "\u63F4",
        "\u682A",
        "\u5065",
        "\u552E",
        "\u80A1",
        "\u5C9B",
        "\u7518",
        "\u6CE1",
        "\u7761",
        "\u7AE5",
        "\u94F8",
        "\u6C64",
        "\u9600",
        "\u4F11",
        "\u6C47",
        "\u820D",
        "\u7267",
        "\u7ED5",
        "\u70B8",
        "\u54F2",
        "\u78F7",
        "\u7EE9",
        "\u670B",
        "\u6DE1",
        "\u5C16",
        "\u542F",
        "\u9677",
        "\u67F4",
        "\u5448",
        "\u5F92",
        "\u989C",
        "\u6CEA",
        "\u7A0D",
        "\u5FD8",
        "\u6CF5",
        "\u84DD",
        "\u62D6",
        "\u6D1E",
        "\u6388",
        "\u955C",
        "\u8F9B",
        "\u58EE",
        "\u950B",
        "\u8D2B",
        "\u865A",
        "\u5F2F",
        "\u6469",
        "\u6CF0",
        "\u5E7C",
        "\u5EF7",
        "\u5C0A",
        "\u7A97",
        "\u7EB2",
        "\u5F04",
        "\u96B6",
        "\u7591",
        "\u6C0F",
        "\u5BAB",
        "\u59D0",
        "\u9707",
        "\u745E",
        "\u602A",
        "\u5C24",
        "\u7434",
        "\u5FAA",
        "\u63CF",
        "\u819C",
        "\u8FDD",
        "\u5939",
        "\u8170",
        "\u7F18",
        "\u73E0",
        "\u7A77",
        "\u68EE",
        "\u679D",
        "\u7AF9",
        "\u6C9F",
        "\u50AC",
        "\u7EF3",
        "\u5FC6",
        "\u90A6",
        "\u5269",
        "\u5E78",
        "\u6D46",
        "\u680F",
        "\u62E5",
        "\u7259",
        "\u8D2E",
        "\u793C",
        "\u6EE4",
        "\u94A0",
        "\u7EB9",
        "\u7F62",
        "\u62CD",
        "\u54B1",
        "\u558A",
        "\u8896",
        "\u57C3",
        "\u52E4",
        "\u7F5A",
        "\u7126",
        "\u6F5C",
        "\u4F0D",
        "\u58A8",
        "\u6B32",
        "\u7F1D",
        "\u59D3",
        "\u520A",
        "\u9971",
        "\u4EFF",
        "\u5956",
        "\u94DD",
        "\u9B3C",
        "\u4E3D",
        "\u8DE8",
        "\u9ED8",
        "\u6316",
        "\u94FE",
        "\u626B",
        "\u559D",
        "\u888B",
        "\u70AD",
        "\u6C61",
        "\u5E55",
        "\u8BF8",
        "\u5F27",
        "\u52B1",
        "\u6885",
        "\u5976",
        "\u6D01",
        "\u707E",
        "\u821F",
        "\u9274",
        "\u82EF",
        "\u8BBC",
        "\u62B1",
        "\u6BC1",
        "\u61C2",
        "\u5BD2",
        "\u667A",
        "\u57D4",
        "\u5BC4",
        "\u5C4A",
        "\u8DC3",
        "\u6E21",
        "\u6311",
        "\u4E39",
        "\u8270",
        "\u8D1D",
        "\u78B0",
        "\u62D4",
        "\u7239",
        "\u6234",
        "\u7801",
        "\u68A6",
        "\u82BD",
        "\u7194",
        "\u8D64",
        "\u6E14",
        "\u54ED",
        "\u656C",
        "\u9897",
        "\u5954",
        "\u94C5",
        "\u4EF2",
        "\u864E",
        "\u7A00",
        "\u59B9",
        "\u4E4F",
        "\u73CD",
        "\u7533",
        "\u684C",
        "\u9075",
        "\u5141",
        "\u9686",
        "\u87BA",
        "\u4ED3",
        "\u9B4F",
        "\u9510",
        "\u6653",
        "\u6C2E",
        "\u517C",
        "\u9690",
        "\u788D",
        "\u8D6B",
        "\u62E8",
        "\u5FE0",
        "\u8083",
        "\u7F38",
        "\u7275",
        "\u62A2",
        "\u535A",
        "\u5DE7",
        "\u58F3",
        "\u5144",
        "\u675C",
        "\u8BAF",
        "\u8BDA",
        "\u78A7",
        "\u7965",
        "\u67EF",
        "\u9875",
        "\u5DE1",
        "\u77E9",
        "\u60B2",
        "\u704C",
        "\u9F84",
        "\u4F26",
        "\u7968",
        "\u5BFB",
        "\u6842",
        "\u94FA",
        "\u5723",
        "\u6050",
        "\u6070",
        "\u90D1",
        "\u8DA3",
        "\u62AC",
        "\u8352",
        "\u817E",
        "\u8D34",
        "\u67D4",
        "\u6EF4",
        "\u731B",
        "\u9614",
        "\u8F86",
        "\u59BB",
        "\u586B",
        "\u64A4",
        "\u50A8",
        "\u7B7E",
        "\u95F9",
        "\u6270",
        "\u7D2B",
        "\u7802",
        "\u9012",
        "\u620F",
        "\u540A",
        "\u9676",
        "\u4F10",
        "\u5582",
        "\u7597",
        "\u74F6",
        "\u5A46",
        "\u629A",
        "\u81C2",
        "\u6478",
        "\u5FCD",
        "\u867E",
        "\u8721",
        "\u90BB",
        "\u80F8",
        "\u5DE9",
        "\u6324",
        "\u5076",
        "\u5F03",
        "\u69FD",
        "\u52B2",
        "\u4E73",
        "\u9093",
        "\u5409",
        "\u4EC1",
        "\u70C2",
        "\u7816",
        "\u79DF",
        "\u4E4C",
        "\u8230",
        "\u4F34",
        "\u74DC",
        "\u6D45",
        "\u4E19",
        "\u6682",
        "\u71E5",
        "\u6A61",
        "\u67F3",
        "\u8FF7",
        "\u6696",
        "\u724C",
        "\u79E7",
        "\u80C6",
        "\u8BE6",
        "\u7C27",
        "\u8E0F",
        "\u74F7",
        "\u8C31",
        "\u5446",
        "\u5BBE",
        "\u7CCA",
        "\u6D1B",
        "\u8F89",
        "\u6124",
        "\u7ADE",
        "\u9699",
        "\u6012",
        "\u7C98",
        "\u4E43",
        "\u7EEA",
        "\u80A9",
        "\u7C4D",
        "\u654F",
        "\u6D82",
        "\u7199",
        "\u7686",
        "\u4FA6",
        "\u60AC",
        "\u6398",
        "\u4EAB",
        "\u7EA0",
        "\u9192",
        "\u72C2",
        "\u9501",
        "\u6DC0",
        "\u6068",
        "\u7272",
        "\u9738",
        "\u722C",
        "\u8D4F",
        "\u9006",
        "\u73A9",
        "\u9675",
        "\u795D",
        "\u79D2",
        "\u6D59",
        "\u8C8C",
        "\u5F79",
        "\u5F7C",
        "\u6089",
        "\u9E2D",
        "\u8D8B",
        "\u51E4",
        "\u6668",
        "\u755C",
        "\u8F88",
        "\u79E9",
        "\u5375",
        "\u7F72",
        "\u68AF",
        "\u708E",
        "\u6EE9",
        "\u68CB",
        "\u9A71",
        "\u7B5B",
        "\u5CE1",
        "\u5192",
        "\u5565",
        "\u5BFF",
        "\u8BD1",
        "\u6D78",
        "\u6CC9",
        "\u5E3D",
        "\u8FDF",
        "\u7845",
        "\u7586",
        "\u8D37",
        "\u6F0F",
        "\u7A3F",
        "\u51A0",
        "\u5AE9",
        "\u80C1",
        "\u82AF",
        "\u7262",
        "\u53DB",
        "\u8680",
        "\u5965",
        "\u9E23",
        "\u5CAD",
        "\u7F8A",
        "\u51ED",
        "\u4E32",
        "\u5858",
        "\u7ED8",
        "\u9175",
        "\u878D",
        "\u76C6",
        "\u9521",
        "\u5E99",
        "\u7B79",
        "\u51BB",
        "\u8F85",
        "\u6444",
        "\u88AD",
        "\u7B4B",
        "\u62D2",
        "\u50DA",
        "\u65F1",
        "\u94BE",
        "\u9E1F",
        "\u6F06",
        "\u6C88",
        "\u7709",
        "\u758F",
        "\u6DFB",
        "\u68D2",
        "\u7A57",
        "\u785D",
        "\u97E9",
        "\u903C",
        "\u626D",
        "\u4FA8",
        "\u51C9",
        "\u633A",
        "\u7897",
        "\u683D",
        "\u7092",
        "\u676F",
        "\u60A3",
        "\u998F",
        "\u529D",
        "\u8C6A",
        "\u8FBD",
        "\u52C3",
        "\u9E3F",
        "\u65E6",
        "\u540F",
        "\u62DC",
        "\u72D7",
        "\u57CB",
        "\u8F8A",
        "\u63A9",
        "\u996E",
        "\u642C",
        "\u9A82",
        "\u8F9E",
        "\u52FE",
        "\u6263",
        "\u4F30",
        "\u848B",
        "\u7ED2",
        "\u96FE",
        "\u4E08",
        "\u6735",
        "\u59C6",
        "\u62DF",
        "\u5B87",
        "\u8F91",
        "\u9655",
        "\u96D5",
        "\u507F",
        "\u84C4",
        "\u5D07",
        "\u526A",
        "\u5021",
        "\u5385",
        "\u54AC",
        "\u9A76",
        "\u85AF",
        "\u5237",
        "\u65A5",
        "\u756A",
        "\u8D4B",
        "\u5949",
        "\u4F5B",
        "\u6D47",
        "\u6F2B",
        "\u66FC",
        "\u6247",
        "\u9499",
        "\u6843",
        "\u6276",
        "\u4ED4",
        "\u8FD4",
        "\u4FD7",
        "\u4E8F",
        "\u8154",
        "\u978B",
        "\u68F1",
        "\u8986",
        "\u6846",
        "\u6084",
        "\u53D4",
        "\u649E",
        "\u9A97",
        "\u52D8",
        "\u65FA",
        "\u6CB8",
        "\u5B64",
        "\u5410",
        "\u5B5F",
        "\u6E20",
        "\u5C48",
        "\u75BE",
        "\u5999",
        "\u60DC",
        "\u4EF0",
        "\u72E0",
        "\u80C0",
        "\u8C10",
        "\u629B",
        "\u9709",
        "\u6851",
        "\u5C97",
        "\u561B",
        "\u8870",
        "\u76D7",
        "\u6E17",
        "\u810F",
        "\u8D56",
        "\u6D8C",
        "\u751C",
        "\u66F9",
        "\u9605",
        "\u808C",
        "\u54E9",
        "\u5389",
        "\u70C3",
        "\u7EAC",
        "\u6BC5",
        "\u6628",
        "\u4F2A",
        "\u75C7",
        "\u716E",
        "\u53F9",
        "\u9489",
        "\u642D",
        "\u830E",
        "\u7B3C",
        "\u9177",
        "\u5077",
        "\u5F13",
        "\u9525",
        "\u6052",
        "\u6770",
        "\u5751",
        "\u9F3B",
        "\u7FFC",
        "\u7EB6",
        "\u53D9",
        "\u72F1",
        "\u902E",
        "\u7F50",
        "\u7EDC",
        "\u68DA",
        "\u6291",
        "\u81A8",
        "\u852C",
        "\u5BFA",
        "\u9AA4",
        "\u7A46",
        "\u51B6",
        "\u67AF",
        "\u518C",
        "\u5C38",
        "\u51F8",
        "\u7EC5",
        "\u576F",
        "\u727A",
        "\u7130",
        "\u8F70",
        "\u6B23",
        "\u664B",
        "\u7626",
        "\u5FA1",
        "\u952D",
        "\u9526",
        "\u4E27",
        "\u65EC",
        "\u953B",
        "\u5784",
        "\u641C",
        "\u6251",
        "\u9080",
        "\u4EAD",
        "\u916F",
        "\u8FC8",
        "\u8212",
        "\u8106",
        "\u9176",
        "\u95F2",
        "\u5FE7",
        "\u915A",
        "\u987D",
        "\u7FBD",
        "\u6DA8",
        "\u5378",
        "\u4ED7",
        "\u966A",
        "\u8F9F",
        "\u60E9",
        "\u676D",
        "\u59DA",
        "\u809A",
        "\u6349",
        "\u98D8",
        "\u6F02",
        "\u6606",
        "\u6B3A",
        "\u543E",
        "\u90CE",
        "\u70F7",
        "\u6C41",
        "\u5475",
        "\u9970",
        "\u8427",
        "\u96C5",
        "\u90AE",
        "\u8FC1",
        "\u71D5",
        "\u6492",
        "\u59FB",
        "\u8D74",
        "\u5BB4",
        "\u70E6",
        "\u503A",
        "\u5E10",
        "\u6591",
        "\u94C3",
        "\u65E8",
        "\u9187",
        "\u8463",
        "\u997C",
        "\u96CF",
        "\u59FF",
        "\u62CC",
        "\u5085",
        "\u8179",
        "\u59A5",
        "\u63C9",
        "\u8D24",
        "\u62C6",
        "\u6B6A",
        "\u8461",
        "\u80FA",
        "\u4E22",
        "\u6D69",
        "\u5FBD",
        "\u6602",
        "\u57AB",
        "\u6321",
        "\u89C8",
        "\u8D2A",
        "\u6170",
        "\u7F34",
        "\u6C6A",
        "\u614C",
        "\u51AF",
        "\u8BFA",
        "\u59DC",
        "\u8C0A",
        "\u51F6",
        "\u52A3",
        "\u8BEC",
        "\u8000",
        "\u660F",
        "\u8EBA",
        "\u76C8",
        "\u9A91",
        "\u4E54",
        "\u6EAA",
        "\u4E1B",
        "\u5362",
        "\u62B9",
        "\u95F7",
        "\u54A8",
        "\u522E",
        "\u9A7E",
        "\u7F06",
        "\u609F",
        "\u6458",
        "\u94D2",
        "\u63B7",
        "\u9887",
        "\u5E7B",
        "\u67C4",
        "\u60E0",
        "\u60E8",
        "\u4F73",
        "\u4EC7",
        "\u814A",
        "\u7A9D",
        "\u6DA4",
        "\u5251",
        "\u77A7",
        "\u5821",
        "\u6CFC",
        "\u8471",
        "\u7F69",
        "\u970D",
        "\u635E",
        "\u80CE",
        "\u82CD",
        "\u6EE8",
        "\u4FE9",
        "\u6345",
        "\u6E58",
        "\u780D",
        "\u971E",
        "\u90B5",
        "\u8404",
        "\u75AF",
        "\u6DEE",
        "\u9042",
        "\u718A",
        "\u7CAA",
        "\u70D8",
        "\u5BBF",
        "\u6863",
        "\u6208",
        "\u9A73",
        "\u5AC2",
        "\u88D5",
        "\u5F99",
        "\u7BAD",
        "\u6350",
        "\u80A0",
        "\u6491",
        "\u6652",
        "\u8FA8",
        "\u6BBF",
        "\u83B2",
        "\u644A",
        "\u6405",
        "\u9171",
        "\u5C4F",
        "\u75AB",
        "\u54C0",
        "\u8521",
        "\u5835",
        "\u6CAB",
        "\u76B1",
        "\u7545",
        "\u53E0",
        "\u9601",
        "\u83B1",
        "\u6572",
        "\u8F96",
        "\u94A9",
        "\u75D5",
        "\u575D",
        "\u5DF7",
        "\u997F",
        "\u7978",
        "\u4E18",
        "\u7384",
        "\u6E9C",
        "\u66F0",
        "\u903B",
        "\u5F6D",
        "\u5C1D",
        "\u537F",
        "\u59A8",
        "\u8247",
        "\u541E",
        "\u97E6",
        "\u6028",
        "\u77EE",
        "\u6B47"
      ];
    }
  });

  // node_modules/bip39/src/wordlists/chinese_traditional.json
  var require_chinese_traditional = __commonJS({
    "node_modules/bip39/src/wordlists/chinese_traditional.json"(exports, module) {
      module.exports = [
        "\u7684",
        "\u4E00",
        "\u662F",
        "\u5728",
        "\u4E0D",
        "\u4E86",
        "\u6709",
        "\u548C",
        "\u4EBA",
        "\u9019",
        "\u4E2D",
        "\u5927",
        "\u70BA",
        "\u4E0A",
        "\u500B",
        "\u570B",
        "\u6211",
        "\u4EE5",
        "\u8981",
        "\u4ED6",
        "\u6642",
        "\u4F86",
        "\u7528",
        "\u5011",
        "\u751F",
        "\u5230",
        "\u4F5C",
        "\u5730",
        "\u65BC",
        "\u51FA",
        "\u5C31",
        "\u5206",
        "\u5C0D",
        "\u6210",
        "\u6703",
        "\u53EF",
        "\u4E3B",
        "\u767C",
        "\u5E74",
        "\u52D5",
        "\u540C",
        "\u5DE5",
        "\u4E5F",
        "\u80FD",
        "\u4E0B",
        "\u904E",
        "\u5B50",
        "\u8AAA",
        "\u7522",
        "\u7A2E",
        "\u9762",
        "\u800C",
        "\u65B9",
        "\u5F8C",
        "\u591A",
        "\u5B9A",
        "\u884C",
        "\u5B78",
        "\u6CD5",
        "\u6240",
        "\u6C11",
        "\u5F97",
        "\u7D93",
        "\u5341",
        "\u4E09",
        "\u4E4B",
        "\u9032",
        "\u8457",
        "\u7B49",
        "\u90E8",
        "\u5EA6",
        "\u5BB6",
        "\u96FB",
        "\u529B",
        "\u88E1",
        "\u5982",
        "\u6C34",
        "\u5316",
        "\u9AD8",
        "\u81EA",
        "\u4E8C",
        "\u7406",
        "\u8D77",
        "\u5C0F",
        "\u7269",
        "\u73FE",
        "\u5BE6",
        "\u52A0",
        "\u91CF",
        "\u90FD",
        "\u5169",
        "\u9AD4",
        "\u5236",
        "\u6A5F",
        "\u7576",
        "\u4F7F",
        "\u9EDE",
        "\u5F9E",
        "\u696D",
        "\u672C",
        "\u53BB",
        "\u628A",
        "\u6027",
        "\u597D",
        "\u61C9",
        "\u958B",
        "\u5B83",
        "\u5408",
        "\u9084",
        "\u56E0",
        "\u7531",
        "\u5176",
        "\u4E9B",
        "\u7136",
        "\u524D",
        "\u5916",
        "\u5929",
        "\u653F",
        "\u56DB",
        "\u65E5",
        "\u90A3",
        "\u793E",
        "\u7FA9",
        "\u4E8B",
        "\u5E73",
        "\u5F62",
        "\u76F8",
        "\u5168",
        "\u8868",
        "\u9593",
        "\u6A23",
        "\u8207",
        "\u95DC",
        "\u5404",
        "\u91CD",
        "\u65B0",
        "\u7DDA",
        "\u5167",
        "\u6578",
        "\u6B63",
        "\u5FC3",
        "\u53CD",
        "\u4F60",
        "\u660E",
        "\u770B",
        "\u539F",
        "\u53C8",
        "\u9EBC",
        "\u5229",
        "\u6BD4",
        "\u6216",
        "\u4F46",
        "\u8CEA",
        "\u6C23",
        "\u7B2C",
        "\u5411",
        "\u9053",
        "\u547D",
        "\u6B64",
        "\u8B8A",
        "\u689D",
        "\u53EA",
        "\u6C92",
        "\u7D50",
        "\u89E3",
        "\u554F",
        "\u610F",
        "\u5EFA",
        "\u6708",
        "\u516C",
        "\u7121",
        "\u7CFB",
        "\u8ECD",
        "\u5F88",
        "\u60C5",
        "\u8005",
        "\u6700",
        "\u7ACB",
        "\u4EE3",
        "\u60F3",
        "\u5DF2",
        "\u901A",
        "\u4E26",
        "\u63D0",
        "\u76F4",
        "\u984C",
        "\u9EE8",
        "\u7A0B",
        "\u5C55",
        "\u4E94",
        "\u679C",
        "\u6599",
        "\u8C61",
        "\u54E1",
        "\u9769",
        "\u4F4D",
        "\u5165",
        "\u5E38",
        "\u6587",
        "\u7E3D",
        "\u6B21",
        "\u54C1",
        "\u5F0F",
        "\u6D3B",
        "\u8A2D",
        "\u53CA",
        "\u7BA1",
        "\u7279",
        "\u4EF6",
        "\u9577",
        "\u6C42",
        "\u8001",
        "\u982D",
        "\u57FA",
        "\u8CC7",
        "\u908A",
        "\u6D41",
        "\u8DEF",
        "\u7D1A",
        "\u5C11",
        "\u5716",
        "\u5C71",
        "\u7D71",
        "\u63A5",
        "\u77E5",
        "\u8F03",
        "\u5C07",
        "\u7D44",
        "\u898B",
        "\u8A08",
        "\u5225",
        "\u5979",
        "\u624B",
        "\u89D2",
        "\u671F",
        "\u6839",
        "\u8AD6",
        "\u904B",
        "\u8FB2",
        "\u6307",
        "\u5E7E",
        "\u4E5D",
        "\u5340",
        "\u5F37",
        "\u653E",
        "\u6C7A",
        "\u897F",
        "\u88AB",
        "\u5E79",
        "\u505A",
        "\u5FC5",
        "\u6230",
        "\u5148",
        "\u56DE",
        "\u5247",
        "\u4EFB",
        "\u53D6",
        "\u64DA",
        "\u8655",
        "\u968A",
        "\u5357",
        "\u7D66",
        "\u8272",
        "\u5149",
        "\u9580",
        "\u5373",
        "\u4FDD",
        "\u6CBB",
        "\u5317",
        "\u9020",
        "\u767E",
        "\u898F",
        "\u71B1",
        "\u9818",
        "\u4E03",
        "\u6D77",
        "\u53E3",
        "\u6771",
        "\u5C0E",
        "\u5668",
        "\u58D3",
        "\u5FD7",
        "\u4E16",
        "\u91D1",
        "\u589E",
        "\u722D",
        "\u6FDF",
        "\u968E",
        "\u6CB9",
        "\u601D",
        "\u8853",
        "\u6975",
        "\u4EA4",
        "\u53D7",
        "\u806F",
        "\u4EC0",
        "\u8A8D",
        "\u516D",
        "\u5171",
        "\u6B0A",
        "\u6536",
        "\u8B49",
        "\u6539",
        "\u6E05",
        "\u7F8E",
        "\u518D",
        "\u63A1",
        "\u8F49",
        "\u66F4",
        "\u55AE",
        "\u98A8",
        "\u5207",
        "\u6253",
        "\u767D",
        "\u6559",
        "\u901F",
        "\u82B1",
        "\u5E36",
        "\u5B89",
        "\u5834",
        "\u8EAB",
        "\u8ECA",
        "\u4F8B",
        "\u771F",
        "\u52D9",
        "\u5177",
        "\u842C",
        "\u6BCF",
        "\u76EE",
        "\u81F3",
        "\u9054",
        "\u8D70",
        "\u7A4D",
        "\u793A",
        "\u8B70",
        "\u8072",
        "\u5831",
        "\u9B25",
        "\u5B8C",
        "\u985E",
        "\u516B",
        "\u96E2",
        "\u83EF",
        "\u540D",
        "\u78BA",
        "\u624D",
        "\u79D1",
        "\u5F35",
        "\u4FE1",
        "\u99AC",
        "\u7BC0",
        "\u8A71",
        "\u7C73",
        "\u6574",
        "\u7A7A",
        "\u5143",
        "\u6CC1",
        "\u4ECA",
        "\u96C6",
        "\u6EAB",
        "\u50B3",
        "\u571F",
        "\u8A31",
        "\u6B65",
        "\u7FA4",
        "\u5EE3",
        "\u77F3",
        "\u8A18",
        "\u9700",
        "\u6BB5",
        "\u7814",
        "\u754C",
        "\u62C9",
        "\u6797",
        "\u5F8B",
        "\u53EB",
        "\u4E14",
        "\u7A76",
        "\u89C0",
        "\u8D8A",
        "\u7E54",
        "\u88DD",
        "\u5F71",
        "\u7B97",
        "\u4F4E",
        "\u6301",
        "\u97F3",
        "\u773E",
        "\u66F8",
        "\u5E03",
        "\u590D",
        "\u5BB9",
        "\u5152",
        "\u9808",
        "\u969B",
        "\u5546",
        "\u975E",
        "\u9A57",
        "\u9023",
        "\u65B7",
        "\u6DF1",
        "\u96E3",
        "\u8FD1",
        "\u7926",
        "\u5343",
        "\u9031",
        "\u59D4",
        "\u7D20",
        "\u6280",
        "\u5099",
        "\u534A",
        "\u8FA6",
        "\u9752",
        "\u7701",
        "\u5217",
        "\u7FD2",
        "\u97FF",
        "\u7D04",
        "\u652F",
        "\u822C",
        "\u53F2",
        "\u611F",
        "\u52DE",
        "\u4FBF",
        "\u5718",
        "\u5F80",
        "\u9178",
        "\u6B77",
        "\u5E02",
        "\u514B",
        "\u4F55",
        "\u9664",
        "\u6D88",
        "\u69CB",
        "\u5E9C",
        "\u7A31",
        "\u592A",
        "\u6E96",
        "\u7CBE",
        "\u503C",
        "\u865F",
        "\u7387",
        "\u65CF",
        "\u7DAD",
        "\u5283",
        "\u9078",
        "\u6A19",
        "\u5BEB",
        "\u5B58",
        "\u5019",
        "\u6BDB",
        "\u89AA",
        "\u5FEB",
        "\u6548",
        "\u65AF",
        "\u9662",
        "\u67E5",
        "\u6C5F",
        "\u578B",
        "\u773C",
        "\u738B",
        "\u6309",
        "\u683C",
        "\u990A",
        "\u6613",
        "\u7F6E",
        "\u6D3E",
        "\u5C64",
        "\u7247",
        "\u59CB",
        "\u537B",
        "\u5C08",
        "\u72C0",
        "\u80B2",
        "\u5EE0",
        "\u4EAC",
        "\u8B58",
        "\u9069",
        "\u5C6C",
        "\u5713",
        "\u5305",
        "\u706B",
        "\u4F4F",
        "\u8ABF",
        "\u6EFF",
        "\u7E23",
        "\u5C40",
        "\u7167",
        "\u53C3",
        "\u7D05",
        "\u7D30",
        "\u5F15",
        "\u807D",
        "\u8A72",
        "\u9435",
        "\u50F9",
        "\u56B4",
        "\u9996",
        "\u5E95",
        "\u6DB2",
        "\u5B98",
        "\u5FB7",
        "\u96A8",
        "\u75C5",
        "\u8607",
        "\u5931",
        "\u723E",
        "\u6B7B",
        "\u8B1B",
        "\u914D",
        "\u5973",
        "\u9EC3",
        "\u63A8",
        "\u986F",
        "\u8AC7",
        "\u7F6A",
        "\u795E",
        "\u85DD",
        "\u5462",
        "\u5E2D",
        "\u542B",
        "\u4F01",
        "\u671B",
        "\u5BC6",
        "\u6279",
        "\u71DF",
        "\u9805",
        "\u9632",
        "\u8209",
        "\u7403",
        "\u82F1",
        "\u6C27",
        "\u52E2",
        "\u544A",
        "\u674E",
        "\u53F0",
        "\u843D",
        "\u6728",
        "\u5E6B",
        "\u8F2A",
        "\u7834",
        "\u4E9E",
        "\u5E2B",
        "\u570D",
        "\u6CE8",
        "\u9060",
        "\u5B57",
        "\u6750",
        "\u6392",
        "\u4F9B",
        "\u6CB3",
        "\u614B",
        "\u5C01",
        "\u53E6",
        "\u65BD",
        "\u6E1B",
        "\u6A39",
        "\u6EB6",
        "\u600E",
        "\u6B62",
        "\u6848",
        "\u8A00",
        "\u58EB",
        "\u5747",
        "\u6B66",
        "\u56FA",
        "\u8449",
        "\u9B5A",
        "\u6CE2",
        "\u8996",
        "\u50C5",
        "\u8CBB",
        "\u7DCA",
        "\u611B",
        "\u5DE6",
        "\u7AE0",
        "\u65E9",
        "\u671D",
        "\u5BB3",
        "\u7E8C",
        "\u8F15",
        "\u670D",
        "\u8A66",
        "\u98DF",
        "\u5145",
        "\u5175",
        "\u6E90",
        "\u5224",
        "\u8B77",
        "\u53F8",
        "\u8DB3",
        "\u67D0",
        "\u7DF4",
        "\u5DEE",
        "\u81F4",
        "\u677F",
        "\u7530",
        "\u964D",
        "\u9ED1",
        "\u72AF",
        "\u8CA0",
        "\u64CA",
        "\u8303",
        "\u7E7C",
        "\u8208",
        "\u4F3C",
        "\u9918",
        "\u5805",
        "\u66F2",
        "\u8F38",
        "\u4FEE",
        "\u6545",
        "\u57CE",
        "\u592B",
        "\u5920",
        "\u9001",
        "\u7B46",
        "\u8239",
        "\u4F54",
        "\u53F3",
        "\u8CA1",
        "\u5403",
        "\u5BCC",
        "\u6625",
        "\u8077",
        "\u89BA",
        "\u6F22",
        "\u756B",
        "\u529F",
        "\u5DF4",
        "\u8DDF",
        "\u96D6",
        "\u96DC",
        "\u98DB",
        "\u6AA2",
        "\u5438",
        "\u52A9",
        "\u6607",
        "\u967D",
        "\u4E92",
        "\u521D",
        "\u5275",
        "\u6297",
        "\u8003",
        "\u6295",
        "\u58DE",
        "\u7B56",
        "\u53E4",
        "\u5F91",
        "\u63DB",
        "\u672A",
        "\u8DD1",
        "\u7559",
        "\u92FC",
        "\u66FE",
        "\u7AEF",
        "\u8CAC",
        "\u7AD9",
        "\u7C21",
        "\u8FF0",
        "\u9322",
        "\u526F",
        "\u76E1",
        "\u5E1D",
        "\u5C04",
        "\u8349",
        "\u885D",
        "\u627F",
        "\u7368",
        "\u4EE4",
        "\u9650",
        "\u963F",
        "\u5BA3",
        "\u74B0",
        "\u96D9",
        "\u8ACB",
        "\u8D85",
        "\u5FAE",
        "\u8B93",
        "\u63A7",
        "\u5DDE",
        "\u826F",
        "\u8EF8",
        "\u627E",
        "\u5426",
        "\u7D00",
        "\u76CA",
        "\u4F9D",
        "\u512A",
        "\u9802",
        "\u790E",
        "\u8F09",
        "\u5012",
        "\u623F",
        "\u7A81",
        "\u5750",
        "\u7C89",
        "\u6575",
        "\u7565",
        "\u5BA2",
        "\u8881",
        "\u51B7",
        "\u52DD",
        "\u7D55",
        "\u6790",
        "\u584A",
        "\u5291",
        "\u6E2C",
        "\u7D72",
        "\u5354",
        "\u8A34",
        "\u5FF5",
        "\u9673",
        "\u4ECD",
        "\u7F85",
        "\u9E7D",
        "\u53CB",
        "\u6D0B",
        "\u932F",
        "\u82E6",
        "\u591C",
        "\u5211",
        "\u79FB",
        "\u983B",
        "\u9010",
        "\u9760",
        "\u6DF7",
        "\u6BCD",
        "\u77ED",
        "\u76AE",
        "\u7D42",
        "\u805A",
        "\u6C7D",
        "\u6751",
        "\u96F2",
        "\u54EA",
        "\u65E2",
        "\u8DDD",
        "\u885B",
        "\u505C",
        "\u70C8",
        "\u592E",
        "\u5BDF",
        "\u71D2",
        "\u8FC5",
        "\u5883",
        "\u82E5",
        "\u5370",
        "\u6D32",
        "\u523B",
        "\u62EC",
        "\u6FC0",
        "\u5B54",
        "\u641E",
        "\u751A",
        "\u5BA4",
        "\u5F85",
        "\u6838",
        "\u6821",
        "\u6563",
        "\u4FB5",
        "\u5427",
        "\u7532",
        "\u904A",
        "\u4E45",
        "\u83DC",
        "\u5473",
        "\u820A",
        "\u6A21",
        "\u6E56",
        "\u8CA8",
        "\u640D",
        "\u9810",
        "\u963B",
        "\u6BEB",
        "\u666E",
        "\u7A69",
        "\u4E59",
        "\u5ABD",
        "\u690D",
        "\u606F",
        "\u64F4",
        "\u9280",
        "\u8A9E",
        "\u63EE",
        "\u9152",
        "\u5B88",
        "\u62FF",
        "\u5E8F",
        "\u7D19",
        "\u91AB",
        "\u7F3A",
        "\u96E8",
        "\u55CE",
        "\u91DD",
        "\u5289",
        "\u554A",
        "\u6025",
        "\u5531",
        "\u8AA4",
        "\u8A13",
        "\u9858",
        "\u5BE9",
        "\u9644",
        "\u7372",
        "\u8336",
        "\u9BAE",
        "\u7CE7",
        "\u65A4",
        "\u5B69",
        "\u812B",
        "\u786B",
        "\u80A5",
        "\u5584",
        "\u9F8D",
        "\u6F14",
        "\u7236",
        "\u6F38",
        "\u8840",
        "\u6B61",
        "\u68B0",
        "\u638C",
        "\u6B4C",
        "\u6C99",
        "\u525B",
        "\u653B",
        "\u8B02",
        "\u76FE",
        "\u8A0E",
        "\u665A",
        "\u7C92",
        "\u4E82",
        "\u71C3",
        "\u77DB",
        "\u4E4E",
        "\u6BBA",
        "\u85E5",
        "\u5BE7",
        "\u9B6F",
        "\u8CB4",
        "\u9418",
        "\u7164",
        "\u8B80",
        "\u73ED",
        "\u4F2F",
        "\u9999",
        "\u4ECB",
        "\u8FEB",
        "\u53E5",
        "\u8C50",
        "\u57F9",
        "\u63E1",
        "\u862D",
        "\u64D4",
        "\u5F26",
        "\u86CB",
        "\u6C89",
        "\u5047",
        "\u7A7F",
        "\u57F7",
        "\u7B54",
        "\u6A02",
        "\u8AB0",
        "\u9806",
        "\u7159",
        "\u7E2E",
        "\u5FB5",
        "\u81C9",
        "\u559C",
        "\u677E",
        "\u8173",
        "\u56F0",
        "\u7570",
        "\u514D",
        "\u80CC",
        "\u661F",
        "\u798F",
        "\u8CB7",
        "\u67D3",
        "\u4E95",
        "\u6982",
        "\u6162",
        "\u6015",
        "\u78C1",
        "\u500D",
        "\u7956",
        "\u7687",
        "\u4FC3",
        "\u975C",
        "\u88DC",
        "\u8A55",
        "\u7FFB",
        "\u8089",
        "\u8E10",
        "\u5C3C",
        "\u8863",
        "\u5BEC",
        "\u63DA",
        "\u68C9",
        "\u5E0C",
        "\u50B7",
        "\u64CD",
        "\u5782",
        "\u79CB",
        "\u5B9C",
        "\u6C2B",
        "\u5957",
        "\u7763",
        "\u632F",
        "\u67B6",
        "\u4EAE",
        "\u672B",
        "\u61B2",
        "\u6176",
        "\u7DE8",
        "\u725B",
        "\u89F8",
        "\u6620",
        "\u96F7",
        "\u92B7",
        "\u8A69",
        "\u5EA7",
        "\u5C45",
        "\u6293",
        "\u88C2",
        "\u80DE",
        "\u547C",
        "\u5A18",
        "\u666F",
        "\u5A01",
        "\u7DA0",
        "\u6676",
        "\u539A",
        "\u76DF",
        "\u8861",
        "\u96DE",
        "\u5B6B",
        "\u5EF6",
        "\u5371",
        "\u81A0",
        "\u5C4B",
        "\u9109",
        "\u81E8",
        "\u9678",
        "\u9867",
        "\u6389",
        "\u5440",
        "\u71C8",
        "\u6B72",
        "\u63AA",
        "\u675F",
        "\u8010",
        "\u5287",
        "\u7389",
        "\u8D99",
        "\u8DF3",
        "\u54E5",
        "\u5B63",
        "\u8AB2",
        "\u51F1",
        "\u80E1",
        "\u984D",
        "\u6B3E",
        "\u7D39",
        "\u5377",
        "\u9F4A",
        "\u5049",
        "\u84B8",
        "\u6B96",
        "\u6C38",
        "\u5B97",
        "\u82D7",
        "\u5DDD",
        "\u7210",
        "\u5CA9",
        "\u5F31",
        "\u96F6",
        "\u694A",
        "\u594F",
        "\u6CBF",
        "\u9732",
        "\u687F",
        "\u63A2",
        "\u6ED1",
        "\u93AE",
        "\u98EF",
        "\u6FC3",
        "\u822A",
        "\u61F7",
        "\u8D95",
        "\u5EAB",
        "\u596A",
        "\u4F0A",
        "\u9748",
        "\u7A05",
        "\u9014",
        "\u6EC5",
        "\u8CFD",
        "\u6B78",
        "\u53EC",
        "\u9F13",
        "\u64AD",
        "\u76E4",
        "\u88C1",
        "\u96AA",
        "\u5EB7",
        "\u552F",
        "\u9304",
        "\u83CC",
        "\u7D14",
        "\u501F",
        "\u7CD6",
        "\u84CB",
        "\u6A6B",
        "\u7B26",
        "\u79C1",
        "\u52AA",
        "\u5802",
        "\u57DF",
        "\u69CD",
        "\u6F64",
        "\u5E45",
        "\u54C8",
        "\u7ADF",
        "\u719F",
        "\u87F2",
        "\u6FA4",
        "\u8166",
        "\u58E4",
        "\u78B3",
        "\u6B50",
        "\u904D",
        "\u5074",
        "\u5BE8",
        "\u6562",
        "\u5FB9",
        "\u616E",
        "\u659C",
        "\u8584",
        "\u5EAD",
        "\u7D0D",
        "\u5F48",
        "\u98FC",
        "\u4F38",
        "\u6298",
        "\u9EA5",
        "\u6FD5",
        "\u6697",
        "\u8377",
        "\u74E6",
        "\u585E",
        "\u5E8A",
        "\u7BC9",
        "\u60E1",
        "\u6236",
        "\u8A2A",
        "\u5854",
        "\u5947",
        "\u900F",
        "\u6881",
        "\u5200",
        "\u65CB",
        "\u8DE1",
        "\u5361",
        "\u6C2F",
        "\u9047",
        "\u4EFD",
        "\u6BD2",
        "\u6CE5",
        "\u9000",
        "\u6D17",
        "\u64FA",
        "\u7070",
        "\u5F69",
        "\u8CE3",
        "\u8017",
        "\u590F",
        "\u64C7",
        "\u5FD9",
        "\u9285",
        "\u737B",
        "\u786C",
        "\u4E88",
        "\u7E41",
        "\u5708",
        "\u96EA",
        "\u51FD",
        "\u4EA6",
        "\u62BD",
        "\u7BC7",
        "\u9663",
        "\u9670",
        "\u4E01",
        "\u5C3A",
        "\u8FFD",
        "\u5806",
        "\u96C4",
        "\u8FCE",
        "\u6CDB",
        "\u7238",
        "\u6A13",
        "\u907F",
        "\u8B00",
        "\u5678",
        "\u91CE",
        "\u8C6C",
        "\u65D7",
        "\u7D2F",
        "\u504F",
        "\u5178",
        "\u9928",
        "\u7D22",
        "\u79E6",
        "\u8102",
        "\u6F6E",
        "\u723A",
        "\u8C46",
        "\u5FFD",
        "\u6258",
        "\u9A5A",
        "\u5851",
        "\u907A",
        "\u6108",
        "\u6731",
        "\u66FF",
        "\u7E96",
        "\u7C97",
        "\u50BE",
        "\u5C1A",
        "\u75DB",
        "\u695A",
        "\u8B1D",
        "\u596E",
        "\u8CFC",
        "\u78E8",
        "\u541B",
        "\u6C60",
        "\u65C1",
        "\u788E",
        "\u9AA8",
        "\u76E3",
        "\u6355",
        "\u5F1F",
        "\u66B4",
        "\u5272",
        "\u8CAB",
        "\u6B8A",
        "\u91CB",
        "\u8A5E",
        "\u4EA1",
        "\u58C1",
        "\u9813",
        "\u5BF6",
        "\u5348",
        "\u5875",
        "\u805E",
        "\u63ED",
        "\u70AE",
        "\u6B98",
        "\u51AC",
        "\u6A4B",
        "\u5A66",
        "\u8B66",
        "\u7D9C",
        "\u62DB",
        "\u5433",
        "\u4ED8",
        "\u6D6E",
        "\u906D",
        "\u5F90",
        "\u60A8",
        "\u6416",
        "\u8C37",
        "\u8D0A",
        "\u7BB1",
        "\u9694",
        "\u8A02",
        "\u7537",
        "\u5439",
        "\u5712",
        "\u7D1B",
        "\u5510",
        "\u6557",
        "\u5B8B",
        "\u73BB",
        "\u5DE8",
        "\u8015",
        "\u5766",
        "\u69AE",
        "\u9589",
        "\u7063",
        "\u9375",
        "\u51E1",
        "\u99D0",
        "\u934B",
        "\u6551",
        "\u6069",
        "\u525D",
        "\u51DD",
        "\u9E7C",
        "\u9F52",
        "\u622A",
        "\u7149",
        "\u9EBB",
        "\u7D21",
        "\u7981",
        "\u5EE2",
        "\u76DB",
        "\u7248",
        "\u7DE9",
        "\u6DE8",
        "\u775B",
        "\u660C",
        "\u5A5A",
        "\u6D89",
        "\u7B52",
        "\u5634",
        "\u63D2",
        "\u5CB8",
        "\u6717",
        "\u838A",
        "\u8857",
        "\u85CF",
        "\u59D1",
        "\u8CBF",
        "\u8150",
        "\u5974",
        "\u5566",
        "\u6163",
        "\u4E58",
        "\u5925",
        "\u6062",
        "\u52FB",
        "\u7D17",
        "\u624E",
        "\u8FAF",
        "\u8033",
        "\u5F6A",
        "\u81E3",
        "\u5104",
        "\u7483",
        "\u62B5",
        "\u8108",
        "\u79C0",
        "\u85A9",
        "\u4FC4",
        "\u7DB2",
        "\u821E",
        "\u5E97",
        "\u5674",
        "\u7E31",
        "\u5BF8",
        "\u6C57",
        "\u639B",
        "\u6D2A",
        "\u8CC0",
        "\u9583",
        "\u67EC",
        "\u7206",
        "\u70EF",
        "\u6D25",
        "\u7A3B",
        "\u7246",
        "\u8EDF",
        "\u52C7",
        "\u50CF",
        "\u6EFE",
        "\u5398",
        "\u8499",
        "\u82B3",
        "\u80AF",
        "\u5761",
        "\u67F1",
        "\u76EA",
        "\u817F",
        "\u5100",
        "\u65C5",
        "\u5C3E",
        "\u8ECB",
        "\u51B0",
        "\u8CA2",
        "\u767B",
        "\u9ECE",
        "\u524A",
        "\u947D",
        "\u52D2",
        "\u9003",
        "\u969C",
        "\u6C28",
        "\u90ED",
        "\u5CF0",
        "\u5E63",
        "\u6E2F",
        "\u4F0F",
        "\u8ECC",
        "\u755D",
        "\u7562",
        "\u64E6",
        "\u83AB",
        "\u523A",
        "\u6D6A",
        "\u79D8",
        "\u63F4",
        "\u682A",
        "\u5065",
        "\u552E",
        "\u80A1",
        "\u5CF6",
        "\u7518",
        "\u6CE1",
        "\u7761",
        "\u7AE5",
        "\u9444",
        "\u6E6F",
        "\u95A5",
        "\u4F11",
        "\u532F",
        "\u820D",
        "\u7267",
        "\u7E5E",
        "\u70B8",
        "\u54F2",
        "\u78F7",
        "\u7E3E",
        "\u670B",
        "\u6DE1",
        "\u5C16",
        "\u555F",
        "\u9677",
        "\u67F4",
        "\u5448",
        "\u5F92",
        "\u984F",
        "\u6DDA",
        "\u7A0D",
        "\u5FD8",
        "\u6CF5",
        "\u85CD",
        "\u62D6",
        "\u6D1E",
        "\u6388",
        "\u93E1",
        "\u8F9B",
        "\u58EF",
        "\u92D2",
        "\u8CA7",
        "\u865B",
        "\u5F4E",
        "\u6469",
        "\u6CF0",
        "\u5E7C",
        "\u5EF7",
        "\u5C0A",
        "\u7A97",
        "\u7DB1",
        "\u5F04",
        "\u96B8",
        "\u7591",
        "\u6C0F",
        "\u5BAE",
        "\u59D0",
        "\u9707",
        "\u745E",
        "\u602A",
        "\u5C24",
        "\u7434",
        "\u5FAA",
        "\u63CF",
        "\u819C",
        "\u9055",
        "\u593E",
        "\u8170",
        "\u7DE3",
        "\u73E0",
        "\u7AAE",
        "\u68EE",
        "\u679D",
        "\u7AF9",
        "\u6E9D",
        "\u50AC",
        "\u7E69",
        "\u61B6",
        "\u90A6",
        "\u5269",
        "\u5E78",
        "\u6F3F",
        "\u6B04",
        "\u64C1",
        "\u7259",
        "\u8CAF",
        "\u79AE",
        "\u6FFE",
        "\u9209",
        "\u7D0B",
        "\u7F77",
        "\u62CD",
        "\u54B1",
        "\u558A",
        "\u8896",
        "\u57C3",
        "\u52E4",
        "\u7F70",
        "\u7126",
        "\u6F5B",
        "\u4F0D",
        "\u58A8",
        "\u6B32",
        "\u7E2B",
        "\u59D3",
        "\u520A",
        "\u98FD",
        "\u4EFF",
        "\u734E",
        "\u92C1",
        "\u9B3C",
        "\u9E97",
        "\u8DE8",
        "\u9ED8",
        "\u6316",
        "\u93C8",
        "\u6383",
        "\u559D",
        "\u888B",
        "\u70AD",
        "\u6C61",
        "\u5E55",
        "\u8AF8",
        "\u5F27",
        "\u52F5",
        "\u6885",
        "\u5976",
        "\u6F54",
        "\u707D",
        "\u821F",
        "\u9451",
        "\u82EF",
        "\u8A1F",
        "\u62B1",
        "\u6BC0",
        "\u61C2",
        "\u5BD2",
        "\u667A",
        "\u57D4",
        "\u5BC4",
        "\u5C46",
        "\u8E8D",
        "\u6E21",
        "\u6311",
        "\u4E39",
        "\u8271",
        "\u8C9D",
        "\u78B0",
        "\u62D4",
        "\u7239",
        "\u6234",
        "\u78BC",
        "\u5922",
        "\u82BD",
        "\u7194",
        "\u8D64",
        "\u6F01",
        "\u54ED",
        "\u656C",
        "\u9846",
        "\u5954",
        "\u925B",
        "\u4EF2",
        "\u864E",
        "\u7A00",
        "\u59B9",
        "\u4E4F",
        "\u73CD",
        "\u7533",
        "\u684C",
        "\u9075",
        "\u5141",
        "\u9686",
        "\u87BA",
        "\u5009",
        "\u9B4F",
        "\u92B3",
        "\u66C9",
        "\u6C2E",
        "\u517C",
        "\u96B1",
        "\u7919",
        "\u8D6B",
        "\u64A5",
        "\u5FE0",
        "\u8085",
        "\u7F38",
        "\u727D",
        "\u6436",
        "\u535A",
        "\u5DE7",
        "\u6BBC",
        "\u5144",
        "\u675C",
        "\u8A0A",
        "\u8AA0",
        "\u78A7",
        "\u7965",
        "\u67EF",
        "\u9801",
        "\u5DE1",
        "\u77E9",
        "\u60B2",
        "\u704C",
        "\u9F61",
        "\u502B",
        "\u7968",
        "\u5C0B",
        "\u6842",
        "\u92EA",
        "\u8056",
        "\u6050",
        "\u6070",
        "\u912D",
        "\u8DA3",
        "\u62AC",
        "\u8352",
        "\u9A30",
        "\u8CBC",
        "\u67D4",
        "\u6EF4",
        "\u731B",
        "\u95CA",
        "\u8F1B",
        "\u59BB",
        "\u586B",
        "\u64A4",
        "\u5132",
        "\u7C3D",
        "\u9B27",
        "\u64FE",
        "\u7D2B",
        "\u7802",
        "\u905E",
        "\u6232",
        "\u540A",
        "\u9676",
        "\u4F10",
        "\u9935",
        "\u7642",
        "\u74F6",
        "\u5A46",
        "\u64AB",
        "\u81C2",
        "\u6478",
        "\u5FCD",
        "\u8766",
        "\u881F",
        "\u9130",
        "\u80F8",
        "\u978F",
        "\u64E0",
        "\u5076",
        "\u68C4",
        "\u69FD",
        "\u52C1",
        "\u4E73",
        "\u9127",
        "\u5409",
        "\u4EC1",
        "\u721B",
        "\u78DA",
        "\u79DF",
        "\u70CF",
        "\u8266",
        "\u4F34",
        "\u74DC",
        "\u6DFA",
        "\u4E19",
        "\u66AB",
        "\u71E5",
        "\u6A61",
        "\u67F3",
        "\u8FF7",
        "\u6696",
        "\u724C",
        "\u79E7",
        "\u81BD",
        "\u8A73",
        "\u7C27",
        "\u8E0F",
        "\u74F7",
        "\u8B5C",
        "\u5446",
        "\u8CD3",
        "\u7CCA",
        "\u6D1B",
        "\u8F1D",
        "\u61A4",
        "\u7AF6",
        "\u9699",
        "\u6012",
        "\u7C98",
        "\u4E43",
        "\u7DD2",
        "\u80A9",
        "\u7C4D",
        "\u654F",
        "\u5857",
        "\u7199",
        "\u7686",
        "\u5075",
        "\u61F8",
        "\u6398",
        "\u4EAB",
        "\u7CFE",
        "\u9192",
        "\u72C2",
        "\u9396",
        "\u6DC0",
        "\u6068",
        "\u7272",
        "\u9738",
        "\u722C",
        "\u8CDE",
        "\u9006",
        "\u73A9",
        "\u9675",
        "\u795D",
        "\u79D2",
        "\u6D59",
        "\u8C8C",
        "\u5F79",
        "\u5F7C",
        "\u6089",
        "\u9D28",
        "\u8DA8",
        "\u9CF3",
        "\u6668",
        "\u755C",
        "\u8F29",
        "\u79E9",
        "\u5375",
        "\u7F72",
        "\u68AF",
        "\u708E",
        "\u7058",
        "\u68CB",
        "\u9A45",
        "\u7BE9",
        "\u5CFD",
        "\u5192",
        "\u5565",
        "\u58FD",
        "\u8B6F",
        "\u6D78",
        "\u6CC9",
        "\u5E3D",
        "\u9072",
        "\u77FD",
        "\u7586",
        "\u8CB8",
        "\u6F0F",
        "\u7A3F",
        "\u51A0",
        "\u5AE9",
        "\u8105",
        "\u82AF",
        "\u7262",
        "\u53DB",
        "\u8755",
        "\u5967",
        "\u9CF4",
        "\u5DBA",
        "\u7F8A",
        "\u6191",
        "\u4E32",
        "\u5858",
        "\u7E6A",
        "\u9175",
        "\u878D",
        "\u76C6",
        "\u932B",
        "\u5EDF",
        "\u7C4C",
        "\u51CD",
        "\u8F14",
        "\u651D",
        "\u8972",
        "\u7B4B",
        "\u62D2",
        "\u50DA",
        "\u65F1",
        "\u9240",
        "\u9CE5",
        "\u6F06",
        "\u6C88",
        "\u7709",
        "\u758F",
        "\u6DFB",
        "\u68D2",
        "\u7A57",
        "\u785D",
        "\u97D3",
        "\u903C",
        "\u626D",
        "\u50D1",
        "\u6DBC",
        "\u633A",
        "\u7897",
        "\u683D",
        "\u7092",
        "\u676F",
        "\u60A3",
        "\u993E",
        "\u52F8",
        "\u8C6A",
        "\u907C",
        "\u52C3",
        "\u9D3B",
        "\u65E6",
        "\u540F",
        "\u62DC",
        "\u72D7",
        "\u57CB",
        "\u8F25",
        "\u63A9",
        "\u98F2",
        "\u642C",
        "\u7F75",
        "\u8FAD",
        "\u52FE",
        "\u6263",
        "\u4F30",
        "\u8523",
        "\u7D68",
        "\u9727",
        "\u4E08",
        "\u6735",
        "\u59C6",
        "\u64EC",
        "\u5B87",
        "\u8F2F",
        "\u965D",
        "\u96D5",
        "\u511F",
        "\u84C4",
        "\u5D07",
        "\u526A",
        "\u5021",
        "\u5EF3",
        "\u54AC",
        "\u99DB",
        "\u85AF",
        "\u5237",
        "\u65A5",
        "\u756A",
        "\u8CE6",
        "\u5949",
        "\u4F5B",
        "\u6F86",
        "\u6F2B",
        "\u66FC",
        "\u6247",
        "\u9223",
        "\u6843",
        "\u6276",
        "\u4ED4",
        "\u8FD4",
        "\u4FD7",
        "\u8667",
        "\u8154",
        "\u978B",
        "\u68F1",
        "\u8986",
        "\u6846",
        "\u6084",
        "\u53D4",
        "\u649E",
        "\u9A19",
        "\u52D8",
        "\u65FA",
        "\u6CB8",
        "\u5B64",
        "\u5410",
        "\u5B5F",
        "\u6E20",
        "\u5C48",
        "\u75BE",
        "\u5999",
        "\u60DC",
        "\u4EF0",
        "\u72E0",
        "\u8139",
        "\u8AE7",
        "\u62CB",
        "\u9EF4",
        "\u6851",
        "\u5D17",
        "\u561B",
        "\u8870",
        "\u76DC",
        "\u6EF2",
        "\u81DF",
        "\u8CF4",
        "\u6E67",
        "\u751C",
        "\u66F9",
        "\u95B1",
        "\u808C",
        "\u54E9",
        "\u53B2",
        "\u70F4",
        "\u7DEF",
        "\u6BC5",
        "\u6628",
        "\u507D",
        "\u75C7",
        "\u716E",
        "\u5606",
        "\u91D8",
        "\u642D",
        "\u8396",
        "\u7C60",
        "\u9177",
        "\u5077",
        "\u5F13",
        "\u9310",
        "\u6046",
        "\u5091",
        "\u5751",
        "\u9F3B",
        "\u7FFC",
        "\u7DB8",
        "\u6558",
        "\u7344",
        "\u902E",
        "\u7F50",
        "\u7D61",
        "\u68DA",
        "\u6291",
        "\u81A8",
        "\u852C",
        "\u5BFA",
        "\u9A5F",
        "\u7A46",
        "\u51B6",
        "\u67AF",
        "\u518A",
        "\u5C4D",
        "\u51F8",
        "\u7D33",
        "\u576F",
        "\u72A7",
        "\u7130",
        "\u8F5F",
        "\u6B23",
        "\u6649",
        "\u7626",
        "\u79A6",
        "\u9320",
        "\u9326",
        "\u55AA",
        "\u65EC",
        "\u935B",
        "\u58DF",
        "\u641C",
        "\u64B2",
        "\u9080",
        "\u4EAD",
        "\u916F",
        "\u9081",
        "\u8212",
        "\u8106",
        "\u9176",
        "\u9592",
        "\u6182",
        "\u915A",
        "\u9811",
        "\u7FBD",
        "\u6F32",
        "\u5378",
        "\u4ED7",
        "\u966A",
        "\u95E2",
        "\u61F2",
        "\u676D",
        "\u59DA",
        "\u809A",
        "\u6349",
        "\u98C4",
        "\u6F02",
        "\u6606",
        "\u6B3A",
        "\u543E",
        "\u90CE",
        "\u70F7",
        "\u6C41",
        "\u5475",
        "\u98FE",
        "\u856D",
        "\u96C5",
        "\u90F5",
        "\u9077",
        "\u71D5",
        "\u6492",
        "\u59FB",
        "\u8D74",
        "\u5BB4",
        "\u7169",
        "\u50B5",
        "\u5E33",
        "\u6591",
        "\u9234",
        "\u65E8",
        "\u9187",
        "\u8463",
        "\u9905",
        "\u96DB",
        "\u59FF",
        "\u62CC",
        "\u5085",
        "\u8179",
        "\u59A5",
        "\u63C9",
        "\u8CE2",
        "\u62C6",
        "\u6B6A",
        "\u8461",
        "\u80FA",
        "\u4E1F",
        "\u6D69",
        "\u5FBD",
        "\u6602",
        "\u588A",
        "\u64CB",
        "\u89BD",
        "\u8CAA",
        "\u6170",
        "\u7E73",
        "\u6C6A",
        "\u614C",
        "\u99AE",
        "\u8AFE",
        "\u59DC",
        "\u8ABC",
        "\u5147",
        "\u52A3",
        "\u8AA3",
        "\u8000",
        "\u660F",
        "\u8EBA",
        "\u76C8",
        "\u9A0E",
        "\u55AC",
        "\u6EAA",
        "\u53E2",
        "\u76E7",
        "\u62B9",
        "\u60B6",
        "\u8AEE",
        "\u522E",
        "\u99D5",
        "\u7E9C",
        "\u609F",
        "\u6458",
        "\u927A",
        "\u64F2",
        "\u9817",
        "\u5E7B",
        "\u67C4",
        "\u60E0",
        "\u6158",
        "\u4F73",
        "\u4EC7",
        "\u81D8",
        "\u7AA9",
        "\u6ECC",
        "\u528D",
        "\u77A7",
        "\u5821",
        "\u6F51",
        "\u8525",
        "\u7F69",
        "\u970D",
        "\u6488",
        "\u80CE",
        "\u84BC",
        "\u6FF1",
        "\u5006",
        "\u6345",
        "\u6E58",
        "\u780D",
        "\u971E",
        "\u90B5",
        "\u8404",
        "\u760B",
        "\u6DEE",
        "\u9042",
        "\u718A",
        "\u7CDE",
        "\u70D8",
        "\u5BBF",
        "\u6A94",
        "\u6208",
        "\u99C1",
        "\u5AC2",
        "\u88D5",
        "\u5F99",
        "\u7BAD",
        "\u6350",
        "\u8178",
        "\u6490",
        "\u66EC",
        "\u8FA8",
        "\u6BBF",
        "\u84EE",
        "\u6524",
        "\u652A",
        "\u91AC",
        "\u5C4F",
        "\u75AB",
        "\u54C0",
        "\u8521",
        "\u5835",
        "\u6CAB",
        "\u76BA",
        "\u66A2",
        "\u758A",
        "\u95A3",
        "\u840A",
        "\u6572",
        "\u8F44",
        "\u9264",
        "\u75D5",
        "\u58E9",
        "\u5DF7",
        "\u9913",
        "\u798D",
        "\u4E18",
        "\u7384",
        "\u6E9C",
        "\u66F0",
        "\u908F",
        "\u5F6D",
        "\u5617",
        "\u537F",
        "\u59A8",
        "\u8247",
        "\u541E",
        "\u97CB",
        "\u6028",
        "\u77EE",
        "\u6B47"
      ];
    }
  });

  // node_modules/bip39/src/wordlists/korean.json
  var require_korean = __commonJS({
    "node_modules/bip39/src/wordlists/korean.json"(exports, module) {
      module.exports = [
        "\u1100\u1161\u1100\u1167\u11A8",
        "\u1100\u1161\u1101\u1173\u11B7",
        "\u1100\u1161\u1102\u1161\u11AB",
        "\u1100\u1161\u1102\u1173\u11BC",
        "\u1100\u1161\u1103\u1173\u11A8",
        "\u1100\u1161\u1105\u1173\u110E\u1175\u11B7",
        "\u1100\u1161\u1106\u116E\u11B7",
        "\u1100\u1161\u1107\u1161\u11BC",
        "\u1100\u1161\u1109\u1161\u11BC",
        "\u1100\u1161\u1109\u1173\u11B7",
        "\u1100\u1161\u110B\u116E\u11AB\u1103\u1166",
        "\u1100\u1161\u110B\u1173\u11AF",
        "\u1100\u1161\u110B\u1175\u1103\u1173",
        "\u1100\u1161\u110B\u1175\u11B8",
        "\u1100\u1161\u110C\u1161\u11BC",
        "\u1100\u1161\u110C\u1165\u11BC",
        "\u1100\u1161\u110C\u1169\u11A8",
        "\u1100\u1161\u110C\u116E\u11A8",
        "\u1100\u1161\u11A8\u110B\u1169",
        "\u1100\u1161\u11A8\u110C\u1161",
        "\u1100\u1161\u11AB\u1100\u1167\u11A8",
        "\u1100\u1161\u11AB\u1107\u116E",
        "\u1100\u1161\u11AB\u1109\u1165\u11B8",
        "\u1100\u1161\u11AB\u110C\u1161\u11BC",
        "\u1100\u1161\u11AB\u110C\u1165\u11B8",
        "\u1100\u1161\u11AB\u1111\u1161\u11AB",
        "\u1100\u1161\u11AF\u1103\u1173\u11BC",
        "\u1100\u1161\u11AF\u1107\u1175",
        "\u1100\u1161\u11AF\u1109\u1162\u11A8",
        "\u1100\u1161\u11AF\u110C\u1173\u11BC",
        "\u1100\u1161\u11B7\u1100\u1161\u11A8",
        "\u1100\u1161\u11B7\u1100\u1175",
        "\u1100\u1161\u11B7\u1109\u1169",
        "\u1100\u1161\u11B7\u1109\u116E\u1109\u1165\u11BC",
        "\u1100\u1161\u11B7\u110C\u1161",
        "\u1100\u1161\u11B7\u110C\u1165\u11BC",
        "\u1100\u1161\u11B8\u110C\u1161\u1100\u1175",
        "\u1100\u1161\u11BC\u1102\u1161\u11B7",
        "\u1100\u1161\u11BC\u1103\u1161\u11BC",
        "\u1100\u1161\u11BC\u1103\u1169",
        "\u1100\u1161\u11BC\u1105\u1167\u11A8\u1112\u1175",
        "\u1100\u1161\u11BC\u1107\u1167\u11AB",
        "\u1100\u1161\u11BC\u1107\u116E\u11A8",
        "\u1100\u1161\u11BC\u1109\u1161",
        "\u1100\u1161\u11BC\u1109\u116E\u1105\u1163\u11BC",
        "\u1100\u1161\u11BC\u110B\u1161\u110C\u1175",
        "\u1100\u1161\u11BC\u110B\u116F\u11AB\u1103\u1169",
        "\u1100\u1161\u11BC\u110B\u1174",
        "\u1100\u1161\u11BC\u110C\u1166",
        "\u1100\u1161\u11BC\u110C\u1169",
        "\u1100\u1161\u11C0\u110B\u1175",
        "\u1100\u1162\u1100\u116E\u1105\u1175",
        "\u1100\u1162\u1102\u1161\u1105\u1175",
        "\u1100\u1162\u1107\u1161\u11BC",
        "\u1100\u1162\u1107\u1167\u11AF",
        "\u1100\u1162\u1109\u1165\u11AB",
        "\u1100\u1162\u1109\u1165\u11BC",
        "\u1100\u1162\u110B\u1175\u11AB",
        "\u1100\u1162\u11A8\u1100\u116A\u11AB\u110C\u1165\u11A8",
        "\u1100\u1165\u1109\u1175\u11AF",
        "\u1100\u1165\u110B\u1162\u11A8",
        "\u1100\u1165\u110B\u116E\u11AF",
        "\u1100\u1165\u110C\u1175\u11BA",
        "\u1100\u1165\u1111\u116E\u11B7",
        "\u1100\u1165\u11A8\u110C\u1165\u11BC",
        "\u1100\u1165\u11AB\u1100\u1161\u11BC",
        "\u1100\u1165\u11AB\u1106\u116E\u11AF",
        "\u1100\u1165\u11AB\u1109\u1165\u11AF",
        "\u1100\u1165\u11AB\u110C\u1169",
        "\u1100\u1165\u11AB\u110E\u116E\u11A8",
        "\u1100\u1165\u11AF\u110B\u1173\u11B7",
        "\u1100\u1165\u11B7\u1109\u1161",
        "\u1100\u1165\u11B7\u1110\u1169",
        "\u1100\u1166\u1109\u1175\u1111\u1161\u11AB",
        "\u1100\u1166\u110B\u1175\u11B7",
        "\u1100\u1167\u110B\u116E\u11AF",
        "\u1100\u1167\u11AB\u1112\u1162",
        "\u1100\u1167\u11AF\u1100\u116A",
        "\u1100\u1167\u11AF\u1100\u116E\u11A8",
        "\u1100\u1167\u11AF\u1105\u1169\u11AB",
        "\u1100\u1167\u11AF\u1109\u1165\u11A8",
        "\u1100\u1167\u11AF\u1109\u1173\u11BC",
        "\u1100\u1167\u11AF\u1109\u1175\u11B7",
        "\u1100\u1167\u11AF\u110C\u1165\u11BC",
        "\u1100\u1167\u11AF\u1112\u1169\u11AB",
        "\u1100\u1167\u11BC\u1100\u1168",
        "\u1100\u1167\u11BC\u1100\u1169",
        "\u1100\u1167\u11BC\u1100\u1175",
        "\u1100\u1167\u11BC\u1105\u1167\u11A8",
        "\u1100\u1167\u11BC\u1107\u1169\u11A8\u1100\u116E\u11BC",
        "\u1100\u1167\u11BC\u1107\u1175",
        "\u1100\u1167\u11BC\u1109\u1161\u11BC\u1103\u1169",
        "\u1100\u1167\u11BC\u110B\u1167\u11BC",
        "\u1100\u1167\u11BC\u110B\u116E",
        "\u1100\u1167\u11BC\u110C\u1162\u11BC",
        "\u1100\u1167\u11BC\u110C\u1166",
        "\u1100\u1167\u11BC\u110C\u116E",
        "\u1100\u1167\u11BC\u110E\u1161\u11AF",
        "\u1100\u1167\u11BC\u110E\u1175",
        "\u1100\u1167\u11BC\u1112\u1163\u11BC",
        "\u1100\u1167\u11BC\u1112\u1165\u11B7",
        "\u1100\u1168\u1100\u1169\u11A8",
        "\u1100\u1168\u1103\u1161\u11AB",
        "\u1100\u1168\u1105\u1161\u11AB",
        "\u1100\u1168\u1109\u1161\u11AB",
        "\u1100\u1168\u1109\u1169\u11A8",
        "\u1100\u1168\u110B\u1163\u11A8",
        "\u1100\u1168\u110C\u1165\u11AF",
        "\u1100\u1168\u110E\u1173\u11BC",
        "\u1100\u1168\u1112\u116C\u11A8",
        "\u1100\u1169\u1100\u1162\u11A8",
        "\u1100\u1169\u1100\u116E\u1105\u1167",
        "\u1100\u1169\u1100\u116E\u11BC",
        "\u1100\u1169\u1100\u1173\u11B8",
        "\u1100\u1169\u1103\u1173\u11BC\u1112\u1161\u11A8\u1109\u1162\u11BC",
        "\u1100\u1169\u1106\u116E\u1109\u1175\u11AB",
        "\u1100\u1169\u1106\u1175\u11AB",
        "\u1100\u1169\u110B\u1163\u11BC\u110B\u1175",
        "\u1100\u1169\u110C\u1161\u11BC",
        "\u1100\u1169\u110C\u1165\u11AB",
        "\u1100\u1169\u110C\u1175\u11B8",
        "\u1100\u1169\u110E\u116E\u11BA\u1100\u1161\u1105\u116E",
        "\u1100\u1169\u1110\u1169\u11BC",
        "\u1100\u1169\u1112\u1163\u11BC",
        "\u1100\u1169\u11A8\u1109\u1175\u11A8",
        "\u1100\u1169\u11AF\u1106\u1169\u11A8",
        "\u1100\u1169\u11AF\u110D\u1161\u1100\u1175",
        "\u1100\u1169\u11AF\u1111\u1173",
        "\u1100\u1169\u11BC\u1100\u1161\u11AB",
        "\u1100\u1169\u11BC\u1100\u1162",
        "\u1100\u1169\u11BC\u1100\u1167\u11A8",
        "\u1100\u1169\u11BC\u1100\u116E\u11AB",
        "\u1100\u1169\u11BC\u1100\u1173\u11B8",
        "\u1100\u1169\u11BC\u1100\u1175",
        "\u1100\u1169\u11BC\u1103\u1169\u11BC",
        "\u1100\u1169\u11BC\u1106\u116E\u110B\u116F\u11AB",
        "\u1100\u1169\u11BC\u1107\u116E",
        "\u1100\u1169\u11BC\u1109\u1161",
        "\u1100\u1169\u11BC\u1109\u1175\u11A8",
        "\u1100\u1169\u11BC\u110B\u1165\u11B8",
        "\u1100\u1169\u11BC\u110B\u1167\u11AB",
        "\u1100\u1169\u11BC\u110B\u116F\u11AB",
        "\u1100\u1169\u11BC\u110C\u1161\u11BC",
        "\u1100\u1169\u11BC\u110D\u1161",
        "\u1100\u1169\u11BC\u110E\u1162\u11A8",
        "\u1100\u1169\u11BC\u1110\u1169\u11BC",
        "\u1100\u1169\u11BC\u1111\u1169",
        "\u1100\u1169\u11BC\u1112\u1161\u11BC",
        "\u1100\u1169\u11BC\u1112\u1172\u110B\u1175\u11AF",
        "\u1100\u116A\u1106\u1169\u11A8",
        "\u1100\u116A\u110B\u1175\u11AF",
        "\u1100\u116A\u110C\u1161\u11BC",
        "\u1100\u116A\u110C\u1165\u11BC",
        "\u1100\u116A\u1112\u1161\u11A8",
        "\u1100\u116A\u11AB\u1100\u1162\u11A8",
        "\u1100\u116A\u11AB\u1100\u1168",
        "\u1100\u116A\u11AB\u1100\u116A\u11BC",
        "\u1100\u116A\u11AB\u1102\u1167\u11B7",
        "\u1100\u116A\u11AB\u1105\u1161\u11B7",
        "\u1100\u116A\u11AB\u1105\u1167\u11AB",
        "\u1100\u116A\u11AB\u1105\u1175",
        "\u1100\u116A\u11AB\u1109\u1173\u11B8",
        "\u1100\u116A\u11AB\u1109\u1175\u11B7",
        "\u1100\u116A\u11AB\u110C\u1165\u11B7",
        "\u1100\u116A\u11AB\u110E\u1161\u11AF",
        "\u1100\u116A\u11BC\u1100\u1167\u11BC",
        "\u1100\u116A\u11BC\u1100\u1169",
        "\u1100\u116A\u11BC\u110C\u1161\u11BC",
        "\u1100\u116A\u11BC\u110C\u116E",
        "\u1100\u116C\u1105\u1169\u110B\u116E\u11B7",
        "\u1100\u116C\u11BC\u110C\u1161\u11BC\u1112\u1175",
        "\u1100\u116D\u1100\u116A\u1109\u1165",
        "\u1100\u116D\u1106\u116E\u11AB",
        "\u1100\u116D\u1107\u1169\u11A8",
        "\u1100\u116D\u1109\u1175\u11AF",
        "\u1100\u116D\u110B\u1163\u11BC",
        "\u1100\u116D\u110B\u1172\u11A8",
        "\u1100\u116D\u110C\u1161\u11BC",
        "\u1100\u116D\u110C\u1175\u11A8",
        "\u1100\u116D\u1110\u1169\u11BC",
        "\u1100\u116D\u1112\u116A\u11AB",
        "\u1100\u116D\u1112\u116E\u11AB",
        "\u1100\u116E\u1100\u1167\u11BC",
        "\u1100\u116E\u1105\u1173\u11B7",
        "\u1100\u116E\u1106\u1165\u11BC",
        "\u1100\u116E\u1107\u1167\u11AF",
        "\u1100\u116E\u1107\u116E\u11AB",
        "\u1100\u116E\u1109\u1165\u11A8",
        "\u1100\u116E\u1109\u1165\u11BC",
        "\u1100\u116E\u1109\u1169\u11A8",
        "\u1100\u116E\u110B\u1167\u11A8",
        "\u1100\u116E\u110B\u1175\u11B8",
        "\u1100\u116E\u110E\u1165\u11BC",
        "\u1100\u116E\u110E\u1166\u110C\u1165\u11A8",
        "\u1100\u116E\u11A8\u1100\u1161",
        "\u1100\u116E\u11A8\u1100\u1175",
        "\u1100\u116E\u11A8\u1102\u1162",
        "\u1100\u116E\u11A8\u1105\u1175\u11B8",
        "\u1100\u116E\u11A8\u1106\u116E\u11AF",
        "\u1100\u116E\u11A8\u1106\u1175\u11AB",
        "\u1100\u116E\u11A8\u1109\u116E",
        "\u1100\u116E\u11A8\u110B\u1165",
        "\u1100\u116E\u11A8\u110B\u116A\u11BC",
        "\u1100\u116E\u11A8\u110C\u1165\u11A8",
        "\u1100\u116E\u11A8\u110C\u1166",
        "\u1100\u116E\u11A8\u1112\u116C",
        "\u1100\u116E\u11AB\u1103\u1162",
        "\u1100\u116E\u11AB\u1109\u1161",
        "\u1100\u116E\u11AB\u110B\u1175\u11AB",
        "\u1100\u116E\u11BC\u1100\u1173\u11A8\u110C\u1165\u11A8",
        "\u1100\u116F\u11AB\u1105\u1175",
        "\u1100\u116F\u11AB\u110B\u1171",
        "\u1100\u116F\u11AB\u1110\u116E",
        "\u1100\u1171\u1100\u116E\u11A8",
        "\u1100\u1171\u1109\u1175\u11AB",
        "\u1100\u1172\u110C\u1165\u11BC",
        "\u1100\u1172\u110E\u1175\u11A8",
        "\u1100\u1172\u11AB\u1112\u1167\u11BC",
        "\u1100\u1173\u1102\u1161\u11AF",
        "\u1100\u1173\u1102\u1163\u11BC",
        "\u1100\u1173\u1102\u1173\u11AF",
        "\u1100\u1173\u1105\u1165\u1102\u1161",
        "\u1100\u1173\u1105\u116E\u11B8",
        "\u1100\u1173\u1105\u1173\u11BA",
        "\u1100\u1173\u1105\u1175\u11B7",
        "\u1100\u1173\u110C\u1166\u1109\u1165\u110B\u1163",
        "\u1100\u1173\u1110\u1169\u1105\u1169\u11A8",
        "\u1100\u1173\u11A8\u1107\u1169\u11A8",
        "\u1100\u1173\u11A8\u1112\u1175",
        "\u1100\u1173\u11AB\u1100\u1165",
        "\u1100\u1173\u11AB\u1100\u116D",
        "\u1100\u1173\u11AB\u1105\u1162",
        "\u1100\u1173\u11AB\u1105\u1169",
        "\u1100\u1173\u11AB\u1106\u116E",
        "\u1100\u1173\u11AB\u1107\u1169\u11AB",
        "\u1100\u1173\u11AB\u110B\u116F\u11AB",
        "\u1100\u1173\u11AB\u110B\u1172\u11A8",
        "\u1100\u1173\u11AB\u110E\u1165",
        "\u1100\u1173\u11AF\u110A\u1175",
        "\u1100\u1173\u11AF\u110C\u1161",
        "\u1100\u1173\u11B7\u1100\u1161\u11BC\u1109\u1161\u11AB",
        "\u1100\u1173\u11B7\u1100\u1169",
        "\u1100\u1173\u11B7\u1102\u1167\u11AB",
        "\u1100\u1173\u11B7\u1106\u1166\u1103\u1161\u11AF",
        "\u1100\u1173\u11B7\u110B\u1162\u11A8",
        "\u1100\u1173\u11B7\u110B\u1167\u11AB",
        "\u1100\u1173\u11B7\u110B\u116D\u110B\u1175\u11AF",
        "\u1100\u1173\u11B7\u110C\u1175",
        "\u1100\u1173\u11BC\u110C\u1165\u11BC\u110C\u1165\u11A8",
        "\u1100\u1175\u1100\u1161\u11AB",
        "\u1100\u1175\u1100\u116A\u11AB",
        "\u1100\u1175\u1102\u1167\u11B7",
        "\u1100\u1175\u1102\u1173\u11BC",
        "\u1100\u1175\u1103\u1169\u11A8\u1100\u116D",
        "\u1100\u1175\u1103\u116E\u11BC",
        "\u1100\u1175\u1105\u1169\u11A8",
        "\u1100\u1175\u1105\u1173\u11B7",
        "\u1100\u1175\u1107\u1165\u11B8",
        "\u1100\u1175\u1107\u1169\u11AB",
        "\u1100\u1175\u1107\u116E\u11AB",
        "\u1100\u1175\u1108\u1173\u11B7",
        "\u1100\u1175\u1109\u116E\u11A8\u1109\u1161",
        "\u1100\u1175\u1109\u116E\u11AF",
        "\u1100\u1175\u110B\u1165\u11A8",
        "\u1100\u1175\u110B\u1165\u11B8",
        "\u1100\u1175\u110B\u1169\u11AB",
        "\u1100\u1175\u110B\u116E\u11AB",
        "\u1100\u1175\u110B\u116F\u11AB",
        "\u1100\u1175\u110C\u1165\u11A8",
        "\u1100\u1175\u110C\u116E\u11AB",
        "\u1100\u1175\u110E\u1175\u11B7",
        "\u1100\u1175\u1112\u1169\u11AB",
        "\u1100\u1175\u1112\u116C\u11A8",
        "\u1100\u1175\u11AB\u1100\u1173\u11B8",
        "\u1100\u1175\u11AB\u110C\u1161\u11BC",
        "\u1100\u1175\u11AF\u110B\u1175",
        "\u1100\u1175\u11B7\u1107\u1161\u11B8",
        "\u1100\u1175\u11B7\u110E\u1175",
        "\u1100\u1175\u11B7\u1111\u1169\u1100\u1169\u11BC\u1112\u1161\u11BC",
        "\u1101\u1161\u11A8\u1103\u116E\u1100\u1175",
        "\u1101\u1161\u11B7\u1108\u1161\u11A8",
        "\u1101\u1162\u1103\u1161\u11AF\u110B\u1173\u11B7",
        "\u1101\u1162\u1109\u1169\u1100\u1173\u11B7",
        "\u1101\u1165\u11B8\u110C\u1175\u11AF",
        "\u1101\u1169\u11A8\u1103\u1162\u1100\u1175",
        "\u1101\u1169\u11BE\u110B\u1175\u11C1",
        "\u1102\u1161\u1103\u1173\u11AF\u110B\u1175",
        "\u1102\u1161\u1105\u1161\u11AB\u1112\u1175",
        "\u1102\u1161\u1106\u1165\u110C\u1175",
        "\u1102\u1161\u1106\u116E\u11AF",
        "\u1102\u1161\u110E\u1175\u11B7\u1107\u1161\u11AB",
        "\u1102\u1161\u1112\u1173\u11AF",
        "\u1102\u1161\u11A8\u110B\u1167\u11B8",
        "\u1102\u1161\u11AB\u1107\u1161\u11BC",
        "\u1102\u1161\u11AF\u1100\u1162",
        "\u1102\u1161\u11AF\u110A\u1175",
        "\u1102\u1161\u11AF\u110D\u1161",
        "\u1102\u1161\u11B7\u1102\u1167",
        "\u1102\u1161\u11B7\u1103\u1162\u1106\u116E\u11AB",
        "\u1102\u1161\u11B7\u1106\u1162",
        "\u1102\u1161\u11B7\u1109\u1161\u11AB",
        "\u1102\u1161\u11B7\u110C\u1161",
        "\u1102\u1161\u11B7\u1111\u1167\u11AB",
        "\u1102\u1161\u11B7\u1112\u1161\u11A8\u1109\u1162\u11BC",
        "\u1102\u1161\u11BC\u1107\u1175",
        "\u1102\u1161\u11C0\u1106\u1161\u11AF",
        "\u1102\u1162\u1102\u1167\u11AB",
        "\u1102\u1162\u110B\u116D\u11BC",
        "\u1102\u1162\u110B\u1175\u11AF",
        "\u1102\u1162\u11B7\u1107\u1175",
        "\u1102\u1162\u11B7\u1109\u1162",
        "\u1102\u1162\u11BA\u1106\u116E\u11AF",
        "\u1102\u1162\u11BC\u1103\u1169\u11BC",
        "\u1102\u1162\u11BC\u1106\u1167\u11AB",
        "\u1102\u1162\u11BC\u1107\u1161\u11BC",
        "\u1102\u1162\u11BC\u110C\u1161\u11BC\u1100\u1169",
        "\u1102\u1166\u11A8\u1110\u1161\u110B\u1175",
        "\u1102\u1166\u11BA\u110D\u1162",
        "\u1102\u1169\u1103\u1169\u11BC",
        "\u1102\u1169\u1105\u1161\u11AB\u1109\u1162\u11A8",
        "\u1102\u1169\u1105\u1167\u11A8",
        "\u1102\u1169\u110B\u1175\u11AB",
        "\u1102\u1169\u11A8\u110B\u1173\u11B7",
        "\u1102\u1169\u11A8\u110E\u1161",
        "\u1102\u1169\u11A8\u1112\u116A",
        "\u1102\u1169\u11AB\u1105\u1175",
        "\u1102\u1169\u11AB\u1106\u116E\u11AB",
        "\u1102\u1169\u11AB\u110C\u1162\u11BC",
        "\u1102\u1169\u11AF\u110B\u1175",
        "\u1102\u1169\u11BC\u1100\u116E",
        "\u1102\u1169\u11BC\u1103\u1161\u11B7",
        "\u1102\u1169\u11BC\u1106\u1175\u11AB",
        "\u1102\u1169\u11BC\u1107\u116E",
        "\u1102\u1169\u11BC\u110B\u1165\u11B8",
        "\u1102\u1169\u11BC\u110C\u1161\u11BC",
        "\u1102\u1169\u11BC\u110E\u1169\u11AB",
        "\u1102\u1169\u11C1\u110B\u1175",
        "\u1102\u116E\u11AB\u1103\u1169\u11BC\u110C\u1161",
        "\u1102\u116E\u11AB\u1106\u116E\u11AF",
        "\u1102\u116E\u11AB\u110A\u1165\u11B8",
        "\u1102\u1172\u110B\u116D\u11A8",
        "\u1102\u1173\u1101\u1175\u11B7",
        "\u1102\u1173\u11A8\u1103\u1162",
        "\u1102\u1173\u11BC\u1103\u1169\u11BC\u110C\u1165\u11A8",
        "\u1102\u1173\u11BC\u1105\u1167\u11A8",
        "\u1103\u1161\u1107\u1161\u11BC",
        "\u1103\u1161\u110B\u1163\u11BC\u1109\u1165\u11BC",
        "\u1103\u1161\u110B\u1173\u11B7",
        "\u1103\u1161\u110B\u1175\u110B\u1165\u1110\u1173",
        "\u1103\u1161\u1112\u1162\u11BC",
        "\u1103\u1161\u11AB\u1100\u1168",
        "\u1103\u1161\u11AB\u1100\u1169\u11AF",
        "\u1103\u1161\u11AB\u1103\u1169\u11A8",
        "\u1103\u1161\u11AB\u1106\u1161\u11BA",
        "\u1103\u1161\u11AB\u1109\u116E\u11AB",
        "\u1103\u1161\u11AB\u110B\u1165",
        "\u1103\u1161\u11AB\u110B\u1171",
        "\u1103\u1161\u11AB\u110C\u1165\u11B7",
        "\u1103\u1161\u11AB\u110E\u1166",
        "\u1103\u1161\u11AB\u110E\u116E",
        "\u1103\u1161\u11AB\u1111\u1167\u11AB",
        "\u1103\u1161\u11AB\u1111\u116E\u11BC",
        "\u1103\u1161\u11AF\u1100\u1163\u11AF",
        "\u1103\u1161\u11AF\u1105\u1165",
        "\u1103\u1161\u11AF\u1105\u1167\u11A8",
        "\u1103\u1161\u11AF\u1105\u1175",
        "\u1103\u1161\u11B0\u1100\u1169\u1100\u1175",
        "\u1103\u1161\u11B7\u1103\u1161\u11BC",
        "\u1103\u1161\u11B7\u1107\u1162",
        "\u1103\u1161\u11B7\u110B\u116D",
        "\u1103\u1161\u11B7\u110B\u1175\u11B7",
        "\u1103\u1161\u11B8\u1107\u1167\u11AB",
        "\u1103\u1161\u11B8\u110C\u1161\u11BC",
        "\u1103\u1161\u11BC\u1100\u1173\u11AB",
        "\u1103\u1161\u11BC\u1107\u116E\u11AB\u1100\u1161\u11AB",
        "\u1103\u1161\u11BC\u110B\u1167\u11AB\u1112\u1175",
        "\u1103\u1161\u11BC\u110C\u1161\u11BC",
        "\u1103\u1162\u1100\u1172\u1106\u1169",
        "\u1103\u1162\u1102\u1161\u11BD",
        "\u1103\u1162\u1103\u1161\u11AB\u1112\u1175",
        "\u1103\u1162\u1103\u1161\u11B8",
        "\u1103\u1162\u1103\u1169\u1109\u1175",
        "\u1103\u1162\u1105\u1163\u11A8",
        "\u1103\u1162\u1105\u1163\u11BC",
        "\u1103\u1162\u1105\u1172\u11A8",
        "\u1103\u1162\u1106\u116E\u11AB",
        "\u1103\u1162\u1107\u116E\u1107\u116E\u11AB",
        "\u1103\u1162\u1109\u1175\u11AB",
        "\u1103\u1162\u110B\u1173\u11BC",
        "\u1103\u1162\u110C\u1161\u11BC",
        "\u1103\u1162\u110C\u1165\u11AB",
        "\u1103\u1162\u110C\u1165\u11B8",
        "\u1103\u1162\u110C\u116E\u11BC",
        "\u1103\u1162\u110E\u1162\u11A8",
        "\u1103\u1162\u110E\u116E\u11AF",
        "\u1103\u1162\u110E\u116E\u11BC",
        "\u1103\u1162\u1110\u1169\u11BC\u1105\u1167\u11BC",
        "\u1103\u1162\u1112\u1161\u11A8",
        "\u1103\u1162\u1112\u1161\u11AB\u1106\u1175\u11AB\u1100\u116E\u11A8",
        "\u1103\u1162\u1112\u1161\u11B8\u1109\u1175\u11AF",
        "\u1103\u1162\u1112\u1167\u11BC",
        "\u1103\u1165\u11BC\u110B\u1165\u1105\u1175",
        "\u1103\u1166\u110B\u1175\u1110\u1173",
        "\u1103\u1169\u1103\u1162\u110E\u1166",
        "\u1103\u1169\u1103\u1165\u11A8",
        "\u1103\u1169\u1103\u116E\u11A8",
        "\u1103\u1169\u1106\u1161\u11BC",
        "\u1103\u1169\u1109\u1165\u1100\u116A\u11AB",
        "\u1103\u1169\u1109\u1175\u11B7",
        "\u1103\u1169\u110B\u116E\u11B7",
        "\u1103\u1169\u110B\u1175\u11B8",
        "\u1103\u1169\u110C\u1161\u1100\u1175",
        "\u1103\u1169\u110C\u1165\u1112\u1175",
        "\u1103\u1169\u110C\u1165\u11AB",
        "\u1103\u1169\u110C\u116E\u11BC",
        "\u1103\u1169\u110E\u1161\u11A8",
        "\u1103\u1169\u11A8\u1100\u1161\u11B7",
        "\u1103\u1169\u11A8\u1105\u1175\u11B8",
        "\u1103\u1169\u11A8\u1109\u1165",
        "\u1103\u1169\u11A8\u110B\u1175\u11AF",
        "\u1103\u1169\u11A8\u110E\u1161\u11BC\u110C\u1165\u11A8",
        "\u1103\u1169\u11BC\u1112\u116A\u110E\u1162\u11A8",
        "\u1103\u1171\u11BA\u1106\u1169\u1109\u1173\u11B8",
        "\u1103\u1171\u11BA\u1109\u1161\u11AB",
        "\u1104\u1161\u11AF\u110B\u1161\u110B\u1175",
        "\u1106\u1161\u1102\u116E\u1105\u1161",
        "\u1106\u1161\u1102\u1173\u11AF",
        "\u1106\u1161\u1103\u1161\u11BC",
        "\u1106\u1161\u1105\u1161\u1110\u1169\u11AB",
        "\u1106\u1161\u1105\u1167\u11AB",
        "\u1106\u1161\u1106\u116E\u1105\u1175",
        "\u1106\u1161\u1109\u1161\u110C\u1175",
        "\u1106\u1161\u110B\u1163\u11A8",
        "\u1106\u1161\u110B\u116D\u1102\u1166\u110C\u1173",
        "\u1106\u1161\u110B\u1173\u11AF",
        "\u1106\u1161\u110B\u1173\u11B7",
        "\u1106\u1161\u110B\u1175\u110F\u1173",
        "\u1106\u1161\u110C\u116E\u11BC",
        "\u1106\u1161\u110C\u1175\u1106\u1161\u11A8",
        "\u1106\u1161\u110E\u1161\u11AB\u1100\u1161\u110C\u1175",
        "\u1106\u1161\u110E\u1161\u11AF",
        "\u1106\u1161\u1112\u1173\u11AB",
        "\u1106\u1161\u11A8\u1100\u1165\u11AF\u1105\u1175",
        "\u1106\u1161\u11A8\u1102\u1162",
        "\u1106\u1161\u11A8\u1109\u1161\u11BC",
        "\u1106\u1161\u11AB\u1102\u1161\u11B7",
        "\u1106\u1161\u11AB\u1103\u116E",
        "\u1106\u1161\u11AB\u1109\u1166",
        "\u1106\u1161\u11AB\u110B\u1163\u11A8",
        "\u1106\u1161\u11AB\u110B\u1175\u11AF",
        "\u1106\u1161\u11AB\u110C\u1165\u11B7",
        "\u1106\u1161\u11AB\u110C\u1169\u11A8",
        "\u1106\u1161\u11AB\u1112\u116A",
        "\u1106\u1161\u11AD\u110B\u1175",
        "\u1106\u1161\u11AF\u1100\u1175",
        "\u1106\u1161\u11AF\u110A\u1173\u11B7",
        "\u1106\u1161\u11AF\u1110\u116E",
        "\u1106\u1161\u11B7\u1103\u1162\u1105\u1169",
        "\u1106\u1161\u11BC\u110B\u116F\u11AB\u1100\u1167\u11BC",
        "\u1106\u1162\u1102\u1167\u11AB",
        "\u1106\u1162\u1103\u1161\u11AF",
        "\u1106\u1162\u1105\u1167\u11A8",
        "\u1106\u1162\u1107\u1165\u11AB",
        "\u1106\u1162\u1109\u1173\u110F\u1165\u11B7",
        "\u1106\u1162\u110B\u1175\u11AF",
        "\u1106\u1162\u110C\u1161\u11BC",
        "\u1106\u1162\u11A8\u110C\u116E",
        "\u1106\u1165\u11A8\u110B\u1175",
        "\u1106\u1165\u11AB\u110C\u1165",
        "\u1106\u1165\u11AB\u110C\u1175",
        "\u1106\u1165\u11AF\u1105\u1175",
        "\u1106\u1166\u110B\u1175\u11AF",
        "\u1106\u1167\u1102\u1173\u1105\u1175",
        "\u1106\u1167\u110E\u1175\u11AF",
        "\u1106\u1167\u11AB\u1103\u1161\u11B7",
        "\u1106\u1167\u11AF\u110E\u1175",
        "\u1106\u1167\u11BC\u1103\u1161\u11AB",
        "\u1106\u1167\u11BC\u1105\u1167\u11BC",
        "\u1106\u1167\u11BC\u110B\u1168",
        "\u1106\u1167\u11BC\u110B\u1174",
        "\u1106\u1167\u11BC\u110C\u1165\u11AF",
        "\u1106\u1167\u11BC\u110E\u1175\u11BC",
        "\u1106\u1167\u11BC\u1112\u1161\u11B7",
        "\u1106\u1169\u1100\u1173\u11B7",
        "\u1106\u1169\u1102\u1175\u1110\u1165",
        "\u1106\u1169\u1103\u1166\u11AF",
        "\u1106\u1169\u1103\u1173\u11AB",
        "\u1106\u1169\u1107\u1165\u11B7",
        "\u1106\u1169\u1109\u1173\u11B8",
        "\u1106\u1169\u110B\u1163\u11BC",
        "\u1106\u1169\u110B\u1175\u11B7",
        "\u1106\u1169\u110C\u1169\u1105\u1175",
        "\u1106\u1169\u110C\u1175\u11B8",
        "\u1106\u1169\u1110\u116E\u11BC\u110B\u1175",
        "\u1106\u1169\u11A8\u1100\u1165\u11AF\u110B\u1175",
        "\u1106\u1169\u11A8\u1105\u1169\u11A8",
        "\u1106\u1169\u11A8\u1109\u1161",
        "\u1106\u1169\u11A8\u1109\u1169\u1105\u1175",
        "\u1106\u1169\u11A8\u1109\u116E\u11B7",
        "\u1106\u1169\u11A8\u110C\u1165\u11A8",
        "\u1106\u1169\u11A8\u1111\u116D",
        "\u1106\u1169\u11AF\u1105\u1162",
        "\u1106\u1169\u11B7\u1106\u1162",
        "\u1106\u1169\u11B7\u1106\u116E\u1100\u1166",
        "\u1106\u1169\u11B7\u1109\u1161\u11AF",
        "\u1106\u1169\u11B7\u1109\u1169\u11A8",
        "\u1106\u1169\u11B7\u110C\u1175\u11BA",
        "\u1106\u1169\u11B7\u1110\u1169\u11BC",
        "\u1106\u1169\u11B8\u1109\u1175",
        "\u1106\u116E\u1100\u116A\u11AB\u1109\u1175\u11B7",
        "\u1106\u116E\u1100\u116E\u11BC\u1112\u116A",
        "\u1106\u116E\u1103\u1165\u110B\u1171",
        "\u1106\u116E\u1103\u1165\u11B7",
        "\u1106\u116E\u1105\u1173\u11C1",
        "\u1106\u116E\u1109\u1173\u11AB",
        "\u1106\u116E\u110B\u1165\u11BA",
        "\u1106\u116E\u110B\u1167\u11A8",
        "\u1106\u116E\u110B\u116D\u11BC",
        "\u1106\u116E\u110C\u1169\u1100\u1165\u11AB",
        "\u1106\u116E\u110C\u1175\u1100\u1162",
        "\u1106\u116E\u110E\u1165\u11A8",
        "\u1106\u116E\u11AB\u1100\u116E",
        "\u1106\u116E\u11AB\u1103\u1173\u11A8",
        "\u1106\u116E\u11AB\u1107\u1165\u11B8",
        "\u1106\u116E\u11AB\u1109\u1165",
        "\u1106\u116E\u11AB\u110C\u1166",
        "\u1106\u116E\u11AB\u1112\u1161\u11A8",
        "\u1106\u116E\u11AB\u1112\u116A",
        "\u1106\u116E\u11AF\u1100\u1161",
        "\u1106\u116E\u11AF\u1100\u1165\u11AB",
        "\u1106\u116E\u11AF\u1100\u1167\u11AF",
        "\u1106\u116E\u11AF\u1100\u1169\u1100\u1175",
        "\u1106\u116E\u11AF\u1105\u1169\u11AB",
        "\u1106\u116E\u11AF\u1105\u1175\u1112\u1161\u11A8",
        "\u1106\u116E\u11AF\u110B\u1173\u11B7",
        "\u1106\u116E\u11AF\u110C\u1175\u11AF",
        "\u1106\u116E\u11AF\u110E\u1166",
        "\u1106\u1175\u1100\u116E\u11A8",
        "\u1106\u1175\u1103\u1175\u110B\u1165",
        "\u1106\u1175\u1109\u1161\u110B\u1175\u11AF",
        "\u1106\u1175\u1109\u116E\u11AF",
        "\u1106\u1175\u110B\u1167\u11A8",
        "\u1106\u1175\u110B\u116D\u11BC\u1109\u1175\u11AF",
        "\u1106\u1175\u110B\u116E\u11B7",
        "\u1106\u1175\u110B\u1175\u11AB",
        "\u1106\u1175\u1110\u1175\u11BC",
        "\u1106\u1175\u1112\u1169\u11AB",
        "\u1106\u1175\u11AB\u1100\u1161\u11AB",
        "\u1106\u1175\u11AB\u110C\u1169\u11A8",
        "\u1106\u1175\u11AB\u110C\u116E",
        "\u1106\u1175\u11AE\u110B\u1173\u11B7",
        "\u1106\u1175\u11AF\u1100\u1161\u1105\u116E",
        "\u1106\u1175\u11AF\u1105\u1175\u1106\u1175\u1110\u1165",
        "\u1106\u1175\u11C0\u1107\u1161\u1103\u1161\u11A8",
        "\u1107\u1161\u1100\u1161\u110C\u1175",
        "\u1107\u1161\u1100\u116E\u1102\u1175",
        "\u1107\u1161\u1102\u1161\u1102\u1161",
        "\u1107\u1161\u1102\u1173\u11AF",
        "\u1107\u1161\u1103\u1161\u11A8",
        "\u1107\u1161\u1103\u1161\u11BA\u1100\u1161",
        "\u1107\u1161\u1105\u1161\u11B7",
        "\u1107\u1161\u110B\u1175\u1105\u1165\u1109\u1173",
        "\u1107\u1161\u1110\u1161\u11BC",
        "\u1107\u1161\u11A8\u1106\u116E\u11AF\u1100\u116A\u11AB",
        "\u1107\u1161\u11A8\u1109\u1161",
        "\u1107\u1161\u11A8\u1109\u116E",
        "\u1107\u1161\u11AB\u1103\u1162",
        "\u1107\u1161\u11AB\u1103\u1173\u1109\u1175",
        "\u1107\u1161\u11AB\u1106\u1161\u11AF",
        "\u1107\u1161\u11AB\u1107\u1161\u11AF",
        "\u1107\u1161\u11AB\u1109\u1165\u11BC",
        "\u1107\u1161\u11AB\u110B\u1173\u11BC",
        "\u1107\u1161\u11AB\u110C\u1161\u11BC",
        "\u1107\u1161\u11AB\u110C\u116E\u11A8",
        "\u1107\u1161\u11AB\u110C\u1175",
        "\u1107\u1161\u11AB\u110E\u1161\u11AB",
        "\u1107\u1161\u11AE\u110E\u1175\u11B7",
        "\u1107\u1161\u11AF\u1100\u1161\u1105\u1161\u11A8",
        "\u1107\u1161\u11AF\u1100\u1165\u11AF\u110B\u1173\u11B7",
        "\u1107\u1161\u11AF\u1100\u1167\u11AB",
        "\u1107\u1161\u11AF\u1103\u1161\u11AF",
        "\u1107\u1161\u11AF\u1105\u1166",
        "\u1107\u1161\u11AF\u1106\u1169\u11A8",
        "\u1107\u1161\u11AF\u1107\u1161\u1103\u1161\u11A8",
        "\u1107\u1161\u11AF\u1109\u1162\u11BC",
        "\u1107\u1161\u11AF\u110B\u1173\u11B7",
        "\u1107\u1161\u11AF\u110C\u1161\u1100\u116E\u11A8",
        "\u1107\u1161\u11AF\u110C\u1165\u11AB",
        "\u1107\u1161\u11AF\u1110\u1169\u11B8",
        "\u1107\u1161\u11AF\u1111\u116D",
        "\u1107\u1161\u11B7\u1112\u1161\u1102\u1173\u11AF",
        "\u1107\u1161\u11B8\u1100\u1173\u1105\u1173\u11BA",
        "\u1107\u1161\u11B8\u1106\u1161\u11BA",
        "\u1107\u1161\u11B8\u1109\u1161\u11BC",
        "\u1107\u1161\u11B8\u1109\u1169\u11C0",
        "\u1107\u1161\u11BC\u1100\u1173\u11B7",
        "\u1107\u1161\u11BC\u1106\u1167\u11AB",
        "\u1107\u1161\u11BC\u1106\u116E\u11AB",
        "\u1107\u1161\u11BC\u1107\u1161\u1103\u1161\u11A8",
        "\u1107\u1161\u11BC\u1107\u1165\u11B8",
        "\u1107\u1161\u11BC\u1109\u1169\u11BC",
        "\u1107\u1161\u11BC\u1109\u1175\u11A8",
        "\u1107\u1161\u11BC\u110B\u1161\u11AB",
        "\u1107\u1161\u11BC\u110B\u116E\u11AF",
        "\u1107\u1161\u11BC\u110C\u1175",
        "\u1107\u1161\u11BC\u1112\u1161\u11A8",
        "\u1107\u1161\u11BC\u1112\u1162",
        "\u1107\u1161\u11BC\u1112\u1163\u11BC",
        "\u1107\u1162\u1100\u1167\u11BC",
        "\u1107\u1162\u1101\u1169\u11B8",
        "\u1107\u1162\u1103\u1161\u11AF",
        "\u1107\u1162\u1103\u1173\u1106\u1175\u11AB\u1110\u1165\u11AB",
        "\u1107\u1162\u11A8\u1103\u116E\u1109\u1161\u11AB",
        "\u1107\u1162\u11A8\u1109\u1162\u11A8",
        "\u1107\u1162\u11A8\u1109\u1165\u11BC",
        "\u1107\u1162\u11A8\u110B\u1175\u11AB",
        "\u1107\u1162\u11A8\u110C\u1166",
        "\u1107\u1162\u11A8\u1112\u116A\u110C\u1165\u11B7",
        "\u1107\u1165\u1105\u1173\u11BA",
        "\u1107\u1165\u1109\u1165\u11BA",
        "\u1107\u1165\u1110\u1173\u11AB",
        "\u1107\u1165\u11AB\u1100\u1162",
        "\u1107\u1165\u11AB\u110B\u1167\u11A8",
        "\u1107\u1165\u11AB\u110C\u1175",
        "\u1107\u1165\u11AB\u1112\u1169",
        "\u1107\u1165\u11AF\u1100\u1173\u11B7",
        "\u1107\u1165\u11AF\u1105\u1166",
        "\u1107\u1165\u11AF\u110A\u1165",
        "\u1107\u1165\u11B7\u110B\u1171",
        "\u1107\u1165\u11B7\u110B\u1175\u11AB",
        "\u1107\u1165\u11B7\u110C\u116C",
        "\u1107\u1165\u11B8\u1105\u1172\u11AF",
        "\u1107\u1165\u11B8\u110B\u116F\u11AB",
        "\u1107\u1165\u11B8\u110C\u1165\u11A8",
        "\u1107\u1165\u11B8\u110E\u1175\u11A8",
        "\u1107\u1166\u110B\u1175\u110C\u1175\u11BC",
        "\u1107\u1166\u11AF\u1110\u1173",
        "\u1107\u1167\u11AB\u1100\u1167\u11BC",
        "\u1107\u1167\u11AB\u1103\u1169\u11BC",
        "\u1107\u1167\u11AB\u1106\u1167\u11BC",
        "\u1107\u1167\u11AB\u1109\u1175\u11AB",
        "\u1107\u1167\u11AB\u1112\u1169\u1109\u1161",
        "\u1107\u1167\u11AB\u1112\u116A",
        "\u1107\u1167\u11AF\u1103\u1169",
        "\u1107\u1167\u11AF\u1106\u1167\u11BC",
        "\u1107\u1167\u11AF\u110B\u1175\u11AF",
        "\u1107\u1167\u11BC\u1109\u1175\u11AF",
        "\u1107\u1167\u11BC\u110B\u1161\u1105\u1175",
        "\u1107\u1167\u11BC\u110B\u116F\u11AB",
        "\u1107\u1169\u1100\u116A\u11AB",
        "\u1107\u1169\u1102\u1165\u1109\u1173",
        "\u1107\u1169\u1105\u1161\u1109\u1162\u11A8",
        "\u1107\u1169\u1105\u1161\u11B7",
        "\u1107\u1169\u1105\u1173\u11B7",
        "\u1107\u1169\u1109\u1161\u11BC",
        "\u1107\u1169\u110B\u1161\u11AB",
        "\u1107\u1169\u110C\u1161\u1100\u1175",
        "\u1107\u1169\u110C\u1161\u11BC",
        "\u1107\u1169\u110C\u1165\u11AB",
        "\u1107\u1169\u110C\u1169\u11AB",
        "\u1107\u1169\u1110\u1169\u11BC",
        "\u1107\u1169\u1111\u1167\u11AB\u110C\u1165\u11A8",
        "\u1107\u1169\u1112\u1165\u11B7",
        "\u1107\u1169\u11A8\u1103\u1169",
        "\u1107\u1169\u11A8\u1109\u1161",
        "\u1107\u1169\u11A8\u1109\u116E\u11BC\u110B\u1161",
        "\u1107\u1169\u11A8\u1109\u1173\u11B8",
        "\u1107\u1169\u11A9\u110B\u1173\u11B7",
        "\u1107\u1169\u11AB\u1100\u1167\u11A8\u110C\u1165\u11A8",
        "\u1107\u1169\u11AB\u1105\u1162",
        "\u1107\u1169\u11AB\u1107\u116E",
        "\u1107\u1169\u11AB\u1109\u1161",
        "\u1107\u1169\u11AB\u1109\u1165\u11BC",
        "\u1107\u1169\u11AB\u110B\u1175\u11AB",
        "\u1107\u1169\u11AB\u110C\u1175\u11AF",
        "\u1107\u1169\u11AF\u1111\u1166\u11AB",
        "\u1107\u1169\u11BC\u1109\u1161",
        "\u1107\u1169\u11BC\u110C\u1175",
        "\u1107\u1169\u11BC\u1110\u116E",
        "\u1107\u116E\u1100\u1173\u11AB",
        "\u1107\u116E\u1101\u1173\u1105\u1165\u110B\u116E\u11B7",
        "\u1107\u116E\u1103\u1161\u11B7",
        "\u1107\u116E\u1103\u1169\u11BC\u1109\u1161\u11AB",
        "\u1107\u116E\u1106\u116E\u11AB",
        "\u1107\u116E\u1107\u116E\u11AB",
        "\u1107\u116E\u1109\u1161\u11AB",
        "\u1107\u116E\u1109\u1161\u11BC",
        "\u1107\u116E\u110B\u1165\u11BF",
        "\u1107\u116E\u110B\u1175\u11AB",
        "\u1107\u116E\u110C\u1161\u11A8\u110B\u116D\u11BC",
        "\u1107\u116E\u110C\u1161\u11BC",
        "\u1107\u116E\u110C\u1165\u11BC",
        "\u1107\u116E\u110C\u1169\u11A8",
        "\u1107\u116E\u110C\u1175\u1105\u1165\u11AB\u1112\u1175",
        "\u1107\u116E\u110E\u1175\u11AB",
        "\u1107\u116E\u1110\u1161\u11A8",
        "\u1107\u116E\u1111\u116E\u11B7",
        "\u1107\u116E\u1112\u116C\u110C\u1161\u11BC",
        "\u1107\u116E\u11A8\u1107\u116E",
        "\u1107\u116E\u11A8\u1112\u1161\u11AB",
        "\u1107\u116E\u11AB\u1102\u1169",
        "\u1107\u116E\u11AB\u1105\u1163\u11BC",
        "\u1107\u116E\u11AB\u1105\u1175",
        "\u1107\u116E\u11AB\u1106\u1167\u11BC",
        "\u1107\u116E\u11AB\u1109\u1165\u11A8",
        "\u1107\u116E\u11AB\u110B\u1163",
        "\u1107\u116E\u11AB\u110B\u1171\u1100\u1175",
        "\u1107\u116E\u11AB\u1111\u1175\u11AF",
        "\u1107\u116E\u11AB\u1112\u1169\u11BC\u1109\u1162\u11A8",
        "\u1107\u116E\u11AF\u1100\u1169\u1100\u1175",
        "\u1107\u116E\u11AF\u1100\u116A",
        "\u1107\u116E\u11AF\u1100\u116D",
        "\u1107\u116E\u11AF\u1101\u1169\u11BE",
        "\u1107\u116E\u11AF\u1106\u1161\u11AB",
        "\u1107\u116E\u11AF\u1107\u1165\u11B8",
        "\u1107\u116E\u11AF\u1107\u1175\u11BE",
        "\u1107\u116E\u11AF\u110B\u1161\u11AB",
        "\u1107\u116E\u11AF\u110B\u1175\u110B\u1175\u11A8",
        "\u1107\u116E\u11AF\u1112\u1162\u11BC",
        "\u1107\u1173\u1105\u1162\u11AB\u1103\u1173",
        "\u1107\u1175\u1100\u1173\u11A8",
        "\u1107\u1175\u1102\u1161\u11AB",
        "\u1107\u1175\u1102\u1175\u11AF",
        "\u1107\u1175\u1103\u116E\u11AF\u1100\u1175",
        "\u1107\u1175\u1103\u1175\u110B\u1169",
        "\u1107\u1175\u1105\u1169\u1109\u1169",
        "\u1107\u1175\u1106\u1161\u11AB",
        "\u1107\u1175\u1106\u1167\u11BC",
        "\u1107\u1175\u1106\u1175\u11AF",
        "\u1107\u1175\u1107\u1161\u1105\u1161\u11B7",
        "\u1107\u1175\u1107\u1175\u11B7\u1107\u1161\u11B8",
        "\u1107\u1175\u1109\u1161\u11BC",
        "\u1107\u1175\u110B\u116D\u11BC",
        "\u1107\u1175\u110B\u1172\u11AF",
        "\u1107\u1175\u110C\u116E\u11BC",
        "\u1107\u1175\u1110\u1161\u1106\u1175\u11AB",
        "\u1107\u1175\u1111\u1161\u11AB",
        "\u1107\u1175\u11AF\u1103\u1175\u11BC",
        "\u1107\u1175\u11BA\u1106\u116E\u11AF",
        "\u1107\u1175\u11BA\u1107\u1161\u11BC\u110B\u116E\u11AF",
        "\u1107\u1175\u11BA\u110C\u116E\u11AF\u1100\u1175",
        "\u1107\u1175\u11BE\u1101\u1161\u11AF",
        "\u1108\u1161\u11AF\u1100\u1161\u11AB\u1109\u1162\u11A8",
        "\u1108\u1161\u11AF\u1105\u1162",
        "\u1108\u1161\u11AF\u1105\u1175",
        "\u1109\u1161\u1100\u1165\u11AB",
        "\u1109\u1161\u1100\u1168\u110C\u1165\u11AF",
        "\u1109\u1161\u1102\u1161\u110B\u1175",
        "\u1109\u1161\u1102\u1163\u11BC",
        "\u1109\u1161\u1105\u1161\u11B7",
        "\u1109\u1161\u1105\u1161\u11BC",
        "\u1109\u1161\u1105\u1175\u11B8",
        "\u1109\u1161\u1106\u1169\u1102\u1175\u11B7",
        "\u1109\u1161\u1106\u116E\u11AF",
        "\u1109\u1161\u1107\u1161\u11BC",
        "\u1109\u1161\u1109\u1161\u11BC",
        "\u1109\u1161\u1109\u1162\u11BC\u1112\u116A\u11AF",
        "\u1109\u1161\u1109\u1165\u11AF",
        "\u1109\u1161\u1109\u1173\u11B7",
        "\u1109\u1161\u1109\u1175\u11AF",
        "\u1109\u1161\u110B\u1165\u11B8",
        "\u1109\u1161\u110B\u116D\u11BC",
        "\u1109\u1161\u110B\u116F\u11AF",
        "\u1109\u1161\u110C\u1161\u11BC",
        "\u1109\u1161\u110C\u1165\u11AB",
        "\u1109\u1161\u110C\u1175\u11AB",
        "\u1109\u1161\u110E\u1169\u11AB",
        "\u1109\u1161\u110E\u116E\u11AB\u1100\u1175",
        "\u1109\u1161\u1110\u1161\u11BC",
        "\u1109\u1161\u1110\u116E\u1105\u1175",
        "\u1109\u1161\u1112\u1173\u11AF",
        "\u1109\u1161\u11AB\u1100\u1175\u11AF",
        "\u1109\u1161\u11AB\u1107\u116E\u110B\u1175\u11AB\u1100\u116A",
        "\u1109\u1161\u11AB\u110B\u1165\u11B8",
        "\u1109\u1161\u11AB\u110E\u1162\u11A8",
        "\u1109\u1161\u11AF\u1105\u1175\u11B7",
        "\u1109\u1161\u11AF\u110B\u1175\u11AB",
        "\u1109\u1161\u11AF\u110D\u1161\u11A8",
        "\u1109\u1161\u11B7\u1100\u1168\u1110\u1161\u11BC",
        "\u1109\u1161\u11B7\u1100\u116E\u11A8",
        "\u1109\u1161\u11B7\u1109\u1175\u11B8",
        "\u1109\u1161\u11B7\u110B\u116F\u11AF",
        "\u1109\u1161\u11B7\u110E\u1169\u11AB",
        "\u1109\u1161\u11BC\u1100\u116A\u11AB",
        "\u1109\u1161\u11BC\u1100\u1173\u11B7",
        "\u1109\u1161\u11BC\u1103\u1162",
        "\u1109\u1161\u11BC\u1105\u1172",
        "\u1109\u1161\u11BC\u1107\u1161\u11AB\u1100\u1175",
        "\u1109\u1161\u11BC\u1109\u1161\u11BC",
        "\u1109\u1161\u11BC\u1109\u1175\u11A8",
        "\u1109\u1161\u11BC\u110B\u1165\u11B8",
        "\u1109\u1161\u11BC\u110B\u1175\u11AB",
        "\u1109\u1161\u11BC\u110C\u1161",
        "\u1109\u1161\u11BC\u110C\u1165\u11B7",
        "\u1109\u1161\u11BC\u110E\u1165",
        "\u1109\u1161\u11BC\u110E\u116E",
        "\u1109\u1161\u11BC\u1110\u1162",
        "\u1109\u1161\u11BC\u1111\u116D",
        "\u1109\u1161\u11BC\u1111\u116E\u11B7",
        "\u1109\u1161\u11BC\u1112\u116A\u11BC",
        "\u1109\u1162\u1107\u1167\u11A8",
        "\u1109\u1162\u11A8\u1101\u1161\u11AF",
        "\u1109\u1162\u11A8\u110B\u1167\u11AB\u1111\u1175\u11AF",
        "\u1109\u1162\u11BC\u1100\u1161\u11A8",
        "\u1109\u1162\u11BC\u1106\u1167\u11BC",
        "\u1109\u1162\u11BC\u1106\u116E\u11AF",
        "\u1109\u1162\u11BC\u1107\u1161\u11BC\u1109\u1169\u11BC",
        "\u1109\u1162\u11BC\u1109\u1161\u11AB",
        "\u1109\u1162\u11BC\u1109\u1165\u11AB",
        "\u1109\u1162\u11BC\u1109\u1175\u11AB",
        "\u1109\u1162\u11BC\u110B\u1175\u11AF",
        "\u1109\u1162\u11BC\u1112\u116A\u11AF",
        "\u1109\u1165\u1105\u1161\u11B8",
        "\u1109\u1165\u1105\u1173\u11AB",
        "\u1109\u1165\u1106\u1167\u11BC",
        "\u1109\u1165\u1106\u1175\u11AB",
        "\u1109\u1165\u1107\u1175\u1109\u1173",
        "\u1109\u1165\u110B\u1163\u11BC",
        "\u1109\u1165\u110B\u116E\u11AF",
        "\u1109\u1165\u110C\u1165\u11A8",
        "\u1109\u1165\u110C\u1165\u11B7",
        "\u1109\u1165\u110D\u1169\u11A8",
        "\u1109\u1165\u110F\u1173\u11AF",
        "\u1109\u1165\u11A8\u1109\u1161",
        "\u1109\u1165\u11A8\u110B\u1172",
        "\u1109\u1165\u11AB\u1100\u1165",
        "\u1109\u1165\u11AB\u1106\u116E\u11AF",
        "\u1109\u1165\u11AB\u1107\u1162",
        "\u1109\u1165\u11AB\u1109\u1162\u11BC",
        "\u1109\u1165\u11AB\u1109\u116E",
        "\u1109\u1165\u11AB\u110B\u116F\u11AB",
        "\u1109\u1165\u11AB\u110C\u1161\u11BC",
        "\u1109\u1165\u11AB\u110C\u1165\u11AB",
        "\u1109\u1165\u11AB\u1110\u1162\u11A8",
        "\u1109\u1165\u11AB\u1111\u116E\u11BC\u1100\u1175",
        "\u1109\u1165\u11AF\u1100\u1165\u110C\u1175",
        "\u1109\u1165\u11AF\u1102\u1161\u11AF",
        "\u1109\u1165\u11AF\u1105\u1165\u11BC\u1110\u1161\u11BC",
        "\u1109\u1165\u11AF\u1106\u1167\u11BC",
        "\u1109\u1165\u11AF\u1106\u116E\u11AB",
        "\u1109\u1165\u11AF\u1109\u1161",
        "\u1109\u1165\u11AF\u110B\u1161\u11A8\u1109\u1161\u11AB",
        "\u1109\u1165\u11AF\u110E\u1175",
        "\u1109\u1165\u11AF\u1110\u1161\u11BC",
        "\u1109\u1165\u11B8\u110A\u1175",
        "\u1109\u1165\u11BC\u1100\u1169\u11BC",
        "\u1109\u1165\u11BC\u1103\u1161\u11BC",
        "\u1109\u1165\u11BC\u1106\u1167\u11BC",
        "\u1109\u1165\u11BC\u1107\u1167\u11AF",
        "\u1109\u1165\u11BC\u110B\u1175\u11AB",
        "\u1109\u1165\u11BC\u110C\u1161\u11BC",
        "\u1109\u1165\u11BC\u110C\u1165\u11A8",
        "\u1109\u1165\u11BC\u110C\u1175\u11AF",
        "\u1109\u1165\u11BC\u1112\u1161\u11B7",
        "\u1109\u1166\u1100\u1173\u11B7",
        "\u1109\u1166\u1106\u1175\u1102\u1161",
        "\u1109\u1166\u1109\u1161\u11BC",
        "\u1109\u1166\u110B\u116F\u11AF",
        "\u1109\u1166\u110C\u1169\u11BC\u1103\u1162\u110B\u116A\u11BC",
        "\u1109\u1166\u1110\u1161\u11A8",
        "\u1109\u1166\u11AB\u1110\u1165",
        "\u1109\u1166\u11AB\u1110\u1175\u1106\u1175\u1110\u1165",
        "\u1109\u1166\u11BA\u110D\u1162",
        "\u1109\u1169\u1100\u1172\u1106\u1169",
        "\u1109\u1169\u1100\u1173\u11A8\u110C\u1165\u11A8",
        "\u1109\u1169\u1100\u1173\u11B7",
        "\u1109\u1169\u1102\u1161\u1100\u1175",
        "\u1109\u1169\u1102\u1167\u11AB",
        "\u1109\u1169\u1103\u1173\u11A8",
        "\u1109\u1169\u1106\u1161\u11BC",
        "\u1109\u1169\u1106\u116E\u11AB",
        "\u1109\u1169\u1109\u1165\u11AF",
        "\u1109\u1169\u1109\u1169\u11A8",
        "\u1109\u1169\u110B\u1161\u1100\u116A",
        "\u1109\u1169\u110B\u116D\u11BC",
        "\u1109\u1169\u110B\u116F\u11AB",
        "\u1109\u1169\u110B\u1173\u11B7",
        "\u1109\u1169\u110C\u116E\u11BC\u1112\u1175",
        "\u1109\u1169\u110C\u1175\u1111\u116E\u11B7",
        "\u1109\u1169\u110C\u1175\u11AF",
        "\u1109\u1169\u1111\u116E\u11BC",
        "\u1109\u1169\u1112\u1167\u11BC",
        "\u1109\u1169\u11A8\u1103\u1161\u11B7",
        "\u1109\u1169\u11A8\u1103\u1169",
        "\u1109\u1169\u11A8\u110B\u1169\u11BA",
        "\u1109\u1169\u11AB\u1100\u1161\u1105\u1161\u11A8",
        "\u1109\u1169\u11AB\u1100\u1175\u11AF",
        "\u1109\u1169\u11AB\u1102\u1167",
        "\u1109\u1169\u11AB\u1102\u1175\u11B7",
        "\u1109\u1169\u11AB\u1103\u1173\u11BC",
        "\u1109\u1169\u11AB\u1106\u1169\u11A8",
        "\u1109\u1169\u11AB\u1108\u1167\u11A8",
        "\u1109\u1169\u11AB\u1109\u1175\u11AF",
        "\u1109\u1169\u11AB\u110C\u1175\u11AF",
        "\u1109\u1169\u11AB\u1110\u1169\u11B8",
        "\u1109\u1169\u11AB\u1112\u1162",
        "\u1109\u1169\u11AF\u110C\u1175\u11A8\u1112\u1175",
        "\u1109\u1169\u11B7\u110A\u1175",
        "\u1109\u1169\u11BC\u110B\u1161\u110C\u1175",
        "\u1109\u1169\u11BC\u110B\u1175",
        "\u1109\u1169\u11BC\u1111\u1167\u11AB",
        "\u1109\u116C\u1100\u1169\u1100\u1175",
        "\u1109\u116D\u1111\u1175\u11BC",
        "\u1109\u116E\u1100\u1165\u11AB",
        "\u1109\u116E\u1102\u1167\u11AB",
        "\u1109\u116E\u1103\u1161\u11AB",
        "\u1109\u116E\u1103\u1169\u11BA\u1106\u116E\u11AF",
        "\u1109\u116E\u1103\u1169\u11BC\u110C\u1165\u11A8",
        "\u1109\u116E\u1106\u1167\u11AB",
        "\u1109\u116E\u1106\u1167\u11BC",
        "\u1109\u116E\u1107\u1161\u11A8",
        "\u1109\u116E\u1109\u1161\u11BC",
        "\u1109\u116E\u1109\u1165\u11A8",
        "\u1109\u116E\u1109\u116E\u11AF",
        "\u1109\u116E\u1109\u1175\u1105\u1169",
        "\u1109\u116E\u110B\u1165\u11B8",
        "\u1109\u116E\u110B\u1167\u11B7",
        "\u1109\u116E\u110B\u1167\u11BC",
        "\u1109\u116E\u110B\u1175\u11B8",
        "\u1109\u116E\u110C\u116E\u11AB",
        "\u1109\u116E\u110C\u1175\u11B8",
        "\u1109\u116E\u110E\u116E\u11AF",
        "\u1109\u116E\u110F\u1165\u11BA",
        "\u1109\u116E\u1111\u1175\u11AF",
        "\u1109\u116E\u1112\u1161\u11A8",
        "\u1109\u116E\u1112\u1165\u11B7\u1109\u1162\u11BC",
        "\u1109\u116E\u1112\u116A\u1100\u1175",
        "\u1109\u116E\u11A8\u1102\u1167",
        "\u1109\u116E\u11A8\u1109\u1169",
        "\u1109\u116E\u11A8\u110C\u1166",
        "\u1109\u116E\u11AB\u1100\u1161\u11AB",
        "\u1109\u116E\u11AB\u1109\u1165",
        "\u1109\u116E\u11AB\u1109\u116E",
        "\u1109\u116E\u11AB\u1109\u1175\u11A8\u1100\u1161\u11AB",
        "\u1109\u116E\u11AB\u110B\u1171",
        "\u1109\u116E\u11AE\u1100\u1161\u1105\u1161\u11A8",
        "\u1109\u116E\u11AF\u1107\u1167\u11BC",
        "\u1109\u116E\u11AF\u110C\u1175\u11B8",
        "\u1109\u116E\u11BA\u110C\u1161",
        "\u1109\u1173\u1102\u1175\u11B7",
        "\u1109\u1173\u1106\u116E\u11AF",
        "\u1109\u1173\u1109\u1173\u1105\u1169",
        "\u1109\u1173\u1109\u1173\u11BC",
        "\u1109\u1173\u110B\u1170\u1110\u1165",
        "\u1109\u1173\u110B\u1171\u110E\u1175",
        "\u1109\u1173\u110F\u1166\u110B\u1175\u1110\u1173",
        "\u1109\u1173\u1110\u1172\u1103\u1175\u110B\u1169",
        "\u1109\u1173\u1110\u1173\u1105\u1166\u1109\u1173",
        "\u1109\u1173\u1111\u1169\u110E\u1173",
        "\u1109\u1173\u11AF\u110D\u1165\u11A8",
        "\u1109\u1173\u11AF\u1111\u1173\u11B7",
        "\u1109\u1173\u11B8\u1100\u116A\u11AB",
        "\u1109\u1173\u11B8\u1100\u1175",
        "\u1109\u1173\u11BC\u1100\u1162\u11A8",
        "\u1109\u1173\u11BC\u1105\u1175",
        "\u1109\u1173\u11BC\u1107\u116E",
        "\u1109\u1173\u11BC\u110B\u116D\u11BC\u110E\u1161",
        "\u1109\u1173\u11BC\u110C\u1175\u11AB",
        "\u1109\u1175\u1100\u1161\u11A8",
        "\u1109\u1175\u1100\u1161\u11AB",
        "\u1109\u1175\u1100\u1169\u11AF",
        "\u1109\u1175\u1100\u1173\u11B7\u110E\u1175",
        "\u1109\u1175\u1102\u1161\u1105\u1175\u110B\u1169",
        "\u1109\u1175\u1103\u1162\u11A8",
        "\u1109\u1175\u1105\u1175\u110C\u1173",
        "\u1109\u1175\u1106\u1166\u11AB\u1110\u1173",
        "\u1109\u1175\u1106\u1175\u11AB",
        "\u1109\u1175\u1107\u116E\u1106\u1169",
        "\u1109\u1175\u1109\u1165\u11AB",
        "\u1109\u1175\u1109\u1165\u11AF",
        "\u1109\u1175\u1109\u1173\u1110\u1166\u11B7",
        "\u1109\u1175\u110B\u1161\u1107\u1165\u110C\u1175",
        "\u1109\u1175\u110B\u1165\u1106\u1165\u1102\u1175",
        "\u1109\u1175\u110B\u116F\u11AF",
        "\u1109\u1175\u110B\u1175\u11AB",
        "\u1109\u1175\u110B\u1175\u11AF",
        "\u1109\u1175\u110C\u1161\u11A8",
        "\u1109\u1175\u110C\u1161\u11BC",
        "\u1109\u1175\u110C\u1165\u11AF",
        "\u1109\u1175\u110C\u1165\u11B7",
        "\u1109\u1175\u110C\u116E\u11BC",
        "\u1109\u1175\u110C\u1173\u11AB",
        "\u1109\u1175\u110C\u1175\u11B8",
        "\u1109\u1175\u110E\u1165\u11BC",
        "\u1109\u1175\u1112\u1161\u11B8",
        "\u1109\u1175\u1112\u1165\u11B7",
        "\u1109\u1175\u11A8\u1100\u116E",
        "\u1109\u1175\u11A8\u1100\u1175",
        "\u1109\u1175\u11A8\u1103\u1161\u11BC",
        "\u1109\u1175\u11A8\u1105\u1163\u11BC",
        "\u1109\u1175\u11A8\u1105\u116D\u1111\u116E\u11B7",
        "\u1109\u1175\u11A8\u1106\u116E\u11AF",
        "\u1109\u1175\u11A8\u1108\u1161\u11BC",
        "\u1109\u1175\u11A8\u1109\u1161",
        "\u1109\u1175\u11A8\u1109\u1162\u11BC\u1112\u116A\u11AF",
        "\u1109\u1175\u11A8\u110E\u1169",
        "\u1109\u1175\u11A8\u1110\u1161\u11A8",
        "\u1109\u1175\u11A8\u1111\u116E\u11B7",
        "\u1109\u1175\u11AB\u1100\u1169",
        "\u1109\u1175\u11AB\u1100\u1172",
        "\u1109\u1175\u11AB\u1102\u1167\u11B7",
        "\u1109\u1175\u11AB\u1106\u116E\u11AB",
        "\u1109\u1175\u11AB\u1107\u1161\u11AF",
        "\u1109\u1175\u11AB\u1107\u1175",
        "\u1109\u1175\u11AB\u1109\u1161",
        "\u1109\u1175\u11AB\u1109\u1166",
        "\u1109\u1175\u11AB\u110B\u116D\u11BC",
        "\u1109\u1175\u11AB\u110C\u1166\u1111\u116E\u11B7",
        "\u1109\u1175\u11AB\u110E\u1165\u11BC",
        "\u1109\u1175\u11AB\u110E\u1166",
        "\u1109\u1175\u11AB\u1112\u116A",
        "\u1109\u1175\u11AF\u1100\u1161\u11B7",
        "\u1109\u1175\u11AF\u1102\u1162",
        "\u1109\u1175\u11AF\u1105\u1167\u11A8",
        "\u1109\u1175\u11AF\u1105\u1168",
        "\u1109\u1175\u11AF\u1106\u1161\u11BC",
        "\u1109\u1175\u11AF\u1109\u116E",
        "\u1109\u1175\u11AF\u1109\u1173\u11B8",
        "\u1109\u1175\u11AF\u1109\u1175",
        "\u1109\u1175\u11AF\u110C\u1161\u11BC",
        "\u1109\u1175\u11AF\u110C\u1165\u11BC",
        "\u1109\u1175\u11AF\u110C\u1175\u11AF\u110C\u1165\u11A8",
        "\u1109\u1175\u11AF\u110E\u1165\u11AB",
        "\u1109\u1175\u11AF\u110E\u1166",
        "\u1109\u1175\u11AF\u110F\u1165\u11BA",
        "\u1109\u1175\u11AF\u1110\u1162",
        "\u1109\u1175\u11AF\u1111\u1162",
        "\u1109\u1175\u11AF\u1112\u1165\u11B7",
        "\u1109\u1175\u11AF\u1112\u1167\u11AB",
        "\u1109\u1175\u11B7\u1105\u1175",
        "\u1109\u1175\u11B7\u1107\u116E\u1105\u1173\u11B7",
        "\u1109\u1175\u11B7\u1109\u1161",
        "\u1109\u1175\u11B7\u110C\u1161\u11BC",
        "\u1109\u1175\u11B7\u110C\u1165\u11BC",
        "\u1109\u1175\u11B7\u1111\u1161\u11AB",
        "\u110A\u1161\u11BC\u1103\u116E\u11BC\u110B\u1175",
        "\u110A\u1175\u1105\u1173\u11B7",
        "\u110A\u1175\u110B\u1161\u11BA",
        "\u110B\u1161\u1100\u1161\u110A\u1175",
        "\u110B\u1161\u1102\u1161\u110B\u116E\u11AB\u1109\u1165",
        "\u110B\u1161\u1103\u1173\u1102\u1175\u11B7",
        "\u110B\u1161\u1103\u1173\u11AF",
        "\u110B\u1161\u1109\u1171\u110B\u116E\u11B7",
        "\u110B\u1161\u1109\u1173\u1111\u1161\u11AF\u1110\u1173",
        "\u110B\u1161\u1109\u1175\u110B\u1161",
        "\u110B\u1161\u110B\u116E\u11AF\u1105\u1165",
        "\u110B\u1161\u110C\u1165\u110A\u1175",
        "\u110B\u1161\u110C\u116E\u11B7\u1106\u1161",
        "\u110B\u1161\u110C\u1175\u11A8",
        "\u110B\u1161\u110E\u1175\u11B7",
        "\u110B\u1161\u1111\u1161\u1110\u1173",
        "\u110B\u1161\u1111\u1173\u1105\u1175\u110F\u1161",
        "\u110B\u1161\u1111\u1173\u11B7",
        "\u110B\u1161\u1112\u1169\u11B8",
        "\u110B\u1161\u1112\u1173\u11AB",
        "\u110B\u1161\u11A8\u1100\u1175",
        "\u110B\u1161\u11A8\u1106\u1169\u11BC",
        "\u110B\u1161\u11A8\u1109\u116E",
        "\u110B\u1161\u11AB\u1100\u1162",
        "\u110B\u1161\u11AB\u1100\u1167\u11BC",
        "\u110B\u1161\u11AB\u1100\u116A",
        "\u110B\u1161\u11AB\u1102\u1162",
        "\u110B\u1161\u11AB\u1102\u1167\u11BC",
        "\u110B\u1161\u11AB\u1103\u1169\u11BC",
        "\u110B\u1161\u11AB\u1107\u1161\u11BC",
        "\u110B\u1161\u11AB\u1107\u116E",
        "\u110B\u1161\u11AB\u110C\u116E",
        "\u110B\u1161\u11AF\u1105\u116E\u1106\u1175\u1102\u1172\u11B7",
        "\u110B\u1161\u11AF\u110F\u1169\u110B\u1169\u11AF",
        "\u110B\u1161\u11B7\u1109\u1175",
        "\u110B\u1161\u11B7\u110F\u1165\u11BA",
        "\u110B\u1161\u11B8\u1105\u1167\u11A8",
        "\u110B\u1161\u11C1\u1102\u1161\u11AF",
        "\u110B\u1161\u11C1\u1106\u116E\u11AB",
        "\u110B\u1162\u110B\u1175\u11AB",
        "\u110B\u1162\u110C\u1165\u11BC",
        "\u110B\u1162\u11A8\u1109\u116E",
        "\u110B\u1162\u11AF\u1107\u1165\u11B7",
        "\u110B\u1163\u1100\u1161\u11AB",
        "\u110B\u1163\u1103\u1161\u11AB",
        "\u110B\u1163\u110B\u1169\u11BC",
        "\u110B\u1163\u11A8\u1100\u1161\u11AB",
        "\u110B\u1163\u11A8\u1100\u116E\u11A8",
        "\u110B\u1163\u11A8\u1109\u1169\u11A8",
        "\u110B\u1163\u11A8\u1109\u116E",
        "\u110B\u1163\u11A8\u110C\u1165\u11B7",
        "\u110B\u1163\u11A8\u1111\u116E\u11B7",
        "\u110B\u1163\u11A8\u1112\u1169\u11AB\u1102\u1167",
        "\u110B\u1163\u11BC\u1102\u1167\u11B7",
        "\u110B\u1163\u11BC\u1105\u1167\u11A8",
        "\u110B\u1163\u11BC\u1106\u1161\u11AF",
        "\u110B\u1163\u11BC\u1107\u1162\u110E\u116E",
        "\u110B\u1163\u11BC\u110C\u116E",
        "\u110B\u1163\u11BC\u1111\u1161",
        "\u110B\u1165\u1103\u116E\u11B7",
        "\u110B\u1165\u1105\u1167\u110B\u116E\u11B7",
        "\u110B\u1165\u1105\u1173\u11AB",
        "\u110B\u1165\u110C\u1166\u11BA\u1107\u1161\u11B7",
        "\u110B\u1165\u110D\u1162\u11BB\u1103\u1173\u11AB",
        "\u110B\u1165\u110D\u1165\u1103\u1161\u1100\u1161",
        "\u110B\u1165\u110D\u1165\u11AB\u110C\u1175",
        "\u110B\u1165\u11AB\u1102\u1175",
        "\u110B\u1165\u11AB\u1103\u1165\u11A8",
        "\u110B\u1165\u11AB\u1105\u1169\u11AB",
        "\u110B\u1165\u11AB\u110B\u1165",
        "\u110B\u1165\u11AF\u1100\u116E\u11AF",
        "\u110B\u1165\u11AF\u1105\u1173\u11AB",
        "\u110B\u1165\u11AF\u110B\u1173\u11B7",
        "\u110B\u1165\u11AF\u1111\u1175\u11BA",
        "\u110B\u1165\u11B7\u1106\u1161",
        "\u110B\u1165\u11B8\u1106\u116E",
        "\u110B\u1165\u11B8\u110C\u1169\u11BC",
        "\u110B\u1165\u11B8\u110E\u1166",
        "\u110B\u1165\u11BC\u1103\u1165\u11BC\u110B\u1175",
        "\u110B\u1165\u11BC\u1106\u1161\u11BC",
        "\u110B\u1165\u11BC\u1110\u1165\u1105\u1175",
        "\u110B\u1165\u11BD\u1100\u1173\u110C\u1166",
        "\u110B\u1166\u1102\u1165\u110C\u1175",
        "\u110B\u1166\u110B\u1165\u110F\u1165\u11AB",
        "\u110B\u1166\u11AB\u110C\u1175\u11AB",
        "\u110B\u1167\u1100\u1165\u11AB",
        "\u110B\u1167\u1100\u1169\u1109\u1162\u11BC",
        "\u110B\u1167\u1100\u116A\u11AB",
        "\u110B\u1167\u1100\u116E\u11AB",
        "\u110B\u1167\u1100\u116F\u11AB",
        "\u110B\u1167\u1103\u1162\u1109\u1162\u11BC",
        "\u110B\u1167\u1103\u1165\u11B2",
        "\u110B\u1167\u1103\u1169\u11BC\u1109\u1162\u11BC",
        "\u110B\u1167\u1103\u1173\u11AB",
        "\u110B\u1167\u1105\u1169\u11AB",
        "\u110B\u1167\u1105\u1173\u11B7",
        "\u110B\u1167\u1109\u1165\u11BA",
        "\u110B\u1167\u1109\u1165\u11BC",
        "\u110B\u1167\u110B\u116A\u11BC",
        "\u110B\u1167\u110B\u1175\u11AB",
        "\u110B\u1167\u110C\u1165\u11AB\u1112\u1175",
        "\u110B\u1167\u110C\u1175\u11A8\u110B\u116F\u11AB",
        "\u110B\u1167\u1112\u1161\u11A8\u1109\u1162\u11BC",
        "\u110B\u1167\u1112\u1162\u11BC",
        "\u110B\u1167\u11A8\u1109\u1161",
        "\u110B\u1167\u11A8\u1109\u1175",
        "\u110B\u1167\u11A8\u1112\u1161\u11AF",
        "\u110B\u1167\u11AB\u1100\u1167\u11AF",
        "\u110B\u1167\u11AB\u1100\u116E",
        "\u110B\u1167\u11AB\u1100\u1173\u11A8",
        "\u110B\u1167\u11AB\u1100\u1175",
        "\u110B\u1167\u11AB\u1105\u1161\u11A8",
        "\u110B\u1167\u11AB\u1109\u1165\u11AF",
        "\u110B\u1167\u11AB\u1109\u1166",
        "\u110B\u1167\u11AB\u1109\u1169\u11A8",
        "\u110B\u1167\u11AB\u1109\u1173\u11B8",
        "\u110B\u1167\u11AB\u110B\u1162",
        "\u110B\u1167\u11AB\u110B\u1168\u110B\u1175\u11AB",
        "\u110B\u1167\u11AB\u110B\u1175\u11AB",
        "\u110B\u1167\u11AB\u110C\u1161\u11BC",
        "\u110B\u1167\u11AB\u110C\u116E",
        "\u110B\u1167\u11AB\u110E\u116E\u11AF",
        "\u110B\u1167\u11AB\u1111\u1175\u11AF",
        "\u110B\u1167\u11AB\u1112\u1161\u11B8",
        "\u110B\u1167\u11AB\u1112\u1172",
        "\u110B\u1167\u11AF\u1100\u1175",
        "\u110B\u1167\u11AF\u1106\u1162",
        "\u110B\u1167\u11AF\u1109\u116C",
        "\u110B\u1167\u11AF\u1109\u1175\u11B7\u1112\u1175",
        "\u110B\u1167\u11AF\u110C\u1165\u11BC",
        "\u110B\u1167\u11AF\u110E\u1161",
        "\u110B\u1167\u11AF\u1112\u1173\u11AF",
        "\u110B\u1167\u11B7\u1105\u1167",
        "\u110B\u1167\u11B8\u1109\u1165",
        "\u110B\u1167\u11BC\u1100\u116E\u11A8",
        "\u110B\u1167\u11BC\u1102\u1161\u11B7",
        "\u110B\u1167\u11BC\u1109\u1161\u11BC",
        "\u110B\u1167\u11BC\u110B\u1163\u11BC",
        "\u110B\u1167\u11BC\u110B\u1167\u11A8",
        "\u110B\u1167\u11BC\u110B\u116E\u11BC",
        "\u110B\u1167\u11BC\u110B\u116F\u11AB\u1112\u1175",
        "\u110B\u1167\u11BC\u1112\u1161",
        "\u110B\u1167\u11BC\u1112\u1163\u11BC",
        "\u110B\u1167\u11BC\u1112\u1169\u11AB",
        "\u110B\u1167\u11BC\u1112\u116A",
        "\u110B\u1167\u11C1\u1100\u116E\u1105\u1175",
        "\u110B\u1167\u11C1\u1107\u1161\u11BC",
        "\u110B\u1167\u11C1\u110C\u1175\u11B8",
        "\u110B\u1168\u1100\u1161\u11B7",
        "\u110B\u1168\u1100\u1173\u11B7",
        "\u110B\u1168\u1107\u1161\u11BC",
        "\u110B\u1168\u1109\u1161\u11AB",
        "\u110B\u1168\u1109\u1161\u11BC",
        "\u110B\u1168\u1109\u1165\u11AB",
        "\u110B\u1168\u1109\u116E\u11AF",
        "\u110B\u1168\u1109\u1173\u11B8",
        "\u110B\u1168\u1109\u1175\u11A8\u110C\u1161\u11BC",
        "\u110B\u1168\u110B\u1163\u11A8",
        "\u110B\u1168\u110C\u1165\u11AB",
        "\u110B\u1168\u110C\u1165\u11AF",
        "\u110B\u1168\u110C\u1165\u11BC",
        "\u110B\u1168\u110F\u1165\u11AB\u1103\u1162",
        "\u110B\u1168\u11BA\u1102\u1161\u11AF",
        "\u110B\u1169\u1102\u1173\u11AF",
        "\u110B\u1169\u1105\u1161\u11A8",
        "\u110B\u1169\u1105\u1162\u11BA\u1103\u1169\u11BC\u110B\u1161\u11AB",
        "\u110B\u1169\u1105\u1166\u11AB\u110C\u1175",
        "\u110B\u1169\u1105\u1169\u110C\u1175",
        "\u110B\u1169\u1105\u1173\u11AB\u1107\u1161\u11AF",
        "\u110B\u1169\u1107\u1173\u11AB",
        "\u110B\u1169\u1109\u1175\u11B8",
        "\u110B\u1169\u110B\u1167\u11B7",
        "\u110B\u1169\u110B\u116F\u11AF",
        "\u110B\u1169\u110C\u1165\u11AB",
        "\u110B\u1169\u110C\u1175\u11A8",
        "\u110B\u1169\u110C\u1175\u11BC\u110B\u1165",
        "\u110B\u1169\u1111\u1166\u1105\u1161",
        "\u110B\u1169\u1111\u1175\u1109\u1173\u1110\u1166\u11AF",
        "\u110B\u1169\u1112\u1175\u1105\u1167",
        "\u110B\u1169\u11A8\u1109\u1161\u11BC",
        "\u110B\u1169\u11A8\u1109\u116E\u1109\u116E",
        "\u110B\u1169\u11AB\u1100\u1161\u11BD",
        "\u110B\u1169\u11AB\u1105\u1161\u110B\u1175\u11AB",
        "\u110B\u1169\u11AB\u1106\u1169\u11B7",
        "\u110B\u1169\u11AB\u110C\u1169\u11BC\u110B\u1175\u11AF",
        "\u110B\u1169\u11AB\u1110\u1169\u11BC",
        "\u110B\u1169\u11AF\u1100\u1161\u110B\u1173\u11AF",
        "\u110B\u1169\u11AF\u1105\u1175\u11B7\u1111\u1175\u11A8",
        "\u110B\u1169\u11AF\u1112\u1162",
        "\u110B\u1169\u11BA\u110E\u1161\u1105\u1175\u11B7",
        "\u110B\u116A\u110B\u1175\u1109\u1167\u110E\u1173",
        "\u110B\u116A\u110B\u1175\u11AB",
        "\u110B\u116A\u11AB\u1109\u1165\u11BC",
        "\u110B\u116A\u11AB\u110C\u1165\u11AB",
        "\u110B\u116A\u11BC\u1107\u1175",
        "\u110B\u116A\u11BC\u110C\u1161",
        "\u110B\u116B\u1102\u1163\u1112\u1161\u1106\u1167\u11AB",
        "\u110B\u116B\u11AB\u110C\u1175",
        "\u110B\u116C\u1100\u1161\u11BA\u110C\u1175\u11B8",
        "\u110B\u116C\u1100\u116E\u11A8",
        "\u110B\u116C\u1105\u1169\u110B\u116E\u11B7",
        "\u110B\u116C\u1109\u1161\u11B7\u110E\u1169\u11AB",
        "\u110B\u116C\u110E\u116E\u11AF",
        "\u110B\u116C\u110E\u1175\u11B7",
        "\u110B\u116C\u1112\u1161\u11AF\u1106\u1165\u1102\u1175",
        "\u110B\u116C\u11AB\u1107\u1161\u11AF",
        "\u110B\u116C\u11AB\u1109\u1169\u11AB",
        "\u110B\u116C\u11AB\u110D\u1169\u11A8",
        "\u110B\u116D\u1100\u1173\u11B7",
        "\u110B\u116D\u110B\u1175\u11AF",
        "\u110B\u116D\u110C\u1173\u11B7",
        "\u110B\u116D\u110E\u1165\u11BC",
        "\u110B\u116D\u11BC\u1100\u1175",
        "\u110B\u116D\u11BC\u1109\u1165",
        "\u110B\u116D\u11BC\u110B\u1165",
        "\u110B\u116E\u1109\u1161\u11AB",
        "\u110B\u116E\u1109\u1165\u11AB",
        "\u110B\u116E\u1109\u1173\u11BC",
        "\u110B\u116E\u110B\u1167\u11AB\u1112\u1175",
        "\u110B\u116E\u110C\u1165\u11BC",
        "\u110B\u116E\u110E\u1166\u1100\u116E\u11A8",
        "\u110B\u116E\u1111\u1167\u11AB",
        "\u110B\u116E\u11AB\u1103\u1169\u11BC",
        "\u110B\u116E\u11AB\u1106\u1167\u11BC",
        "\u110B\u116E\u11AB\u1107\u1161\u11AB",
        "\u110B\u116E\u11AB\u110C\u1165\u11AB",
        "\u110B\u116E\u11AB\u1112\u1162\u11BC",
        "\u110B\u116E\u11AF\u1109\u1161\u11AB",
        "\u110B\u116E\u11AF\u110B\u1173\u11B7",
        "\u110B\u116E\u11B7\u110C\u1175\u11A8\u110B\u1175\u11B7",
        "\u110B\u116E\u11BA\u110B\u1165\u1105\u1173\u11AB",
        "\u110B\u116E\u11BA\u110B\u1173\u11B7",
        "\u110B\u116F\u1102\u1161\u11A8",
        "\u110B\u116F\u11AB\u1100\u1169",
        "\u110B\u116F\u11AB\u1105\u1162",
        "\u110B\u116F\u11AB\u1109\u1165",
        "\u110B\u116F\u11AB\u1109\u116E\u11BC\u110B\u1175",
        "\u110B\u116F\u11AB\u110B\u1175\u11AB",
        "\u110B\u116F\u11AB\u110C\u1161\u11BC",
        "\u110B\u116F\u11AB\u1111\u1175\u1109\u1173",
        "\u110B\u116F\u11AF\u1100\u1173\u11B8",
        "\u110B\u116F\u11AF\u1103\u1173\u110F\u1165\u11B8",
        "\u110B\u116F\u11AF\u1109\u1166",
        "\u110B\u116F\u11AF\u110B\u116D\u110B\u1175\u11AF",
        "\u110B\u1170\u110B\u1175\u1110\u1165",
        "\u110B\u1171\u1107\u1161\u11AB",
        "\u110B\u1171\u1107\u1165\u11B8",
        "\u110B\u1171\u1109\u1165\u11BC",
        "\u110B\u1171\u110B\u116F\u11AB",
        "\u110B\u1171\u1112\u1165\u11B7",
        "\u110B\u1171\u1112\u1167\u11B8",
        "\u110B\u1171\u11BA\u1109\u1161\u1105\u1161\u11B7",
        "\u110B\u1172\u1102\u1161\u11AB\u1112\u1175",
        "\u110B\u1172\u1105\u1165\u11B8",
        "\u110B\u1172\u1106\u1167\u11BC",
        "\u110B\u1172\u1106\u116E\u11AF",
        "\u110B\u1172\u1109\u1161\u11AB",
        "\u110B\u1172\u110C\u1165\u11A8",
        "\u110B\u1172\u110E\u1175\u110B\u116F\u11AB",
        "\u110B\u1172\u1112\u1161\u11A8",
        "\u110B\u1172\u1112\u1162\u11BC",
        "\u110B\u1172\u1112\u1167\u11BC",
        "\u110B\u1172\u11A8\u1100\u116E\u11AB",
        "\u110B\u1172\u11A8\u1109\u1161\u11BC",
        "\u110B\u1172\u11A8\u1109\u1175\u11B8",
        "\u110B\u1172\u11A8\u110E\u1166",
        "\u110B\u1173\u11AB\u1112\u1162\u11BC",
        "\u110B\u1173\u11B7\u1105\u1167\u11A8",
        "\u110B\u1173\u11B7\u1105\u116D",
        "\u110B\u1173\u11B7\u1107\u1161\u11AB",
        "\u110B\u1173\u11B7\u1109\u1165\u11BC",
        "\u110B\u1173\u11B7\u1109\u1175\u11A8",
        "\u110B\u1173\u11B7\u110B\u1161\u11A8",
        "\u110B\u1173\u11B7\u110C\u116E",
        "\u110B\u1174\u1100\u1167\u11AB",
        "\u110B\u1174\u1102\u1169\u11AB",
        "\u110B\u1174\u1106\u116E\u11AB",
        "\u110B\u1174\u1107\u1169\u11A8",
        "\u110B\u1174\u1109\u1175\u11A8",
        "\u110B\u1174\u1109\u1175\u11B7",
        "\u110B\u1174\u110B\u116C\u1105\u1169",
        "\u110B\u1174\u110B\u116D\u11A8",
        "\u110B\u1174\u110B\u116F\u11AB",
        "\u110B\u1174\u1112\u1161\u11A8",
        "\u110B\u1175\u1100\u1165\u11BA",
        "\u110B\u1175\u1100\u1169\u11BA",
        "\u110B\u1175\u1102\u1167\u11B7",
        "\u110B\u1175\u1102\u1169\u11B7",
        "\u110B\u1175\u1103\u1161\u11AF",
        "\u110B\u1175\u1103\u1162\u1105\u1169",
        "\u110B\u1175\u1103\u1169\u11BC",
        "\u110B\u1175\u1105\u1165\u11C2\u1100\u1166",
        "\u110B\u1175\u1105\u1167\u11A8\u1109\u1165",
        "\u110B\u1175\u1105\u1169\u11AB\u110C\u1165\u11A8",
        "\u110B\u1175\u1105\u1173\u11B7",
        "\u110B\u1175\u1106\u1175\u11AB",
        "\u110B\u1175\u1107\u1161\u11AF\u1109\u1169",
        "\u110B\u1175\u1107\u1167\u11AF",
        "\u110B\u1175\u1107\u116E\u11AF",
        "\u110B\u1175\u1108\u1161\u11AF",
        "\u110B\u1175\u1109\u1161\u11BC",
        "\u110B\u1175\u1109\u1165\u11BC",
        "\u110B\u1175\u1109\u1173\u11AF",
        "\u110B\u1175\u110B\u1163\u1100\u1175",
        "\u110B\u1175\u110B\u116D\u11BC",
        "\u110B\u1175\u110B\u116E\u11BA",
        "\u110B\u1175\u110B\u116F\u11AF",
        "\u110B\u1175\u110B\u1173\u11A8\u1100\u1169",
        "\u110B\u1175\u110B\u1175\u11A8",
        "\u110B\u1175\u110C\u1165\u11AB",
        "\u110B\u1175\u110C\u116E\u11BC",
        "\u110B\u1175\u1110\u1173\u11AE\u1102\u1161\u11AF",
        "\u110B\u1175\u1110\u1173\u11AF",
        "\u110B\u1175\u1112\u1169\u11AB",
        "\u110B\u1175\u11AB\u1100\u1161\u11AB",
        "\u110B\u1175\u11AB\u1100\u1167\u11A8",
        "\u110B\u1175\u11AB\u1100\u1169\u11BC",
        "\u110B\u1175\u11AB\u1100\u116E",
        "\u110B\u1175\u11AB\u1100\u1173\u11AB",
        "\u110B\u1175\u11AB\u1100\u1175",
        "\u110B\u1175\u11AB\u1103\u1169",
        "\u110B\u1175\u11AB\u1105\u1172",
        "\u110B\u1175\u11AB\u1106\u116E\u11AF",
        "\u110B\u1175\u11AB\u1109\u1162\u11BC",
        "\u110B\u1175\u11AB\u1109\u116B",
        "\u110B\u1175\u11AB\u110B\u1167\u11AB",
        "\u110B\u1175\u11AB\u110B\u116F\u11AB",
        "\u110B\u1175\u11AB\u110C\u1162",
        "\u110B\u1175\u11AB\u110C\u1169\u11BC",
        "\u110B\u1175\u11AB\u110E\u1165\u11AB",
        "\u110B\u1175\u11AB\u110E\u1166",
        "\u110B\u1175\u11AB\u1110\u1165\u1102\u1166\u11BA",
        "\u110B\u1175\u11AB\u1112\u1161",
        "\u110B\u1175\u11AB\u1112\u1167\u11BC",
        "\u110B\u1175\u11AF\u1100\u1169\u11B8",
        "\u110B\u1175\u11AF\u1100\u1175",
        "\u110B\u1175\u11AF\u1103\u1161\u11AB",
        "\u110B\u1175\u11AF\u1103\u1162",
        "\u110B\u1175\u11AF\u1103\u1173\u11BC",
        "\u110B\u1175\u11AF\u1107\u1161\u11AB",
        "\u110B\u1175\u11AF\u1107\u1169\u11AB",
        "\u110B\u1175\u11AF\u1107\u116E",
        "\u110B\u1175\u11AF\u1109\u1161\u11BC",
        "\u110B\u1175\u11AF\u1109\u1162\u11BC",
        "\u110B\u1175\u11AF\u1109\u1169\u11AB",
        "\u110B\u1175\u11AF\u110B\u116D\u110B\u1175\u11AF",
        "\u110B\u1175\u11AF\u110B\u116F\u11AF",
        "\u110B\u1175\u11AF\u110C\u1165\u11BC",
        "\u110B\u1175\u11AF\u110C\u1169\u11BC",
        "\u110B\u1175\u11AF\u110C\u116E\u110B\u1175\u11AF",
        "\u110B\u1175\u11AF\u110D\u1175\u11A8",
        "\u110B\u1175\u11AF\u110E\u1166",
        "\u110B\u1175\u11AF\u110E\u1175",
        "\u110B\u1175\u11AF\u1112\u1162\u11BC",
        "\u110B\u1175\u11AF\u1112\u116C\u110B\u116D\u11BC",
        "\u110B\u1175\u11B7\u1100\u1173\u11B7",
        "\u110B\u1175\u11B7\u1106\u116E",
        "\u110B\u1175\u11B8\u1103\u1162",
        "\u110B\u1175\u11B8\u1105\u1167\u11A8",
        "\u110B\u1175\u11B8\u1106\u1161\u11BA",
        "\u110B\u1175\u11B8\u1109\u1161",
        "\u110B\u1175\u11B8\u1109\u116E\u11AF",
        "\u110B\u1175\u11B8\u1109\u1175",
        "\u110B\u1175\u11B8\u110B\u116F\u11AB",
        "\u110B\u1175\u11B8\u110C\u1161\u11BC",
        "\u110B\u1175\u11B8\u1112\u1161\u11A8",
        "\u110C\u1161\u1100\u1161\u110B\u116D\u11BC",
        "\u110C\u1161\u1100\u1167\u11A8",
        "\u110C\u1161\u1100\u1173\u11A8",
        "\u110C\u1161\u1103\u1169\u11BC",
        "\u110C\u1161\u1105\u1161\u11BC",
        "\u110C\u1161\u1107\u116E\u1109\u1175\u11B7",
        "\u110C\u1161\u1109\u1175\u11A8",
        "\u110C\u1161\u1109\u1175\u11AB",
        "\u110C\u1161\u110B\u1167\u11AB",
        "\u110C\u1161\u110B\u116F\u11AB",
        "\u110C\u1161\u110B\u1172\u11AF",
        "\u110C\u1161\u110C\u1165\u11AB\u1100\u1165",
        "\u110C\u1161\u110C\u1165\u11BC",
        "\u110C\u1161\u110C\u1169\u11AB\u1109\u1175\u11B7",
        "\u110C\u1161\u1111\u1161\u11AB",
        "\u110C\u1161\u11A8\u1100\u1161",
        "\u110C\u1161\u11A8\u1102\u1167\u11AB",
        "\u110C\u1161\u11A8\u1109\u1165\u11BC",
        "\u110C\u1161\u11A8\u110B\u1165\u11B8",
        "\u110C\u1161\u11A8\u110B\u116D\u11BC",
        "\u110C\u1161\u11A8\u110B\u1173\u11AB\u1104\u1161\u11AF",
        "\u110C\u1161\u11A8\u1111\u116E\u11B7",
        "\u110C\u1161\u11AB\u1103\u1175",
        "\u110C\u1161\u11AB\u1104\u1173\u11A8",
        "\u110C\u1161\u11AB\u110E\u1175",
        "\u110C\u1161\u11AF\u1106\u1169\u11BA",
        "\u110C\u1161\u11B7\u1101\u1161\u11AB",
        "\u110C\u1161\u11B7\u1109\u116E\u1112\u1161\u11B7",
        "\u110C\u1161\u11B7\u1109\u1175",
        "\u110C\u1161\u11B7\u110B\u1169\u11BA",
        "\u110C\u1161\u11B7\u110C\u1161\u1105\u1175",
        "\u110C\u1161\u11B8\u110C\u1175",
        "\u110C\u1161\u11BC\u1100\u116A\u11AB",
        "\u110C\u1161\u11BC\u1100\u116E\u11AB",
        "\u110C\u1161\u11BC\u1100\u1175\u1100\u1161\u11AB",
        "\u110C\u1161\u11BC\u1105\u1162",
        "\u110C\u1161\u11BC\u1105\u1168",
        "\u110C\u1161\u11BC\u1105\u1173",
        "\u110C\u1161\u11BC\u1106\u1161",
        "\u110C\u1161\u11BC\u1106\u1167\u11AB",
        "\u110C\u1161\u11BC\u1106\u1169",
        "\u110C\u1161\u11BC\u1106\u1175",
        "\u110C\u1161\u11BC\u1107\u1175",
        "\u110C\u1161\u11BC\u1109\u1161",
        "\u110C\u1161\u11BC\u1109\u1169",
        "\u110C\u1161\u11BC\u1109\u1175\u11A8",
        "\u110C\u1161\u11BC\u110B\u1162\u110B\u1175\u11AB",
        "\u110C\u1161\u11BC\u110B\u1175\u11AB",
        "\u110C\u1161\u11BC\u110C\u1165\u11B7",
        "\u110C\u1161\u11BC\u110E\u1161",
        "\u110C\u1161\u11BC\u1112\u1161\u11A8\u1100\u1173\u11B7",
        "\u110C\u1162\u1102\u1173\u11BC",
        "\u110C\u1162\u1108\u1161\u11AF\u1105\u1175",
        "\u110C\u1162\u1109\u1161\u11AB",
        "\u110C\u1162\u1109\u1162\u11BC",
        "\u110C\u1162\u110C\u1161\u11A8\u1102\u1167\u11AB",
        "\u110C\u1162\u110C\u1165\u11BC",
        "\u110C\u1162\u110E\u1162\u1100\u1175",
        "\u110C\u1162\u1111\u1161\u11AB",
        "\u110C\u1162\u1112\u1161\u11A8",
        "\u110C\u1162\u1112\u116A\u11AF\u110B\u116D\u11BC",
        "\u110C\u1165\u1100\u1165\u11BA",
        "\u110C\u1165\u1100\u1169\u1105\u1175",
        "\u110C\u1165\u1100\u1169\u11BA",
        "\u110C\u1165\u1102\u1167\u11A8",
        "\u110C\u1165\u1105\u1165\u11AB",
        "\u110C\u1165\u1105\u1165\u11C2\u1100\u1166",
        "\u110C\u1165\u1107\u1165\u11AB",
        "\u110C\u1165\u110B\u116E\u11AF",
        "\u110C\u1165\u110C\u1165\u11AF\u1105\u1169",
        "\u110C\u1165\u110E\u116E\u11A8",
        "\u110C\u1165\u11A8\u1100\u1173\u11A8",
        "\u110C\u1165\u11A8\u1103\u1161\u11BC\u1112\u1175",
        "\u110C\u1165\u11A8\u1109\u1165\u11BC",
        "\u110C\u1165\u11A8\u110B\u116D\u11BC",
        "\u110C\u1165\u11A8\u110B\u1173\u11BC",
        "\u110C\u1165\u11AB\u1100\u1162",
        "\u110C\u1165\u11AB\u1100\u1169\u11BC",
        "\u110C\u1165\u11AB\u1100\u1175",
        "\u110C\u1165\u11AB\u1103\u1161\u11AF",
        "\u110C\u1165\u11AB\u1105\u1161\u1103\u1169",
        "\u110C\u1165\u11AB\u1106\u1161\u11BC",
        "\u110C\u1165\u11AB\u1106\u116E\u11AB",
        "\u110C\u1165\u11AB\u1107\u1161\u11AB",
        "\u110C\u1165\u11AB\u1107\u116E",
        "\u110C\u1165\u11AB\u1109\u1166",
        "\u110C\u1165\u11AB\u1109\u1175",
        "\u110C\u1165\u11AB\u110B\u116D\u11BC",
        "\u110C\u1165\u11AB\u110C\u1161",
        "\u110C\u1165\u11AB\u110C\u1162\u11BC",
        "\u110C\u1165\u11AB\u110C\u116E",
        "\u110C\u1165\u11AB\u110E\u1165\u11AF",
        "\u110C\u1165\u11AB\u110E\u1166",
        "\u110C\u1165\u11AB\u1110\u1169\u11BC",
        "\u110C\u1165\u11AB\u1112\u1167",
        "\u110C\u1165\u11AB\u1112\u116E",
        "\u110C\u1165\u11AF\u1103\u1162",
        "\u110C\u1165\u11AF\u1106\u1161\u11BC",
        "\u110C\u1165\u11AF\u1107\u1161\u11AB",
        "\u110C\u1165\u11AF\u110B\u1163\u11A8",
        "\u110C\u1165\u11AF\u110E\u1161",
        "\u110C\u1165\u11B7\u1100\u1165\u11B7",
        "\u110C\u1165\u11B7\u1109\u116E",
        "\u110C\u1165\u11B7\u1109\u1175\u11B7",
        "\u110C\u1165\u11B7\u110B\u116F\u11AB",
        "\u110C\u1165\u11B7\u110C\u1165\u11B7",
        "\u110C\u1165\u11B7\u110E\u1161",
        "\u110C\u1165\u11B8\u1100\u1173\u11AB",
        "\u110C\u1165\u11B8\u1109\u1175",
        "\u110C\u1165\u11B8\u110E\u1169\u11A8",
        "\u110C\u1165\u11BA\u1100\u1161\u1105\u1161\u11A8",
        "\u110C\u1165\u11BC\u1100\u1165\u110C\u1161\u11BC",
        "\u110C\u1165\u11BC\u1103\u1169",
        "\u110C\u1165\u11BC\u1105\u1172\u110C\u1161\u11BC",
        "\u110C\u1165\u11BC\u1105\u1175",
        "\u110C\u1165\u11BC\u1106\u1161\u11AF",
        "\u110C\u1165\u11BC\u1106\u1167\u11AB",
        "\u110C\u1165\u11BC\u1106\u116E\u11AB",
        "\u110C\u1165\u11BC\u1107\u1161\u11AB\u1103\u1162",
        "\u110C\u1165\u11BC\u1107\u1169",
        "\u110C\u1165\u11BC\u1107\u116E",
        "\u110C\u1165\u11BC\u1107\u1175",
        "\u110C\u1165\u11BC\u1109\u1161\u11BC",
        "\u110C\u1165\u11BC\u1109\u1165\u11BC",
        "\u110C\u1165\u11BC\u110B\u1169",
        "\u110C\u1165\u11BC\u110B\u116F\u11AB",
        "\u110C\u1165\u11BC\u110C\u1161\u11BC",
        "\u110C\u1165\u11BC\u110C\u1175",
        "\u110C\u1165\u11BC\u110E\u1175",
        "\u110C\u1165\u11BC\u1112\u116A\u11A8\u1112\u1175",
        "\u110C\u1166\u1100\u1169\u11BC",
        "\u110C\u1166\u1100\u116A\u110C\u1165\u11B7",
        "\u110C\u1166\u1103\u1162\u1105\u1169",
        "\u110C\u1166\u1106\u1169\u11A8",
        "\u110C\u1166\u1107\u1161\u11AF",
        "\u110C\u1166\u1107\u1165\u11B8",
        "\u110C\u1166\u1109\u1161\u11BA\u1102\u1161\u11AF",
        "\u110C\u1166\u110B\u1161\u11AB",
        "\u110C\u1166\u110B\u1175\u11AF",
        "\u110C\u1166\u110C\u1161\u11A8",
        "\u110C\u1166\u110C\u116E\u1103\u1169",
        "\u110C\u1166\u110E\u116E\u11AF",
        "\u110C\u1166\u1111\u116E\u11B7",
        "\u110C\u1166\u1112\u1161\u11AB",
        "\u110C\u1169\u1100\u1161\u11A8",
        "\u110C\u1169\u1100\u1165\u11AB",
        "\u110C\u1169\u1100\u1173\u11B7",
        "\u110C\u1169\u1100\u1175\u11BC",
        "\u110C\u1169\u1106\u1167\u11BC",
        "\u110C\u1169\u1106\u1175\u1105\u116D",
        "\u110C\u1169\u1109\u1161\u11BC",
        "\u110C\u1169\u1109\u1165\u11AB",
        "\u110C\u1169\u110B\u116D\u11BC\u1112\u1175",
        "\u110C\u1169\u110C\u1165\u11AF",
        "\u110C\u1169\u110C\u1165\u11BC",
        "\u110C\u1169\u110C\u1175\u11A8",
        "\u110C\u1169\u11AB\u1103\u1162\u11BA\u1106\u1161\u11AF",
        "\u110C\u1169\u11AB\u110C\u1162",
        "\u110C\u1169\u11AF\u110B\u1165\u11B8",
        "\u110C\u1169\u11AF\u110B\u1173\u11B7",
        "\u110C\u1169\u11BC\u1100\u116D",
        "\u110C\u1169\u11BC\u1105\u1169",
        "\u110C\u1169\u11BC\u1105\u1172",
        "\u110C\u1169\u11BC\u1109\u1169\u1105\u1175",
        "\u110C\u1169\u11BC\u110B\u1165\u11B8\u110B\u116F\u11AB",
        "\u110C\u1169\u11BC\u110C\u1169\u11BC",
        "\u110C\u1169\u11BC\u1112\u1161\u11B8",
        "\u110C\u116A\u1109\u1165\u11A8",
        "\u110C\u116C\u110B\u1175\u11AB",
        "\u110C\u116E\u1100\u116A\u11AB\u110C\u1165\u11A8",
        "\u110C\u116E\u1105\u1173\u11B7",
        "\u110C\u116E\u1106\u1161\u11AF",
        "\u110C\u116E\u1106\u1165\u1102\u1175",
        "\u110C\u116E\u1106\u1165\u11A8",
        "\u110C\u116E\u1106\u116E\u11AB",
        "\u110C\u116E\u1106\u1175\u11AB",
        "\u110C\u116E\u1107\u1161\u11BC",
        "\u110C\u116E\u1107\u1167\u11AB",
        "\u110C\u116E\u1109\u1175\u11A8",
        "\u110C\u116E\u110B\u1175\u11AB",
        "\u110C\u116E\u110B\u1175\u11AF",
        "\u110C\u116E\u110C\u1161\u11BC",
        "\u110C\u116E\u110C\u1165\u11AB\u110C\u1161",
        "\u110C\u116E\u1110\u1162\u11A8",
        "\u110C\u116E\u11AB\u1107\u1175",
        "\u110C\u116E\u11AF\u1100\u1165\u1105\u1175",
        "\u110C\u116E\u11AF\u1100\u1175",
        "\u110C\u116E\u11AF\u1106\u116E\u1102\u1174",
        "\u110C\u116E\u11BC\u1100\u1161\u11AB",
        "\u110C\u116E\u11BC\u1100\u1168\u1107\u1161\u11BC\u1109\u1169\u11BC",
        "\u110C\u116E\u11BC\u1100\u116E\u11A8",
        "\u110C\u116E\u11BC\u1102\u1167\u11AB",
        "\u110C\u116E\u11BC\u1103\u1161\u11AB",
        "\u110C\u116E\u11BC\u1103\u1169\u11A8",
        "\u110C\u116E\u11BC\u1107\u1161\u11AB",
        "\u110C\u116E\u11BC\u1107\u116E",
        "\u110C\u116E\u11BC\u1109\u1166",
        "\u110C\u116E\u11BC\u1109\u1169\u1100\u1175\u110B\u1165\u11B8",
        "\u110C\u116E\u11BC\u1109\u116E\u11AB",
        "\u110C\u116E\u11BC\u110B\u1161\u11BC",
        "\u110C\u116E\u11BC\u110B\u116D",
        "\u110C\u116E\u11BC\u1112\u1161\u11A8\u1100\u116D",
        "\u110C\u1173\u11A8\u1109\u1165\u11A8",
        "\u110C\u1173\u11A8\u1109\u1175",
        "\u110C\u1173\u11AF\u1100\u1165\u110B\u116E\u11B7",
        "\u110C\u1173\u11BC\u1100\u1161",
        "\u110C\u1173\u11BC\u1100\u1165",
        "\u110C\u1173\u11BC\u1100\u116F\u11AB",
        "\u110C\u1173\u11BC\u1109\u1161\u11BC",
        "\u110C\u1173\u11BC\u1109\u1166",
        "\u110C\u1175\u1100\u1161\u11A8",
        "\u110C\u1175\u1100\u1161\u11B8",
        "\u110C\u1175\u1100\u1167\u11BC",
        "\u110C\u1175\u1100\u1173\u11A8\u1112\u1175",
        "\u110C\u1175\u1100\u1173\u11B7",
        "\u110C\u1175\u1100\u1173\u11B8",
        "\u110C\u1175\u1102\u1173\u11BC",
        "\u110C\u1175\u1105\u1173\u11B7\u1100\u1175\u11AF",
        "\u110C\u1175\u1105\u1175\u1109\u1161\u11AB",
        "\u110C\u1175\u1107\u1161\u11BC",
        "\u110C\u1175\u1107\u116E\u11BC",
        "\u110C\u1175\u1109\u1175\u11A8",
        "\u110C\u1175\u110B\u1167\u11A8",
        "\u110C\u1175\u110B\u116E\u1100\u1162",
        "\u110C\u1175\u110B\u116F\u11AB",
        "\u110C\u1175\u110C\u1165\u11A8",
        "\u110C\u1175\u110C\u1165\u11B7",
        "\u110C\u1175\u110C\u1175\u11AB",
        "\u110C\u1175\u110E\u116E\u11AF",
        "\u110C\u1175\u11A8\u1109\u1165\u11AB",
        "\u110C\u1175\u11A8\u110B\u1165\u11B8",
        "\u110C\u1175\u11A8\u110B\u116F\u11AB",
        "\u110C\u1175\u11A8\u110C\u1161\u11BC",
        "\u110C\u1175\u11AB\u1100\u1173\u11B8",
        "\u110C\u1175\u11AB\u1103\u1169\u11BC",
        "\u110C\u1175\u11AB\u1105\u1169",
        "\u110C\u1175\u11AB\u1105\u116D",
        "\u110C\u1175\u11AB\u1105\u1175",
        "\u110C\u1175\u11AB\u110D\u1161",
        "\u110C\u1175\u11AB\u110E\u1161\u11AF",
        "\u110C\u1175\u11AB\u110E\u116E\u11AF",
        "\u110C\u1175\u11AB\u1110\u1169\u11BC",
        "\u110C\u1175\u11AB\u1112\u1162\u11BC",
        "\u110C\u1175\u11AF\u1106\u116E\u11AB",
        "\u110C\u1175\u11AF\u1107\u1167\u11BC",
        "\u110C\u1175\u11AF\u1109\u1165",
        "\u110C\u1175\u11B7\u110C\u1161\u11A8",
        "\u110C\u1175\u11B8\u1103\u1161\u11AB",
        "\u110C\u1175\u11B8\u110B\u1161\u11AB",
        "\u110C\u1175\u11B8\u110C\u116E\u11BC",
        "\u110D\u1161\u110C\u1173\u11BC",
        "\u110D\u1175\u1101\u1165\u1100\u1175",
        "\u110E\u1161\u1102\u1161\u11B7",
        "\u110E\u1161\u1105\u1161\u1105\u1175",
        "\u110E\u1161\u1105\u1163\u11BC",
        "\u110E\u1161\u1105\u1175\u11B7",
        "\u110E\u1161\u1107\u1167\u11AF",
        "\u110E\u1161\u1109\u1165\u11AB",
        "\u110E\u1161\u110E\u1173\u11B7",
        "\u110E\u1161\u11A8\u1100\u1161\u11A8",
        "\u110E\u1161\u11AB\u1106\u116E\u11AF",
        "\u110E\u1161\u11AB\u1109\u1165\u11BC",
        "\u110E\u1161\u11B7\u1100\u1161",
        "\u110E\u1161\u11B7\u1100\u1175\u1105\u1173\u11B7",
        "\u110E\u1161\u11B7\u1109\u1162",
        "\u110E\u1161\u11B7\u1109\u1165\u11A8",
        "\u110E\u1161\u11B7\u110B\u1167",
        "\u110E\u1161\u11B7\u110B\u116C",
        "\u110E\u1161\u11B7\u110C\u1169",
        "\u110E\u1161\u11BA\u110C\u1161\u11AB",
        "\u110E\u1161\u11BC\u1100\u1161",
        "\u110E\u1161\u11BC\u1100\u1169",
        "\u110E\u1161\u11BC\u1100\u116E",
        "\u110E\u1161\u11BC\u1106\u116E\u11AB",
        "\u110E\u1161\u11BC\u1107\u1161\u11A9",
        "\u110E\u1161\u11BC\u110C\u1161\u11A8",
        "\u110E\u1161\u11BC\u110C\u1169",
        "\u110E\u1162\u1102\u1165\u11AF",
        "\u110E\u1162\u110C\u1165\u11B7",
        "\u110E\u1162\u11A8\u1100\u1161\u1107\u1161\u11BC",
        "\u110E\u1162\u11A8\u1107\u1161\u11BC",
        "\u110E\u1162\u11A8\u1109\u1161\u11BC",
        "\u110E\u1162\u11A8\u110B\u1175\u11B7",
        "\u110E\u1162\u11B7\u1111\u1175\u110B\u1165\u11AB",
        "\u110E\u1165\u1107\u1165\u11AF",
        "\u110E\u1165\u110B\u1173\u11B7",
        "\u110E\u1165\u11AB\u1100\u116E\u11A8",
        "\u110E\u1165\u11AB\u1103\u116E\u11BC",
        "\u110E\u1165\u11AB\u110C\u1161\u11BC",
        "\u110E\u1165\u11AB\u110C\u1162",
        "\u110E\u1165\u11AB\u110E\u1165\u11AB\u1112\u1175",
        "\u110E\u1165\u11AF\u1103\u1169",
        "\u110E\u1165\u11AF\u110C\u1165\u1112\u1175",
        "\u110E\u1165\u11AF\u1112\u1161\u11A8",
        "\u110E\u1165\u11BA\u1102\u1161\u11AF",
        "\u110E\u1165\u11BA\u110D\u1162",
        "\u110E\u1165\u11BC\u1102\u1167\u11AB",
        "\u110E\u1165\u11BC\u1107\u1161\u110C\u1175",
        "\u110E\u1165\u11BC\u1109\u1169",
        "\u110E\u1165\u11BC\u110E\u116E\u11AB",
        "\u110E\u1166\u1100\u1168",
        "\u110E\u1166\u1105\u1167\u11A8",
        "\u110E\u1166\u110B\u1169\u11AB",
        "\u110E\u1166\u110B\u1172\u11A8",
        "\u110E\u1166\u110C\u116E\u11BC",
        "\u110E\u1166\u1112\u1165\u11B7",
        "\u110E\u1169\u1103\u1173\u11BC\u1112\u1161\u11A8\u1109\u1162\u11BC",
        "\u110E\u1169\u1107\u1161\u11AB",
        "\u110E\u1169\u1107\u1161\u11B8",
        "\u110E\u1169\u1109\u1161\u11BC\u1112\u116A",
        "\u110E\u1169\u1109\u116E\u11AB",
        "\u110E\u1169\u110B\u1167\u1105\u1173\u11B7",
        "\u110E\u1169\u110B\u116F\u11AB",
        "\u110E\u1169\u110C\u1165\u1102\u1167\u11A8",
        "\u110E\u1169\u110C\u1165\u11B7",
        "\u110E\u1169\u110E\u1165\u11BC",
        "\u110E\u1169\u110F\u1169\u11AF\u1105\u1175\u11BA",
        "\u110E\u1169\u11BA\u1107\u116E\u11AF",
        "\u110E\u1169\u11BC\u1100\u1161\u11A8",
        "\u110E\u1169\u11BC\u1105\u1175",
        "\u110E\u1169\u11BC\u110C\u1161\u11BC",
        "\u110E\u116A\u11AF\u110B\u1167\u11BC",
        "\u110E\u116C\u1100\u1173\u11AB",
        "\u110E\u116C\u1109\u1161\u11BC",
        "\u110E\u116C\u1109\u1165\u11AB",
        "\u110E\u116C\u1109\u1175\u11AB",
        "\u110E\u116C\u110B\u1161\u11A8",
        "\u110E\u116C\u110C\u1169\u11BC",
        "\u110E\u116E\u1109\u1165\u11A8",
        "\u110E\u116E\u110B\u1165\u11A8",
        "\u110E\u116E\u110C\u1175\u11AB",
        "\u110E\u116E\u110E\u1165\u11AB",
        "\u110E\u116E\u110E\u1173\u11A8",
        "\u110E\u116E\u11A8\u1100\u116E",
        "\u110E\u116E\u11A8\u1109\u1169",
        "\u110E\u116E\u11A8\u110C\u1166",
        "\u110E\u116E\u11A8\u1112\u1161",
        "\u110E\u116E\u11AF\u1100\u1173\u11AB",
        "\u110E\u116E\u11AF\u1107\u1161\u11AF",
        "\u110E\u116E\u11AF\u1109\u1161\u11AB",
        "\u110E\u116E\u11AF\u1109\u1175\u11AB",
        "\u110E\u116E\u11AF\u110B\u1167\u11AB",
        "\u110E\u116E\u11AF\u110B\u1175\u11B8",
        "\u110E\u116E\u11AF\u110C\u1161\u11BC",
        "\u110E\u116E\u11AF\u1111\u1161\u11AB",
        "\u110E\u116E\u11BC\u1100\u1167\u11A8",
        "\u110E\u116E\u11BC\u1100\u1169",
        "\u110E\u116E\u11BC\u1103\u1169\u11AF",
        "\u110E\u116E\u11BC\u1107\u116E\u11AB\u1112\u1175",
        "\u110E\u116E\u11BC\u110E\u1165\u11BC\u1103\u1169",
        "\u110E\u1171\u110B\u1165\u11B8",
        "\u110E\u1171\u110C\u1175\u11A8",
        "\u110E\u1171\u1112\u1163\u11BC",
        "\u110E\u1175\u110B\u1163\u11A8",
        "\u110E\u1175\u11AB\u1100\u116E",
        "\u110E\u1175\u11AB\u110E\u1165\u11A8",
        "\u110E\u1175\u11AF\u1109\u1175\u11B8",
        "\u110E\u1175\u11AF\u110B\u116F\u11AF",
        "\u110E\u1175\u11AF\u1111\u1161\u11AB",
        "\u110E\u1175\u11B7\u1103\u1162",
        "\u110E\u1175\u11B7\u1106\u116E\u11A8",
        "\u110E\u1175\u11B7\u1109\u1175\u11AF",
        "\u110E\u1175\u11BA\u1109\u1169\u11AF",
        "\u110E\u1175\u11BC\u110E\u1161\u11AB",
        "\u110F\u1161\u1106\u1166\u1105\u1161",
        "\u110F\u1161\u110B\u116E\u11AB\u1110\u1165",
        "\u110F\u1161\u11AF\u1100\u116E\u11A8\u1109\u116E",
        "\u110F\u1162\u1105\u1175\u11A8\u1110\u1165",
        "\u110F\u1162\u11B7\u1111\u1165\u1109\u1173",
        "\u110F\u1162\u11B7\u1111\u1166\u110B\u1175\u11AB",
        "\u110F\u1165\u1110\u1173\u11AB",
        "\u110F\u1165\u11AB\u1103\u1175\u1109\u1167\u11AB",
        "\u110F\u1165\u11AF\u1105\u1165",
        "\u110F\u1165\u11B7\u1111\u1172\u1110\u1165",
        "\u110F\u1169\u1101\u1175\u1105\u1175",
        "\u110F\u1169\u1106\u1175\u1103\u1175",
        "\u110F\u1169\u11AB\u1109\u1165\u1110\u1173",
        "\u110F\u1169\u11AF\u1105\u1161",
        "\u110F\u1169\u11B7\u1111\u1173\u11AF\u1105\u1166\u11A8\u1109\u1173",
        "\u110F\u1169\u11BC\u1102\u1161\u1106\u116E\u11AF",
        "\u110F\u116B\u1100\u1161\u11B7",
        "\u110F\u116E\u1103\u1166\u1110\u1161",
        "\u110F\u1173\u1105\u1175\u11B7",
        "\u110F\u1173\u11AB\u1100\u1175\u11AF",
        "\u110F\u1173\u11AB\u1104\u1161\u11AF",
        "\u110F\u1173\u11AB\u1109\u1169\u1105\u1175",
        "\u110F\u1173\u11AB\u110B\u1161\u1103\u1173\u11AF",
        "\u110F\u1173\u11AB\u110B\u1165\u1106\u1165\u1102\u1175",
        "\u110F\u1173\u11AB\u110B\u1175\u11AF",
        "\u110F\u1173\u11AB\u110C\u1165\u11AF",
        "\u110F\u1173\u11AF\u1105\u1162\u1109\u1175\u11A8",
        "\u110F\u1173\u11AF\u1105\u1165\u11B8",
        "\u110F\u1175\u11AF\u1105\u1169",
        "\u1110\u1161\u110B\u1175\u11B8",
        "\u1110\u1161\u110C\u1161\u1100\u1175",
        "\u1110\u1161\u11A8\u1100\u116E",
        "\u1110\u1161\u11A8\u110C\u1161",
        "\u1110\u1161\u11AB\u1109\u1162\u11BC",
        "\u1110\u1162\u1100\u116F\u11AB\u1103\u1169",
        "\u1110\u1162\u110B\u1163\u11BC",
        "\u1110\u1162\u1111\u116E\u11BC",
        "\u1110\u1162\u11A8\u1109\u1175",
        "\u1110\u1162\u11AF\u1105\u1165\u11AB\u1110\u1173",
        "\u1110\u1165\u1102\u1165\u11AF",
        "\u1110\u1165\u1106\u1175\u1102\u1165\u11AF",
        "\u1110\u1166\u1102\u1175\u1109\u1173",
        "\u1110\u1166\u1109\u1173\u1110\u1173",
        "\u1110\u1166\u110B\u1175\u1107\u1173\u11AF",
        "\u1110\u1166\u11AF\u1105\u1166\u1107\u1175\u110C\u1165\u11AB",
        "\u1110\u1169\u1105\u1169\u11AB",
        "\u1110\u1169\u1106\u1161\u1110\u1169",
        "\u1110\u1169\u110B\u116D\u110B\u1175\u11AF",
        "\u1110\u1169\u11BC\u1100\u1168",
        "\u1110\u1169\u11BC\u1100\u116A",
        "\u1110\u1169\u11BC\u1105\u1169",
        "\u1110\u1169\u11BC\u1109\u1175\u11AB",
        "\u1110\u1169\u11BC\u110B\u1167\u11A8",
        "\u1110\u1169\u11BC\u110B\u1175\u11AF",
        "\u1110\u1169\u11BC\u110C\u1161\u11BC",
        "\u1110\u1169\u11BC\u110C\u1166",
        "\u1110\u1169\u11BC\u110C\u1173\u11BC",
        "\u1110\u1169\u11BC\u1112\u1161\u11B8",
        "\u1110\u1169\u11BC\u1112\u116A",
        "\u1110\u116C\u1100\u1173\u11AB",
        "\u1110\u116C\u110B\u116F\u11AB",
        "\u1110\u116C\u110C\u1175\u11A8\u1100\u1173\u11B7",
        "\u1110\u1171\u1100\u1175\u11B7",
        "\u1110\u1173\u1105\u1165\u11A8",
        "\u1110\u1173\u11A8\u1100\u1173\u11B8",
        "\u1110\u1173\u11A8\u1107\u1167\u11AF",
        "\u1110\u1173\u11A8\u1109\u1165\u11BC",
        "\u1110\u1173\u11A8\u1109\u116E",
        "\u1110\u1173\u11A8\u110C\u1175\u11BC",
        "\u1110\u1173\u11A8\u1112\u1175",
        "\u1110\u1173\u11AB\u1110\u1173\u11AB\u1112\u1175",
        "\u1110\u1175\u1109\u1167\u110E\u1173",
        "\u1111\u1161\u1105\u1161\u11AB\u1109\u1162\u11A8",
        "\u1111\u1161\u110B\u1175\u11AF",
        "\u1111\u1161\u110E\u116E\u11AF\u1109\u1169",
        "\u1111\u1161\u11AB\u1100\u1167\u11AF",
        "\u1111\u1161\u11AB\u1103\u1161\u11AB",
        "\u1111\u1161\u11AB\u1106\u1162",
        "\u1111\u1161\u11AB\u1109\u1161",
        "\u1111\u1161\u11AF\u1109\u1175\u11B8",
        "\u1111\u1161\u11AF\u110B\u116F\u11AF",
        "\u1111\u1161\u11B8\u1109\u1169\u11BC",
        "\u1111\u1162\u1109\u1167\u11AB",
        "\u1111\u1162\u11A8\u1109\u1173",
        "\u1111\u1162\u11A8\u1109\u1175\u1106\u1175\u11AF\u1105\u1175",
        "\u1111\u1162\u11AB\u1110\u1175",
        "\u1111\u1165\u1109\u1166\u11AB\u1110\u1173",
        "\u1111\u1166\u110B\u1175\u11AB\u1110\u1173",
        "\u1111\u1167\u11AB\u1100\u1167\u11AB",
        "\u1111\u1167\u11AB\u110B\u1174",
        "\u1111\u1167\u11AB\u110C\u1175",
        "\u1111\u1167\u11AB\u1112\u1175",
        "\u1111\u1167\u11BC\u1100\u1161",
        "\u1111\u1167\u11BC\u1100\u1172\u11AB",
        "\u1111\u1167\u11BC\u1109\u1162\u11BC",
        "\u1111\u1167\u11BC\u1109\u1169",
        "\u1111\u1167\u11BC\u110B\u1163\u11BC",
        "\u1111\u1167\u11BC\u110B\u1175\u11AF",
        "\u1111\u1167\u11BC\u1112\u116A",
        "\u1111\u1169\u1109\u1173\u1110\u1165",
        "\u1111\u1169\u110B\u1175\u11AB\u1110\u1173",
        "\u1111\u1169\u110C\u1161\u11BC",
        "\u1111\u1169\u1112\u1161\u11B7",
        "\u1111\u116D\u1106\u1167\u11AB",
        "\u1111\u116D\u110C\u1165\u11BC",
        "\u1111\u116D\u110C\u116E\u11AB",
        "\u1111\u116D\u1112\u1167\u11AB",
        "\u1111\u116E\u11B7\u1106\u1169\u11A8",
        "\u1111\u116E\u11B7\u110C\u1175\u11AF",
        "\u1111\u116E\u11BC\u1100\u1167\u11BC",
        "\u1111\u116E\u11BC\u1109\u1169\u11A8",
        "\u1111\u116E\u11BC\u1109\u1173\u11B8",
        "\u1111\u1173\u1105\u1161\u11BC\u1109\u1173",
        "\u1111\u1173\u1105\u1175\u11AB\u1110\u1165",
        "\u1111\u1173\u11AF\u1105\u1161\u1109\u1173\u1110\u1175\u11A8",
        "\u1111\u1175\u1100\u1169\u11AB",
        "\u1111\u1175\u1106\u1161\u11BC",
        "\u1111\u1175\u110B\u1161\u1102\u1169",
        "\u1111\u1175\u11AF\u1105\u1173\u11B7",
        "\u1111\u1175\u11AF\u1109\u116E",
        "\u1111\u1175\u11AF\u110B\u116D",
        "\u1111\u1175\u11AF\u110C\u1161",
        "\u1111\u1175\u11AF\u1110\u1169\u11BC",
        "\u1111\u1175\u11BC\u1100\u1168",
        "\u1112\u1161\u1102\u1173\u1102\u1175\u11B7",
        "\u1112\u1161\u1102\u1173\u11AF",
        "\u1112\u1161\u1103\u1173\u110B\u1170\u110B\u1165",
        "\u1112\u1161\u1105\u116E\u11BA\u1107\u1161\u11B7",
        "\u1112\u1161\u1107\u1161\u11AB\u1100\u1175",
        "\u1112\u1161\u1109\u116E\u11A8\u110C\u1175\u11B8",
        "\u1112\u1161\u1109\u116E\u11AB",
        "\u1112\u1161\u110B\u1167\u1110\u1173\u11AB",
        "\u1112\u1161\u110C\u1175\u1106\u1161\u11AB",
        "\u1112\u1161\u110E\u1165\u11AB",
        "\u1112\u1161\u1111\u116E\u11B7",
        "\u1112\u1161\u1111\u1175\u11AF",
        "\u1112\u1161\u11A8\u1100\u116A",
        "\u1112\u1161\u11A8\u1100\u116D",
        "\u1112\u1161\u11A8\u1100\u1173\u11B8",
        "\u1112\u1161\u11A8\u1100\u1175",
        "\u1112\u1161\u11A8\u1102\u1167\u11AB",
        "\u1112\u1161\u11A8\u1105\u1167\u11A8",
        "\u1112\u1161\u11A8\u1107\u1165\u11AB",
        "\u1112\u1161\u11A8\u1107\u116E\u1106\u1169",
        "\u1112\u1161\u11A8\u1107\u1175",
        "\u1112\u1161\u11A8\u1109\u1162\u11BC",
        "\u1112\u1161\u11A8\u1109\u116E\u11AF",
        "\u1112\u1161\u11A8\u1109\u1173\u11B8",
        "\u1112\u1161\u11A8\u110B\u116D\u11BC\u1111\u116E\u11B7",
        "\u1112\u1161\u11A8\u110B\u116F\u11AB",
        "\u1112\u1161\u11A8\u110B\u1171",
        "\u1112\u1161\u11A8\u110C\u1161",
        "\u1112\u1161\u11A8\u110C\u1165\u11B7",
        "\u1112\u1161\u11AB\u1100\u1168",
        "\u1112\u1161\u11AB\u1100\u1173\u11AF",
        "\u1112\u1161\u11AB\u1101\u1165\u1107\u1165\u11AB\u110B\u1166",
        "\u1112\u1161\u11AB\u1102\u1161\u11BD",
        "\u1112\u1161\u11AB\u1102\u116E\u11AB",
        "\u1112\u1161\u11AB\u1103\u1169\u11BC\u110B\u1161\u11AB",
        "\u1112\u1161\u11AB\u1104\u1162",
        "\u1112\u1161\u11AB\u1105\u1161\u1109\u1161\u11AB",
        "\u1112\u1161\u11AB\u1106\u1161\u1103\u1175",
        "\u1112\u1161\u11AB\u1106\u116E\u11AB",
        "\u1112\u1161\u11AB\u1107\u1165\u11AB",
        "\u1112\u1161\u11AB\u1107\u1169\u11A8",
        "\u1112\u1161\u11AB\u1109\u1175\u11A8",
        "\u1112\u1161\u11AB\u110B\u1167\u1105\u1173\u11B7",
        "\u1112\u1161\u11AB\u110D\u1169\u11A8",
        "\u1112\u1161\u11AF\u1106\u1165\u1102\u1175",
        "\u1112\u1161\u11AF\u110B\u1161\u1107\u1165\u110C\u1175",
        "\u1112\u1161\u11AF\u110B\u1175\u11AB",
        "\u1112\u1161\u11B7\u1101\u1166",
        "\u1112\u1161\u11B7\u1107\u116E\u1105\u1169",
        "\u1112\u1161\u11B8\u1100\u1167\u11A8",
        "\u1112\u1161\u11B8\u1105\u1175\u110C\u1165\u11A8",
        "\u1112\u1161\u11BC\u1100\u1169\u11BC",
        "\u1112\u1161\u11BC\u1100\u116E",
        "\u1112\u1161\u11BC\u1109\u1161\u11BC",
        "\u1112\u1161\u11BC\u110B\u1174",
        "\u1112\u1162\u1100\u1167\u11AF",
        "\u1112\u1162\u1100\u116E\u11AB",
        "\u1112\u1162\u1103\u1161\u11B8",
        "\u1112\u1162\u1103\u1161\u11BC",
        "\u1112\u1162\u1106\u116E\u11AF",
        "\u1112\u1162\u1109\u1165\u11A8",
        "\u1112\u1162\u1109\u1165\u11AF",
        "\u1112\u1162\u1109\u116E\u110B\u116D\u11A8\u110C\u1161\u11BC",
        "\u1112\u1162\u110B\u1161\u11AB",
        "\u1112\u1162\u11A8\u1109\u1175\u11B7",
        "\u1112\u1162\u11AB\u1103\u1173\u1107\u1162\u11A8",
        "\u1112\u1162\u11B7\u1107\u1165\u1100\u1165",
        "\u1112\u1162\u11BA\u1107\u1167\u11C0",
        "\u1112\u1162\u11BA\u1109\u1161\u11AF",
        "\u1112\u1162\u11BC\u1103\u1169\u11BC",
        "\u1112\u1162\u11BC\u1107\u1169\u11A8",
        "\u1112\u1162\u11BC\u1109\u1161",
        "\u1112\u1162\u11BC\u110B\u116E\u11AB",
        "\u1112\u1162\u11BC\u110B\u1171",
        "\u1112\u1163\u11BC\u1100\u1175",
        "\u1112\u1163\u11BC\u1109\u1161\u11BC",
        "\u1112\u1163\u11BC\u1109\u116E",
        "\u1112\u1165\u1105\u1161\u11A8",
        "\u1112\u1165\u110B\u116D\u11BC",
        "\u1112\u1166\u11AF\u1100\u1175",
        "\u1112\u1167\u11AB\u1100\u116A\u11AB",
        "\u1112\u1167\u11AB\u1100\u1173\u11B7",
        "\u1112\u1167\u11AB\u1103\u1162",
        "\u1112\u1167\u11AB\u1109\u1161\u11BC",
        "\u1112\u1167\u11AB\u1109\u1175\u11AF",
        "\u1112\u1167\u11AB\u110C\u1161\u11BC",
        "\u1112\u1167\u11AB\u110C\u1162",
        "\u1112\u1167\u11AB\u110C\u1175",
        "\u1112\u1167\u11AF\u110B\u1162\u11A8",
        "\u1112\u1167\u11B8\u1105\u1167\u11A8",
        "\u1112\u1167\u11BC\u1107\u116E",
        "\u1112\u1167\u11BC\u1109\u1161",
        "\u1112\u1167\u11BC\u1109\u116E",
        "\u1112\u1167\u11BC\u1109\u1175\u11A8",
        "\u1112\u1167\u11BC\u110C\u1166",
        "\u1112\u1167\u11BC\u1110\u1162",
        "\u1112\u1167\u11BC\u1111\u1167\u11AB",
        "\u1112\u1168\u1110\u1162\u11A8",
        "\u1112\u1169\u1100\u1175\u1109\u1175\u11B7",
        "\u1112\u1169\u1102\u1161\u11B7",
        "\u1112\u1169\u1105\u1161\u11BC\u110B\u1175",
        "\u1112\u1169\u1107\u1161\u11A8",
        "\u1112\u1169\u1110\u1166\u11AF",
        "\u1112\u1169\u1112\u1173\u11B8",
        "\u1112\u1169\u11A8\u1109\u1175",
        "\u1112\u1169\u11AF\u1105\u1169",
        "\u1112\u1169\u11B7\u1111\u1166\u110B\u1175\u110C\u1175",
        "\u1112\u1169\u11BC\u1107\u1169",
        "\u1112\u1169\u11BC\u1109\u116E",
        "\u1112\u1169\u11BC\u110E\u1161",
        "\u1112\u116A\u1106\u1167\u11AB",
        "\u1112\u116A\u1107\u116E\u11AB",
        "\u1112\u116A\u1109\u1161\u11AF",
        "\u1112\u116A\u110B\u116D\u110B\u1175\u11AF",
        "\u1112\u116A\u110C\u1161\u11BC",
        "\u1112\u116A\u1112\u1161\u11A8",
        "\u1112\u116A\u11A8\u1107\u1169",
        "\u1112\u116A\u11A8\u110B\u1175\u11AB",
        "\u1112\u116A\u11A8\u110C\u1161\u11BC",
        "\u1112\u116A\u11A8\u110C\u1165\u11BC",
        "\u1112\u116A\u11AB\u1100\u1161\u11B8",
        "\u1112\u116A\u11AB\u1100\u1167\u11BC",
        "\u1112\u116A\u11AB\u110B\u1167\u11BC",
        "\u1112\u116A\u11AB\u110B\u1172\u11AF",
        "\u1112\u116A\u11AB\u110C\u1161",
        "\u1112\u116A\u11AF\u1100\u1175",
        "\u1112\u116A\u11AF\u1103\u1169\u11BC",
        "\u1112\u116A\u11AF\u1107\u1161\u11AF\u1112\u1175",
        "\u1112\u116A\u11AF\u110B\u116D\u11BC",
        "\u1112\u116A\u11AF\u110D\u1161\u11A8",
        "\u1112\u116C\u1100\u1167\u11AB",
        "\u1112\u116C\u1100\u116A\u11AB",
        "\u1112\u116C\u1107\u1169\u11A8",
        "\u1112\u116C\u1109\u1162\u11A8",
        "\u1112\u116C\u110B\u116F\u11AB",
        "\u1112\u116C\u110C\u1161\u11BC",
        "\u1112\u116C\u110C\u1165\u11AB",
        "\u1112\u116C\u11BA\u1109\u116E",
        "\u1112\u116C\u11BC\u1103\u1161\u11AB\u1107\u1169\u1103\u1169",
        "\u1112\u116D\u110B\u1172\u11AF\u110C\u1165\u11A8",
        "\u1112\u116E\u1107\u1161\u11AB",
        "\u1112\u116E\u110E\u116E\u11BA\u1100\u1161\u1105\u116E",
        "\u1112\u116E\u11AB\u1105\u1167\u11AB",
        "\u1112\u116F\u11AF\u110A\u1175\u11AB",
        "\u1112\u1172\u1109\u1175\u11A8",
        "\u1112\u1172\u110B\u1175\u11AF",
        "\u1112\u1172\u11BC\u1102\u1162",
        "\u1112\u1173\u1105\u1173\u11B7",
        "\u1112\u1173\u11A8\u1107\u1162\u11A8",
        "\u1112\u1173\u11A8\u110B\u1175\u11AB",
        "\u1112\u1173\u11AB\u110C\u1165\u11A8",
        "\u1112\u1173\u11AB\u1112\u1175",
        "\u1112\u1173\u11BC\u1106\u1175",
        "\u1112\u1173\u11BC\u1107\u116E\u11AB",
        "\u1112\u1174\u1100\u1169\u11A8",
        "\u1112\u1174\u1106\u1161\u11BC",
        "\u1112\u1174\u1109\u1162\u11BC",
        "\u1112\u1174\u11AB\u1109\u1162\u11A8",
        "\u1112\u1175\u11B7\u1101\u1165\u11BA"
      ];
    }
  });

  // node_modules/bip39/src/wordlists/french.json
  var require_french = __commonJS({
    "node_modules/bip39/src/wordlists/french.json"(exports, module) {
      module.exports = [
        "abaisser",
        "abandon",
        "abdiquer",
        "abeille",
        "abolir",
        "aborder",
        "aboutir",
        "aboyer",
        "abrasif",
        "abreuver",
        "abriter",
        "abroger",
        "abrupt",
        "absence",
        "absolu",
        "absurde",
        "abusif",
        "abyssal",
        "acade\u0301mie",
        "acajou",
        "acarien",
        "accabler",
        "accepter",
        "acclamer",
        "accolade",
        "accroche",
        "accuser",
        "acerbe",
        "achat",
        "acheter",
        "aciduler",
        "acier",
        "acompte",
        "acque\u0301rir",
        "acronyme",
        "acteur",
        "actif",
        "actuel",
        "adepte",
        "ade\u0301quat",
        "adhe\u0301sif",
        "adjectif",
        "adjuger",
        "admettre",
        "admirer",
        "adopter",
        "adorer",
        "adoucir",
        "adresse",
        "adroit",
        "adulte",
        "adverbe",
        "ae\u0301rer",
        "ae\u0301ronef",
        "affaire",
        "affecter",
        "affiche",
        "affreux",
        "affubler",
        "agacer",
        "agencer",
        "agile",
        "agiter",
        "agrafer",
        "agre\u0301able",
        "agrume",
        "aider",
        "aiguille",
        "ailier",
        "aimable",
        "aisance",
        "ajouter",
        "ajuster",
        "alarmer",
        "alchimie",
        "alerte",
        "alge\u0300bre",
        "algue",
        "alie\u0301ner",
        "aliment",
        "alle\u0301ger",
        "alliage",
        "allouer",
        "allumer",
        "alourdir",
        "alpaga",
        "altesse",
        "alve\u0301ole",
        "amateur",
        "ambigu",
        "ambre",
        "ame\u0301nager",
        "amertume",
        "amidon",
        "amiral",
        "amorcer",
        "amour",
        "amovible",
        "amphibie",
        "ampleur",
        "amusant",
        "analyse",
        "anaphore",
        "anarchie",
        "anatomie",
        "ancien",
        "ane\u0301antir",
        "angle",
        "angoisse",
        "anguleux",
        "animal",
        "annexer",
        "annonce",
        "annuel",
        "anodin",
        "anomalie",
        "anonyme",
        "anormal",
        "antenne",
        "antidote",
        "anxieux",
        "apaiser",
        "ape\u0301ritif",
        "aplanir",
        "apologie",
        "appareil",
        "appeler",
        "apporter",
        "appuyer",
        "aquarium",
        "aqueduc",
        "arbitre",
        "arbuste",
        "ardeur",
        "ardoise",
        "argent",
        "arlequin",
        "armature",
        "armement",
        "armoire",
        "armure",
        "arpenter",
        "arracher",
        "arriver",
        "arroser",
        "arsenic",
        "arte\u0301riel",
        "article",
        "aspect",
        "asphalte",
        "aspirer",
        "assaut",
        "asservir",
        "assiette",
        "associer",
        "assurer",
        "asticot",
        "astre",
        "astuce",
        "atelier",
        "atome",
        "atrium",
        "atroce",
        "attaque",
        "attentif",
        "attirer",
        "attraper",
        "aubaine",
        "auberge",
        "audace",
        "audible",
        "augurer",
        "aurore",
        "automne",
        "autruche",
        "avaler",
        "avancer",
        "avarice",
        "avenir",
        "averse",
        "aveugle",
        "aviateur",
        "avide",
        "avion",
        "aviser",
        "avoine",
        "avouer",
        "avril",
        "axial",
        "axiome",
        "badge",
        "bafouer",
        "bagage",
        "baguette",
        "baignade",
        "balancer",
        "balcon",
        "baleine",
        "balisage",
        "bambin",
        "bancaire",
        "bandage",
        "banlieue",
        "bannie\u0300re",
        "banquier",
        "barbier",
        "baril",
        "baron",
        "barque",
        "barrage",
        "bassin",
        "bastion",
        "bataille",
        "bateau",
        "batterie",
        "baudrier",
        "bavarder",
        "belette",
        "be\u0301lier",
        "belote",
        "be\u0301ne\u0301fice",
        "berceau",
        "berger",
        "berline",
        "bermuda",
        "besace",
        "besogne",
        "be\u0301tail",
        "beurre",
        "biberon",
        "bicycle",
        "bidule",
        "bijou",
        "bilan",
        "bilingue",
        "billard",
        "binaire",
        "biologie",
        "biopsie",
        "biotype",
        "biscuit",
        "bison",
        "bistouri",
        "bitume",
        "bizarre",
        "blafard",
        "blague",
        "blanchir",
        "blessant",
        "blinder",
        "blond",
        "bloquer",
        "blouson",
        "bobard",
        "bobine",
        "boire",
        "boiser",
        "bolide",
        "bonbon",
        "bondir",
        "bonheur",
        "bonifier",
        "bonus",
        "bordure",
        "borne",
        "botte",
        "boucle",
        "boueux",
        "bougie",
        "boulon",
        "bouquin",
        "bourse",
        "boussole",
        "boutique",
        "boxeur",
        "branche",
        "brasier",
        "brave",
        "brebis",
        "bre\u0300che",
        "breuvage",
        "bricoler",
        "brigade",
        "brillant",
        "brioche",
        "brique",
        "brochure",
        "broder",
        "bronzer",
        "brousse",
        "broyeur",
        "brume",
        "brusque",
        "brutal",
        "bruyant",
        "buffle",
        "buisson",
        "bulletin",
        "bureau",
        "burin",
        "bustier",
        "butiner",
        "butoir",
        "buvable",
        "buvette",
        "cabanon",
        "cabine",
        "cachette",
        "cadeau",
        "cadre",
        "cafe\u0301ine",
        "caillou",
        "caisson",
        "calculer",
        "calepin",
        "calibre",
        "calmer",
        "calomnie",
        "calvaire",
        "camarade",
        "came\u0301ra",
        "camion",
        "campagne",
        "canal",
        "caneton",
        "canon",
        "cantine",
        "canular",
        "capable",
        "caporal",
        "caprice",
        "capsule",
        "capter",
        "capuche",
        "carabine",
        "carbone",
        "caresser",
        "caribou",
        "carnage",
        "carotte",
        "carreau",
        "carton",
        "cascade",
        "casier",
        "casque",
        "cassure",
        "causer",
        "caution",
        "cavalier",
        "caverne",
        "caviar",
        "ce\u0301dille",
        "ceinture",
        "ce\u0301leste",
        "cellule",
        "cendrier",
        "censurer",
        "central",
        "cercle",
        "ce\u0301re\u0301bral",
        "cerise",
        "cerner",
        "cerveau",
        "cesser",
        "chagrin",
        "chaise",
        "chaleur",
        "chambre",
        "chance",
        "chapitre",
        "charbon",
        "chasseur",
        "chaton",
        "chausson",
        "chavirer",
        "chemise",
        "chenille",
        "che\u0301quier",
        "chercher",
        "cheval",
        "chien",
        "chiffre",
        "chignon",
        "chime\u0300re",
        "chiot",
        "chlorure",
        "chocolat",
        "choisir",
        "chose",
        "chouette",
        "chrome",
        "chute",
        "cigare",
        "cigogne",
        "cimenter",
        "cine\u0301ma",
        "cintrer",
        "circuler",
        "cirer",
        "cirque",
        "citerne",
        "citoyen",
        "citron",
        "civil",
        "clairon",
        "clameur",
        "claquer",
        "classe",
        "clavier",
        "client",
        "cligner",
        "climat",
        "clivage",
        "cloche",
        "clonage",
        "cloporte",
        "cobalt",
        "cobra",
        "cocasse",
        "cocotier",
        "coder",
        "codifier",
        "coffre",
        "cogner",
        "cohe\u0301sion",
        "coiffer",
        "coincer",
        "cole\u0300re",
        "colibri",
        "colline",
        "colmater",
        "colonel",
        "combat",
        "come\u0301die",
        "commande",
        "compact",
        "concert",
        "conduire",
        "confier",
        "congeler",
        "connoter",
        "consonne",
        "contact",
        "convexe",
        "copain",
        "copie",
        "corail",
        "corbeau",
        "cordage",
        "corniche",
        "corpus",
        "correct",
        "corte\u0300ge",
        "cosmique",
        "costume",
        "coton",
        "coude",
        "coupure",
        "courage",
        "couteau",
        "couvrir",
        "coyote",
        "crabe",
        "crainte",
        "cravate",
        "crayon",
        "cre\u0301ature",
        "cre\u0301diter",
        "cre\u0301meux",
        "creuser",
        "crevette",
        "cribler",
        "crier",
        "cristal",
        "crite\u0300re",
        "croire",
        "croquer",
        "crotale",
        "crucial",
        "cruel",
        "crypter",
        "cubique",
        "cueillir",
        "cuille\u0300re",
        "cuisine",
        "cuivre",
        "culminer",
        "cultiver",
        "cumuler",
        "cupide",
        "curatif",
        "curseur",
        "cyanure",
        "cycle",
        "cylindre",
        "cynique",
        "daigner",
        "damier",
        "danger",
        "danseur",
        "dauphin",
        "de\u0301battre",
        "de\u0301biter",
        "de\u0301border",
        "de\u0301brider",
        "de\u0301butant",
        "de\u0301caler",
        "de\u0301cembre",
        "de\u0301chirer",
        "de\u0301cider",
        "de\u0301clarer",
        "de\u0301corer",
        "de\u0301crire",
        "de\u0301cupler",
        "de\u0301dale",
        "de\u0301ductif",
        "de\u0301esse",
        "de\u0301fensif",
        "de\u0301filer",
        "de\u0301frayer",
        "de\u0301gager",
        "de\u0301givrer",
        "de\u0301glutir",
        "de\u0301grafer",
        "de\u0301jeuner",
        "de\u0301lice",
        "de\u0301loger",
        "demander",
        "demeurer",
        "de\u0301molir",
        "de\u0301nicher",
        "de\u0301nouer",
        "dentelle",
        "de\u0301nuder",
        "de\u0301part",
        "de\u0301penser",
        "de\u0301phaser",
        "de\u0301placer",
        "de\u0301poser",
        "de\u0301ranger",
        "de\u0301rober",
        "de\u0301sastre",
        "descente",
        "de\u0301sert",
        "de\u0301signer",
        "de\u0301sobe\u0301ir",
        "dessiner",
        "destrier",
        "de\u0301tacher",
        "de\u0301tester",
        "de\u0301tourer",
        "de\u0301tresse",
        "devancer",
        "devenir",
        "deviner",
        "devoir",
        "diable",
        "dialogue",
        "diamant",
        "dicter",
        "diffe\u0301rer",
        "dige\u0301rer",
        "digital",
        "digne",
        "diluer",
        "dimanche",
        "diminuer",
        "dioxyde",
        "directif",
        "diriger",
        "discuter",
        "disposer",
        "dissiper",
        "distance",
        "divertir",
        "diviser",
        "docile",
        "docteur",
        "dogme",
        "doigt",
        "domaine",
        "domicile",
        "dompter",
        "donateur",
        "donjon",
        "donner",
        "dopamine",
        "dortoir",
        "dorure",
        "dosage",
        "doseur",
        "dossier",
        "dotation",
        "douanier",
        "double",
        "douceur",
        "douter",
        "doyen",
        "dragon",
        "draper",
        "dresser",
        "dribbler",
        "droiture",
        "duperie",
        "duplexe",
        "durable",
        "durcir",
        "dynastie",
        "e\u0301blouir",
        "e\u0301carter",
        "e\u0301charpe",
        "e\u0301chelle",
        "e\u0301clairer",
        "e\u0301clipse",
        "e\u0301clore",
        "e\u0301cluse",
        "e\u0301cole",
        "e\u0301conomie",
        "e\u0301corce",
        "e\u0301couter",
        "e\u0301craser",
        "e\u0301cre\u0301mer",
        "e\u0301crivain",
        "e\u0301crou",
        "e\u0301cume",
        "e\u0301cureuil",
        "e\u0301difier",
        "e\u0301duquer",
        "effacer",
        "effectif",
        "effigie",
        "effort",
        "effrayer",
        "effusion",
        "e\u0301galiser",
        "e\u0301garer",
        "e\u0301jecter",
        "e\u0301laborer",
        "e\u0301largir",
        "e\u0301lectron",
        "e\u0301le\u0301gant",
        "e\u0301le\u0301phant",
        "e\u0301le\u0300ve",
        "e\u0301ligible",
        "e\u0301litisme",
        "e\u0301loge",
        "e\u0301lucider",
        "e\u0301luder",
        "emballer",
        "embellir",
        "embryon",
        "e\u0301meraude",
        "e\u0301mission",
        "emmener",
        "e\u0301motion",
        "e\u0301mouvoir",
        "empereur",
        "employer",
        "emporter",
        "emprise",
        "e\u0301mulsion",
        "encadrer",
        "enche\u0300re",
        "enclave",
        "encoche",
        "endiguer",
        "endosser",
        "endroit",
        "enduire",
        "e\u0301nergie",
        "enfance",
        "enfermer",
        "enfouir",
        "engager",
        "engin",
        "englober",
        "e\u0301nigme",
        "enjamber",
        "enjeu",
        "enlever",
        "ennemi",
        "ennuyeux",
        "enrichir",
        "enrobage",
        "enseigne",
        "entasser",
        "entendre",
        "entier",
        "entourer",
        "entraver",
        "e\u0301nume\u0301rer",
        "envahir",
        "enviable",
        "envoyer",
        "enzyme",
        "e\u0301olien",
        "e\u0301paissir",
        "e\u0301pargne",
        "e\u0301patant",
        "e\u0301paule",
        "e\u0301picerie",
        "e\u0301pide\u0301mie",
        "e\u0301pier",
        "e\u0301pilogue",
        "e\u0301pine",
        "e\u0301pisode",
        "e\u0301pitaphe",
        "e\u0301poque",
        "e\u0301preuve",
        "e\u0301prouver",
        "e\u0301puisant",
        "e\u0301querre",
        "e\u0301quipe",
        "e\u0301riger",
        "e\u0301rosion",
        "erreur",
        "e\u0301ruption",
        "escalier",
        "espadon",
        "espe\u0300ce",
        "espie\u0300gle",
        "espoir",
        "esprit",
        "esquiver",
        "essayer",
        "essence",
        "essieu",
        "essorer",
        "estime",
        "estomac",
        "estrade",
        "e\u0301tage\u0300re",
        "e\u0301taler",
        "e\u0301tanche",
        "e\u0301tatique",
        "e\u0301teindre",
        "e\u0301tendoir",
        "e\u0301ternel",
        "e\u0301thanol",
        "e\u0301thique",
        "ethnie",
        "e\u0301tirer",
        "e\u0301toffer",
        "e\u0301toile",
        "e\u0301tonnant",
        "e\u0301tourdir",
        "e\u0301trange",
        "e\u0301troit",
        "e\u0301tude",
        "euphorie",
        "e\u0301valuer",
        "e\u0301vasion",
        "e\u0301ventail",
        "e\u0301vidence",
        "e\u0301viter",
        "e\u0301volutif",
        "e\u0301voquer",
        "exact",
        "exage\u0301rer",
        "exaucer",
        "exceller",
        "excitant",
        "exclusif",
        "excuse",
        "exe\u0301cuter",
        "exemple",
        "exercer",
        "exhaler",
        "exhorter",
        "exigence",
        "exiler",
        "exister",
        "exotique",
        "expe\u0301dier",
        "explorer",
        "exposer",
        "exprimer",
        "exquis",
        "extensif",
        "extraire",
        "exulter",
        "fable",
        "fabuleux",
        "facette",
        "facile",
        "facture",
        "faiblir",
        "falaise",
        "fameux",
        "famille",
        "farceur",
        "farfelu",
        "farine",
        "farouche",
        "fasciner",
        "fatal",
        "fatigue",
        "faucon",
        "fautif",
        "faveur",
        "favori",
        "fe\u0301brile",
        "fe\u0301conder",
        "fe\u0301de\u0301rer",
        "fe\u0301lin",
        "femme",
        "fe\u0301mur",
        "fendoir",
        "fe\u0301odal",
        "fermer",
        "fe\u0301roce",
        "ferveur",
        "festival",
        "feuille",
        "feutre",
        "fe\u0301vrier",
        "fiasco",
        "ficeler",
        "fictif",
        "fide\u0300le",
        "figure",
        "filature",
        "filetage",
        "filie\u0300re",
        "filleul",
        "filmer",
        "filou",
        "filtrer",
        "financer",
        "finir",
        "fiole",
        "firme",
        "fissure",
        "fixer",
        "flairer",
        "flamme",
        "flasque",
        "flatteur",
        "fle\u0301au",
        "fle\u0300che",
        "fleur",
        "flexion",
        "flocon",
        "flore",
        "fluctuer",
        "fluide",
        "fluvial",
        "folie",
        "fonderie",
        "fongible",
        "fontaine",
        "forcer",
        "forgeron",
        "formuler",
        "fortune",
        "fossile",
        "foudre",
        "fouge\u0300re",
        "fouiller",
        "foulure",
        "fourmi",
        "fragile",
        "fraise",
        "franchir",
        "frapper",
        "frayeur",
        "fre\u0301gate",
        "freiner",
        "frelon",
        "fre\u0301mir",
        "fre\u0301ne\u0301sie",
        "fre\u0300re",
        "friable",
        "friction",
        "frisson",
        "frivole",
        "froid",
        "fromage",
        "frontal",
        "frotter",
        "fruit",
        "fugitif",
        "fuite",
        "fureur",
        "furieux",
        "furtif",
        "fusion",
        "futur",
        "gagner",
        "galaxie",
        "galerie",
        "gambader",
        "garantir",
        "gardien",
        "garnir",
        "garrigue",
        "gazelle",
        "gazon",
        "ge\u0301ant",
        "ge\u0301latine",
        "ge\u0301lule",
        "gendarme",
        "ge\u0301ne\u0301ral",
        "ge\u0301nie",
        "genou",
        "gentil",
        "ge\u0301ologie",
        "ge\u0301ome\u0300tre",
        "ge\u0301ranium",
        "germe",
        "gestuel",
        "geyser",
        "gibier",
        "gicler",
        "girafe",
        "givre",
        "glace",
        "glaive",
        "glisser",
        "globe",
        "gloire",
        "glorieux",
        "golfeur",
        "gomme",
        "gonfler",
        "gorge",
        "gorille",
        "goudron",
        "gouffre",
        "goulot",
        "goupille",
        "gourmand",
        "goutte",
        "graduel",
        "graffiti",
        "graine",
        "grand",
        "grappin",
        "gratuit",
        "gravir",
        "grenat",
        "griffure",
        "griller",
        "grimper",
        "grogner",
        "gronder",
        "grotte",
        "groupe",
        "gruger",
        "grutier",
        "gruye\u0300re",
        "gue\u0301pard",
        "guerrier",
        "guide",
        "guimauve",
        "guitare",
        "gustatif",
        "gymnaste",
        "gyrostat",
        "habitude",
        "hachoir",
        "halte",
        "hameau",
        "hangar",
        "hanneton",
        "haricot",
        "harmonie",
        "harpon",
        "hasard",
        "he\u0301lium",
        "he\u0301matome",
        "herbe",
        "he\u0301risson",
        "hermine",
        "he\u0301ron",
        "he\u0301siter",
        "heureux",
        "hiberner",
        "hibou",
        "hilarant",
        "histoire",
        "hiver",
        "homard",
        "hommage",
        "homoge\u0300ne",
        "honneur",
        "honorer",
        "honteux",
        "horde",
        "horizon",
        "horloge",
        "hormone",
        "horrible",
        "houleux",
        "housse",
        "hublot",
        "huileux",
        "humain",
        "humble",
        "humide",
        "humour",
        "hurler",
        "hydromel",
        "hygie\u0300ne",
        "hymne",
        "hypnose",
        "idylle",
        "ignorer",
        "iguane",
        "illicite",
        "illusion",
        "image",
        "imbiber",
        "imiter",
        "immense",
        "immobile",
        "immuable",
        "impact",
        "impe\u0301rial",
        "implorer",
        "imposer",
        "imprimer",
        "imputer",
        "incarner",
        "incendie",
        "incident",
        "incliner",
        "incolore",
        "indexer",
        "indice",
        "inductif",
        "ine\u0301dit",
        "ineptie",
        "inexact",
        "infini",
        "infliger",
        "informer",
        "infusion",
        "inge\u0301rer",
        "inhaler",
        "inhiber",
        "injecter",
        "injure",
        "innocent",
        "inoculer",
        "inonder",
        "inscrire",
        "insecte",
        "insigne",
        "insolite",
        "inspirer",
        "instinct",
        "insulter",
        "intact",
        "intense",
        "intime",
        "intrigue",
        "intuitif",
        "inutile",
        "invasion",
        "inventer",
        "inviter",
        "invoquer",
        "ironique",
        "irradier",
        "irre\u0301el",
        "irriter",
        "isoler",
        "ivoire",
        "ivresse",
        "jaguar",
        "jaillir",
        "jambe",
        "janvier",
        "jardin",
        "jauger",
        "jaune",
        "javelot",
        "jetable",
        "jeton",
        "jeudi",
        "jeunesse",
        "joindre",
        "joncher",
        "jongler",
        "joueur",
        "jouissif",
        "journal",
        "jovial",
        "joyau",
        "joyeux",
        "jubiler",
        "jugement",
        "junior",
        "jupon",
        "juriste",
        "justice",
        "juteux",
        "juve\u0301nile",
        "kayak",
        "kimono",
        "kiosque",
        "label",
        "labial",
        "labourer",
        "lace\u0301rer",
        "lactose",
        "lagune",
        "laine",
        "laisser",
        "laitier",
        "lambeau",
        "lamelle",
        "lampe",
        "lanceur",
        "langage",
        "lanterne",
        "lapin",
        "largeur",
        "larme",
        "laurier",
        "lavabo",
        "lavoir",
        "lecture",
        "le\u0301gal",
        "le\u0301ger",
        "le\u0301gume",
        "lessive",
        "lettre",
        "levier",
        "lexique",
        "le\u0301zard",
        "liasse",
        "libe\u0301rer",
        "libre",
        "licence",
        "licorne",
        "lie\u0300ge",
        "lie\u0300vre",
        "ligature",
        "ligoter",
        "ligue",
        "limer",
        "limite",
        "limonade",
        "limpide",
        "line\u0301aire",
        "lingot",
        "lionceau",
        "liquide",
        "lisie\u0300re",
        "lister",
        "lithium",
        "litige",
        "littoral",
        "livreur",
        "logique",
        "lointain",
        "loisir",
        "lombric",
        "loterie",
        "louer",
        "lourd",
        "loutre",
        "louve",
        "loyal",
        "lubie",
        "lucide",
        "lucratif",
        "lueur",
        "lugubre",
        "luisant",
        "lumie\u0300re",
        "lunaire",
        "lundi",
        "luron",
        "lutter",
        "luxueux",
        "machine",
        "magasin",
        "magenta",
        "magique",
        "maigre",
        "maillon",
        "maintien",
        "mairie",
        "maison",
        "majorer",
        "malaxer",
        "male\u0301fice",
        "malheur",
        "malice",
        "mallette",
        "mammouth",
        "mandater",
        "maniable",
        "manquant",
        "manteau",
        "manuel",
        "marathon",
        "marbre",
        "marchand",
        "mardi",
        "maritime",
        "marqueur",
        "marron",
        "marteler",
        "mascotte",
        "massif",
        "mate\u0301riel",
        "matie\u0300re",
        "matraque",
        "maudire",
        "maussade",
        "mauve",
        "maximal",
        "me\u0301chant",
        "me\u0301connu",
        "me\u0301daille",
        "me\u0301decin",
        "me\u0301diter",
        "me\u0301duse",
        "meilleur",
        "me\u0301lange",
        "me\u0301lodie",
        "membre",
        "me\u0301moire",
        "menacer",
        "mener",
        "menhir",
        "mensonge",
        "mentor",
        "mercredi",
        "me\u0301rite",
        "merle",
        "messager",
        "mesure",
        "me\u0301tal",
        "me\u0301te\u0301ore",
        "me\u0301thode",
        "me\u0301tier",
        "meuble",
        "miauler",
        "microbe",
        "miette",
        "mignon",
        "migrer",
        "milieu",
        "million",
        "mimique",
        "mince",
        "mine\u0301ral",
        "minimal",
        "minorer",
        "minute",
        "miracle",
        "miroiter",
        "missile",
        "mixte",
        "mobile",
        "moderne",
        "moelleux",
        "mondial",
        "moniteur",
        "monnaie",
        "monotone",
        "monstre",
        "montagne",
        "monument",
        "moqueur",
        "morceau",
        "morsure",
        "mortier",
        "moteur",
        "motif",
        "mouche",
        "moufle",
        "moulin",
        "mousson",
        "mouton",
        "mouvant",
        "multiple",
        "munition",
        "muraille",
        "mure\u0300ne",
        "murmure",
        "muscle",
        "muse\u0301um",
        "musicien",
        "mutation",
        "muter",
        "mutuel",
        "myriade",
        "myrtille",
        "myste\u0300re",
        "mythique",
        "nageur",
        "nappe",
        "narquois",
        "narrer",
        "natation",
        "nation",
        "nature",
        "naufrage",
        "nautique",
        "navire",
        "ne\u0301buleux",
        "nectar",
        "ne\u0301faste",
        "ne\u0301gation",
        "ne\u0301gliger",
        "ne\u0301gocier",
        "neige",
        "nerveux",
        "nettoyer",
        "neurone",
        "neutron",
        "neveu",
        "niche",
        "nickel",
        "nitrate",
        "niveau",
        "noble",
        "nocif",
        "nocturne",
        "noirceur",
        "noisette",
        "nomade",
        "nombreux",
        "nommer",
        "normatif",
        "notable",
        "notifier",
        "notoire",
        "nourrir",
        "nouveau",
        "novateur",
        "novembre",
        "novice",
        "nuage",
        "nuancer",
        "nuire",
        "nuisible",
        "nume\u0301ro",
        "nuptial",
        "nuque",
        "nutritif",
        "obe\u0301ir",
        "objectif",
        "obliger",
        "obscur",
        "observer",
        "obstacle",
        "obtenir",
        "obturer",
        "occasion",
        "occuper",
        "oce\u0301an",
        "octobre",
        "octroyer",
        "octupler",
        "oculaire",
        "odeur",
        "odorant",
        "offenser",
        "officier",
        "offrir",
        "ogive",
        "oiseau",
        "oisillon",
        "olfactif",
        "olivier",
        "ombrage",
        "omettre",
        "onctueux",
        "onduler",
        "one\u0301reux",
        "onirique",
        "opale",
        "opaque",
        "ope\u0301rer",
        "opinion",
        "opportun",
        "opprimer",
        "opter",
        "optique",
        "orageux",
        "orange",
        "orbite",
        "ordonner",
        "oreille",
        "organe",
        "orgueil",
        "orifice",
        "ornement",
        "orque",
        "ortie",
        "osciller",
        "osmose",
        "ossature",
        "otarie",
        "ouragan",
        "ourson",
        "outil",
        "outrager",
        "ouvrage",
        "ovation",
        "oxyde",
        "oxyge\u0300ne",
        "ozone",
        "paisible",
        "palace",
        "palmare\u0300s",
        "palourde",
        "palper",
        "panache",
        "panda",
        "pangolin",
        "paniquer",
        "panneau",
        "panorama",
        "pantalon",
        "papaye",
        "papier",
        "papoter",
        "papyrus",
        "paradoxe",
        "parcelle",
        "paresse",
        "parfumer",
        "parler",
        "parole",
        "parrain",
        "parsemer",
        "partager",
        "parure",
        "parvenir",
        "passion",
        "paste\u0300que",
        "paternel",
        "patience",
        "patron",
        "pavillon",
        "pavoiser",
        "payer",
        "paysage",
        "peigne",
        "peintre",
        "pelage",
        "pe\u0301lican",
        "pelle",
        "pelouse",
        "peluche",
        "pendule",
        "pe\u0301ne\u0301trer",
        "pe\u0301nible",
        "pensif",
        "pe\u0301nurie",
        "pe\u0301pite",
        "pe\u0301plum",
        "perdrix",
        "perforer",
        "pe\u0301riode",
        "permuter",
        "perplexe",
        "persil",
        "perte",
        "peser",
        "pe\u0301tale",
        "petit",
        "pe\u0301trir",
        "peuple",
        "pharaon",
        "phobie",
        "phoque",
        "photon",
        "phrase",
        "physique",
        "piano",
        "pictural",
        "pie\u0300ce",
        "pierre",
        "pieuvre",
        "pilote",
        "pinceau",
        "pipette",
        "piquer",
        "pirogue",
        "piscine",
        "piston",
        "pivoter",
        "pixel",
        "pizza",
        "placard",
        "plafond",
        "plaisir",
        "planer",
        "plaque",
        "plastron",
        "plateau",
        "pleurer",
        "plexus",
        "pliage",
        "plomb",
        "plonger",
        "pluie",
        "plumage",
        "pochette",
        "poe\u0301sie",
        "poe\u0300te",
        "pointe",
        "poirier",
        "poisson",
        "poivre",
        "polaire",
        "policier",
        "pollen",
        "polygone",
        "pommade",
        "pompier",
        "ponctuel",
        "ponde\u0301rer",
        "poney",
        "portique",
        "position",
        "posse\u0301der",
        "posture",
        "potager",
        "poteau",
        "potion",
        "pouce",
        "poulain",
        "poumon",
        "pourpre",
        "poussin",
        "pouvoir",
        "prairie",
        "pratique",
        "pre\u0301cieux",
        "pre\u0301dire",
        "pre\u0301fixe",
        "pre\u0301lude",
        "pre\u0301nom",
        "pre\u0301sence",
        "pre\u0301texte",
        "pre\u0301voir",
        "primitif",
        "prince",
        "prison",
        "priver",
        "proble\u0300me",
        "proce\u0301der",
        "prodige",
        "profond",
        "progre\u0300s",
        "proie",
        "projeter",
        "prologue",
        "promener",
        "propre",
        "prospe\u0300re",
        "prote\u0301ger",
        "prouesse",
        "proverbe",
        "prudence",
        "pruneau",
        "psychose",
        "public",
        "puceron",
        "puiser",
        "pulpe",
        "pulsar",
        "punaise",
        "punitif",
        "pupitre",
        "purifier",
        "puzzle",
        "pyramide",
        "quasar",
        "querelle",
        "question",
        "quie\u0301tude",
        "quitter",
        "quotient",
        "racine",
        "raconter",
        "radieux",
        "ragondin",
        "raideur",
        "raisin",
        "ralentir",
        "rallonge",
        "ramasser",
        "rapide",
        "rasage",
        "ratisser",
        "ravager",
        "ravin",
        "rayonner",
        "re\u0301actif",
        "re\u0301agir",
        "re\u0301aliser",
        "re\u0301animer",
        "recevoir",
        "re\u0301citer",
        "re\u0301clamer",
        "re\u0301colter",
        "recruter",
        "reculer",
        "recycler",
        "re\u0301diger",
        "redouter",
        "refaire",
        "re\u0301flexe",
        "re\u0301former",
        "refrain",
        "refuge",
        "re\u0301galien",
        "re\u0301gion",
        "re\u0301glage",
        "re\u0301gulier",
        "re\u0301ite\u0301rer",
        "rejeter",
        "rejouer",
        "relatif",
        "relever",
        "relief",
        "remarque",
        "reme\u0300de",
        "remise",
        "remonter",
        "remplir",
        "remuer",
        "renard",
        "renfort",
        "renifler",
        "renoncer",
        "rentrer",
        "renvoi",
        "replier",
        "reporter",
        "reprise",
        "reptile",
        "requin",
        "re\u0301serve",
        "re\u0301sineux",
        "re\u0301soudre",
        "respect",
        "rester",
        "re\u0301sultat",
        "re\u0301tablir",
        "retenir",
        "re\u0301ticule",
        "retomber",
        "retracer",
        "re\u0301union",
        "re\u0301ussir",
        "revanche",
        "revivre",
        "re\u0301volte",
        "re\u0301vulsif",
        "richesse",
        "rideau",
        "rieur",
        "rigide",
        "rigoler",
        "rincer",
        "riposter",
        "risible",
        "risque",
        "rituel",
        "rival",
        "rivie\u0300re",
        "rocheux",
        "romance",
        "rompre",
        "ronce",
        "rondin",
        "roseau",
        "rosier",
        "rotatif",
        "rotor",
        "rotule",
        "rouge",
        "rouille",
        "rouleau",
        "routine",
        "royaume",
        "ruban",
        "rubis",
        "ruche",
        "ruelle",
        "rugueux",
        "ruiner",
        "ruisseau",
        "ruser",
        "rustique",
        "rythme",
        "sabler",
        "saboter",
        "sabre",
        "sacoche",
        "safari",
        "sagesse",
        "saisir",
        "salade",
        "salive",
        "salon",
        "saluer",
        "samedi",
        "sanction",
        "sanglier",
        "sarcasme",
        "sardine",
        "saturer",
        "saugrenu",
        "saumon",
        "sauter",
        "sauvage",
        "savant",
        "savonner",
        "scalpel",
        "scandale",
        "sce\u0301le\u0301rat",
        "sce\u0301nario",
        "sceptre",
        "sche\u0301ma",
        "science",
        "scinder",
        "score",
        "scrutin",
        "sculpter",
        "se\u0301ance",
        "se\u0301cable",
        "se\u0301cher",
        "secouer",
        "se\u0301cre\u0301ter",
        "se\u0301datif",
        "se\u0301duire",
        "seigneur",
        "se\u0301jour",
        "se\u0301lectif",
        "semaine",
        "sembler",
        "semence",
        "se\u0301minal",
        "se\u0301nateur",
        "sensible",
        "sentence",
        "se\u0301parer",
        "se\u0301quence",
        "serein",
        "sergent",
        "se\u0301rieux",
        "serrure",
        "se\u0301rum",
        "service",
        "se\u0301same",
        "se\u0301vir",
        "sevrage",
        "sextuple",
        "side\u0301ral",
        "sie\u0300cle",
        "sie\u0301ger",
        "siffler",
        "sigle",
        "signal",
        "silence",
        "silicium",
        "simple",
        "since\u0300re",
        "sinistre",
        "siphon",
        "sirop",
        "sismique",
        "situer",
        "skier",
        "social",
        "socle",
        "sodium",
        "soigneux",
        "soldat",
        "soleil",
        "solitude",
        "soluble",
        "sombre",
        "sommeil",
        "somnoler",
        "sonde",
        "songeur",
        "sonnette",
        "sonore",
        "sorcier",
        "sortir",
        "sosie",
        "sottise",
        "soucieux",
        "soudure",
        "souffle",
        "soulever",
        "soupape",
        "source",
        "soutirer",
        "souvenir",
        "spacieux",
        "spatial",
        "spe\u0301cial",
        "sphe\u0300re",
        "spiral",
        "stable",
        "station",
        "sternum",
        "stimulus",
        "stipuler",
        "strict",
        "studieux",
        "stupeur",
        "styliste",
        "sublime",
        "substrat",
        "subtil",
        "subvenir",
        "succe\u0300s",
        "sucre",
        "suffixe",
        "sugge\u0301rer",
        "suiveur",
        "sulfate",
        "superbe",
        "supplier",
        "surface",
        "suricate",
        "surmener",
        "surprise",
        "sursaut",
        "survie",
        "suspect",
        "syllabe",
        "symbole",
        "syme\u0301trie",
        "synapse",
        "syntaxe",
        "syste\u0300me",
        "tabac",
        "tablier",
        "tactile",
        "tailler",
        "talent",
        "talisman",
        "talonner",
        "tambour",
        "tamiser",
        "tangible",
        "tapis",
        "taquiner",
        "tarder",
        "tarif",
        "tartine",
        "tasse",
        "tatami",
        "tatouage",
        "taupe",
        "taureau",
        "taxer",
        "te\u0301moin",
        "temporel",
        "tenaille",
        "tendre",
        "teneur",
        "tenir",
        "tension",
        "terminer",
        "terne",
        "terrible",
        "te\u0301tine",
        "texte",
        "the\u0300me",
        "the\u0301orie",
        "the\u0301rapie",
        "thorax",
        "tibia",
        "tie\u0300de",
        "timide",
        "tirelire",
        "tiroir",
        "tissu",
        "titane",
        "titre",
        "tituber",
        "toboggan",
        "tole\u0301rant",
        "tomate",
        "tonique",
        "tonneau",
        "toponyme",
        "torche",
        "tordre",
        "tornade",
        "torpille",
        "torrent",
        "torse",
        "tortue",
        "totem",
        "toucher",
        "tournage",
        "tousser",
        "toxine",
        "traction",
        "trafic",
        "tragique",
        "trahir",
        "train",
        "trancher",
        "travail",
        "tre\u0300fle",
        "tremper",
        "tre\u0301sor",
        "treuil",
        "triage",
        "tribunal",
        "tricoter",
        "trilogie",
        "triomphe",
        "tripler",
        "triturer",
        "trivial",
        "trombone",
        "tronc",
        "tropical",
        "troupeau",
        "tuile",
        "tulipe",
        "tumulte",
        "tunnel",
        "turbine",
        "tuteur",
        "tutoyer",
        "tuyau",
        "tympan",
        "typhon",
        "typique",
        "tyran",
        "ubuesque",
        "ultime",
        "ultrason",
        "unanime",
        "unifier",
        "union",
        "unique",
        "unitaire",
        "univers",
        "uranium",
        "urbain",
        "urticant",
        "usage",
        "usine",
        "usuel",
        "usure",
        "utile",
        "utopie",
        "vacarme",
        "vaccin",
        "vagabond",
        "vague",
        "vaillant",
        "vaincre",
        "vaisseau",
        "valable",
        "valise",
        "vallon",
        "valve",
        "vampire",
        "vanille",
        "vapeur",
        "varier",
        "vaseux",
        "vassal",
        "vaste",
        "vecteur",
        "vedette",
        "ve\u0301ge\u0301tal",
        "ve\u0301hicule",
        "veinard",
        "ve\u0301loce",
        "vendredi",
        "ve\u0301ne\u0301rer",
        "venger",
        "venimeux",
        "ventouse",
        "verdure",
        "ve\u0301rin",
        "vernir",
        "verrou",
        "verser",
        "vertu",
        "veston",
        "ve\u0301te\u0301ran",
        "ve\u0301tuste",
        "vexant",
        "vexer",
        "viaduc",
        "viande",
        "victoire",
        "vidange",
        "vide\u0301o",
        "vignette",
        "vigueur",
        "vilain",
        "village",
        "vinaigre",
        "violon",
        "vipe\u0300re",
        "virement",
        "virtuose",
        "virus",
        "visage",
        "viseur",
        "vision",
        "visqueux",
        "visuel",
        "vital",
        "vitesse",
        "viticole",
        "vitrine",
        "vivace",
        "vivipare",
        "vocation",
        "voguer",
        "voile",
        "voisin",
        "voiture",
        "volaille",
        "volcan",
        "voltiger",
        "volume",
        "vorace",
        "vortex",
        "voter",
        "vouloir",
        "voyage",
        "voyelle",
        "wagon",
        "xe\u0301non",
        "yacht",
        "ze\u0300bre",
        "ze\u0301nith",
        "zeste",
        "zoologie"
      ];
    }
  });

  // node_modules/bip39/src/wordlists/italian.json
  var require_italian = __commonJS({
    "node_modules/bip39/src/wordlists/italian.json"(exports, module) {
      module.exports = [
        "abaco",
        "abbaglio",
        "abbinato",
        "abete",
        "abisso",
        "abolire",
        "abrasivo",
        "abrogato",
        "accadere",
        "accenno",
        "accusato",
        "acetone",
        "achille",
        "acido",
        "acqua",
        "acre",
        "acrilico",
        "acrobata",
        "acuto",
        "adagio",
        "addebito",
        "addome",
        "adeguato",
        "aderire",
        "adipe",
        "adottare",
        "adulare",
        "affabile",
        "affetto",
        "affisso",
        "affranto",
        "aforisma",
        "afoso",
        "africano",
        "agave",
        "agente",
        "agevole",
        "aggancio",
        "agire",
        "agitare",
        "agonismo",
        "agricolo",
        "agrumeto",
        "aguzzo",
        "alabarda",
        "alato",
        "albatro",
        "alberato",
        "albo",
        "albume",
        "alce",
        "alcolico",
        "alettone",
        "alfa",
        "algebra",
        "aliante",
        "alibi",
        "alimento",
        "allagato",
        "allegro",
        "allievo",
        "allodola",
        "allusivo",
        "almeno",
        "alogeno",
        "alpaca",
        "alpestre",
        "altalena",
        "alterno",
        "alticcio",
        "altrove",
        "alunno",
        "alveolo",
        "alzare",
        "amalgama",
        "amanita",
        "amarena",
        "ambito",
        "ambrato",
        "ameba",
        "america",
        "ametista",
        "amico",
        "ammasso",
        "ammenda",
        "ammirare",
        "ammonito",
        "amore",
        "ampio",
        "ampliare",
        "amuleto",
        "anacardo",
        "anagrafe",
        "analista",
        "anarchia",
        "anatra",
        "anca",
        "ancella",
        "ancora",
        "andare",
        "andrea",
        "anello",
        "angelo",
        "angolare",
        "angusto",
        "anima",
        "annegare",
        "annidato",
        "anno",
        "annuncio",
        "anonimo",
        "anticipo",
        "anzi",
        "apatico",
        "apertura",
        "apode",
        "apparire",
        "appetito",
        "appoggio",
        "approdo",
        "appunto",
        "aprile",
        "arabica",
        "arachide",
        "aragosta",
        "araldica",
        "arancio",
        "aratura",
        "arazzo",
        "arbitro",
        "archivio",
        "ardito",
        "arenile",
        "argento",
        "argine",
        "arguto",
        "aria",
        "armonia",
        "arnese",
        "arredato",
        "arringa",
        "arrosto",
        "arsenico",
        "arso",
        "artefice",
        "arzillo",
        "asciutto",
        "ascolto",
        "asepsi",
        "asettico",
        "asfalto",
        "asino",
        "asola",
        "aspirato",
        "aspro",
        "assaggio",
        "asse",
        "assoluto",
        "assurdo",
        "asta",
        "astenuto",
        "astice",
        "astratto",
        "atavico",
        "ateismo",
        "atomico",
        "atono",
        "attesa",
        "attivare",
        "attorno",
        "attrito",
        "attuale",
        "ausilio",
        "austria",
        "autista",
        "autonomo",
        "autunno",
        "avanzato",
        "avere",
        "avvenire",
        "avviso",
        "avvolgere",
        "azione",
        "azoto",
        "azzimo",
        "azzurro",
        "babele",
        "baccano",
        "bacino",
        "baco",
        "badessa",
        "badilata",
        "bagnato",
        "baita",
        "balcone",
        "baldo",
        "balena",
        "ballata",
        "balzano",
        "bambino",
        "bandire",
        "baraonda",
        "barbaro",
        "barca",
        "baritono",
        "barlume",
        "barocco",
        "basilico",
        "basso",
        "batosta",
        "battuto",
        "baule",
        "bava",
        "bavosa",
        "becco",
        "beffa",
        "belgio",
        "belva",
        "benda",
        "benevole",
        "benigno",
        "benzina",
        "bere",
        "berlina",
        "beta",
        "bibita",
        "bici",
        "bidone",
        "bifido",
        "biga",
        "bilancia",
        "bimbo",
        "binocolo",
        "biologo",
        "bipede",
        "bipolare",
        "birbante",
        "birra",
        "biscotto",
        "bisesto",
        "bisnonno",
        "bisonte",
        "bisturi",
        "bizzarro",
        "blando",
        "blatta",
        "bollito",
        "bonifico",
        "bordo",
        "bosco",
        "botanico",
        "bottino",
        "bozzolo",
        "braccio",
        "bradipo",
        "brama",
        "branca",
        "bravura",
        "bretella",
        "brevetto",
        "brezza",
        "briglia",
        "brillante",
        "brindare",
        "broccolo",
        "brodo",
        "bronzina",
        "brullo",
        "bruno",
        "bubbone",
        "buca",
        "budino",
        "buffone",
        "buio",
        "bulbo",
        "buono",
        "burlone",
        "burrasca",
        "bussola",
        "busta",
        "cadetto",
        "caduco",
        "calamaro",
        "calcolo",
        "calesse",
        "calibro",
        "calmo",
        "caloria",
        "cambusa",
        "camerata",
        "camicia",
        "cammino",
        "camola",
        "campale",
        "canapa",
        "candela",
        "cane",
        "canino",
        "canotto",
        "cantina",
        "capace",
        "capello",
        "capitolo",
        "capogiro",
        "cappero",
        "capra",
        "capsula",
        "carapace",
        "carcassa",
        "cardo",
        "carisma",
        "carovana",
        "carretto",
        "cartolina",
        "casaccio",
        "cascata",
        "caserma",
        "caso",
        "cassone",
        "castello",
        "casuale",
        "catasta",
        "catena",
        "catrame",
        "cauto",
        "cavillo",
        "cedibile",
        "cedrata",
        "cefalo",
        "celebre",
        "cellulare",
        "cena",
        "cenone",
        "centesimo",
        "ceramica",
        "cercare",
        "certo",
        "cerume",
        "cervello",
        "cesoia",
        "cespo",
        "ceto",
        "chela",
        "chiaro",
        "chicca",
        "chiedere",
        "chimera",
        "china",
        "chirurgo",
        "chitarra",
        "ciao",
        "ciclismo",
        "cifrare",
        "cigno",
        "cilindro",
        "ciottolo",
        "circa",
        "cirrosi",
        "citrico",
        "cittadino",
        "ciuffo",
        "civetta",
        "civile",
        "classico",
        "clinica",
        "cloro",
        "cocco",
        "codardo",
        "codice",
        "coerente",
        "cognome",
        "collare",
        "colmato",
        "colore",
        "colposo",
        "coltivato",
        "colza",
        "coma",
        "cometa",
        "commando",
        "comodo",
        "computer",
        "comune",
        "conciso",
        "condurre",
        "conferma",
        "congelare",
        "coniuge",
        "connesso",
        "conoscere",
        "consumo",
        "continuo",
        "convegno",
        "coperto",
        "copione",
        "coppia",
        "copricapo",
        "corazza",
        "cordata",
        "coricato",
        "cornice",
        "corolla",
        "corpo",
        "corredo",
        "corsia",
        "cortese",
        "cosmico",
        "costante",
        "cottura",
        "covato",
        "cratere",
        "cravatta",
        "creato",
        "credere",
        "cremoso",
        "crescita",
        "creta",
        "criceto",
        "crinale",
        "crisi",
        "critico",
        "croce",
        "cronaca",
        "crostata",
        "cruciale",
        "crusca",
        "cucire",
        "cuculo",
        "cugino",
        "cullato",
        "cupola",
        "curatore",
        "cursore",
        "curvo",
        "cuscino",
        "custode",
        "dado",
        "daino",
        "dalmata",
        "damerino",
        "daniela",
        "dannoso",
        "danzare",
        "datato",
        "davanti",
        "davvero",
        "debutto",
        "decennio",
        "deciso",
        "declino",
        "decollo",
        "decreto",
        "dedicato",
        "definito",
        "deforme",
        "degno",
        "delegare",
        "delfino",
        "delirio",
        "delta",
        "demenza",
        "denotato",
        "dentro",
        "deposito",
        "derapata",
        "derivare",
        "deroga",
        "descritto",
        "deserto",
        "desiderio",
        "desumere",
        "detersivo",
        "devoto",
        "diametro",
        "dicembre",
        "diedro",
        "difeso",
        "diffuso",
        "digerire",
        "digitale",
        "diluvio",
        "dinamico",
        "dinnanzi",
        "dipinto",
        "diploma",
        "dipolo",
        "diradare",
        "dire",
        "dirotto",
        "dirupo",
        "disagio",
        "discreto",
        "disfare",
        "disgelo",
        "disposto",
        "distanza",
        "disumano",
        "dito",
        "divano",
        "divelto",
        "dividere",
        "divorato",
        "doblone",
        "docente",
        "doganale",
        "dogma",
        "dolce",
        "domato",
        "domenica",
        "dominare",
        "dondolo",
        "dono",
        "dormire",
        "dote",
        "dottore",
        "dovuto",
        "dozzina",
        "drago",
        "druido",
        "dubbio",
        "dubitare",
        "ducale",
        "duna",
        "duomo",
        "duplice",
        "duraturo",
        "ebano",
        "eccesso",
        "ecco",
        "eclissi",
        "economia",
        "edera",
        "edicola",
        "edile",
        "editoria",
        "educare",
        "egemonia",
        "egli",
        "egoismo",
        "egregio",
        "elaborato",
        "elargire",
        "elegante",
        "elencato",
        "eletto",
        "elevare",
        "elfico",
        "elica",
        "elmo",
        "elsa",
        "eluso",
        "emanato",
        "emblema",
        "emesso",
        "emiro",
        "emotivo",
        "emozione",
        "empirico",
        "emulo",
        "endemico",
        "enduro",
        "energia",
        "enfasi",
        "enoteca",
        "entrare",
        "enzima",
        "epatite",
        "epilogo",
        "episodio",
        "epocale",
        "eppure",
        "equatore",
        "erario",
        "erba",
        "erboso",
        "erede",
        "eremita",
        "erigere",
        "ermetico",
        "eroe",
        "erosivo",
        "errante",
        "esagono",
        "esame",
        "esanime",
        "esaudire",
        "esca",
        "esempio",
        "esercito",
        "esibito",
        "esigente",
        "esistere",
        "esito",
        "esofago",
        "esortato",
        "esoso",
        "espanso",
        "espresso",
        "essenza",
        "esso",
        "esteso",
        "estimare",
        "estonia",
        "estroso",
        "esultare",
        "etilico",
        "etnico",
        "etrusco",
        "etto",
        "euclideo",
        "europa",
        "evaso",
        "evidenza",
        "evitato",
        "evoluto",
        "evviva",
        "fabbrica",
        "faccenda",
        "fachiro",
        "falco",
        "famiglia",
        "fanale",
        "fanfara",
        "fango",
        "fantasma",
        "fare",
        "farfalla",
        "farinoso",
        "farmaco",
        "fascia",
        "fastoso",
        "fasullo",
        "faticare",
        "fato",
        "favoloso",
        "febbre",
        "fecola",
        "fede",
        "fegato",
        "felpa",
        "feltro",
        "femmina",
        "fendere",
        "fenomeno",
        "fermento",
        "ferro",
        "fertile",
        "fessura",
        "festivo",
        "fetta",
        "feudo",
        "fiaba",
        "fiducia",
        "fifa",
        "figurato",
        "filo",
        "finanza",
        "finestra",
        "finire",
        "fiore",
        "fiscale",
        "fisico",
        "fiume",
        "flacone",
        "flamenco",
        "flebo",
        "flemma",
        "florido",
        "fluente",
        "fluoro",
        "fobico",
        "focaccia",
        "focoso",
        "foderato",
        "foglio",
        "folata",
        "folclore",
        "folgore",
        "fondente",
        "fonetico",
        "fonia",
        "fontana",
        "forbito",
        "forchetta",
        "foresta",
        "formica",
        "fornaio",
        "foro",
        "fortezza",
        "forzare",
        "fosfato",
        "fosso",
        "fracasso",
        "frana",
        "frassino",
        "fratello",
        "freccetta",
        "frenata",
        "fresco",
        "frigo",
        "frollino",
        "fronde",
        "frugale",
        "frutta",
        "fucilata",
        "fucsia",
        "fuggente",
        "fulmine",
        "fulvo",
        "fumante",
        "fumetto",
        "fumoso",
        "fune",
        "funzione",
        "fuoco",
        "furbo",
        "furgone",
        "furore",
        "fuso",
        "futile",
        "gabbiano",
        "gaffe",
        "galateo",
        "gallina",
        "galoppo",
        "gambero",
        "gamma",
        "garanzia",
        "garbo",
        "garofano",
        "garzone",
        "gasdotto",
        "gasolio",
        "gastrico",
        "gatto",
        "gaudio",
        "gazebo",
        "gazzella",
        "geco",
        "gelatina",
        "gelso",
        "gemello",
        "gemmato",
        "gene",
        "genitore",
        "gennaio",
        "genotipo",
        "gergo",
        "ghepardo",
        "ghiaccio",
        "ghisa",
        "giallo",
        "gilda",
        "ginepro",
        "giocare",
        "gioiello",
        "giorno",
        "giove",
        "girato",
        "girone",
        "gittata",
        "giudizio",
        "giurato",
        "giusto",
        "globulo",
        "glutine",
        "gnomo",
        "gobba",
        "golf",
        "gomito",
        "gommone",
        "gonfio",
        "gonna",
        "governo",
        "gracile",
        "grado",
        "grafico",
        "grammo",
        "grande",
        "grattare",
        "gravoso",
        "grazia",
        "greca",
        "gregge",
        "grifone",
        "grigio",
        "grinza",
        "grotta",
        "gruppo",
        "guadagno",
        "guaio",
        "guanto",
        "guardare",
        "gufo",
        "guidare",
        "ibernato",
        "icona",
        "identico",
        "idillio",
        "idolo",
        "idra",
        "idrico",
        "idrogeno",
        "igiene",
        "ignaro",
        "ignorato",
        "ilare",
        "illeso",
        "illogico",
        "illudere",
        "imballo",
        "imbevuto",
        "imbocco",
        "imbuto",
        "immane",
        "immerso",
        "immolato",
        "impacco",
        "impeto",
        "impiego",
        "importo",
        "impronta",
        "inalare",
        "inarcare",
        "inattivo",
        "incanto",
        "incendio",
        "inchino",
        "incisivo",
        "incluso",
        "incontro",
        "incrocio",
        "incubo",
        "indagine",
        "india",
        "indole",
        "inedito",
        "infatti",
        "infilare",
        "inflitto",
        "ingaggio",
        "ingegno",
        "inglese",
        "ingordo",
        "ingrosso",
        "innesco",
        "inodore",
        "inoltrare",
        "inondato",
        "insano",
        "insetto",
        "insieme",
        "insonnia",
        "insulina",
        "intasato",
        "intero",
        "intonaco",
        "intuito",
        "inumidire",
        "invalido",
        "invece",
        "invito",
        "iperbole",
        "ipnotico",
        "ipotesi",
        "ippica",
        "iride",
        "irlanda",
        "ironico",
        "irrigato",
        "irrorare",
        "isolato",
        "isotopo",
        "isterico",
        "istituto",
        "istrice",
        "italia",
        "iterare",
        "labbro",
        "labirinto",
        "lacca",
        "lacerato",
        "lacrima",
        "lacuna",
        "laddove",
        "lago",
        "lampo",
        "lancetta",
        "lanterna",
        "lardoso",
        "larga",
        "laringe",
        "lastra",
        "latenza",
        "latino",
        "lattuga",
        "lavagna",
        "lavoro",
        "legale",
        "leggero",
        "lembo",
        "lentezza",
        "lenza",
        "leone",
        "lepre",
        "lesivo",
        "lessato",
        "lesto",
        "letterale",
        "leva",
        "levigato",
        "libero",
        "lido",
        "lievito",
        "lilla",
        "limatura",
        "limitare",
        "limpido",
        "lineare",
        "lingua",
        "liquido",
        "lira",
        "lirica",
        "lisca",
        "lite",
        "litigio",
        "livrea",
        "locanda",
        "lode",
        "logica",
        "lombare",
        "londra",
        "longevo",
        "loquace",
        "lorenzo",
        "loto",
        "lotteria",
        "luce",
        "lucidato",
        "lumaca",
        "luminoso",
        "lungo",
        "lupo",
        "luppolo",
        "lusinga",
        "lusso",
        "lutto",
        "macabro",
        "macchina",
        "macero",
        "macinato",
        "madama",
        "magico",
        "maglia",
        "magnete",
        "magro",
        "maiolica",
        "malafede",
        "malgrado",
        "malinteso",
        "malsano",
        "malto",
        "malumore",
        "mana",
        "mancia",
        "mandorla",
        "mangiare",
        "manifesto",
        "mannaro",
        "manovra",
        "mansarda",
        "mantide",
        "manubrio",
        "mappa",
        "maratona",
        "marcire",
        "maretta",
        "marmo",
        "marsupio",
        "maschera",
        "massaia",
        "mastino",
        "materasso",
        "matricola",
        "mattone",
        "maturo",
        "mazurca",
        "meandro",
        "meccanico",
        "mecenate",
        "medesimo",
        "meditare",
        "mega",
        "melassa",
        "melis",
        "melodia",
        "meninge",
        "meno",
        "mensola",
        "mercurio",
        "merenda",
        "merlo",
        "meschino",
        "mese",
        "messere",
        "mestolo",
        "metallo",
        "metodo",
        "mettere",
        "miagolare",
        "mica",
        "micelio",
        "michele",
        "microbo",
        "midollo",
        "miele",
        "migliore",
        "milano",
        "milite",
        "mimosa",
        "minerale",
        "mini",
        "minore",
        "mirino",
        "mirtillo",
        "miscela",
        "missiva",
        "misto",
        "misurare",
        "mitezza",
        "mitigare",
        "mitra",
        "mittente",
        "mnemonico",
        "modello",
        "modifica",
        "modulo",
        "mogano",
        "mogio",
        "mole",
        "molosso",
        "monastero",
        "monco",
        "mondina",
        "monetario",
        "monile",
        "monotono",
        "monsone",
        "montato",
        "monviso",
        "mora",
        "mordere",
        "morsicato",
        "mostro",
        "motivato",
        "motosega",
        "motto",
        "movenza",
        "movimento",
        "mozzo",
        "mucca",
        "mucosa",
        "muffa",
        "mughetto",
        "mugnaio",
        "mulatto",
        "mulinello",
        "multiplo",
        "mummia",
        "munto",
        "muovere",
        "murale",
        "musa",
        "muscolo",
        "musica",
        "mutevole",
        "muto",
        "nababbo",
        "nafta",
        "nanometro",
        "narciso",
        "narice",
        "narrato",
        "nascere",
        "nastrare",
        "naturale",
        "nautica",
        "naviglio",
        "nebulosa",
        "necrosi",
        "negativo",
        "negozio",
        "nemmeno",
        "neofita",
        "neretto",
        "nervo",
        "nessuno",
        "nettuno",
        "neutrale",
        "neve",
        "nevrotico",
        "nicchia",
        "ninfa",
        "nitido",
        "nobile",
        "nocivo",
        "nodo",
        "nome",
        "nomina",
        "nordico",
        "normale",
        "norvegese",
        "nostrano",
        "notare",
        "notizia",
        "notturno",
        "novella",
        "nucleo",
        "nulla",
        "numero",
        "nuovo",
        "nutrire",
        "nuvola",
        "nuziale",
        "oasi",
        "obbedire",
        "obbligo",
        "obelisco",
        "oblio",
        "obolo",
        "obsoleto",
        "occasione",
        "occhio",
        "occidente",
        "occorrere",
        "occultare",
        "ocra",
        "oculato",
        "odierno",
        "odorare",
        "offerta",
        "offrire",
        "offuscato",
        "oggetto",
        "oggi",
        "ognuno",
        "olandese",
        "olfatto",
        "oliato",
        "oliva",
        "ologramma",
        "oltre",
        "omaggio",
        "ombelico",
        "ombra",
        "omega",
        "omissione",
        "ondoso",
        "onere",
        "onice",
        "onnivoro",
        "onorevole",
        "onta",
        "operato",
        "opinione",
        "opposto",
        "oracolo",
        "orafo",
        "ordine",
        "orecchino",
        "orefice",
        "orfano",
        "organico",
        "origine",
        "orizzonte",
        "orma",
        "ormeggio",
        "ornativo",
        "orologio",
        "orrendo",
        "orribile",
        "ortensia",
        "ortica",
        "orzata",
        "orzo",
        "osare",
        "oscurare",
        "osmosi",
        "ospedale",
        "ospite",
        "ossa",
        "ossidare",
        "ostacolo",
        "oste",
        "otite",
        "otre",
        "ottagono",
        "ottimo",
        "ottobre",
        "ovale",
        "ovest",
        "ovino",
        "oviparo",
        "ovocito",
        "ovunque",
        "ovviare",
        "ozio",
        "pacchetto",
        "pace",
        "pacifico",
        "padella",
        "padrone",
        "paese",
        "paga",
        "pagina",
        "palazzina",
        "palesare",
        "pallido",
        "palo",
        "palude",
        "pandoro",
        "pannello",
        "paolo",
        "paonazzo",
        "paprica",
        "parabola",
        "parcella",
        "parere",
        "pargolo",
        "pari",
        "parlato",
        "parola",
        "partire",
        "parvenza",
        "parziale",
        "passivo",
        "pasticca",
        "patacca",
        "patologia",
        "pattume",
        "pavone",
        "peccato",
        "pedalare",
        "pedonale",
        "peggio",
        "peloso",
        "penare",
        "pendice",
        "penisola",
        "pennuto",
        "penombra",
        "pensare",
        "pentola",
        "pepe",
        "pepita",
        "perbene",
        "percorso",
        "perdonato",
        "perforare",
        "pergamena",
        "periodo",
        "permesso",
        "perno",
        "perplesso",
        "persuaso",
        "pertugio",
        "pervaso",
        "pesatore",
        "pesista",
        "peso",
        "pestifero",
        "petalo",
        "pettine",
        "petulante",
        "pezzo",
        "piacere",
        "pianta",
        "piattino",
        "piccino",
        "picozza",
        "piega",
        "pietra",
        "piffero",
        "pigiama",
        "pigolio",
        "pigro",
        "pila",
        "pilifero",
        "pillola",
        "pilota",
        "pimpante",
        "pineta",
        "pinna",
        "pinolo",
        "pioggia",
        "piombo",
        "piramide",
        "piretico",
        "pirite",
        "pirolisi",
        "pitone",
        "pizzico",
        "placebo",
        "planare",
        "plasma",
        "platano",
        "plenario",
        "pochezza",
        "poderoso",
        "podismo",
        "poesia",
        "poggiare",
        "polenta",
        "poligono",
        "pollice",
        "polmonite",
        "polpetta",
        "polso",
        "poltrona",
        "polvere",
        "pomice",
        "pomodoro",
        "ponte",
        "popoloso",
        "porfido",
        "poroso",
        "porpora",
        "porre",
        "portata",
        "posa",
        "positivo",
        "possesso",
        "postulato",
        "potassio",
        "potere",
        "pranzo",
        "prassi",
        "pratica",
        "precluso",
        "predica",
        "prefisso",
        "pregiato",
        "prelievo",
        "premere",
        "prenotare",
        "preparato",
        "presenza",
        "pretesto",
        "prevalso",
        "prima",
        "principe",
        "privato",
        "problema",
        "procura",
        "produrre",
        "profumo",
        "progetto",
        "prolunga",
        "promessa",
        "pronome",
        "proposta",
        "proroga",
        "proteso",
        "prova",
        "prudente",
        "prugna",
        "prurito",
        "psiche",
        "pubblico",
        "pudica",
        "pugilato",
        "pugno",
        "pulce",
        "pulito",
        "pulsante",
        "puntare",
        "pupazzo",
        "pupilla",
        "puro",
        "quadro",
        "qualcosa",
        "quasi",
        "querela",
        "quota",
        "raccolto",
        "raddoppio",
        "radicale",
        "radunato",
        "raffica",
        "ragazzo",
        "ragione",
        "ragno",
        "ramarro",
        "ramingo",
        "ramo",
        "randagio",
        "rantolare",
        "rapato",
        "rapina",
        "rappreso",
        "rasatura",
        "raschiato",
        "rasente",
        "rassegna",
        "rastrello",
        "rata",
        "ravveduto",
        "reale",
        "recepire",
        "recinto",
        "recluta",
        "recondito",
        "recupero",
        "reddito",
        "redimere",
        "regalato",
        "registro",
        "regola",
        "regresso",
        "relazione",
        "remare",
        "remoto",
        "renna",
        "replica",
        "reprimere",
        "reputare",
        "resa",
        "residente",
        "responso",
        "restauro",
        "rete",
        "retina",
        "retorica",
        "rettifica",
        "revocato",
        "riassunto",
        "ribadire",
        "ribelle",
        "ribrezzo",
        "ricarica",
        "ricco",
        "ricevere",
        "riciclato",
        "ricordo",
        "ricreduto",
        "ridicolo",
        "ridurre",
        "rifasare",
        "riflesso",
        "riforma",
        "rifugio",
        "rigare",
        "rigettato",
        "righello",
        "rilassato",
        "rilevato",
        "rimanere",
        "rimbalzo",
        "rimedio",
        "rimorchio",
        "rinascita",
        "rincaro",
        "rinforzo",
        "rinnovo",
        "rinomato",
        "rinsavito",
        "rintocco",
        "rinuncia",
        "rinvenire",
        "riparato",
        "ripetuto",
        "ripieno",
        "riportare",
        "ripresa",
        "ripulire",
        "risata",
        "rischio",
        "riserva",
        "risibile",
        "riso",
        "rispetto",
        "ristoro",
        "risultato",
        "risvolto",
        "ritardo",
        "ritegno",
        "ritmico",
        "ritrovo",
        "riunione",
        "riva",
        "riverso",
        "rivincita",
        "rivolto",
        "rizoma",
        "roba",
        "robotico",
        "robusto",
        "roccia",
        "roco",
        "rodaggio",
        "rodere",
        "roditore",
        "rogito",
        "rollio",
        "romantico",
        "rompere",
        "ronzio",
        "rosolare",
        "rospo",
        "rotante",
        "rotondo",
        "rotula",
        "rovescio",
        "rubizzo",
        "rubrica",
        "ruga",
        "rullino",
        "rumine",
        "rumoroso",
        "ruolo",
        "rupe",
        "russare",
        "rustico",
        "sabato",
        "sabbiare",
        "sabotato",
        "sagoma",
        "salasso",
        "saldatura",
        "salgemma",
        "salivare",
        "salmone",
        "salone",
        "saltare",
        "saluto",
        "salvo",
        "sapere",
        "sapido",
        "saporito",
        "saraceno",
        "sarcasmo",
        "sarto",
        "sassoso",
        "satellite",
        "satira",
        "satollo",
        "saturno",
        "savana",
        "savio",
        "saziato",
        "sbadiglio",
        "sbalzo",
        "sbancato",
        "sbarra",
        "sbattere",
        "sbavare",
        "sbendare",
        "sbirciare",
        "sbloccato",
        "sbocciato",
        "sbrinare",
        "sbruffone",
        "sbuffare",
        "scabroso",
        "scadenza",
        "scala",
        "scambiare",
        "scandalo",
        "scapola",
        "scarso",
        "scatenare",
        "scavato",
        "scelto",
        "scenico",
        "scettro",
        "scheda",
        "schiena",
        "sciarpa",
        "scienza",
        "scindere",
        "scippo",
        "sciroppo",
        "scivolo",
        "sclerare",
        "scodella",
        "scolpito",
        "scomparto",
        "sconforto",
        "scoprire",
        "scorta",
        "scossone",
        "scozzese",
        "scriba",
        "scrollare",
        "scrutinio",
        "scuderia",
        "scultore",
        "scuola",
        "scuro",
        "scusare",
        "sdebitare",
        "sdoganare",
        "seccatura",
        "secondo",
        "sedano",
        "seggiola",
        "segnalato",
        "segregato",
        "seguito",
        "selciato",
        "selettivo",
        "sella",
        "selvaggio",
        "semaforo",
        "sembrare",
        "seme",
        "seminato",
        "sempre",
        "senso",
        "sentire",
        "sepolto",
        "sequenza",
        "serata",
        "serbato",
        "sereno",
        "serio",
        "serpente",
        "serraglio",
        "servire",
        "sestina",
        "setola",
        "settimana",
        "sfacelo",
        "sfaldare",
        "sfamato",
        "sfarzoso",
        "sfaticato",
        "sfera",
        "sfida",
        "sfilato",
        "sfinge",
        "sfocato",
        "sfoderare",
        "sfogo",
        "sfoltire",
        "sforzato",
        "sfratto",
        "sfruttato",
        "sfuggito",
        "sfumare",
        "sfuso",
        "sgabello",
        "sgarbato",
        "sgonfiare",
        "sgorbio",
        "sgrassato",
        "sguardo",
        "sibilo",
        "siccome",
        "sierra",
        "sigla",
        "signore",
        "silenzio",
        "sillaba",
        "simbolo",
        "simpatico",
        "simulato",
        "sinfonia",
        "singolo",
        "sinistro",
        "sino",
        "sintesi",
        "sinusoide",
        "sipario",
        "sisma",
        "sistole",
        "situato",
        "slitta",
        "slogatura",
        "sloveno",
        "smarrito",
        "smemorato",
        "smentito",
        "smeraldo",
        "smilzo",
        "smontare",
        "smottato",
        "smussato",
        "snellire",
        "snervato",
        "snodo",
        "sobbalzo",
        "sobrio",
        "soccorso",
        "sociale",
        "sodale",
        "soffitto",
        "sogno",
        "soldato",
        "solenne",
        "solido",
        "sollazzo",
        "solo",
        "solubile",
        "solvente",
        "somatico",
        "somma",
        "sonda",
        "sonetto",
        "sonnifero",
        "sopire",
        "soppeso",
        "sopra",
        "sorgere",
        "sorpasso",
        "sorriso",
        "sorso",
        "sorteggio",
        "sorvolato",
        "sospiro",
        "sosta",
        "sottile",
        "spada",
        "spalla",
        "spargere",
        "spatola",
        "spavento",
        "spazzola",
        "specie",
        "spedire",
        "spegnere",
        "spelatura",
        "speranza",
        "spessore",
        "spettrale",
        "spezzato",
        "spia",
        "spigoloso",
        "spillato",
        "spinoso",
        "spirale",
        "splendido",
        "sportivo",
        "sposo",
        "spranga",
        "sprecare",
        "spronato",
        "spruzzo",
        "spuntino",
        "squillo",
        "sradicare",
        "srotolato",
        "stabile",
        "stacco",
        "staffa",
        "stagnare",
        "stampato",
        "stantio",
        "starnuto",
        "stasera",
        "statuto",
        "stelo",
        "steppa",
        "sterzo",
        "stiletto",
        "stima",
        "stirpe",
        "stivale",
        "stizzoso",
        "stonato",
        "storico",
        "strappo",
        "stregato",
        "stridulo",
        "strozzare",
        "strutto",
        "stuccare",
        "stufo",
        "stupendo",
        "subentro",
        "succoso",
        "sudore",
        "suggerito",
        "sugo",
        "sultano",
        "suonare",
        "superbo",
        "supporto",
        "surgelato",
        "surrogato",
        "sussurro",
        "sutura",
        "svagare",
        "svedese",
        "sveglio",
        "svelare",
        "svenuto",
        "svezia",
        "sviluppo",
        "svista",
        "svizzera",
        "svolta",
        "svuotare",
        "tabacco",
        "tabulato",
        "tacciare",
        "taciturno",
        "tale",
        "talismano",
        "tampone",
        "tannino",
        "tara",
        "tardivo",
        "targato",
        "tariffa",
        "tarpare",
        "tartaruga",
        "tasto",
        "tattico",
        "taverna",
        "tavolata",
        "tazza",
        "teca",
        "tecnico",
        "telefono",
        "temerario",
        "tempo",
        "temuto",
        "tendone",
        "tenero",
        "tensione",
        "tentacolo",
        "teorema",
        "terme",
        "terrazzo",
        "terzetto",
        "tesi",
        "tesserato",
        "testato",
        "tetro",
        "tettoia",
        "tifare",
        "tigella",
        "timbro",
        "tinto",
        "tipico",
        "tipografo",
        "tiraggio",
        "tiro",
        "titanio",
        "titolo",
        "titubante",
        "tizio",
        "tizzone",
        "toccare",
        "tollerare",
        "tolto",
        "tombola",
        "tomo",
        "tonfo",
        "tonsilla",
        "topazio",
        "topologia",
        "toppa",
        "torba",
        "tornare",
        "torrone",
        "tortora",
        "toscano",
        "tossire",
        "tostatura",
        "totano",
        "trabocco",
        "trachea",
        "trafila",
        "tragedia",
        "tralcio",
        "tramonto",
        "transito",
        "trapano",
        "trarre",
        "trasloco",
        "trattato",
        "trave",
        "treccia",
        "tremolio",
        "trespolo",
        "tributo",
        "tricheco",
        "trifoglio",
        "trillo",
        "trincea",
        "trio",
        "tristezza",
        "triturato",
        "trivella",
        "tromba",
        "trono",
        "troppo",
        "trottola",
        "trovare",
        "truccato",
        "tubatura",
        "tuffato",
        "tulipano",
        "tumulto",
        "tunisia",
        "turbare",
        "turchino",
        "tuta",
        "tutela",
        "ubicato",
        "uccello",
        "uccisore",
        "udire",
        "uditivo",
        "uffa",
        "ufficio",
        "uguale",
        "ulisse",
        "ultimato",
        "umano",
        "umile",
        "umorismo",
        "uncinetto",
        "ungere",
        "ungherese",
        "unicorno",
        "unificato",
        "unisono",
        "unitario",
        "unte",
        "uovo",
        "upupa",
        "uragano",
        "urgenza",
        "urlo",
        "usanza",
        "usato",
        "uscito",
        "usignolo",
        "usuraio",
        "utensile",
        "utilizzo",
        "utopia",
        "vacante",
        "vaccinato",
        "vagabondo",
        "vagliato",
        "valanga",
        "valgo",
        "valico",
        "valletta",
        "valoroso",
        "valutare",
        "valvola",
        "vampata",
        "vangare",
        "vanitoso",
        "vano",
        "vantaggio",
        "vanvera",
        "vapore",
        "varano",
        "varcato",
        "variante",
        "vasca",
        "vedetta",
        "vedova",
        "veduto",
        "vegetale",
        "veicolo",
        "velcro",
        "velina",
        "velluto",
        "veloce",
        "venato",
        "vendemmia",
        "vento",
        "verace",
        "verbale",
        "vergogna",
        "verifica",
        "vero",
        "verruca",
        "verticale",
        "vescica",
        "vessillo",
        "vestale",
        "veterano",
        "vetrina",
        "vetusto",
        "viandante",
        "vibrante",
        "vicenda",
        "vichingo",
        "vicinanza",
        "vidimare",
        "vigilia",
        "vigneto",
        "vigore",
        "vile",
        "villano",
        "vimini",
        "vincitore",
        "viola",
        "vipera",
        "virgola",
        "virologo",
        "virulento",
        "viscoso",
        "visione",
        "vispo",
        "vissuto",
        "visura",
        "vita",
        "vitello",
        "vittima",
        "vivanda",
        "vivido",
        "viziare",
        "voce",
        "voga",
        "volatile",
        "volere",
        "volpe",
        "voragine",
        "vulcano",
        "zampogna",
        "zanna",
        "zappato",
        "zattera",
        "zavorra",
        "zefiro",
        "zelante",
        "zelo",
        "zenzero",
        "zerbino",
        "zibetto",
        "zinco",
        "zircone",
        "zitto",
        "zolla",
        "zotico",
        "zucchero",
        "zufolo",
        "zulu",
        "zuppa"
      ];
    }
  });

  // node_modules/bip39/src/wordlists/spanish.json
  var require_spanish = __commonJS({
    "node_modules/bip39/src/wordlists/spanish.json"(exports, module) {
      module.exports = [
        "a\u0301baco",
        "abdomen",
        "abeja",
        "abierto",
        "abogado",
        "abono",
        "aborto",
        "abrazo",
        "abrir",
        "abuelo",
        "abuso",
        "acabar",
        "academia",
        "acceso",
        "accio\u0301n",
        "aceite",
        "acelga",
        "acento",
        "aceptar",
        "a\u0301cido",
        "aclarar",
        "acne\u0301",
        "acoger",
        "acoso",
        "activo",
        "acto",
        "actriz",
        "actuar",
        "acudir",
        "acuerdo",
        "acusar",
        "adicto",
        "admitir",
        "adoptar",
        "adorno",
        "aduana",
        "adulto",
        "ae\u0301reo",
        "afectar",
        "aficio\u0301n",
        "afinar",
        "afirmar",
        "a\u0301gil",
        "agitar",
        "agoni\u0301a",
        "agosto",
        "agotar",
        "agregar",
        "agrio",
        "agua",
        "agudo",
        "a\u0301guila",
        "aguja",
        "ahogo",
        "ahorro",
        "aire",
        "aislar",
        "ajedrez",
        "ajeno",
        "ajuste",
        "alacra\u0301n",
        "alambre",
        "alarma",
        "alba",
        "a\u0301lbum",
        "alcalde",
        "aldea",
        "alegre",
        "alejar",
        "alerta",
        "aleta",
        "alfiler",
        "alga",
        "algodo\u0301n",
        "aliado",
        "aliento",
        "alivio",
        "alma",
        "almeja",
        "almi\u0301bar",
        "altar",
        "alteza",
        "altivo",
        "alto",
        "altura",
        "alumno",
        "alzar",
        "amable",
        "amante",
        "amapola",
        "amargo",
        "amasar",
        "a\u0301mbar",
        "a\u0301mbito",
        "ameno",
        "amigo",
        "amistad",
        "amor",
        "amparo",
        "amplio",
        "ancho",
        "anciano",
        "ancla",
        "andar",
        "ande\u0301n",
        "anemia",
        "a\u0301ngulo",
        "anillo",
        "a\u0301nimo",
        "ani\u0301s",
        "anotar",
        "antena",
        "antiguo",
        "antojo",
        "anual",
        "anular",
        "anuncio",
        "an\u0303adir",
        "an\u0303ejo",
        "an\u0303o",
        "apagar",
        "aparato",
        "apetito",
        "apio",
        "aplicar",
        "apodo",
        "aporte",
        "apoyo",
        "aprender",
        "aprobar",
        "apuesta",
        "apuro",
        "arado",
        "aran\u0303a",
        "arar",
        "a\u0301rbitro",
        "a\u0301rbol",
        "arbusto",
        "archivo",
        "arco",
        "arder",
        "ardilla",
        "arduo",
        "a\u0301rea",
        "a\u0301rido",
        "aries",
        "armoni\u0301a",
        "arne\u0301s",
        "aroma",
        "arpa",
        "arpo\u0301n",
        "arreglo",
        "arroz",
        "arruga",
        "arte",
        "artista",
        "asa",
        "asado",
        "asalto",
        "ascenso",
        "asegurar",
        "aseo",
        "asesor",
        "asiento",
        "asilo",
        "asistir",
        "asno",
        "asombro",
        "a\u0301spero",
        "astilla",
        "astro",
        "astuto",
        "asumir",
        "asunto",
        "atajo",
        "ataque",
        "atar",
        "atento",
        "ateo",
        "a\u0301tico",
        "atleta",
        "a\u0301tomo",
        "atraer",
        "atroz",
        "atu\u0301n",
        "audaz",
        "audio",
        "auge",
        "aula",
        "aumento",
        "ausente",
        "autor",
        "aval",
        "avance",
        "avaro",
        "ave",
        "avellana",
        "avena",
        "avestruz",
        "avio\u0301n",
        "aviso",
        "ayer",
        "ayuda",
        "ayuno",
        "azafra\u0301n",
        "azar",
        "azote",
        "azu\u0301car",
        "azufre",
        "azul",
        "baba",
        "babor",
        "bache",
        "bahi\u0301a",
        "baile",
        "bajar",
        "balanza",
        "balco\u0301n",
        "balde",
        "bambu\u0301",
        "banco",
        "banda",
        "ban\u0303o",
        "barba",
        "barco",
        "barniz",
        "barro",
        "ba\u0301scula",
        "basto\u0301n",
        "basura",
        "batalla",
        "bateri\u0301a",
        "batir",
        "batuta",
        "bau\u0301l",
        "bazar",
        "bebe\u0301",
        "bebida",
        "bello",
        "besar",
        "beso",
        "bestia",
        "bicho",
        "bien",
        "bingo",
        "blanco",
        "bloque",
        "blusa",
        "boa",
        "bobina",
        "bobo",
        "boca",
        "bocina",
        "boda",
        "bodega",
        "boina",
        "bola",
        "bolero",
        "bolsa",
        "bomba",
        "bondad",
        "bonito",
        "bono",
        "bonsa\u0301i",
        "borde",
        "borrar",
        "bosque",
        "bote",
        "boti\u0301n",
        "bo\u0301veda",
        "bozal",
        "bravo",
        "brazo",
        "brecha",
        "breve",
        "brillo",
        "brinco",
        "brisa",
        "broca",
        "broma",
        "bronce",
        "brote",
        "bruja",
        "brusco",
        "bruto",
        "buceo",
        "bucle",
        "bueno",
        "buey",
        "bufanda",
        "bufo\u0301n",
        "bu\u0301ho",
        "buitre",
        "bulto",
        "burbuja",
        "burla",
        "burro",
        "buscar",
        "butaca",
        "buzo\u0301n",
        "caballo",
        "cabeza",
        "cabina",
        "cabra",
        "cacao",
        "cada\u0301ver",
        "cadena",
        "caer",
        "cafe\u0301",
        "cai\u0301da",
        "caima\u0301n",
        "caja",
        "cajo\u0301n",
        "cal",
        "calamar",
        "calcio",
        "caldo",
        "calidad",
        "calle",
        "calma",
        "calor",
        "calvo",
        "cama",
        "cambio",
        "camello",
        "camino",
        "campo",
        "ca\u0301ncer",
        "candil",
        "canela",
        "canguro",
        "canica",
        "canto",
        "can\u0303a",
        "can\u0303o\u0301n",
        "caoba",
        "caos",
        "capaz",
        "capita\u0301n",
        "capote",
        "captar",
        "capucha",
        "cara",
        "carbo\u0301n",
        "ca\u0301rcel",
        "careta",
        "carga",
        "carin\u0303o",
        "carne",
        "carpeta",
        "carro",
        "carta",
        "casa",
        "casco",
        "casero",
        "caspa",
        "castor",
        "catorce",
        "catre",
        "caudal",
        "causa",
        "cazo",
        "cebolla",
        "ceder",
        "cedro",
        "celda",
        "ce\u0301lebre",
        "celoso",
        "ce\u0301lula",
        "cemento",
        "ceniza",
        "centro",
        "cerca",
        "cerdo",
        "cereza",
        "cero",
        "cerrar",
        "certeza",
        "ce\u0301sped",
        "cetro",
        "chacal",
        "chaleco",
        "champu\u0301",
        "chancla",
        "chapa",
        "charla",
        "chico",
        "chiste",
        "chivo",
        "choque",
        "choza",
        "chuleta",
        "chupar",
        "ciclo\u0301n",
        "ciego",
        "cielo",
        "cien",
        "cierto",
        "cifra",
        "cigarro",
        "cima",
        "cinco",
        "cine",
        "cinta",
        "cipre\u0301s",
        "circo",
        "ciruela",
        "cisne",
        "cita",
        "ciudad",
        "clamor",
        "clan",
        "claro",
        "clase",
        "clave",
        "cliente",
        "clima",
        "cli\u0301nica",
        "cobre",
        "coccio\u0301n",
        "cochino",
        "cocina",
        "coco",
        "co\u0301digo",
        "codo",
        "cofre",
        "coger",
        "cohete",
        "coji\u0301n",
        "cojo",
        "cola",
        "colcha",
        "colegio",
        "colgar",
        "colina",
        "collar",
        "colmo",
        "columna",
        "combate",
        "comer",
        "comida",
        "co\u0301modo",
        "compra",
        "conde",
        "conejo",
        "conga",
        "conocer",
        "consejo",
        "contar",
        "copa",
        "copia",
        "corazo\u0301n",
        "corbata",
        "corcho",
        "cordo\u0301n",
        "corona",
        "correr",
        "coser",
        "cosmos",
        "costa",
        "cra\u0301neo",
        "cra\u0301ter",
        "crear",
        "crecer",
        "crei\u0301do",
        "crema",
        "cri\u0301a",
        "crimen",
        "cripta",
        "crisis",
        "cromo",
        "cro\u0301nica",
        "croqueta",
        "crudo",
        "cruz",
        "cuadro",
        "cuarto",
        "cuatro",
        "cubo",
        "cubrir",
        "cuchara",
        "cuello",
        "cuento",
        "cuerda",
        "cuesta",
        "cueva",
        "cuidar",
        "culebra",
        "culpa",
        "culto",
        "cumbre",
        "cumplir",
        "cuna",
        "cuneta",
        "cuota",
        "cupo\u0301n",
        "cu\u0301pula",
        "curar",
        "curioso",
        "curso",
        "curva",
        "cutis",
        "dama",
        "danza",
        "dar",
        "dardo",
        "da\u0301til",
        "deber",
        "de\u0301bil",
        "de\u0301cada",
        "decir",
        "dedo",
        "defensa",
        "definir",
        "dejar",
        "delfi\u0301n",
        "delgado",
        "delito",
        "demora",
        "denso",
        "dental",
        "deporte",
        "derecho",
        "derrota",
        "desayuno",
        "deseo",
        "desfile",
        "desnudo",
        "destino",
        "desvi\u0301o",
        "detalle",
        "detener",
        "deuda",
        "di\u0301a",
        "diablo",
        "diadema",
        "diamante",
        "diana",
        "diario",
        "dibujo",
        "dictar",
        "diente",
        "dieta",
        "diez",
        "difi\u0301cil",
        "digno",
        "dilema",
        "diluir",
        "dinero",
        "directo",
        "dirigir",
        "disco",
        "disen\u0303o",
        "disfraz",
        "diva",
        "divino",
        "doble",
        "doce",
        "dolor",
        "domingo",
        "don",
        "donar",
        "dorado",
        "dormir",
        "dorso",
        "dos",
        "dosis",
        "drago\u0301n",
        "droga",
        "ducha",
        "duda",
        "duelo",
        "duen\u0303o",
        "dulce",
        "du\u0301o",
        "duque",
        "durar",
        "dureza",
        "duro",
        "e\u0301bano",
        "ebrio",
        "echar",
        "eco",
        "ecuador",
        "edad",
        "edicio\u0301n",
        "edificio",
        "editor",
        "educar",
        "efecto",
        "eficaz",
        "eje",
        "ejemplo",
        "elefante",
        "elegir",
        "elemento",
        "elevar",
        "elipse",
        "e\u0301lite",
        "elixir",
        "elogio",
        "eludir",
        "embudo",
        "emitir",
        "emocio\u0301n",
        "empate",
        "empen\u0303o",
        "empleo",
        "empresa",
        "enano",
        "encargo",
        "enchufe",
        "enci\u0301a",
        "enemigo",
        "enero",
        "enfado",
        "enfermo",
        "engan\u0303o",
        "enigma",
        "enlace",
        "enorme",
        "enredo",
        "ensayo",
        "ensen\u0303ar",
        "entero",
        "entrar",
        "envase",
        "envi\u0301o",
        "e\u0301poca",
        "equipo",
        "erizo",
        "escala",
        "escena",
        "escolar",
        "escribir",
        "escudo",
        "esencia",
        "esfera",
        "esfuerzo",
        "espada",
        "espejo",
        "espi\u0301a",
        "esposa",
        "espuma",
        "esqui\u0301",
        "estar",
        "este",
        "estilo",
        "estufa",
        "etapa",
        "eterno",
        "e\u0301tica",
        "etnia",
        "evadir",
        "evaluar",
        "evento",
        "evitar",
        "exacto",
        "examen",
        "exceso",
        "excusa",
        "exento",
        "exigir",
        "exilio",
        "existir",
        "e\u0301xito",
        "experto",
        "explicar",
        "exponer",
        "extremo",
        "fa\u0301brica",
        "fa\u0301bula",
        "fachada",
        "fa\u0301cil",
        "factor",
        "faena",
        "faja",
        "falda",
        "fallo",
        "falso",
        "faltar",
        "fama",
        "familia",
        "famoso",
        "farao\u0301n",
        "farmacia",
        "farol",
        "farsa",
        "fase",
        "fatiga",
        "fauna",
        "favor",
        "fax",
        "febrero",
        "fecha",
        "feliz",
        "feo",
        "feria",
        "feroz",
        "fe\u0301rtil",
        "fervor",
        "festi\u0301n",
        "fiable",
        "fianza",
        "fiar",
        "fibra",
        "ficcio\u0301n",
        "ficha",
        "fideo",
        "fiebre",
        "fiel",
        "fiera",
        "fiesta",
        "figura",
        "fijar",
        "fijo",
        "fila",
        "filete",
        "filial",
        "filtro",
        "fin",
        "finca",
        "fingir",
        "finito",
        "firma",
        "flaco",
        "flauta",
        "flecha",
        "flor",
        "flota",
        "fluir",
        "flujo",
        "flu\u0301or",
        "fobia",
        "foca",
        "fogata",
        "fogo\u0301n",
        "folio",
        "folleto",
        "fondo",
        "forma",
        "forro",
        "fortuna",
        "forzar",
        "fosa",
        "foto",
        "fracaso",
        "fra\u0301gil",
        "franja",
        "frase",
        "fraude",
        "frei\u0301r",
        "freno",
        "fresa",
        "fri\u0301o",
        "frito",
        "fruta",
        "fuego",
        "fuente",
        "fuerza",
        "fuga",
        "fumar",
        "funcio\u0301n",
        "funda",
        "furgo\u0301n",
        "furia",
        "fusil",
        "fu\u0301tbol",
        "futuro",
        "gacela",
        "gafas",
        "gaita",
        "gajo",
        "gala",
        "galeri\u0301a",
        "gallo",
        "gamba",
        "ganar",
        "gancho",
        "ganga",
        "ganso",
        "garaje",
        "garza",
        "gasolina",
        "gastar",
        "gato",
        "gavila\u0301n",
        "gemelo",
        "gemir",
        "gen",
        "ge\u0301nero",
        "genio",
        "gente",
        "geranio",
        "gerente",
        "germen",
        "gesto",
        "gigante",
        "gimnasio",
        "girar",
        "giro",
        "glaciar",
        "globo",
        "gloria",
        "gol",
        "golfo",
        "goloso",
        "golpe",
        "goma",
        "gordo",
        "gorila",
        "gorra",
        "gota",
        "goteo",
        "gozar",
        "grada",
        "gra\u0301fico",
        "grano",
        "grasa",
        "gratis",
        "grave",
        "grieta",
        "grillo",
        "gripe",
        "gris",
        "grito",
        "grosor",
        "gru\u0301a",
        "grueso",
        "grumo",
        "grupo",
        "guante",
        "guapo",
        "guardia",
        "guerra",
        "gui\u0301a",
        "guin\u0303o",
        "guion",
        "guiso",
        "guitarra",
        "gusano",
        "gustar",
        "haber",
        "ha\u0301bil",
        "hablar",
        "hacer",
        "hacha",
        "hada",
        "hallar",
        "hamaca",
        "harina",
        "haz",
        "hazan\u0303a",
        "hebilla",
        "hebra",
        "hecho",
        "helado",
        "helio",
        "hembra",
        "herir",
        "hermano",
        "he\u0301roe",
        "hervir",
        "hielo",
        "hierro",
        "hi\u0301gado",
        "higiene",
        "hijo",
        "himno",
        "historia",
        "hocico",
        "hogar",
        "hoguera",
        "hoja",
        "hombre",
        "hongo",
        "honor",
        "honra",
        "hora",
        "hormiga",
        "horno",
        "hostil",
        "hoyo",
        "hueco",
        "huelga",
        "huerta",
        "hueso",
        "huevo",
        "huida",
        "huir",
        "humano",
        "hu\u0301medo",
        "humilde",
        "humo",
        "hundir",
        "huraca\u0301n",
        "hurto",
        "icono",
        "ideal",
        "idioma",
        "i\u0301dolo",
        "iglesia",
        "iglu\u0301",
        "igual",
        "ilegal",
        "ilusio\u0301n",
        "imagen",
        "ima\u0301n",
        "imitar",
        "impar",
        "imperio",
        "imponer",
        "impulso",
        "incapaz",
        "i\u0301ndice",
        "inerte",
        "infiel",
        "informe",
        "ingenio",
        "inicio",
        "inmenso",
        "inmune",
        "innato",
        "insecto",
        "instante",
        "intere\u0301s",
        "i\u0301ntimo",
        "intuir",
        "inu\u0301til",
        "invierno",
        "ira",
        "iris",
        "ironi\u0301a",
        "isla",
        "islote",
        "jabali\u0301",
        "jabo\u0301n",
        "jamo\u0301n",
        "jarabe",
        "jardi\u0301n",
        "jarra",
        "jaula",
        "jazmi\u0301n",
        "jefe",
        "jeringa",
        "jinete",
        "jornada",
        "joroba",
        "joven",
        "joya",
        "juerga",
        "jueves",
        "juez",
        "jugador",
        "jugo",
        "juguete",
        "juicio",
        "junco",
        "jungla",
        "junio",
        "juntar",
        "ju\u0301piter",
        "jurar",
        "justo",
        "juvenil",
        "juzgar",
        "kilo",
        "koala",
        "labio",
        "lacio",
        "lacra",
        "lado",
        "ladro\u0301n",
        "lagarto",
        "la\u0301grima",
        "laguna",
        "laico",
        "lamer",
        "la\u0301mina",
        "la\u0301mpara",
        "lana",
        "lancha",
        "langosta",
        "lanza",
        "la\u0301piz",
        "largo",
        "larva",
        "la\u0301stima",
        "lata",
        "la\u0301tex",
        "latir",
        "laurel",
        "lavar",
        "lazo",
        "leal",
        "leccio\u0301n",
        "leche",
        "lector",
        "leer",
        "legio\u0301n",
        "legumbre",
        "lejano",
        "lengua",
        "lento",
        "len\u0303a",
        "leo\u0301n",
        "leopardo",
        "lesio\u0301n",
        "letal",
        "letra",
        "leve",
        "leyenda",
        "libertad",
        "libro",
        "licor",
        "li\u0301der",
        "lidiar",
        "lienzo",
        "liga",
        "ligero",
        "lima",
        "li\u0301mite",
        "limo\u0301n",
        "limpio",
        "lince",
        "lindo",
        "li\u0301nea",
        "lingote",
        "lino",
        "linterna",
        "li\u0301quido",
        "liso",
        "lista",
        "litera",
        "litio",
        "litro",
        "llaga",
        "llama",
        "llanto",
        "llave",
        "llegar",
        "llenar",
        "llevar",
        "llorar",
        "llover",
        "lluvia",
        "lobo",
        "locio\u0301n",
        "loco",
        "locura",
        "lo\u0301gica",
        "logro",
        "lombriz",
        "lomo",
        "lonja",
        "lote",
        "lucha",
        "lucir",
        "lugar",
        "lujo",
        "luna",
        "lunes",
        "lupa",
        "lustro",
        "luto",
        "luz",
        "maceta",
        "macho",
        "madera",
        "madre",
        "maduro",
        "maestro",
        "mafia",
        "magia",
        "mago",
        "mai\u0301z",
        "maldad",
        "maleta",
        "malla",
        "malo",
        "mama\u0301",
        "mambo",
        "mamut",
        "manco",
        "mando",
        "manejar",
        "manga",
        "maniqui\u0301",
        "manjar",
        "mano",
        "manso",
        "manta",
        "man\u0303ana",
        "mapa",
        "ma\u0301quina",
        "mar",
        "marco",
        "marea",
        "marfil",
        "margen",
        "marido",
        "ma\u0301rmol",
        "marro\u0301n",
        "martes",
        "marzo",
        "masa",
        "ma\u0301scara",
        "masivo",
        "matar",
        "materia",
        "matiz",
        "matriz",
        "ma\u0301ximo",
        "mayor",
        "mazorca",
        "mecha",
        "medalla",
        "medio",
        "me\u0301dula",
        "mejilla",
        "mejor",
        "melena",
        "melo\u0301n",
        "memoria",
        "menor",
        "mensaje",
        "mente",
        "menu\u0301",
        "mercado",
        "merengue",
        "me\u0301rito",
        "mes",
        "meso\u0301n",
        "meta",
        "meter",
        "me\u0301todo",
        "metro",
        "mezcla",
        "miedo",
        "miel",
        "miembro",
        "miga",
        "mil",
        "milagro",
        "militar",
        "millo\u0301n",
        "mimo",
        "mina",
        "minero",
        "mi\u0301nimo",
        "minuto",
        "miope",
        "mirar",
        "misa",
        "miseria",
        "misil",
        "mismo",
        "mitad",
        "mito",
        "mochila",
        "mocio\u0301n",
        "moda",
        "modelo",
        "moho",
        "mojar",
        "molde",
        "moler",
        "molino",
        "momento",
        "momia",
        "monarca",
        "moneda",
        "monja",
        "monto",
        "mon\u0303o",
        "morada",
        "morder",
        "moreno",
        "morir",
        "morro",
        "morsa",
        "mortal",
        "mosca",
        "mostrar",
        "motivo",
        "mover",
        "mo\u0301vil",
        "mozo",
        "mucho",
        "mudar",
        "mueble",
        "muela",
        "muerte",
        "muestra",
        "mugre",
        "mujer",
        "mula",
        "muleta",
        "multa",
        "mundo",
        "mun\u0303eca",
        "mural",
        "muro",
        "mu\u0301sculo",
        "museo",
        "musgo",
        "mu\u0301sica",
        "muslo",
        "na\u0301car",
        "nacio\u0301n",
        "nadar",
        "naipe",
        "naranja",
        "nariz",
        "narrar",
        "nasal",
        "natal",
        "nativo",
        "natural",
        "na\u0301usea",
        "naval",
        "nave",
        "navidad",
        "necio",
        "ne\u0301ctar",
        "negar",
        "negocio",
        "negro",
        "neo\u0301n",
        "nervio",
        "neto",
        "neutro",
        "nevar",
        "nevera",
        "nicho",
        "nido",
        "niebla",
        "nieto",
        "nin\u0303ez",
        "nin\u0303o",
        "ni\u0301tido",
        "nivel",
        "nobleza",
        "noche",
        "no\u0301mina",
        "noria",
        "norma",
        "norte",
        "nota",
        "noticia",
        "novato",
        "novela",
        "novio",
        "nube",
        "nuca",
        "nu\u0301cleo",
        "nudillo",
        "nudo",
        "nuera",
        "nueve",
        "nuez",
        "nulo",
        "nu\u0301mero",
        "nutria",
        "oasis",
        "obeso",
        "obispo",
        "objeto",
        "obra",
        "obrero",
        "observar",
        "obtener",
        "obvio",
        "oca",
        "ocaso",
        "oce\u0301ano",
        "ochenta",
        "ocho",
        "ocio",
        "ocre",
        "octavo",
        "octubre",
        "oculto",
        "ocupar",
        "ocurrir",
        "odiar",
        "odio",
        "odisea",
        "oeste",
        "ofensa",
        "oferta",
        "oficio",
        "ofrecer",
        "ogro",
        "oi\u0301do",
        "oi\u0301r",
        "ojo",
        "ola",
        "oleada",
        "olfato",
        "olivo",
        "olla",
        "olmo",
        "olor",
        "olvido",
        "ombligo",
        "onda",
        "onza",
        "opaco",
        "opcio\u0301n",
        "o\u0301pera",
        "opinar",
        "oponer",
        "optar",
        "o\u0301ptica",
        "opuesto",
        "oracio\u0301n",
        "orador",
        "oral",
        "o\u0301rbita",
        "orca",
        "orden",
        "oreja",
        "o\u0301rgano",
        "orgi\u0301a",
        "orgullo",
        "oriente",
        "origen",
        "orilla",
        "oro",
        "orquesta",
        "oruga",
        "osadi\u0301a",
        "oscuro",
        "osezno",
        "oso",
        "ostra",
        "oton\u0303o",
        "otro",
        "oveja",
        "o\u0301vulo",
        "o\u0301xido",
        "oxi\u0301geno",
        "oyente",
        "ozono",
        "pacto",
        "padre",
        "paella",
        "pa\u0301gina",
        "pago",
        "pai\u0301s",
        "pa\u0301jaro",
        "palabra",
        "palco",
        "paleta",
        "pa\u0301lido",
        "palma",
        "paloma",
        "palpar",
        "pan",
        "panal",
        "pa\u0301nico",
        "pantera",
        "pan\u0303uelo",
        "papa\u0301",
        "papel",
        "papilla",
        "paquete",
        "parar",
        "parcela",
        "pared",
        "parir",
        "paro",
        "pa\u0301rpado",
        "parque",
        "pa\u0301rrafo",
        "parte",
        "pasar",
        "paseo",
        "pasio\u0301n",
        "paso",
        "pasta",
        "pata",
        "patio",
        "patria",
        "pausa",
        "pauta",
        "pavo",
        "payaso",
        "peato\u0301n",
        "pecado",
        "pecera",
        "pecho",
        "pedal",
        "pedir",
        "pegar",
        "peine",
        "pelar",
        "peldan\u0303o",
        "pelea",
        "peligro",
        "pellejo",
        "pelo",
        "peluca",
        "pena",
        "pensar",
        "pen\u0303o\u0301n",
        "peo\u0301n",
        "peor",
        "pepino",
        "pequen\u0303o",
        "pera",
        "percha",
        "perder",
        "pereza",
        "perfil",
        "perico",
        "perla",
        "permiso",
        "perro",
        "persona",
        "pesa",
        "pesca",
        "pe\u0301simo",
        "pestan\u0303a",
        "pe\u0301talo",
        "petro\u0301leo",
        "pez",
        "pezun\u0303a",
        "picar",
        "picho\u0301n",
        "pie",
        "piedra",
        "pierna",
        "pieza",
        "pijama",
        "pilar",
        "piloto",
        "pimienta",
        "pino",
        "pintor",
        "pinza",
        "pin\u0303a",
        "piojo",
        "pipa",
        "pirata",
        "pisar",
        "piscina",
        "piso",
        "pista",
        "pito\u0301n",
        "pizca",
        "placa",
        "plan",
        "plata",
        "playa",
        "plaza",
        "pleito",
        "pleno",
        "plomo",
        "pluma",
        "plural",
        "pobre",
        "poco",
        "poder",
        "podio",
        "poema",
        "poesi\u0301a",
        "poeta",
        "polen",
        "polici\u0301a",
        "pollo",
        "polvo",
        "pomada",
        "pomelo",
        "pomo",
        "pompa",
        "poner",
        "porcio\u0301n",
        "portal",
        "posada",
        "poseer",
        "posible",
        "poste",
        "potencia",
        "potro",
        "pozo",
        "prado",
        "precoz",
        "pregunta",
        "premio",
        "prensa",
        "preso",
        "previo",
        "primo",
        "pri\u0301ncipe",
        "prisio\u0301n",
        "privar",
        "proa",
        "probar",
        "proceso",
        "producto",
        "proeza",
        "profesor",
        "programa",
        "prole",
        "promesa",
        "pronto",
        "propio",
        "pro\u0301ximo",
        "prueba",
        "pu\u0301blico",
        "puchero",
        "pudor",
        "pueblo",
        "puerta",
        "puesto",
        "pulga",
        "pulir",
        "pulmo\u0301n",
        "pulpo",
        "pulso",
        "puma",
        "punto",
        "pun\u0303al",
        "pun\u0303o",
        "pupa",
        "pupila",
        "pure\u0301",
        "quedar",
        "queja",
        "quemar",
        "querer",
        "queso",
        "quieto",
        "qui\u0301mica",
        "quince",
        "quitar",
        "ra\u0301bano",
        "rabia",
        "rabo",
        "racio\u0301n",
        "radical",
        "rai\u0301z",
        "rama",
        "rampa",
        "rancho",
        "rango",
        "rapaz",
        "ra\u0301pido",
        "rapto",
        "rasgo",
        "raspa",
        "rato",
        "rayo",
        "raza",
        "razo\u0301n",
        "reaccio\u0301n",
        "realidad",
        "reban\u0303o",
        "rebote",
        "recaer",
        "receta",
        "rechazo",
        "recoger",
        "recreo",
        "recto",
        "recurso",
        "red",
        "redondo",
        "reducir",
        "reflejo",
        "reforma",
        "refra\u0301n",
        "refugio",
        "regalo",
        "regir",
        "regla",
        "regreso",
        "rehe\u0301n",
        "reino",
        "rei\u0301r",
        "reja",
        "relato",
        "relevo",
        "relieve",
        "relleno",
        "reloj",
        "remar",
        "remedio",
        "remo",
        "rencor",
        "rendir",
        "renta",
        "reparto",
        "repetir",
        "reposo",
        "reptil",
        "res",
        "rescate",
        "resina",
        "respeto",
        "resto",
        "resumen",
        "retiro",
        "retorno",
        "retrato",
        "reunir",
        "reve\u0301s",
        "revista",
        "rey",
        "rezar",
        "rico",
        "riego",
        "rienda",
        "riesgo",
        "rifa",
        "ri\u0301gido",
        "rigor",
        "rinco\u0301n",
        "rin\u0303o\u0301n",
        "ri\u0301o",
        "riqueza",
        "risa",
        "ritmo",
        "rito",
        "rizo",
        "roble",
        "roce",
        "rociar",
        "rodar",
        "rodeo",
        "rodilla",
        "roer",
        "rojizo",
        "rojo",
        "romero",
        "romper",
        "ron",
        "ronco",
        "ronda",
        "ropa",
        "ropero",
        "rosa",
        "rosca",
        "rostro",
        "rotar",
        "rubi\u0301",
        "rubor",
        "rudo",
        "rueda",
        "rugir",
        "ruido",
        "ruina",
        "ruleta",
        "rulo",
        "rumbo",
        "rumor",
        "ruptura",
        "ruta",
        "rutina",
        "sa\u0301bado",
        "saber",
        "sabio",
        "sable",
        "sacar",
        "sagaz",
        "sagrado",
        "sala",
        "saldo",
        "salero",
        "salir",
        "salmo\u0301n",
        "salo\u0301n",
        "salsa",
        "salto",
        "salud",
        "salvar",
        "samba",
        "sancio\u0301n",
        "sandi\u0301a",
        "sanear",
        "sangre",
        "sanidad",
        "sano",
        "santo",
        "sapo",
        "saque",
        "sardina",
        "sarte\u0301n",
        "sastre",
        "sata\u0301n",
        "sauna",
        "saxofo\u0301n",
        "seccio\u0301n",
        "seco",
        "secreto",
        "secta",
        "sed",
        "seguir",
        "seis",
        "sello",
        "selva",
        "semana",
        "semilla",
        "senda",
        "sensor",
        "sen\u0303al",
        "sen\u0303or",
        "separar",
        "sepia",
        "sequi\u0301a",
        "ser",
        "serie",
        "sermo\u0301n",
        "servir",
        "sesenta",
        "sesio\u0301n",
        "seta",
        "setenta",
        "severo",
        "sexo",
        "sexto",
        "sidra",
        "siesta",
        "siete",
        "siglo",
        "signo",
        "si\u0301laba",
        "silbar",
        "silencio",
        "silla",
        "si\u0301mbolo",
        "simio",
        "sirena",
        "sistema",
        "sitio",
        "situar",
        "sobre",
        "socio",
        "sodio",
        "sol",
        "solapa",
        "soldado",
        "soledad",
        "so\u0301lido",
        "soltar",
        "solucio\u0301n",
        "sombra",
        "sondeo",
        "sonido",
        "sonoro",
        "sonrisa",
        "sopa",
        "soplar",
        "soporte",
        "sordo",
        "sorpresa",
        "sorteo",
        "soste\u0301n",
        "so\u0301tano",
        "suave",
        "subir",
        "suceso",
        "sudor",
        "suegra",
        "suelo",
        "suen\u0303o",
        "suerte",
        "sufrir",
        "sujeto",
        "sulta\u0301n",
        "sumar",
        "superar",
        "suplir",
        "suponer",
        "supremo",
        "sur",
        "surco",
        "suren\u0303o",
        "surgir",
        "susto",
        "sutil",
        "tabaco",
        "tabique",
        "tabla",
        "tabu\u0301",
        "taco",
        "tacto",
        "tajo",
        "talar",
        "talco",
        "talento",
        "talla",
        "talo\u0301n",
        "taman\u0303o",
        "tambor",
        "tango",
        "tanque",
        "tapa",
        "tapete",
        "tapia",
        "tapo\u0301n",
        "taquilla",
        "tarde",
        "tarea",
        "tarifa",
        "tarjeta",
        "tarot",
        "tarro",
        "tarta",
        "tatuaje",
        "tauro",
        "taza",
        "tazo\u0301n",
        "teatro",
        "techo",
        "tecla",
        "te\u0301cnica",
        "tejado",
        "tejer",
        "tejido",
        "tela",
        "tele\u0301fono",
        "tema",
        "temor",
        "templo",
        "tenaz",
        "tender",
        "tener",
        "tenis",
        "tenso",
        "teori\u0301a",
        "terapia",
        "terco",
        "te\u0301rmino",
        "ternura",
        "terror",
        "tesis",
        "tesoro",
        "testigo",
        "tetera",
        "texto",
        "tez",
        "tibio",
        "tiburo\u0301n",
        "tiempo",
        "tienda",
        "tierra",
        "tieso",
        "tigre",
        "tijera",
        "tilde",
        "timbre",
        "ti\u0301mido",
        "timo",
        "tinta",
        "ti\u0301o",
        "ti\u0301pico",
        "tipo",
        "tira",
        "tiro\u0301n",
        "tita\u0301n",
        "ti\u0301tere",
        "ti\u0301tulo",
        "tiza",
        "toalla",
        "tobillo",
        "tocar",
        "tocino",
        "todo",
        "toga",
        "toldo",
        "tomar",
        "tono",
        "tonto",
        "topar",
        "tope",
        "toque",
        "to\u0301rax",
        "torero",
        "tormenta",
        "torneo",
        "toro",
        "torpedo",
        "torre",
        "torso",
        "tortuga",
        "tos",
        "tosco",
        "toser",
        "to\u0301xico",
        "trabajo",
        "tractor",
        "traer",
        "tra\u0301fico",
        "trago",
        "traje",
        "tramo",
        "trance",
        "trato",
        "trauma",
        "trazar",
        "tre\u0301bol",
        "tregua",
        "treinta",
        "tren",
        "trepar",
        "tres",
        "tribu",
        "trigo",
        "tripa",
        "triste",
        "triunfo",
        "trofeo",
        "trompa",
        "tronco",
        "tropa",
        "trote",
        "trozo",
        "truco",
        "trueno",
        "trufa",
        "tuberi\u0301a",
        "tubo",
        "tuerto",
        "tumba",
        "tumor",
        "tu\u0301nel",
        "tu\u0301nica",
        "turbina",
        "turismo",
        "turno",
        "tutor",
        "ubicar",
        "u\u0301lcera",
        "umbral",
        "unidad",
        "unir",
        "universo",
        "uno",
        "untar",
        "un\u0303a",
        "urbano",
        "urbe",
        "urgente",
        "urna",
        "usar",
        "usuario",
        "u\u0301til",
        "utopi\u0301a",
        "uva",
        "vaca",
        "vaci\u0301o",
        "vacuna",
        "vagar",
        "vago",
        "vaina",
        "vajilla",
        "vale",
        "va\u0301lido",
        "valle",
        "valor",
        "va\u0301lvula",
        "vampiro",
        "vara",
        "variar",
        "varo\u0301n",
        "vaso",
        "vecino",
        "vector",
        "vehi\u0301culo",
        "veinte",
        "vejez",
        "vela",
        "velero",
        "veloz",
        "vena",
        "vencer",
        "venda",
        "veneno",
        "vengar",
        "venir",
        "venta",
        "venus",
        "ver",
        "verano",
        "verbo",
        "verde",
        "vereda",
        "verja",
        "verso",
        "verter",
        "vi\u0301a",
        "viaje",
        "vibrar",
        "vicio",
        "vi\u0301ctima",
        "vida",
        "vi\u0301deo",
        "vidrio",
        "viejo",
        "viernes",
        "vigor",
        "vil",
        "villa",
        "vinagre",
        "vino",
        "vin\u0303edo",
        "violi\u0301n",
        "viral",
        "virgo",
        "virtud",
        "visor",
        "vi\u0301spera",
        "vista",
        "vitamina",
        "viudo",
        "vivaz",
        "vivero",
        "vivir",
        "vivo",
        "volca\u0301n",
        "volumen",
        "volver",
        "voraz",
        "votar",
        "voto",
        "voz",
        "vuelo",
        "vulgar",
        "yacer",
        "yate",
        "yegua",
        "yema",
        "yerno",
        "yeso",
        "yodo",
        "yoga",
        "yogur",
        "zafiro",
        "zanja",
        "zapato",
        "zarza",
        "zona",
        "zorro",
        "zumo",
        "zurdo"
      ];
    }
  });

  // node_modules/bip39/src/wordlists/japanese.json
  var require_japanese = __commonJS({
    "node_modules/bip39/src/wordlists/japanese.json"(exports, module) {
      module.exports = [
        "\u3042\u3044\u3053\u304F\u3057\u3093",
        "\u3042\u3044\u3055\u3064",
        "\u3042\u3044\u305F\u3099",
        "\u3042\u304A\u305D\u3099\u3089",
        "\u3042\u304B\u3061\u3083\u3093",
        "\u3042\u304D\u308B",
        "\u3042\u3051\u304B\u3099\u305F",
        "\u3042\u3051\u308B",
        "\u3042\u3053\u304B\u3099\u308C\u308B",
        "\u3042\u3055\u3044",
        "\u3042\u3055\u3072",
        "\u3042\u3057\u3042\u3068",
        "\u3042\u3057\u3099\u308F\u3046",
        "\u3042\u3059\u3099\u304B\u308B",
        "\u3042\u3059\u3099\u304D",
        "\u3042\u305D\u3075\u3099",
        "\u3042\u305F\u3048\u308B",
        "\u3042\u305F\u305F\u3081\u308B",
        "\u3042\u305F\u308A\u307E\u3048",
        "\u3042\u305F\u308B",
        "\u3042\u3064\u3044",
        "\u3042\u3064\u304B\u3046",
        "\u3042\u3063\u3057\u3085\u304F",
        "\u3042\u3064\u307E\u308A",
        "\u3042\u3064\u3081\u308B",
        "\u3042\u3066\u306A",
        "\u3042\u3066\u306F\u307E\u308B",
        "\u3042\u3072\u308B",
        "\u3042\u3075\u3099\u3089",
        "\u3042\u3075\u3099\u308B",
        "\u3042\u3075\u308C\u308B",
        "\u3042\u307E\u3044",
        "\u3042\u307E\u3068\u3099",
        "\u3042\u307E\u3084\u304B\u3059",
        "\u3042\u307E\u308A",
        "\u3042\u307F\u3082\u306E",
        "\u3042\u3081\u308A\u304B",
        "\u3042\u3084\u307E\u308B",
        "\u3042\u3086\u3080",
        "\u3042\u3089\u3044\u304F\u3099\u307E",
        "\u3042\u3089\u3057",
        "\u3042\u3089\u3059\u3057\u3099",
        "\u3042\u3089\u305F\u3081\u308B",
        "\u3042\u3089\u3086\u308B",
        "\u3042\u3089\u308F\u3059",
        "\u3042\u308A\u304B\u3099\u3068\u3046",
        "\u3042\u308F\u305B\u308B",
        "\u3042\u308F\u3066\u308B",
        "\u3042\u3093\u3044",
        "\u3042\u3093\u304B\u3099\u3044",
        "\u3042\u3093\u3053",
        "\u3042\u3093\u305B\u3099\u3093",
        "\u3042\u3093\u3066\u3044",
        "\u3042\u3093\u306A\u3044",
        "\u3042\u3093\u307E\u308A",
        "\u3044\u3044\u305F\u3099\u3059",
        "\u3044\u304A\u3093",
        "\u3044\u304B\u3099\u3044",
        "\u3044\u304B\u3099\u304F",
        "\u3044\u304D\u304A\u3044",
        "\u3044\u304D\u306A\u308A",
        "\u3044\u304D\u3082\u306E",
        "\u3044\u304D\u308B",
        "\u3044\u304F\u3057\u3099",
        "\u3044\u304F\u3075\u3099\u3093",
        "\u3044\u3051\u306F\u3099\u306A",
        "\u3044\u3051\u3093",
        "\u3044\u3053\u3046",
        "\u3044\u3053\u304F",
        "\u3044\u3053\u3064",
        "\u3044\u3055\u307E\u3057\u3044",
        "\u3044\u3055\u3093",
        "\u3044\u3057\u304D",
        "\u3044\u3057\u3099\u3085\u3046",
        "\u3044\u3057\u3099\u3087\u3046",
        "\u3044\u3057\u3099\u308F\u308B",
        "\u3044\u3059\u3099\u307F",
        "\u3044\u3059\u3099\u308C",
        "\u3044\u305B\u3044",
        "\u3044\u305B\u3048\u3072\u3099",
        "\u3044\u305B\u304B\u3044",
        "\u3044\u305B\u304D",
        "\u3044\u305B\u3099\u3093",
        "\u3044\u305D\u3046\u308D\u3046",
        "\u3044\u305D\u304B\u3099\u3057\u3044",
        "\u3044\u305F\u3099\u3044",
        "\u3044\u305F\u3099\u304F",
        "\u3044\u305F\u3059\u3099\u3089",
        "\u3044\u305F\u307F",
        "\u3044\u305F\u308A\u3042",
        "\u3044\u3061\u304A\u3046",
        "\u3044\u3061\u3057\u3099",
        "\u3044\u3061\u3068\u3099",
        "\u3044\u3061\u306F\u3099",
        "\u3044\u3061\u3075\u3099",
        "\u3044\u3061\u308A\u3085\u3046",
        "\u3044\u3064\u304B",
        "\u3044\u3063\u3057\u3085\u3093",
        "\u3044\u3063\u305B\u3044",
        "\u3044\u3063\u305D\u3046",
        "\u3044\u3063\u305F\u3093",
        "\u3044\u3063\u3061",
        "\u3044\u3063\u3066\u3044",
        "\u3044\u3063\u307B\u309A\u3046",
        "\u3044\u3066\u3055\u3099",
        "\u3044\u3066\u3093",
        "\u3044\u3068\u3099\u3046",
        "\u3044\u3068\u3053",
        "\u3044\u306A\u3044",
        "\u3044\u306A\u304B",
        "\u3044\u306D\u3080\u308A",
        "\u3044\u306E\u3061",
        "\u3044\u306E\u308B",
        "\u3044\u306F\u3064",
        "\u3044\u306F\u3099\u308B",
        "\u3044\u306F\u3093",
        "\u3044\u3072\u3099\u304D",
        "\u3044\u3072\u3093",
        "\u3044\u3075\u304F",
        "\u3044\u3078\u3093",
        "\u3044\u307B\u3046",
        "\u3044\u307F\u3093",
        "\u3044\u3082\u3046\u3068",
        "\u3044\u3082\u305F\u308C",
        "\u3044\u3082\u308A",
        "\u3044\u3084\u304B\u3099\u308B",
        "\u3044\u3084\u3059",
        "\u3044\u3088\u304B\u3093",
        "\u3044\u3088\u304F",
        "\u3044\u3089\u3044",
        "\u3044\u3089\u3059\u3068",
        "\u3044\u308A\u304F\u3099\u3061",
        "\u3044\u308A\u3087\u3046",
        "\u3044\u308C\u3044",
        "\u3044\u308C\u3082\u306E",
        "\u3044\u308C\u308B",
        "\u3044\u308D\u3048\u3093\u3072\u309A\u3064",
        "\u3044\u308F\u3044",
        "\u3044\u308F\u3046",
        "\u3044\u308F\u304B\u3093",
        "\u3044\u308F\u306F\u3099",
        "\u3044\u308F\u3086\u308B",
        "\u3044\u3093\u3051\u3099\u3093\u307E\u3081",
        "\u3044\u3093\u3055\u3064",
        "\u3044\u3093\u3057\u3087\u3046",
        "\u3044\u3093\u3088\u3046",
        "\u3046\u3048\u304D",
        "\u3046\u3048\u308B",
        "\u3046\u304A\u3055\u3099",
        "\u3046\u304B\u3099\u3044",
        "\u3046\u304B\u3075\u3099",
        "\u3046\u304B\u3078\u3099\u308B",
        "\u3046\u304D\u308F",
        "\u3046\u304F\u3089\u3044\u306A",
        "\u3046\u304F\u308C\u308C",
        "\u3046\u3051\u305F\u307E\u308F\u308B",
        "\u3046\u3051\u3064\u3051",
        "\u3046\u3051\u3068\u308B",
        "\u3046\u3051\u3082\u3064",
        "\u3046\u3051\u308B",
        "\u3046\u3053\u3099\u304B\u3059",
        "\u3046\u3053\u3099\u304F",
        "\u3046\u3053\u3093",
        "\u3046\u3055\u304D\u3099",
        "\u3046\u3057\u306A\u3046",
        "\u3046\u3057\u308D\u304B\u3099\u307F",
        "\u3046\u3059\u3044",
        "\u3046\u3059\u304D\u3099",
        "\u3046\u3059\u304F\u3099\u3089\u3044",
        "\u3046\u3059\u3081\u308B",
        "\u3046\u305B\u3064",
        "\u3046\u3061\u3042\u308F\u305B",
        "\u3046\u3061\u304B\u3099\u308F",
        "\u3046\u3061\u304D",
        "\u3046\u3061\u3085\u3046",
        "\u3046\u3063\u304B\u308A",
        "\u3046\u3064\u304F\u3057\u3044",
        "\u3046\u3063\u305F\u3048\u308B",
        "\u3046\u3064\u308B",
        "\u3046\u3068\u3099\u3093",
        "\u3046\u306A\u304D\u3099",
        "\u3046\u306A\u3057\u3099",
        "\u3046\u306A\u3059\u3099\u304F",
        "\u3046\u306A\u308B",
        "\u3046\u306D\u308B",
        "\u3046\u306E\u3046",
        "\u3046\u3075\u3099\u3051\u3099",
        "\u3046\u3075\u3099\u3053\u3099\u3048",
        "\u3046\u307E\u308C\u308B",
        "\u3046\u3081\u308B",
        "\u3046\u3082\u3046",
        "\u3046\u3084\u307E\u3046",
        "\u3046\u3088\u304F",
        "\u3046\u3089\u304B\u3099\u3048\u3059",
        "\u3046\u3089\u304F\u3099\u3061",
        "\u3046\u3089\u306A\u3044",
        "\u3046\u308A\u3042\u3051\u3099",
        "\u3046\u308A\u304D\u308C",
        "\u3046\u308B\u3055\u3044",
        "\u3046\u308C\u3057\u3044",
        "\u3046\u308C\u3086\u304D",
        "\u3046\u308C\u308B",
        "\u3046\u308D\u3053",
        "\u3046\u308F\u304D",
        "\u3046\u308F\u3055",
        "\u3046\u3093\u3053\u3046",
        "\u3046\u3093\u3061\u3093",
        "\u3046\u3093\u3066\u3093",
        "\u3046\u3093\u3068\u3099\u3046",
        "\u3048\u3044\u3048\u3093",
        "\u3048\u3044\u304B\u3099",
        "\u3048\u3044\u304D\u3087\u3046",
        "\u3048\u3044\u3053\u3099",
        "\u3048\u3044\u305B\u3044",
        "\u3048\u3044\u3075\u3099\u3093",
        "\u3048\u3044\u3088\u3046",
        "\u3048\u3044\u308F",
        "\u3048\u304A\u308A",
        "\u3048\u304B\u3099\u304A",
        "\u3048\u304B\u3099\u304F",
        "\u3048\u304D\u305F\u3044",
        "\u3048\u304F\u305B\u308B",
        "\u3048\u3057\u3083\u304F",
        "\u3048\u3059\u3066",
        "\u3048\u3064\u3089\u3093",
        "\u3048\u306E\u304F\u3099",
        "\u3048\u307B\u3046\u307E\u304D",
        "\u3048\u307B\u3093",
        "\u3048\u307E\u304D",
        "\u3048\u3082\u3057\u3099",
        "\u3048\u3082\u306E",
        "\u3048\u3089\u3044",
        "\u3048\u3089\u3075\u3099",
        "\u3048\u308A\u3042",
        "\u3048\u3093\u3048\u3093",
        "\u3048\u3093\u304B\u3044",
        "\u3048\u3093\u304D\u3099",
        "\u3048\u3093\u3051\u3099\u304D",
        "\u3048\u3093\u3057\u3085\u3046",
        "\u3048\u3093\u305B\u3099\u3064",
        "\u3048\u3093\u305D\u304F",
        "\u3048\u3093\u3061\u3087\u3046",
        "\u3048\u3093\u3068\u3064",
        "\u304A\u3044\u304B\u3051\u308B",
        "\u304A\u3044\u3053\u3059",
        "\u304A\u3044\u3057\u3044",
        "\u304A\u3044\u3064\u304F",
        "\u304A\u3046\u3048\u3093",
        "\u304A\u3046\u3055\u307E",
        "\u304A\u3046\u3057\u3099",
        "\u304A\u3046\u305B\u3064",
        "\u304A\u3046\u305F\u3044",
        "\u304A\u3046\u3075\u304F",
        "\u304A\u3046\u3078\u3099\u3044",
        "\u304A\u3046\u3088\u3046",
        "\u304A\u3048\u308B",
        "\u304A\u304A\u3044",
        "\u304A\u304A\u3046",
        "\u304A\u304A\u3068\u3099\u304A\u308A",
        "\u304A\u304A\u3084",
        "\u304A\u304A\u3088\u305D",
        "\u304A\u304B\u3048\u308A",
        "\u304A\u304B\u3059\u3099",
        "\u304A\u304B\u3099\u3080",
        "\u304A\u304B\u308F\u308A",
        "\u304A\u304D\u3099\u306A\u3046",
        "\u304A\u304D\u308B",
        "\u304A\u304F\u3055\u307E",
        "\u304A\u304F\u3057\u3099\u3087\u3046",
        "\u304A\u304F\u308A\u304B\u3099\u306A",
        "\u304A\u304F\u308B",
        "\u304A\u304F\u308C\u308B",
        "\u304A\u3053\u3059",
        "\u304A\u3053\u306A\u3046",
        "\u304A\u3053\u308B",
        "\u304A\u3055\u3048\u308B",
        "\u304A\u3055\u306A\u3044",
        "\u304A\u3055\u3081\u308B",
        "\u304A\u3057\u3044\u308C",
        "\u304A\u3057\u3048\u308B",
        "\u304A\u3057\u3099\u304D\u3099",
        "\u304A\u3057\u3099\u3055\u3093",
        "\u304A\u3057\u3083\u308C",
        "\u304A\u305D\u3089\u304F",
        "\u304A\u305D\u308F\u308B",
        "\u304A\u305F\u304B\u3099\u3044",
        "\u304A\u305F\u304F",
        "\u304A\u305F\u3099\u3084\u304B",
        "\u304A\u3061\u3064\u304F",
        "\u304A\u3063\u3068",
        "\u304A\u3064\u308A",
        "\u304A\u3066\u3099\u304B\u3051",
        "\u304A\u3068\u3057\u3082\u306E",
        "\u304A\u3068\u306A\u3057\u3044",
        "\u304A\u3068\u3099\u308A",
        "\u304A\u3068\u3099\u308D\u304B\u3059",
        "\u304A\u306F\u3099\u3055\u3093",
        "\u304A\u307E\u3044\u308A",
        "\u304A\u3081\u3066\u3099\u3068\u3046",
        "\u304A\u3082\u3044\u3066\u3099",
        "\u304A\u3082\u3046",
        "\u304A\u3082\u305F\u3044",
        "\u304A\u3082\u3061\u3083",
        "\u304A\u3084\u3064",
        "\u304A\u3084\u3086\u3072\u3099",
        "\u304A\u3088\u307B\u3099\u3059",
        "\u304A\u3089\u3093\u305F\u3099",
        "\u304A\u308D\u3059",
        "\u304A\u3093\u304B\u3099\u304F",
        "\u304A\u3093\u3051\u3044",
        "\u304A\u3093\u3057\u3083",
        "\u304A\u3093\u305B\u3093",
        "\u304A\u3093\u305F\u3099\u3093",
        "\u304A\u3093\u3061\u3085\u3046",
        "\u304A\u3093\u3068\u3099\u3051\u3044",
        "\u304B\u3042\u3064",
        "\u304B\u3044\u304B\u3099",
        "\u304B\u3099\u3044\u304D",
        "\u304B\u3099\u3044\u3051\u3093",
        "\u304B\u3099\u3044\u3053\u3046",
        "\u304B\u3044\u3055\u3064",
        "\u304B\u3044\u3057\u3083",
        "\u304B\u3044\u3059\u3044\u3088\u304F",
        "\u304B\u3044\u305B\u3099\u3093",
        "\u304B\u3044\u305D\u3099\u3046\u3068\u3099",
        "\u304B\u3044\u3064\u3046",
        "\u304B\u3044\u3066\u3093",
        "\u304B\u3044\u3068\u3046",
        "\u304B\u3044\u3075\u304F",
        "\u304B\u3099\u3044\u3078\u304D",
        "\u304B\u3044\u307B\u3046",
        "\u304B\u3044\u3088\u3046",
        "\u304B\u3099\u3044\u3089\u3044",
        "\u304B\u3044\u308F",
        "\u304B\u3048\u308B",
        "\u304B\u304A\u308A",
        "\u304B\u304B\u3048\u308B",
        "\u304B\u304B\u3099\u304F",
        "\u304B\u304B\u3099\u3057",
        "\u304B\u304B\u3099\u307F",
        "\u304B\u304F\u3053\u3099",
        "\u304B\u304F\u3068\u304F",
        "\u304B\u3055\u3099\u308B",
        "\u304B\u3099\u305D\u3099\u3046",
        "\u304B\u305F\u3044",
        "\u304B\u305F\u3061",
        "\u304B\u3099\u3061\u3087\u3046",
        "\u304B\u3099\u3063\u304D\u3085\u3046",
        "\u304B\u3099\u3063\u3053\u3046",
        "\u304B\u3099\u3063\u3055\u3093",
        "\u304B\u3099\u3063\u3057\u3087\u3046",
        "\u304B\u306A\u3055\u3099\u308F\u3057",
        "\u304B\u306E\u3046",
        "\u304B\u3099\u306F\u304F",
        "\u304B\u3075\u3099\u304B",
        "\u304B\u307B\u3046",
        "\u304B\u307B\u3053\u3099",
        "\u304B\u307E\u3046",
        "\u304B\u307E\u307B\u3099\u3053",
        "\u304B\u3081\u308C\u304A\u3093",
        "\u304B\u3086\u3044",
        "\u304B\u3088\u3046\u3072\u3099",
        "\u304B\u3089\u3044",
        "\u304B\u308B\u3044",
        "\u304B\u308D\u3046",
        "\u304B\u308F\u304F",
        "\u304B\u308F\u3089",
        "\u304B\u3099\u3093\u304B",
        "\u304B\u3093\u3051\u3044",
        "\u304B\u3093\u3053\u3046",
        "\u304B\u3093\u3057\u3083",
        "\u304B\u3093\u305D\u3046",
        "\u304B\u3093\u305F\u3093",
        "\u304B\u3093\u3061",
        "\u304B\u3099\u3093\u306F\u3099\u308B",
        "\u304D\u3042\u3044",
        "\u304D\u3042\u3064",
        "\u304D\u3044\u308D",
        "\u304D\u3099\u3044\u3093",
        "\u304D\u3046\u3044",
        "\u304D\u3046\u3093",
        "\u304D\u3048\u308B",
        "\u304D\u304A\u3046",
        "\u304D\u304A\u304F",
        "\u304D\u304A\u3061",
        "\u304D\u304A\u3093",
        "\u304D\u304B\u3044",
        "\u304D\u304B\u304F",
        "\u304D\u304B\u3093\u3057\u3083",
        "\u304D\u304D\u3066",
        "\u304D\u304F\u306F\u3099\u308A",
        "\u304D\u304F\u3089\u3051\u3099",
        "\u304D\u3051\u3093\u305B\u3044",
        "\u304D\u3053\u3046",
        "\u304D\u3053\u3048\u308B",
        "\u304D\u3053\u304F",
        "\u304D\u3055\u3044",
        "\u304D\u3055\u304F",
        "\u304D\u3055\u307E",
        "\u304D\u3055\u3089\u304D\u3099",
        "\u304D\u3099\u3057\u3099\u304B\u304B\u3099\u304F",
        "\u304D\u3099\u3057\u304D",
        "\u304D\u3099\u3057\u3099\u305F\u3044\u3051\u3093",
        "\u304D\u3099\u3057\u3099\u306B\u3063\u3066\u3044",
        "\u304D\u3099\u3057\u3099\u3085\u3064\u3057\u3083",
        "\u304D\u3059\u3046",
        "\u304D\u305B\u3044",
        "\u304D\u305B\u304D",
        "\u304D\u305B\u3064",
        "\u304D\u305D\u3046",
        "\u304D\u305D\u3099\u304F",
        "\u304D\u305D\u3099\u3093",
        "\u304D\u305F\u3048\u308B",
        "\u304D\u3061\u3087\u3046",
        "\u304D\u3064\u3048\u3093",
        "\u304D\u3099\u3063\u3061\u308A",
        "\u304D\u3064\u3064\u304D",
        "\u304D\u3064\u306D",
        "\u304D\u3066\u3044",
        "\u304D\u3068\u3099\u3046",
        "\u304D\u3068\u3099\u304F",
        "\u304D\u306A\u3044",
        "\u304D\u306A\u304B\u3099",
        "\u304D\u306A\u3053",
        "\u304D\u306C\u3053\u3099\u3057",
        "\u304D\u306D\u3093",
        "\u304D\u306E\u3046",
        "\u304D\u306E\u3057\u305F",
        "\u304D\u306F\u304F",
        "\u304D\u3072\u3099\u3057\u3044",
        "\u304D\u3072\u3093",
        "\u304D\u3075\u304F",
        "\u304D\u3075\u3099\u3093",
        "\u304D\u307B\u3099\u3046",
        "\u304D\u307B\u3093",
        "\u304D\u307E\u308B",
        "\u304D\u307F\u3064",
        "\u304D\u3080\u3059\u3099\u304B\u3057\u3044",
        "\u304D\u3081\u308B",
        "\u304D\u3082\u305F\u3099\u3081\u3057",
        "\u304D\u3082\u3061",
        "\u304D\u3082\u306E",
        "\u304D\u3083\u304F",
        "\u304D\u3084\u304F",
        "\u304D\u3099\u3085\u3046\u306B\u304F",
        "\u304D\u3088\u3046",
        "\u304D\u3087\u3046\u308A\u3085\u3046",
        "\u304D\u3089\u3044",
        "\u304D\u3089\u304F",
        "\u304D\u308A\u3093",
        "\u304D\u308C\u3044",
        "\u304D\u308C\u3064",
        "\u304D\u308D\u304F",
        "\u304D\u3099\u308D\u3093",
        "\u304D\u308F\u3081\u308B",
        "\u304D\u3099\u3093\u3044\u308D",
        "\u304D\u3093\u304B\u304F\u3057\u3099",
        "\u304D\u3093\u3057\u3099\u3087",
        "\u304D\u3093\u3088\u3046\u3072\u3099",
        "\u304F\u3099\u3042\u3044",
        "\u304F\u3044\u3059\u3099",
        "\u304F\u3046\u304B\u3093",
        "\u304F\u3046\u304D",
        "\u304F\u3046\u304F\u3099\u3093",
        "\u304F\u3046\u3053\u3046",
        "\u304F\u3099\u3046\u305B\u3044",
        "\u304F\u3046\u305D\u3046",
        "\u304F\u3099\u3046\u305F\u3089",
        "\u304F\u3046\u3075\u304F",
        "\u304F\u3046\u307B\u3099",
        "\u304F\u304B\u3093",
        "\u304F\u304D\u3087\u3046",
        "\u304F\u3051\u3099\u3093",
        "\u304F\u3099\u3053\u3046",
        "\u304F\u3055\u3044",
        "\u304F\u3055\u304D",
        "\u304F\u3055\u306F\u3099\u306A",
        "\u304F\u3055\u308B",
        "\u304F\u3057\u3083\u307F",
        "\u304F\u3057\u3087\u3046",
        "\u304F\u3059\u306E\u304D",
        "\u304F\u3059\u308A\u3086\u3072\u3099",
        "\u304F\u305B\u3051\u3099",
        "\u304F\u305B\u3093",
        "\u304F\u3099\u305F\u3044\u3066\u304D",
        "\u304F\u305F\u3099\u3055\u308B",
        "\u304F\u305F\u3072\u3099\u308C\u308B",
        "\u304F\u3061\u3053\u307F",
        "\u304F\u3061\u3055\u304D",
        "\u304F\u3064\u3057\u305F",
        "\u304F\u3099\u3063\u3059\u308A",
        "\u304F\u3064\u308D\u304F\u3099",
        "\u304F\u3068\u3046\u3066\u3093",
        "\u304F\u3068\u3099\u304F",
        "\u304F\u306A\u3093",
        "\u304F\u306D\u304F\u306D",
        "\u304F\u306E\u3046",
        "\u304F\u3075\u3046",
        "\u304F\u307F\u3042\u308F\u305B",
        "\u304F\u307F\u305F\u3066\u308B",
        "\u304F\u3081\u308B",
        "\u304F\u3084\u304F\u3057\u3087",
        "\u304F\u3089\u3059",
        "\u304F\u3089\u3078\u3099\u308B",
        "\u304F\u308B\u307E",
        "\u304F\u308C\u308B",
        "\u304F\u308D\u3046",
        "\u304F\u308F\u3057\u3044",
        "\u304F\u3099\u3093\u304B\u3093",
        "\u304F\u3099\u3093\u3057\u3087\u304F",
        "\u304F\u3099\u3093\u305F\u3044",
        "\u304F\u3099\u3093\u3066",
        "\u3051\u3042\u306A",
        "\u3051\u3044\u304B\u304F",
        "\u3051\u3044\u3051\u3093",
        "\u3051\u3044\u3053",
        "\u3051\u3044\u3055\u3064",
        "\u3051\u3099\u3044\u3057\u3099\u3085\u3064",
        "\u3051\u3044\u305F\u3044",
        "\u3051\u3099\u3044\u306E\u3046\u3057\u3099\u3093",
        "\u3051\u3044\u308C\u304D",
        "\u3051\u3044\u308D",
        "\u3051\u304A\u3068\u3059",
        "\u3051\u304A\u308A\u3082\u306E",
        "\u3051\u3099\u304D\u304B",
        "\u3051\u3099\u304D\u3051\u3099\u3093",
        "\u3051\u3099\u304D\u305F\u3099\u3093",
        "\u3051\u3099\u304D\u3061\u3093",
        "\u3051\u3099\u304D\u3068\u3064",
        "\u3051\u3099\u304D\u306F",
        "\u3051\u3099\u304D\u3084\u304F",
        "\u3051\u3099\u3053\u3046",
        "\u3051\u3099\u3053\u304F\u3057\u3099\u3087\u3046",
        "\u3051\u3099\u3055\u3099\u3044",
        "\u3051\u3055\u304D",
        "\u3051\u3099\u3055\u3099\u3093",
        "\u3051\u3057\u304D",
        "\u3051\u3057\u3053\u3099\u3080",
        "\u3051\u3057\u3087\u3046",
        "\u3051\u3099\u3059\u3068",
        "\u3051\u305F\u306F\u3099",
        "\u3051\u3061\u3083\u3063\u3075\u309A",
        "\u3051\u3061\u3089\u3059",
        "\u3051\u3064\u3042\u3064",
        "\u3051\u3064\u3044",
        "\u3051\u3064\u3048\u304D",
        "\u3051\u3063\u3053\u3093",
        "\u3051\u3064\u3057\u3099\u3087",
        "\u3051\u3063\u305B\u304D",
        "\u3051\u3063\u3066\u3044",
        "\u3051\u3064\u307E\u3064",
        "\u3051\u3099\u3064\u3088\u3046\u3072\u3099",
        "\u3051\u3099\u3064\u308C\u3044",
        "\u3051\u3064\u308D\u3093",
        "\u3051\u3099\u3068\u3099\u304F",
        "\u3051\u3068\u306F\u3099\u3059",
        "\u3051\u3068\u308B",
        "\u3051\u306A\u3051\u3099",
        "\u3051\u306A\u3059",
        "\u3051\u306A\u307F",
        "\u3051\u306C\u304D",
        "\u3051\u3099\u306D\u3064",
        "\u3051\u306D\u3093",
        "\u3051\u306F\u3044",
        "\u3051\u3099\u3072\u3093",
        "\u3051\u3075\u3099\u304B\u3044",
        "\u3051\u3099\u307B\u3099\u304F",
        "\u3051\u307E\u308A",
        "\u3051\u307F\u304B\u308B",
        "\u3051\u3080\u3057",
        "\u3051\u3080\u308A",
        "\u3051\u3082\u306E",
        "\u3051\u3089\u3044",
        "\u3051\u308D\u3051\u308D",
        "\u3051\u308F\u3057\u3044",
        "\u3051\u3093\u3044",
        "\u3051\u3093\u3048\u3064",
        "\u3051\u3093\u304A",
        "\u3051\u3093\u304B",
        "\u3051\u3099\u3093\u304D",
        "\u3051\u3093\u3051\u3099\u3093",
        "\u3051\u3093\u3053\u3046",
        "\u3051\u3093\u3055\u304F",
        "\u3051\u3093\u3057\u3085\u3046",
        "\u3051\u3093\u3059\u3046",
        "\u3051\u3099\u3093\u305D\u3046",
        "\u3051\u3093\u3061\u304F",
        "\u3051\u3093\u3066\u3044",
        "\u3051\u3093\u3068\u3046",
        "\u3051\u3093\u306A\u3044",
        "\u3051\u3093\u306B\u3093",
        "\u3051\u3099\u3093\u3075\u3099\u3064",
        "\u3051\u3093\u307E",
        "\u3051\u3093\u307F\u3093",
        "\u3051\u3093\u3081\u3044",
        "\u3051\u3093\u3089\u3093",
        "\u3051\u3093\u308A",
        "\u3053\u3042\u304F\u307E",
        "\u3053\u3044\u306C",
        "\u3053\u3044\u3072\u3099\u3068",
        "\u3053\u3099\u3046\u3044",
        "\u3053\u3046\u3048\u3093",
        "\u3053\u3046\u304A\u3093",
        "\u3053\u3046\u304B\u3093",
        "\u3053\u3099\u3046\u304D\u3085\u3046",
        "\u3053\u3099\u3046\u3051\u3044",
        "\u3053\u3046\u3053\u3046",
        "\u3053\u3046\u3055\u3044",
        "\u3053\u3046\u3057\u3099",
        "\u3053\u3046\u3059\u3044",
        "\u3053\u3099\u3046\u305B\u3044",
        "\u3053\u3046\u305D\u304F",
        "\u3053\u3046\u305F\u3044",
        "\u3053\u3046\u3061\u3083",
        "\u3053\u3046\u3064\u3046",
        "\u3053\u3046\u3066\u3044",
        "\u3053\u3046\u3068\u3099\u3046",
        "\u3053\u3046\u306A\u3044",
        "\u3053\u3046\u306F\u3044",
        "\u3053\u3099\u3046\u307B\u3046",
        "\u3053\u3099\u3046\u307E\u3093",
        "\u3053\u3046\u3082\u304F",
        "\u3053\u3046\u308A\u3064",
        "\u3053\u3048\u308B",
        "\u3053\u304A\u308A",
        "\u3053\u3099\u304B\u3044",
        "\u3053\u3099\u304B\u3099\u3064",
        "\u3053\u3099\u304B\u3093",
        "\u3053\u304F\u3053\u3099",
        "\u3053\u304F\u3055\u3044",
        "\u3053\u304F\u3068\u3046",
        "\u3053\u304F\u306A\u3044",
        "\u3053\u304F\u306F\u304F",
        "\u3053\u304F\u3099\u307E",
        "\u3053\u3051\u3044",
        "\u3053\u3051\u308B",
        "\u3053\u3053\u306E\u304B",
        "\u3053\u3053\u308D",
        "\u3053\u3055\u3081",
        "\u3053\u3057\u3064",
        "\u3053\u3059\u3046",
        "\u3053\u305B\u3044",
        "\u3053\u305B\u304D",
        "\u3053\u305B\u3099\u3093",
        "\u3053\u305D\u305F\u3099\u3066",
        "\u3053\u305F\u3044",
        "\u3053\u305F\u3048\u308B",
        "\u3053\u305F\u3064",
        "\u3053\u3061\u3087\u3046",
        "\u3053\u3063\u304B",
        "\u3053\u3064\u3053\u3064",
        "\u3053\u3064\u306F\u3099\u3093",
        "\u3053\u3064\u3075\u3099",
        "\u3053\u3066\u3044",
        "\u3053\u3066\u3093",
        "\u3053\u3068\u304B\u3099\u3089",
        "\u3053\u3068\u3057",
        "\u3053\u3068\u306F\u3099",
        "\u3053\u3068\u308A",
        "\u3053\u306A\u3053\u3099\u306A",
        "\u3053\u306D\u3053\u306D",
        "\u3053\u306E\u307E\u307E",
        "\u3053\u306E\u307F",
        "\u3053\u306E\u3088",
        "\u3053\u3099\u306F\u3093",
        "\u3053\u3072\u3064\u3057\u3099",
        "\u3053\u3075\u3046",
        "\u3053\u3075\u3093",
        "\u3053\u307B\u3099\u308C\u308B",
        "\u3053\u3099\u307E\u3042\u3075\u3099\u3089",
        "\u3053\u307E\u304B\u3044",
        "\u3053\u3099\u307E\u3059\u308A",
        "\u3053\u307E\u3064\u306A",
        "\u3053\u307E\u308B",
        "\u3053\u3080\u304D\u3099\u3053",
        "\u3053\u3082\u3057\u3099",
        "\u3053\u3082\u3061",
        "\u3053\u3082\u306E",
        "\u3053\u3082\u3093",
        "\u3053\u3084\u304F",
        "\u3053\u3084\u307E",
        "\u3053\u3086\u3046",
        "\u3053\u3086\u3072\u3099",
        "\u3053\u3088\u3044",
        "\u3053\u3088\u3046",
        "\u3053\u308A\u308B",
        "\u3053\u308C\u304F\u3057\u3087\u3093",
        "\u3053\u308D\u3063\u3051",
        "\u3053\u308F\u3082\u3066",
        "\u3053\u308F\u308C\u308B",
        "\u3053\u3093\u3044\u3093",
        "\u3053\u3093\u304B\u3044",
        "\u3053\u3093\u304D",
        "\u3053\u3093\u3057\u3085\u3046",
        "\u3053\u3093\u3059\u3044",
        "\u3053\u3093\u305F\u3099\u3066",
        "\u3053\u3093\u3068\u3093",
        "\u3053\u3093\u306A\u3093",
        "\u3053\u3093\u3072\u3099\u306B",
        "\u3053\u3093\u307B\u309A\u3093",
        "\u3053\u3093\u307E\u3051",
        "\u3053\u3093\u3084",
        "\u3053\u3093\u308C\u3044",
        "\u3053\u3093\u308F\u304F",
        "\u3055\u3099\u3044\u3048\u304D",
        "\u3055\u3044\u304B\u3044",
        "\u3055\u3044\u304D\u3093",
        "\u3055\u3099\u3044\u3051\u3099\u3093",
        "\u3055\u3099\u3044\u3053",
        "\u3055\u3044\u3057\u3087",
        "\u3055\u3044\u305B\u3044",
        "\u3055\u3099\u3044\u305F\u304F",
        "\u3055\u3099\u3044\u3061\u3085\u3046",
        "\u3055\u3044\u3066\u304D",
        "\u3055\u3099\u3044\u308A\u3087\u3046",
        "\u3055\u3046\u306A",
        "\u3055\u304B\u3044\u3057",
        "\u3055\u304B\u3099\u3059",
        "\u3055\u304B\u306A",
        "\u3055\u304B\u307F\u3061",
        "\u3055\u304B\u3099\u308B",
        "\u3055\u304D\u3099\u3087\u3046",
        "\u3055\u304F\u3057",
        "\u3055\u304F\u3072\u3093",
        "\u3055\u304F\u3089",
        "\u3055\u3053\u304F",
        "\u3055\u3053\u3064",
        "\u3055\u3059\u3099\u304B\u308B",
        "\u3055\u3099\u305B\u304D",
        "\u3055\u305F\u3093",
        "\u3055\u3064\u3048\u3044",
        "\u3055\u3099\u3064\u304A\u3093",
        "\u3055\u3099\u3063\u304B",
        "\u3055\u3099\u3064\u304B\u3099\u304F",
        "\u3055\u3063\u304D\u3087\u304F",
        "\u3055\u3099\u3063\u3057",
        "\u3055\u3064\u3057\u3099\u3093",
        "\u3055\u3099\u3063\u305D\u3046",
        "\u3055\u3064\u305F\u306F\u3099",
        "\u3055\u3064\u307E\u3044\u3082",
        "\u3055\u3066\u3044",
        "\u3055\u3068\u3044\u3082",
        "\u3055\u3068\u3046",
        "\u3055\u3068\u304A\u3084",
        "\u3055\u3068\u3057",
        "\u3055\u3068\u308B",
        "\u3055\u306E\u3046",
        "\u3055\u306F\u3099\u304F",
        "\u3055\u3072\u3099\u3057\u3044",
        "\u3055\u3078\u3099\u3064",
        "\u3055\u307B\u3046",
        "\u3055\u307B\u3068\u3099",
        "\u3055\u307E\u3059",
        "\u3055\u307F\u3057\u3044",
        "\u3055\u307F\u305F\u3099\u308C",
        "\u3055\u3080\u3051",
        "\u3055\u3081\u308B",
        "\u3055\u3084\u3048\u3093\u3068\u3099\u3046",
        "\u3055\u3086\u3046",
        "\u3055\u3088\u3046",
        "\u3055\u3088\u304F",
        "\u3055\u3089\u305F\u3099",
        "\u3055\u3099\u308B\u305D\u306F\u3099",
        "\u3055\u308F\u3084\u304B",
        "\u3055\u308F\u308B",
        "\u3055\u3093\u3044\u3093",
        "\u3055\u3093\u304B",
        "\u3055\u3093\u304D\u3083\u304F",
        "\u3055\u3093\u3053\u3046",
        "\u3055\u3093\u3055\u3044",
        "\u3055\u3099\u3093\u3057\u3087",
        "\u3055\u3093\u3059\u3046",
        "\u3055\u3093\u305B\u3044",
        "\u3055\u3093\u305D",
        "\u3055\u3093\u3061",
        "\u3055\u3093\u307E",
        "\u3055\u3093\u307F",
        "\u3055\u3093\u3089\u3093",
        "\u3057\u3042\u3044",
        "\u3057\u3042\u3051\u3099",
        "\u3057\u3042\u3055\u3063\u3066",
        "\u3057\u3042\u308F\u305B",
        "\u3057\u3044\u304F",
        "\u3057\u3044\u3093",
        "\u3057\u3046\u3061",
        "\u3057\u3048\u3044",
        "\u3057\u304A\u3051",
        "\u3057\u304B\u3044",
        "\u3057\u304B\u304F",
        "\u3057\u3099\u304B\u3093",
        "\u3057\u3053\u3099\u3068",
        "\u3057\u3059\u3046",
        "\u3057\u3099\u305F\u3099\u3044",
        "\u3057\u305F\u3046\u3051",
        "\u3057\u305F\u304D\u3099",
        "\u3057\u305F\u3066",
        "\u3057\u305F\u307F",
        "\u3057\u3061\u3087\u3046",
        "\u3057\u3061\u308A\u3093",
        "\u3057\u3063\u304B\u308A",
        "\u3057\u3064\u3057\u3099",
        "\u3057\u3064\u3082\u3093",
        "\u3057\u3066\u3044",
        "\u3057\u3066\u304D",
        "\u3057\u3066\u3064",
        "\u3057\u3099\u3066\u3093",
        "\u3057\u3099\u3068\u3099\u3046",
        "\u3057\u306A\u304D\u3099\u308C",
        "\u3057\u306A\u3082\u306E",
        "\u3057\u306A\u3093",
        "\u3057\u306D\u307E",
        "\u3057\u306D\u3093",
        "\u3057\u306E\u304F\u3099",
        "\u3057\u306E\u3075\u3099",
        "\u3057\u306F\u3044",
        "\u3057\u306F\u3099\u304B\u308A",
        "\u3057\u306F\u3064",
        "\u3057\u306F\u3089\u3044",
        "\u3057\u306F\u3093",
        "\u3057\u3072\u3087\u3046",
        "\u3057\u3075\u304F",
        "\u3057\u3099\u3075\u3099\u3093",
        "\u3057\u3078\u3044",
        "\u3057\u307B\u3046",
        "\u3057\u307B\u3093",
        "\u3057\u307E\u3046",
        "\u3057\u307E\u308B",
        "\u3057\u307F\u3093",
        "\u3057\u3080\u3051\u308B",
        "\u3057\u3099\u3080\u3057\u3087",
        "\u3057\u3081\u3044",
        "\u3057\u3081\u308B",
        "\u3057\u3082\u3093",
        "\u3057\u3083\u3044\u3093",
        "\u3057\u3083\u3046\u3093",
        "\u3057\u3083\u304A\u3093",
        "\u3057\u3099\u3083\u304B\u3099\u3044\u3082",
        "\u3057\u3084\u304F\u3057\u3087",
        "\u3057\u3083\u304F\u307B\u3046",
        "\u3057\u3083\u3051\u3093",
        "\u3057\u3083\u3053",
        "\u3057\u3083\u3055\u3099\u3044",
        "\u3057\u3083\u3057\u3093",
        "\u3057\u3083\u305B\u3093",
        "\u3057\u3083\u305D\u3046",
        "\u3057\u3083\u305F\u3044",
        "\u3057\u3083\u3061\u3087\u3046",
        "\u3057\u3083\u3063\u304D\u3093",
        "\u3057\u3099\u3083\u307E",
        "\u3057\u3083\u308A\u3093",
        "\u3057\u3083\u308C\u3044",
        "\u3057\u3099\u3086\u3046",
        "\u3057\u3099\u3085\u3046\u3057\u3087",
        "\u3057\u3085\u304F\u306F\u304F",
        "\u3057\u3099\u3085\u3057\u3093",
        "\u3057\u3085\u3063\u305B\u304D",
        "\u3057\u3085\u307F",
        "\u3057\u3085\u3089\u306F\u3099",
        "\u3057\u3099\u3085\u3093\u306F\u3099\u3093",
        "\u3057\u3087\u3046\u304B\u3044",
        "\u3057\u3087\u304F\u305F\u304F",
        "\u3057\u3087\u3063\u3051\u3093",
        "\u3057\u3087\u3068\u3099\u3046",
        "\u3057\u3087\u3082\u3064",
        "\u3057\u3089\u305B\u308B",
        "\u3057\u3089\u3078\u3099\u308B",
        "\u3057\u3093\u304B",
        "\u3057\u3093\u3053\u3046",
        "\u3057\u3099\u3093\u3057\u3099\u3083",
        "\u3057\u3093\u305B\u3044\u3057\u3099",
        "\u3057\u3093\u3061\u304F",
        "\u3057\u3093\u308A\u3093",
        "\u3059\u3042\u3051\u3099",
        "\u3059\u3042\u3057",
        "\u3059\u3042\u306A",
        "\u3059\u3099\u3042\u3093",
        "\u3059\u3044\u3048\u3044",
        "\u3059\u3044\u304B",
        "\u3059\u3044\u3068\u3046",
        "\u3059\u3099\u3044\u3075\u3099\u3093",
        "\u3059\u3044\u3088\u3046\u3072\u3099",
        "\u3059\u3046\u304B\u3099\u304F",
        "\u3059\u3046\u3057\u3099\u3064",
        "\u3059\u3046\u305B\u3093",
        "\u3059\u304A\u3068\u3099\u308A",
        "\u3059\u304D\u307E",
        "\u3059\u304F\u3046",
        "\u3059\u304F\u306A\u3044",
        "\u3059\u3051\u308B",
        "\u3059\u3053\u3099\u3044",
        "\u3059\u3053\u3057",
        "\u3059\u3099\u3055\u3093",
        "\u3059\u3059\u3099\u3057\u3044",
        "\u3059\u3059\u3080",
        "\u3059\u3059\u3081\u308B",
        "\u3059\u3063\u304B\u308A",
        "\u3059\u3099\u3063\u3057\u308A",
        "\u3059\u3099\u3063\u3068",
        "\u3059\u3066\u304D",
        "\u3059\u3066\u308B",
        "\u3059\u306D\u308B",
        "\u3059\u306E\u3053",
        "\u3059\u306F\u305F\u3099",
        "\u3059\u306F\u3099\u3089\u3057\u3044",
        "\u3059\u3099\u3072\u3087\u3046",
        "\u3059\u3099\u3075\u3099\u306C\u308C",
        "\u3059\u3075\u3099\u308A",
        "\u3059\u3075\u308C",
        "\u3059\u3078\u3099\u3066",
        "\u3059\u3078\u3099\u308B",
        "\u3059\u3099\u307B\u3046",
        "\u3059\u307B\u3099\u3093",
        "\u3059\u307E\u3044",
        "\u3059\u3081\u3057",
        "\u3059\u3082\u3046",
        "\u3059\u3084\u304D",
        "\u3059\u3089\u3059\u3089",
        "\u3059\u308B\u3081",
        "\u3059\u308C\u3061\u304B\u3099\u3046",
        "\u3059\u308D\u3063\u3068",
        "\u3059\u308F\u308B",
        "\u3059\u3093\u305B\u3099\u3093",
        "\u3059\u3093\u307B\u309A\u3046",
        "\u305B\u3042\u3075\u3099\u3089",
        "\u305B\u3044\u304B\u3064",
        "\u305B\u3044\u3051\u3099\u3093",
        "\u305B\u3044\u3057\u3099",
        "\u305B\u3044\u3088\u3046",
        "\u305B\u304A\u3046",
        "\u305B\u304B\u3044\u304B\u3093",
        "\u305B\u304D\u306B\u3093",
        "\u305B\u304D\u3080",
        "\u305B\u304D\u3086",
        "\u305B\u304D\u3089\u3093\u3046\u3093",
        "\u305B\u3051\u3093",
        "\u305B\u3053\u3046",
        "\u305B\u3059\u3057\u3099",
        "\u305B\u305F\u3044",
        "\u305B\u305F\u3051",
        "\u305B\u3063\u304B\u304F",
        "\u305B\u3063\u304D\u3083\u304F",
        "\u305B\u3099\u3063\u304F",
        "\u305B\u3063\u3051\u3093",
        "\u305B\u3063\u3053\u3064",
        "\u305B\u3063\u3055\u305F\u304F\u307E",
        "\u305B\u3064\u305D\u3099\u304F",
        "\u305B\u3064\u305F\u3099\u3093",
        "\u305B\u3064\u3066\u3099\u3093",
        "\u305B\u3063\u306F\u309A\u3093",
        "\u305B\u3064\u3072\u3099",
        "\u305B\u3064\u3075\u3099\u3093",
        "\u305B\u3064\u3081\u3044",
        "\u305B\u3064\u308A\u3064",
        "\u305B\u306A\u304B",
        "\u305B\u306E\u3072\u3099",
        "\u305B\u306F\u306F\u3099",
        "\u305B\u3072\u3099\u308D",
        "\u305B\u307B\u3099\u306D",
        "\u305B\u307E\u3044",
        "\u305B\u307E\u308B",
        "\u305B\u3081\u308B",
        "\u305B\u3082\u305F\u308C",
        "\u305B\u308A\u3075",
        "\u305B\u3099\u3093\u3042\u304F",
        "\u305B\u3093\u3044",
        "\u305B\u3093\u3048\u3044",
        "\u305B\u3093\u304B",
        "\u305B\u3093\u304D\u3087",
        "\u305B\u3093\u304F",
        "\u305B\u3093\u3051\u3099\u3093",
        "\u305B\u3099\u3093\u3053\u3099",
        "\u305B\u3093\u3055\u3044",
        "\u305B\u3093\u3057\u3085",
        "\u305B\u3093\u3059\u3044",
        "\u305B\u3093\u305B\u3044",
        "\u305B\u3093\u305D\u3099",
        "\u305B\u3093\u305F\u304F",
        "\u305B\u3093\u3061\u3087\u3046",
        "\u305B\u3093\u3066\u3044",
        "\u305B\u3093\u3068\u3046",
        "\u305B\u3093\u306C\u304D",
        "\u305B\u3093\u306D\u3093",
        "\u305B\u3093\u306F\u309A\u3044",
        "\u305B\u3099\u3093\u3075\u3099",
        "\u305B\u3099\u3093\u307B\u309A\u3046",
        "\u305B\u3093\u3080",
        "\u305B\u3093\u3081\u3093\u3057\u3099\u3087",
        "\u305B\u3093\u3082\u3093",
        "\u305B\u3093\u3084\u304F",
        "\u305B\u3093\u3086\u3046",
        "\u305B\u3093\u3088\u3046",
        "\u305B\u3099\u3093\u3089",
        "\u305B\u3099\u3093\u308A\u3083\u304F",
        "\u305B\u3093\u308C\u3044",
        "\u305B\u3093\u308D",
        "\u305D\u3042\u304F",
        "\u305D\u3044\u3068\u3051\u3099\u308B",
        "\u305D\u3044\u306D",
        "\u305D\u3046\u304B\u3099\u3093\u304D\u3087\u3046",
        "\u305D\u3046\u304D",
        "\u305D\u3046\u3053\u3099",
        "\u305D\u3046\u3057\u3093",
        "\u305D\u3046\u305F\u3099\u3093",
        "\u305D\u3046\u306A\u3093",
        "\u305D\u3046\u3072\u3099",
        "\u305D\u3046\u3081\u3093",
        "\u305D\u3046\u308A",
        "\u305D\u3048\u3082\u306E",
        "\u305D\u3048\u3093",
        "\u305D\u304B\u3099\u3044",
        "\u305D\u3051\u3099\u304D",
        "\u305D\u3053\u3046",
        "\u305D\u3053\u305D\u3053",
        "\u305D\u3055\u3099\u3044",
        "\u305D\u3057\u306A",
        "\u305D\u305B\u3044",
        "\u305D\u305B\u3093",
        "\u305D\u305D\u304F\u3099",
        "\u305D\u305F\u3099\u3066\u308B",
        "\u305D\u3064\u3046",
        "\u305D\u3064\u3048\u3093",
        "\u305D\u3063\u304B\u3093",
        "\u305D\u3064\u304D\u3099\u3087\u3046",
        "\u305D\u3063\u3051\u3064",
        "\u305D\u3063\u3053\u3046",
        "\u305D\u3063\u305B\u3093",
        "\u305D\u3063\u3068",
        "\u305D\u3068\u304B\u3099\u308F",
        "\u305D\u3068\u3064\u3099\u3089",
        "\u305D\u306A\u3048\u308B",
        "\u305D\u306A\u305F",
        "\u305D\u3075\u307B\u3099",
        "\u305D\u307B\u3099\u304F",
        "\u305D\u307B\u3099\u308D",
        "\u305D\u307E\u3064",
        "\u305D\u307E\u308B",
        "\u305D\u3080\u304F",
        "\u305D\u3080\u308A\u3048",
        "\u305D\u3081\u308B",
        "\u305D\u3082\u305D\u3082",
        "\u305D\u3088\u304B\u305B\u3099",
        "\u305D\u3089\u307E\u3081",
        "\u305D\u308D\u3046",
        "\u305D\u3093\u304B\u3044",
        "\u305D\u3093\u3051\u3044",
        "\u305D\u3093\u3055\u3099\u3044",
        "\u305D\u3093\u3057\u3064",
        "\u305D\u3093\u305D\u3099\u304F",
        "\u305D\u3093\u3061\u3087\u3046",
        "\u305D\u3099\u3093\u3072\u3099",
        "\u305D\u3099\u3093\u3075\u3099\u3093",
        "\u305D\u3093\u307F\u3093",
        "\u305F\u3042\u3044",
        "\u305F\u3044\u3044\u3093",
        "\u305F\u3044\u3046\u3093",
        "\u305F\u3044\u3048\u304D",
        "\u305F\u3044\u304A\u3046",
        "\u305F\u3099\u3044\u304B\u3099\u304F",
        "\u305F\u3044\u304D",
        "\u305F\u3044\u304F\u3099\u3046",
        "\u305F\u3044\u3051\u3093",
        "\u305F\u3044\u3053",
        "\u305F\u3044\u3055\u3099\u3044",
        "\u305F\u3099\u3044\u3057\u3099\u3087\u3046\u3075\u3099",
        "\u305F\u3099\u3044\u3059\u304D",
        "\u305F\u3044\u305B\u3064",
        "\u305F\u3044\u305D\u3046",
        "\u305F\u3099\u3044\u305F\u3044",
        "\u305F\u3044\u3061\u3087\u3046",
        "\u305F\u3044\u3066\u3044",
        "\u305F\u3099\u3044\u3068\u3099\u3053\u308D",
        "\u305F\u3044\u306A\u3044",
        "\u305F\u3044\u306D\u3064",
        "\u305F\u3044\u306E\u3046",
        "\u305F\u3044\u306F\u3093",
        "\u305F\u3099\u3044\u3072\u3087\u3046",
        "\u305F\u3044\u3075\u3046",
        "\u305F\u3044\u3078\u3093",
        "\u305F\u3044\u307B",
        "\u305F\u3044\u307E\u3064\u306F\u3099\u306A",
        "\u305F\u3044\u307F\u3093\u304F\u3099",
        "\u305F\u3044\u3080",
        "\u305F\u3044\u3081\u3093",
        "\u305F\u3044\u3084\u304D",
        "\u305F\u3044\u3088\u3046",
        "\u305F\u3044\u3089",
        "\u305F\u3044\u308A\u3087\u304F",
        "\u305F\u3044\u308B",
        "\u305F\u3044\u308F\u3093",
        "\u305F\u3046\u3048",
        "\u305F\u3048\u308B",
        "\u305F\u304A\u3059",
        "\u305F\u304A\u308B",
        "\u305F\u304A\u308C\u308B",
        "\u305F\u304B\u3044",
        "\u305F\u304B\u306D",
        "\u305F\u304D\u3072\u3099",
        "\u305F\u304F\u3055\u3093",
        "\u305F\u3053\u304F",
        "\u305F\u3053\u3084\u304D",
        "\u305F\u3055\u3044",
        "\u305F\u3057\u3055\u3099\u3093",
        "\u305F\u3099\u3057\u3099\u3083\u308C",
        "\u305F\u3059\u3051\u308B",
        "\u305F\u3059\u3099\u3055\u308F\u308B",
        "\u305F\u305D\u304B\u3099\u308C",
        "\u305F\u305F\u304B\u3046",
        "\u305F\u305F\u304F",
        "\u305F\u305F\u3099\u3057\u3044",
        "\u305F\u305F\u307F",
        "\u305F\u3061\u306F\u3099\u306A",
        "\u305F\u3099\u3063\u304B\u3044",
        "\u305F\u3099\u3063\u304D\u3083\u304F",
        "\u305F\u3099\u3063\u3053",
        "\u305F\u3099\u3063\u3057\u3085\u3064",
        "\u305F\u3099\u3063\u305F\u3044",
        "\u305F\u3066\u308B",
        "\u305F\u3068\u3048\u308B",
        "\u305F\u306A\u306F\u3099\u305F",
        "\u305F\u306B\u3093",
        "\u305F\u306C\u304D",
        "\u305F\u306E\u3057\u307F",
        "\u305F\u306F\u3064",
        "\u305F\u3075\u3099\u3093",
        "\u305F\u3078\u3099\u308B",
        "\u305F\u307B\u3099\u3046",
        "\u305F\u307E\u3053\u3099",
        "\u305F\u307E\u308B",
        "\u305F\u3099\u3080\u308B",
        "\u305F\u3081\u3044\u304D",
        "\u305F\u3081\u3059",
        "\u305F\u3081\u308B",
        "\u305F\u3082\u3064",
        "\u305F\u3084\u3059\u3044",
        "\u305F\u3088\u308B",
        "\u305F\u3089\u3059",
        "\u305F\u308A\u304D\u307B\u3093\u304B\u3099\u3093",
        "\u305F\u308A\u3087\u3046",
        "\u305F\u308A\u308B",
        "\u305F\u308B\u3068",
        "\u305F\u308C\u308B",
        "\u305F\u308C\u3093\u3068",
        "\u305F\u308D\u3063\u3068",
        "\u305F\u308F\u3080\u308C\u308B",
        "\u305F\u3099\u3093\u3042\u3064",
        "\u305F\u3093\u3044",
        "\u305F\u3093\u304A\u3093",
        "\u305F\u3093\u304B",
        "\u305F\u3093\u304D",
        "\u305F\u3093\u3051\u3093",
        "\u305F\u3093\u3053\u3099",
        "\u305F\u3093\u3055\u3093",
        "\u305F\u3093\u3057\u3099\u3087\u3046\u3072\u3099",
        "\u305F\u3099\u3093\u305B\u3044",
        "\u305F\u3093\u305D\u304F",
        "\u305F\u3093\u305F\u3044",
        "\u305F\u3099\u3093\u3061",
        "\u305F\u3093\u3066\u3044",
        "\u305F\u3093\u3068\u3046",
        "\u305F\u3099\u3093\u306A",
        "\u305F\u3093\u306B\u3093",
        "\u305F\u3099\u3093\u306D\u3064",
        "\u305F\u3093\u306E\u3046",
        "\u305F\u3093\u3072\u309A\u3093",
        "\u305F\u3099\u3093\u307B\u3099\u3046",
        "\u305F\u3093\u307E\u3064",
        "\u305F\u3093\u3081\u3044",
        "\u305F\u3099\u3093\u308C\u3064",
        "\u305F\u3099\u3093\u308D",
        "\u305F\u3099\u3093\u308F",
        "\u3061\u3042\u3044",
        "\u3061\u3042\u3093",
        "\u3061\u3044\u304D",
        "\u3061\u3044\u3055\u3044",
        "\u3061\u3048\u3093",
        "\u3061\u304B\u3044",
        "\u3061\u304B\u3089",
        "\u3061\u304D\u3085\u3046",
        "\u3061\u304D\u3093",
        "\u3061\u3051\u3044\u3059\u3099",
        "\u3061\u3051\u3093",
        "\u3061\u3053\u304F",
        "\u3061\u3055\u3044",
        "\u3061\u3057\u304D",
        "\u3061\u3057\u308A\u3087\u3046",
        "\u3061\u305B\u3044",
        "\u3061\u305D\u3046",
        "\u3061\u305F\u3044",
        "\u3061\u305F\u3093",
        "\u3061\u3061\u304A\u3084",
        "\u3061\u3064\u3057\u3099\u3087",
        "\u3061\u3066\u304D",
        "\u3061\u3066\u3093",
        "\u3061\u306C\u304D",
        "\u3061\u306C\u308A",
        "\u3061\u306E\u3046",
        "\u3061\u3072\u3087\u3046",
        "\u3061\u3078\u3044\u305B\u3093",
        "\u3061\u307B\u3046",
        "\u3061\u307E\u305F",
        "\u3061\u307F\u3064",
        "\u3061\u307F\u3068\u3099\u308D",
        "\u3061\u3081\u3044\u3068\u3099",
        "\u3061\u3083\u3093\u3053\u306A\u3078\u3099",
        "\u3061\u3085\u3046\u3044",
        "\u3061\u3086\u308A\u3087\u304F",
        "\u3061\u3087\u3046\u3057",
        "\u3061\u3087\u3055\u304F\u3051\u3093",
        "\u3061\u3089\u3057",
        "\u3061\u3089\u307F",
        "\u3061\u308A\u304B\u3099\u307F",
        "\u3061\u308A\u3087\u3046",
        "\u3061\u308B\u3068\u3099",
        "\u3061\u308F\u308F",
        "\u3061\u3093\u305F\u3044",
        "\u3061\u3093\u3082\u304F",
        "\u3064\u3044\u304B",
        "\u3064\u3044\u305F\u3061",
        "\u3064\u3046\u304B",
        "\u3064\u3046\u3057\u3099\u3087\u3046",
        "\u3064\u3046\u306F\u3093",
        "\u3064\u3046\u308F",
        "\u3064\u304B\u3046",
        "\u3064\u304B\u308C\u308B",
        "\u3064\u304F\u306D",
        "\u3064\u304F\u308B",
        "\u3064\u3051\u306D",
        "\u3064\u3051\u308B",
        "\u3064\u3053\u3099\u3046",
        "\u3064\u305F\u3048\u308B",
        "\u3064\u3064\u3099\u304F",
        "\u3064\u3064\u3057\u3099",
        "\u3064\u3064\u3080",
        "\u3064\u3068\u3081\u308B",
        "\u3064\u306A\u304B\u3099\u308B",
        "\u3064\u306A\u307F",
        "\u3064\u306D\u3064\u3099\u306D",
        "\u3064\u306E\u308B",
        "\u3064\u3075\u3099\u3059",
        "\u3064\u307E\u3089\u306A\u3044",
        "\u3064\u307E\u308B",
        "\u3064\u307F\u304D",
        "\u3064\u3081\u305F\u3044",
        "\u3064\u3082\u308A",
        "\u3064\u3082\u308B",
        "\u3064\u3088\u3044",
        "\u3064\u308B\u307B\u3099",
        "\u3064\u308B\u307F\u304F",
        "\u3064\u308F\u3082\u306E",
        "\u3064\u308F\u308A",
        "\u3066\u3042\u3057",
        "\u3066\u3042\u3066",
        "\u3066\u3042\u307F",
        "\u3066\u3044\u304A\u3093",
        "\u3066\u3044\u304B",
        "\u3066\u3044\u304D",
        "\u3066\u3044\u3051\u3044",
        "\u3066\u3044\u3053\u304F",
        "\u3066\u3044\u3055\u3064",
        "\u3066\u3044\u3057",
        "\u3066\u3044\u305B\u3044",
        "\u3066\u3044\u305F\u3044",
        "\u3066\u3044\u3068\u3099",
        "\u3066\u3044\u306D\u3044",
        "\u3066\u3044\u3072\u3087\u3046",
        "\u3066\u3044\u3078\u3093",
        "\u3066\u3044\u307B\u3099\u3046",
        "\u3066\u3046\u3061",
        "\u3066\u304A\u304F\u308C",
        "\u3066\u304D\u3068\u3046",
        "\u3066\u304F\u3072\u3099",
        "\u3066\u3099\u3053\u307B\u3099\u3053",
        "\u3066\u3055\u304D\u3099\u3087\u3046",
        "\u3066\u3055\u3051\u3099",
        "\u3066\u3059\u308A",
        "\u3066\u305D\u3046",
        "\u3066\u3061\u304B\u3099\u3044",
        "\u3066\u3061\u3087\u3046",
        "\u3066\u3064\u304B\u3099\u304F",
        "\u3066\u3064\u3064\u3099\u304D",
        "\u3066\u3099\u3063\u306F\u309A",
        "\u3066\u3064\u307B\u3099\u3046",
        "\u3066\u3064\u3084",
        "\u3066\u3099\u306C\u304B\u3048",
        "\u3066\u306C\u304D",
        "\u3066\u306C\u304F\u3099\u3044",
        "\u3066\u306E\u3072\u3089",
        "\u3066\u306F\u3044",
        "\u3066\u3075\u3099\u304F\u308D",
        "\u3066\u3075\u305F\u3099",
        "\u3066\u307B\u3068\u3099\u304D",
        "\u3066\u307B\u3093",
        "\u3066\u307E\u3048",
        "\u3066\u307E\u304D\u3059\u3099\u3057",
        "\u3066\u307F\u3057\u3099\u304B",
        "\u3066\u307F\u3084\u3051\u3099",
        "\u3066\u3089\u3059",
        "\u3066\u308C\u3072\u3099",
        "\u3066\u308F\u3051",
        "\u3066\u308F\u305F\u3057",
        "\u3066\u3099\u3093\u3042\u3064",
        "\u3066\u3093\u3044\u3093",
        "\u3066\u3093\u304B\u3044",
        "\u3066\u3093\u304D",
        "\u3066\u3093\u304F\u3099",
        "\u3066\u3093\u3051\u3093",
        "\u3066\u3093\u3053\u3099\u304F",
        "\u3066\u3093\u3055\u3044",
        "\u3066\u3093\u3057",
        "\u3066\u3093\u3059\u3046",
        "\u3066\u3099\u3093\u3061",
        "\u3066\u3093\u3066\u304D",
        "\u3066\u3093\u3068\u3046",
        "\u3066\u3093\u306A\u3044",
        "\u3066\u3093\u3075\u309A\u3089",
        "\u3066\u3093\u307B\u3099\u3046\u305F\u3099\u3044",
        "\u3066\u3093\u3081\u3064",
        "\u3066\u3093\u3089\u3093\u304B\u3044",
        "\u3066\u3099\u3093\u308A\u3087\u304F",
        "\u3066\u3099\u3093\u308F",
        "\u3068\u3099\u3042\u3044",
        "\u3068\u3044\u308C",
        "\u3068\u3099\u3046\u304B\u3093",
        "\u3068\u3046\u304D\u3085\u3046",
        "\u3068\u3099\u3046\u304F\u3099",
        "\u3068\u3046\u3057",
        "\u3068\u3046\u3080\u304D\u3099",
        "\u3068\u304A\u3044",
        "\u3068\u304A\u304B",
        "\u3068\u304A\u304F",
        "\u3068\u304A\u3059",
        "\u3068\u304A\u308B",
        "\u3068\u304B\u3044",
        "\u3068\u304B\u3059",
        "\u3068\u304D\u304A\u308A",
        "\u3068\u304D\u3068\u3099\u304D",
        "\u3068\u304F\u3044",
        "\u3068\u304F\u3057\u3085\u3046",
        "\u3068\u304F\u3066\u3093",
        "\u3068\u304F\u306B",
        "\u3068\u304F\u3078\u3099\u3064",
        "\u3068\u3051\u3044",
        "\u3068\u3051\u308B",
        "\u3068\u3053\u3084",
        "\u3068\u3055\u304B",
        "\u3068\u3057\u3087\u304B\u3093",
        "\u3068\u305D\u3046",
        "\u3068\u305F\u3093",
        "\u3068\u3061\u3085\u3046",
        "\u3068\u3063\u304D\u3085\u3046",
        "\u3068\u3063\u304F\u3093",
        "\u3068\u3064\u305B\u3099\u3093",
        "\u3068\u3064\u306B\u3085\u3046",
        "\u3068\u3068\u3099\u3051\u308B",
        "\u3068\u3068\u306E\u3048\u308B",
        "\u3068\u306A\u3044",
        "\u3068\u306A\u3048\u308B",
        "\u3068\u306A\u308A",
        "\u3068\u306E\u3055\u307E",
        "\u3068\u306F\u3099\u3059",
        "\u3068\u3099\u3075\u3099\u304B\u3099\u308F",
        "\u3068\u307B\u3046",
        "\u3068\u307E\u308B",
        "\u3068\u3081\u308B",
        "\u3068\u3082\u305F\u3099\u3061",
        "\u3068\u3082\u308B",
        "\u3068\u3099\u3088\u3046\u3072\u3099",
        "\u3068\u3089\u3048\u308B",
        "\u3068\u3093\u304B\u3064",
        "\u3068\u3099\u3093\u3075\u3099\u308A",
        "\u306A\u3044\u304B\u304F",
        "\u306A\u3044\u3053\u3046",
        "\u306A\u3044\u3057\u3087",
        "\u306A\u3044\u3059",
        "\u306A\u3044\u305B\u3093",
        "\u306A\u3044\u305D\u3046",
        "\u306A\u304A\u3059",
        "\u306A\u304B\u3099\u3044",
        "\u306A\u304F\u3059",
        "\u306A\u3051\u3099\u308B",
        "\u306A\u3053\u3046\u3068\u3099",
        "\u306A\u3055\u3051",
        "\u306A\u305F\u3066\u3099\u3053\u3053",
        "\u306A\u3063\u3068\u3046",
        "\u306A\u3064\u3084\u3059\u307F",
        "\u306A\u306A\u304A\u3057",
        "\u306A\u306B\u3053\u3099\u3068",
        "\u306A\u306B\u3082\u306E",
        "\u306A\u306B\u308F",
        "\u306A\u306E\u304B",
        "\u306A\u3075\u305F\u3099",
        "\u306A\u307E\u3044\u304D",
        "\u306A\u307E\u3048",
        "\u306A\u307E\u307F",
        "\u306A\u307F\u305F\u3099",
        "\u306A\u3081\u3089\u304B",
        "\u306A\u3081\u308B",
        "\u306A\u3084\u3080",
        "\u306A\u3089\u3046",
        "\u306A\u3089\u3072\u3099",
        "\u306A\u3089\u3075\u3099",
        "\u306A\u308C\u308B",
        "\u306A\u308F\u3068\u3072\u3099",
        "\u306A\u308F\u306F\u3099\u308A",
        "\u306B\u3042\u3046",
        "\u306B\u3044\u304B\u3099\u305F",
        "\u306B\u3046\u3051",
        "\u306B\u304A\u3044",
        "\u306B\u304B\u3044",
        "\u306B\u304B\u3099\u3066",
        "\u306B\u304D\u3072\u3099",
        "\u306B\u304F\u3057\u307F",
        "\u306B\u304F\u307E\u3093",
        "\u306B\u3051\u3099\u308B",
        "\u306B\u3055\u3093\u304B\u305F\u3093\u305D",
        "\u306B\u3057\u304D",
        "\u306B\u305B\u3082\u306E",
        "\u306B\u3061\u3057\u3099\u3087\u3046",
        "\u306B\u3061\u3088\u3046\u3072\u3099",
        "\u306B\u3063\u304B",
        "\u306B\u3063\u304D",
        "\u306B\u3063\u3051\u3044",
        "\u306B\u3063\u3053\u3046",
        "\u306B\u3063\u3055\u3093",
        "\u306B\u3063\u3057\u3087\u304F",
        "\u306B\u3063\u3059\u3046",
        "\u306B\u3063\u305B\u304D",
        "\u306B\u3063\u3066\u3044",
        "\u306B\u306A\u3046",
        "\u306B\u307B\u3093",
        "\u306B\u307E\u3081",
        "\u306B\u3082\u3064",
        "\u306B\u3084\u308A",
        "\u306B\u3085\u3046\u3044\u3093",
        "\u306B\u308A\u3093\u3057\u3083",
        "\u306B\u308F\u3068\u308A",
        "\u306B\u3093\u3044",
        "\u306B\u3093\u304B",
        "\u306B\u3093\u304D",
        "\u306B\u3093\u3051\u3099\u3093",
        "\u306B\u3093\u3057\u304D",
        "\u306B\u3093\u3059\u3099\u3046",
        "\u306B\u3093\u305D\u3046",
        "\u306B\u3093\u305F\u3044",
        "\u306B\u3093\u3061",
        "\u306B\u3093\u3066\u3044",
        "\u306B\u3093\u306B\u304F",
        "\u306B\u3093\u3075\u309A",
        "\u306B\u3093\u307E\u308A",
        "\u306B\u3093\u3080",
        "\u306B\u3093\u3081\u3044",
        "\u306B\u3093\u3088\u3046",
        "\u306C\u3044\u304F\u304D\u3099",
        "\u306C\u304B\u3059",
        "\u306C\u304F\u3099\u3044\u3068\u308B",
        "\u306C\u304F\u3099\u3046",
        "\u306C\u304F\u3082\u308A",
        "\u306C\u3059\u3080",
        "\u306C\u307E\u3048\u3072\u3099",
        "\u306C\u3081\u308A",
        "\u306C\u3089\u3059",
        "\u306C\u3093\u3061\u3083\u304F",
        "\u306D\u3042\u3051\u3099",
        "\u306D\u3044\u304D",
        "\u306D\u3044\u308B",
        "\u306D\u3044\u308D",
        "\u306D\u304F\u3099\u305B",
        "\u306D\u304F\u305F\u3044",
        "\u306D\u304F\u3089",
        "\u306D\u3053\u305B\u3099",
        "\u306D\u3053\u3080",
        "\u306D\u3055\u3051\u3099",
        "\u306D\u3059\u3053\u3099\u3059",
        "\u306D\u305D\u3078\u3099\u308B",
        "\u306D\u305F\u3099\u3093",
        "\u306D\u3064\u3044",
        "\u306D\u3063\u3057\u3093",
        "\u306D\u3064\u305D\u3099\u3046",
        "\u306D\u3063\u305F\u3044\u304D\u3099\u3087",
        "\u306D\u3075\u3099\u305D\u304F",
        "\u306D\u3075\u305F\u3099",
        "\u306D\u307B\u3099\u3046",
        "\u306D\u307B\u308A\u306F\u307B\u308A",
        "\u306D\u307E\u304D",
        "\u306D\u307E\u308F\u3057",
        "\u306D\u307F\u307F",
        "\u306D\u3080\u3044",
        "\u306D\u3080\u305F\u3044",
        "\u306D\u3082\u3068",
        "\u306D\u3089\u3046",
        "\u306D\u308F\u3055\u3099",
        "\u306D\u3093\u3044\u308A",
        "\u306D\u3093\u304A\u3057",
        "\u306D\u3093\u304B\u3093",
        "\u306D\u3093\u304D\u3093",
        "\u306D\u3093\u304F\u3099",
        "\u306D\u3093\u3055\u3099",
        "\u306D\u3093\u3057",
        "\u306D\u3093\u3061\u3083\u304F",
        "\u306D\u3093\u3068\u3099",
        "\u306D\u3093\u3072\u309A",
        "\u306D\u3093\u3075\u3099\u3064",
        "\u306D\u3093\u307E\u3064",
        "\u306D\u3093\u308A\u3087\u3046",
        "\u306D\u3093\u308C\u3044",
        "\u306E\u3044\u3059\u3099",
        "\u306E\u304A\u3064\u3099\u307E",
        "\u306E\u304B\u3099\u3059",
        "\u306E\u304D\u306A\u307F",
        "\u306E\u3053\u304D\u3099\u308A",
        "\u306E\u3053\u3059",
        "\u306E\u3053\u308B",
        "\u306E\u305B\u308B",
        "\u306E\u305D\u3099\u304F",
        "\u306E\u305D\u3099\u3080",
        "\u306E\u305F\u307E\u3046",
        "\u306E\u3061\u307B\u3068\u3099",
        "\u306E\u3063\u304F",
        "\u306E\u306F\u3099\u3059",
        "\u306E\u306F\u3089",
        "\u306E\u3078\u3099\u308B",
        "\u306E\u307B\u3099\u308B",
        "\u306E\u307F\u3082\u306E",
        "\u306E\u3084\u307E",
        "\u306E\u3089\u3044\u306C",
        "\u306E\u3089\u306D\u3053",
        "\u306E\u308A\u3082\u306E",
        "\u306E\u308A\u3086\u304D",
        "\u306E\u308C\u3093",
        "\u306E\u3093\u304D",
        "\u306F\u3099\u3042\u3044",
        "\u306F\u3042\u304F",
        "\u306F\u3099\u3042\u3055\u3093",
        "\u306F\u3099\u3044\u304B",
        "\u306F\u3099\u3044\u304F",
        "\u306F\u3044\u3051\u3093",
        "\u306F\u3044\u3053\u3099",
        "\u306F\u3044\u3057\u3093",
        "\u306F\u3044\u3059\u3044",
        "\u306F\u3044\u305B\u3093",
        "\u306F\u3044\u305D\u3046",
        "\u306F\u3044\u3061",
        "\u306F\u3099\u3044\u306F\u3099\u3044",
        "\u306F\u3044\u308C\u3064",
        "\u306F\u3048\u308B",
        "\u306F\u304A\u308B",
        "\u306F\u304B\u3044",
        "\u306F\u3099\u304B\u308A",
        "\u306F\u304B\u308B",
        "\u306F\u304F\u3057\u3085",
        "\u306F\u3051\u3093",
        "\u306F\u3053\u3075\u3099",
        "\u306F\u3055\u307F",
        "\u306F\u3055\u3093",
        "\u306F\u3057\u3053\u3099",
        "\u306F\u3099\u3057\u3087",
        "\u306F\u3057\u308B",
        "\u306F\u305B\u308B",
        "\u306F\u309A\u305D\u3053\u3093",
        "\u306F\u305D\u3093",
        "\u306F\u305F\u3093",
        "\u306F\u3061\u307F\u3064",
        "\u306F\u3064\u304A\u3093",
        "\u306F\u3063\u304B\u304F",
        "\u306F\u3064\u3099\u304D",
        "\u306F\u3063\u304D\u308A",
        "\u306F\u3063\u304F\u3064",
        "\u306F\u3063\u3051\u3093",
        "\u306F\u3063\u3053\u3046",
        "\u306F\u3063\u3055\u3093",
        "\u306F\u3063\u3057\u3093",
        "\u306F\u3063\u305F\u3064",
        "\u306F\u3063\u3061\u3085\u3046",
        "\u306F\u3063\u3066\u3093",
        "\u306F\u3063\u3072\u309A\u3087\u3046",
        "\u306F\u3063\u307B\u309A\u3046",
        "\u306F\u306A\u3059",
        "\u306F\u306A\u3072\u3099",
        "\u306F\u306B\u304B\u3080",
        "\u306F\u3075\u3099\u3089\u3057",
        "\u306F\u307F\u304B\u3099\u304D",
        "\u306F\u3080\u304B\u3046",
        "\u306F\u3081\u3064",
        "\u306F\u3084\u3044",
        "\u306F\u3084\u3057",
        "\u306F\u3089\u3046",
        "\u306F\u308D\u3046\u3043\u3093",
        "\u306F\u308F\u3044",
        "\u306F\u3093\u3044",
        "\u306F\u3093\u3048\u3044",
        "\u306F\u3093\u304A\u3093",
        "\u306F\u3093\u304B\u304F",
        "\u306F\u3093\u304D\u3087\u3046",
        "\u306F\u3099\u3093\u304F\u3099\u307F",
        "\u306F\u3093\u3053",
        "\u306F\u3093\u3057\u3083",
        "\u306F\u3093\u3059\u3046",
        "\u306F\u3093\u305F\u3099\u3093",
        "\u306F\u309A\u3093\u3061",
        "\u306F\u309A\u3093\u3064",
        "\u306F\u3093\u3066\u3044",
        "\u306F\u3093\u3068\u3057",
        "\u306F\u3093\u306E\u3046",
        "\u306F\u3093\u306F\u309A",
        "\u306F\u3093\u3075\u3099\u3093",
        "\u306F\u3093\u3078\u309A\u3093",
        "\u306F\u3093\u307B\u3099\u3046\u304D",
        "\u306F\u3093\u3081\u3044",
        "\u306F\u3093\u3089\u3093",
        "\u306F\u3093\u308D\u3093",
        "\u3072\u3044\u304D",
        "\u3072\u3046\u3093",
        "\u3072\u3048\u308B",
        "\u3072\u304B\u304F",
        "\u3072\u304B\u308A",
        "\u3072\u304B\u308B",
        "\u3072\u304B\u3093",
        "\u3072\u304F\u3044",
        "\u3072\u3051\u3064",
        "\u3072\u3053\u3046\u304D",
        "\u3072\u3053\u304F",
        "\u3072\u3055\u3044",
        "\u3072\u3055\u3057\u3075\u3099\u308A",
        "\u3072\u3055\u3093",
        "\u3072\u3099\u3057\u3099\u3085\u3064\u304B\u3093",
        "\u3072\u3057\u3087",
        "\u3072\u305D\u304B",
        "\u3072\u305D\u3080",
        "\u3072\u305F\u3080\u304D",
        "\u3072\u305F\u3099\u308A",
        "\u3072\u305F\u308B",
        "\u3072\u3064\u304D\u3099",
        "\u3072\u3063\u3053\u3057",
        "\u3072\u3063\u3057",
        "\u3072\u3064\u3057\u3099\u3085\u3072\u3093",
        "\u3072\u3063\u3059",
        "\u3072\u3064\u305B\u3099\u3093",
        "\u3072\u309A\u3063\u305F\u308A",
        "\u3072\u309A\u3063\u3061\u308A",
        "\u3072\u3064\u3088\u3046",
        "\u3072\u3066\u3044",
        "\u3072\u3068\u3053\u3099\u307F",
        "\u3072\u306A\u307E\u3064\u308A",
        "\u3072\u306A\u3093",
        "\u3072\u306D\u308B",
        "\u3072\u306F\u3093",
        "\u3072\u3072\u3099\u304F",
        "\u3072\u3072\u3087\u3046",
        "\u3072\u307B\u3046",
        "\u3072\u307E\u308F\u308A",
        "\u3072\u307E\u3093",
        "\u3072\u307F\u3064",
        "\u3072\u3081\u3044",
        "\u3072\u3081\u3057\u3099\u3057",
        "\u3072\u3084\u3051",
        "\u3072\u3084\u3059",
        "\u3072\u3088\u3046",
        "\u3072\u3099\u3087\u3046\u304D",
        "\u3072\u3089\u304B\u3099\u306A",
        "\u3072\u3089\u304F",
        "\u3072\u308A\u3064",
        "\u3072\u308A\u3087\u3046",
        "\u3072\u308B\u307E",
        "\u3072\u308B\u3084\u3059\u307F",
        "\u3072\u308C\u3044",
        "\u3072\u308D\u3044",
        "\u3072\u308D\u3046",
        "\u3072\u308D\u304D",
        "\u3072\u308D\u3086\u304D",
        "\u3072\u3093\u304B\u304F",
        "\u3072\u3093\u3051\u3064",
        "\u3072\u3093\u3053\u3093",
        "\u3072\u3093\u3057\u3085",
        "\u3072\u3093\u305D\u3046",
        "\u3072\u309A\u3093\u3061",
        "\u3072\u3093\u306F\u309A\u3093",
        "\u3072\u3099\u3093\u307B\u3099\u3046",
        "\u3075\u3042\u3093",
        "\u3075\u3044\u3046\u3061",
        "\u3075\u3046\u3051\u3044",
        "\u3075\u3046\u305B\u3093",
        "\u3075\u309A\u3046\u305F\u308D\u3046",
        "\u3075\u3046\u3068\u3046",
        "\u3075\u3046\u3075",
        "\u3075\u3048\u308B",
        "\u3075\u304A\u3093",
        "\u3075\u304B\u3044",
        "\u3075\u304D\u3093",
        "\u3075\u304F\u3055\u3099\u3064",
        "\u3075\u304F\u3075\u3099\u304F\u308D",
        "\u3075\u3053\u3046",
        "\u3075\u3055\u3044",
        "\u3075\u3057\u304D\u3099",
        "\u3075\u3057\u3099\u307F",
        "\u3075\u3059\u307E",
        "\u3075\u305B\u3044",
        "\u3075\u305B\u304F\u3099",
        "\u3075\u305D\u304F",
        "\u3075\u3099\u305F\u306B\u304F",
        "\u3075\u305F\u3093",
        "\u3075\u3061\u3087\u3046",
        "\u3075\u3064\u3046",
        "\u3075\u3064\u304B",
        "\u3075\u3063\u304B\u3064",
        "\u3075\u3063\u304D",
        "\u3075\u3063\u3053\u304F",
        "\u3075\u3099\u3068\u3099\u3046",
        "\u3075\u3068\u308B",
        "\u3075\u3068\u3093",
        "\u3075\u306E\u3046",
        "\u3075\u306F\u3044",
        "\u3075\u3072\u3087\u3046",
        "\u3075\u3078\u3093",
        "\u3075\u307E\u3093",
        "\u3075\u307F\u3093",
        "\u3075\u3081\u3064",
        "\u3075\u3081\u3093",
        "\u3075\u3088\u3046",
        "\u3075\u308A\u3053",
        "\u3075\u308A\u308B",
        "\u3075\u308B\u3044",
        "\u3075\u3093\u3044\u304D",
        "\u3075\u3099\u3093\u304B\u3099\u304F",
        "\u3075\u3099\u3093\u304F\u3099",
        "\u3075\u3093\u3057\u3064",
        "\u3075\u3099\u3093\u305B\u304D",
        "\u3075\u3093\u305D\u3046",
        "\u3075\u3099\u3093\u307B\u309A\u3046",
        "\u3078\u3044\u3042\u3093",
        "\u3078\u3044\u304A\u3093",
        "\u3078\u3044\u304B\u3099\u3044",
        "\u3078\u3044\u304D",
        "\u3078\u3044\u3051\u3099\u3093",
        "\u3078\u3044\u3053\u3046",
        "\u3078\u3044\u3055",
        "\u3078\u3044\u3057\u3083",
        "\u3078\u3044\u305B\u3064",
        "\u3078\u3044\u305D",
        "\u3078\u3044\u305F\u304F",
        "\u3078\u3044\u3066\u3093",
        "\u3078\u3044\u306D\u3064",
        "\u3078\u3044\u308F",
        "\u3078\u304D\u304B\u3099",
        "\u3078\u3053\u3080",
        "\u3078\u3099\u306B\u3044\u308D",
        "\u3078\u3099\u306B\u3057\u3087\u3046\u304B\u3099",
        "\u3078\u3089\u3059",
        "\u3078\u3093\u304B\u3093",
        "\u3078\u3099\u3093\u304D\u3087\u3046",
        "\u3078\u3099\u3093\u3053\u3099\u3057",
        "\u3078\u3093\u3055\u3044",
        "\u3078\u3093\u305F\u3044",
        "\u3078\u3099\u3093\u308A",
        "\u307B\u3042\u3093",
        "\u307B\u3044\u304F",
        "\u307B\u3099\u3046\u304D\u3099\u3087",
        "\u307B\u3046\u3053\u304F",
        "\u307B\u3046\u305D\u3046",
        "\u307B\u3046\u307B\u3046",
        "\u307B\u3046\u3082\u3093",
        "\u307B\u3046\u308A\u3064",
        "\u307B\u3048\u308B",
        "\u307B\u304A\u3093",
        "\u307B\u304B\u3093",
        "\u307B\u304D\u3087\u3046",
        "\u307B\u3099\u304D\u3093",
        "\u307B\u304F\u308D",
        "\u307B\u3051\u3064",
        "\u307B\u3051\u3093",
        "\u307B\u3053\u3046",
        "\u307B\u3053\u308B",
        "\u307B\u3057\u3044",
        "\u307B\u3057\u3064",
        "\u307B\u3057\u3085",
        "\u307B\u3057\u3087\u3046",
        "\u307B\u305B\u3044",
        "\u307B\u305D\u3044",
        "\u307B\u305D\u304F",
        "\u307B\u305F\u3066",
        "\u307B\u305F\u308B",
        "\u307B\u309A\u3061\u3075\u3099\u304F\u308D",
        "\u307B\u3063\u304D\u3087\u304F",
        "\u307B\u3063\u3055",
        "\u307B\u3063\u305F\u3093",
        "\u307B\u3068\u3093\u3068\u3099",
        "\u307B\u3081\u308B",
        "\u307B\u3093\u3044",
        "\u307B\u3093\u304D",
        "\u307B\u3093\u3051",
        "\u307B\u3093\u3057\u3064",
        "\u307B\u3093\u3084\u304F",
        "\u307E\u3044\u306B\u3061",
        "\u307E\u304B\u3044",
        "\u307E\u304B\u305B\u308B",
        "\u307E\u304B\u3099\u308B",
        "\u307E\u3051\u308B",
        "\u307E\u3053\u3068",
        "\u307E\u3055\u3064",
        "\u307E\u3057\u3099\u3081",
        "\u307E\u3059\u304F",
        "\u307E\u305B\u3099\u308B",
        "\u307E\u3064\u308A",
        "\u307E\u3068\u3081",
        "\u307E\u306A\u3075\u3099",
        "\u307E\u306C\u3051",
        "\u307E\u306D\u304F",
        "\u307E\u307B\u3046",
        "\u307E\u3082\u308B",
        "\u307E\u3086\u3051\u3099",
        "\u307E\u3088\u3046",
        "\u307E\u308D\u3084\u304B",
        "\u307E\u308F\u3059",
        "\u307E\u308F\u308A",
        "\u307E\u308F\u308B",
        "\u307E\u3093\u304B\u3099",
        "\u307E\u3093\u304D\u3064",
        "\u307E\u3093\u305D\u3099\u304F",
        "\u307E\u3093\u306A\u304B",
        "\u307F\u3044\u3089",
        "\u307F\u3046\u3061",
        "\u307F\u3048\u308B",
        "\u307F\u304B\u3099\u304F",
        "\u307F\u304B\u305F",
        "\u307F\u304B\u3093",
        "\u307F\u3051\u3093",
        "\u307F\u3053\u3093",
        "\u307F\u3057\u3099\u304B\u3044",
        "\u307F\u3059\u3044",
        "\u307F\u3059\u3048\u308B",
        "\u307F\u305B\u308B",
        "\u307F\u3063\u304B",
        "\u307F\u3064\u304B\u308B",
        "\u307F\u3064\u3051\u308B",
        "\u307F\u3066\u3044",
        "\u307F\u3068\u3081\u308B",
        "\u307F\u306A\u3068",
        "\u307F\u306A\u307F\u304B\u3055\u3044",
        "\u307F\u306D\u3089\u308B",
        "\u307F\u306E\u3046",
        "\u307F\u306E\u304B\u3099\u3059",
        "\u307F\u307B\u3093",
        "\u307F\u3082\u3068",
        "\u307F\u3084\u3051\u3099",
        "\u307F\u3089\u3044",
        "\u307F\u308A\u3087\u304F",
        "\u307F\u308F\u304F",
        "\u307F\u3093\u304B",
        "\u307F\u3093\u305D\u3099\u304F",
        "\u3080\u3044\u304B",
        "\u3080\u3048\u304D",
        "\u3080\u3048\u3093",
        "\u3080\u304B\u3044",
        "\u3080\u304B\u3046",
        "\u3080\u304B\u3048",
        "\u3080\u304B\u3057",
        "\u3080\u304D\u3099\u3061\u3083",
        "\u3080\u3051\u308B",
        "\u3080\u3051\u3099\u3093",
        "\u3080\u3055\u307B\u3099\u308B",
        "\u3080\u3057\u3042\u3064\u3044",
        "\u3080\u3057\u306F\u3099",
        "\u3080\u3057\u3099\u3085\u3093",
        "\u3080\u3057\u308D",
        "\u3080\u3059\u3046",
        "\u3080\u3059\u3053",
        "\u3080\u3059\u3075\u3099",
        "\u3080\u3059\u3081",
        "\u3080\u305B\u308B",
        "\u3080\u305B\u3093",
        "\u3080\u3061\u3085\u3046",
        "\u3080\u306A\u3057\u3044",
        "\u3080\u306E\u3046",
        "\u3080\u3084\u307F",
        "\u3080\u3088\u3046",
        "\u3080\u3089\u3055\u304D",
        "\u3080\u308A\u3087\u3046",
        "\u3080\u308D\u3093",
        "\u3081\u3044\u3042\u3093",
        "\u3081\u3044\u3046\u3093",
        "\u3081\u3044\u3048\u3093",
        "\u3081\u3044\u304B\u304F",
        "\u3081\u3044\u304D\u3087\u304F",
        "\u3081\u3044\u3055\u3044",
        "\u3081\u3044\u3057",
        "\u3081\u3044\u305D\u3046",
        "\u3081\u3044\u3075\u3099\u3064",
        "\u3081\u3044\u308C\u3044",
        "\u3081\u3044\u308F\u304F",
        "\u3081\u304F\u3099\u307E\u308C\u308B",
        "\u3081\u3055\u3099\u3059",
        "\u3081\u3057\u305F",
        "\u3081\u3059\u3099\u3089\u3057\u3044",
        "\u3081\u305F\u3099\u3064",
        "\u3081\u307E\u3044",
        "\u3081\u3084\u3059",
        "\u3081\u3093\u304D\u3087",
        "\u3081\u3093\u305B\u304D",
        "\u3081\u3093\u3068\u3099\u3046",
        "\u3082\u3046\u3057\u3042\u3051\u3099\u308B",
        "\u3082\u3046\u3068\u3099\u3046\u3051\u3093",
        "\u3082\u3048\u308B",
        "\u3082\u304F\u3057",
        "\u3082\u304F\u3066\u304D",
        "\u3082\u304F\u3088\u3046\u3072\u3099",
        "\u3082\u3061\u308D\u3093",
        "\u3082\u3068\u3099\u308B",
        "\u3082\u3089\u3046",
        "\u3082\u3093\u304F",
        "\u3082\u3093\u305F\u3099\u3044",
        "\u3084\u304A\u3084",
        "\u3084\u3051\u308B",
        "\u3084\u3055\u3044",
        "\u3084\u3055\u3057\u3044",
        "\u3084\u3059\u3044",
        "\u3084\u3059\u305F\u308D\u3046",
        "\u3084\u3059\u307F",
        "\u3084\u305B\u308B",
        "\u3084\u305D\u3046",
        "\u3084\u305F\u3044",
        "\u3084\u3061\u3093",
        "\u3084\u3063\u3068",
        "\u3084\u3063\u306F\u309A\u308A",
        "\u3084\u3075\u3099\u308B",
        "\u3084\u3081\u308B",
        "\u3084\u3084\u3053\u3057\u3044",
        "\u3084\u3088\u3044",
        "\u3084\u308F\u3089\u304B\u3044",
        "\u3086\u3046\u304D",
        "\u3086\u3046\u3072\u3099\u3093\u304D\u3087\u304F",
        "\u3086\u3046\u3078\u3099",
        "\u3086\u3046\u3081\u3044",
        "\u3086\u3051\u3064",
        "\u3086\u3057\u3085\u3064",
        "\u3086\u305B\u3093",
        "\u3086\u305D\u3046",
        "\u3086\u305F\u304B",
        "\u3086\u3061\u3083\u304F",
        "\u3086\u3066\u3099\u308B",
        "\u3086\u306B\u3085\u3046",
        "\u3086\u3072\u3099\u308F",
        "\u3086\u3089\u3044",
        "\u3086\u308C\u308B",
        "\u3088\u3046\u3044",
        "\u3088\u3046\u304B",
        "\u3088\u3046\u304D\u3085\u3046",
        "\u3088\u3046\u3057\u3099",
        "\u3088\u3046\u3059",
        "\u3088\u3046\u3061\u3048\u3093",
        "\u3088\u304B\u305B\u3099",
        "\u3088\u304B\u3093",
        "\u3088\u304D\u3093",
        "\u3088\u304F\u305B\u3044",
        "\u3088\u304F\u307B\u3099\u3046",
        "\u3088\u3051\u3044",
        "\u3088\u3053\u3099\u308C\u308B",
        "\u3088\u3055\u3093",
        "\u3088\u3057\u3085\u3046",
        "\u3088\u305D\u3046",
        "\u3088\u305D\u304F",
        "\u3088\u3063\u304B",
        "\u3088\u3066\u3044",
        "\u3088\u3068\u3099\u304B\u3099\u308F\u304F",
        "\u3088\u306D\u3064",
        "\u3088\u3084\u304F",
        "\u3088\u3086\u3046",
        "\u3088\u308D\u3053\u3075\u3099",
        "\u3088\u308D\u3057\u3044",
        "\u3089\u3044\u3046",
        "\u3089\u304F\u304B\u3099\u304D",
        "\u3089\u304F\u3053\u3099",
        "\u3089\u304F\u3055\u3064",
        "\u3089\u304F\u305F\u3099",
        "\u3089\u3057\u3093\u306F\u3099\u3093",
        "\u3089\u305B\u3093",
        "\u3089\u305D\u3099\u304F",
        "\u3089\u305F\u3044",
        "\u3089\u3063\u304B",
        "\u3089\u308C\u3064",
        "\u308A\u3048\u304D",
        "\u308A\u304B\u3044",
        "\u308A\u304D\u3055\u304F",
        "\u308A\u304D\u305B\u3064",
        "\u308A\u304F\u304F\u3099\u3093",
        "\u308A\u304F\u3064",
        "\u308A\u3051\u3093",
        "\u308A\u3053\u3046",
        "\u308A\u305B\u3044",
        "\u308A\u305D\u3046",
        "\u308A\u305D\u304F",
        "\u308A\u3066\u3093",
        "\u308A\u306D\u3093",
        "\u308A\u3086\u3046",
        "\u308A\u3085\u3046\u304B\u3099\u304F",
        "\u308A\u3088\u3046",
        "\u308A\u3087\u3046\u308A",
        "\u308A\u3087\u304B\u3093",
        "\u308A\u3087\u304F\u3061\u3083",
        "\u308A\u3087\u3053\u3046",
        "\u308A\u308A\u304F",
        "\u308A\u308C\u304D",
        "\u308A\u308D\u3093",
        "\u308A\u3093\u3053\u3099",
        "\u308B\u3044\u3051\u3044",
        "\u308B\u3044\u3055\u3044",
        "\u308B\u3044\u3057\u3099",
        "\u308B\u3044\u305B\u304D",
        "\u308B\u3059\u306F\u3099\u3093",
        "\u308B\u308A\u304B\u3099\u308F\u3089",
        "\u308C\u3044\u304B\u3093",
        "\u308C\u3044\u304D\u3099",
        "\u308C\u3044\u305B\u3044",
        "\u308C\u3044\u305D\u3099\u3046\u3053",
        "\u308C\u3044\u3068\u3046",
        "\u308C\u3044\u307B\u3099\u3046",
        "\u308C\u304D\u3057",
        "\u308C\u304D\u305F\u3099\u3044",
        "\u308C\u3093\u3042\u3044",
        "\u308C\u3093\u3051\u3044",
        "\u308C\u3093\u3053\u3093",
        "\u308C\u3093\u3055\u3044",
        "\u308C\u3093\u3057\u3085\u3046",
        "\u308C\u3093\u305D\u3099\u304F",
        "\u308C\u3093\u3089\u304F",
        "\u308D\u3046\u304B",
        "\u308D\u3046\u3053\u3099",
        "\u308D\u3046\u3057\u3099\u3093",
        "\u308D\u3046\u305D\u304F",
        "\u308D\u304F\u304B\u3099",
        "\u308D\u3053\u3064",
        "\u308D\u3057\u3099\u3046\u3089",
        "\u308D\u3057\u3085\u3064",
        "\u308D\u305B\u3093",
        "\u308D\u3066\u3093",
        "\u308D\u3081\u3093",
        "\u308D\u308C\u3064",
        "\u308D\u3093\u304D\u3099",
        "\u308D\u3093\u306F\u309A",
        "\u308D\u3093\u3075\u3099\u3093",
        "\u308D\u3093\u308A",
        "\u308F\u304B\u3059",
        "\u308F\u304B\u3081",
        "\u308F\u304B\u3084\u307E",
        "\u308F\u304B\u308C\u308B",
        "\u308F\u3057\u3064",
        "\u308F\u3057\u3099\u307E\u3057",
        "\u308F\u3059\u308C\u3082\u306E",
        "\u308F\u3089\u3046",
        "\u308F\u308C\u308B"
      ];
    }
  });

  // node_modules/bip39/src/wordlists/portuguese.json
  var require_portuguese = __commonJS({
    "node_modules/bip39/src/wordlists/portuguese.json"(exports, module) {
      module.exports = [
        "abacate",
        "abaixo",
        "abalar",
        "abater",
        "abduzir",
        "abelha",
        "aberto",
        "abismo",
        "abotoar",
        "abranger",
        "abreviar",
        "abrigar",
        "abrupto",
        "absinto",
        "absoluto",
        "absurdo",
        "abutre",
        "acabado",
        "acalmar",
        "acampar",
        "acanhar",
        "acaso",
        "aceitar",
        "acelerar",
        "acenar",
        "acervo",
        "acessar",
        "acetona",
        "achatar",
        "acidez",
        "acima",
        "acionado",
        "acirrar",
        "aclamar",
        "aclive",
        "acolhida",
        "acomodar",
        "acoplar",
        "acordar",
        "acumular",
        "acusador",
        "adaptar",
        "adega",
        "adentro",
        "adepto",
        "adequar",
        "aderente",
        "adesivo",
        "adeus",
        "adiante",
        "aditivo",
        "adjetivo",
        "adjunto",
        "admirar",
        "adorar",
        "adquirir",
        "adubo",
        "adverso",
        "advogado",
        "aeronave",
        "afastar",
        "aferir",
        "afetivo",
        "afinador",
        "afivelar",
        "aflito",
        "afluente",
        "afrontar",
        "agachar",
        "agarrar",
        "agasalho",
        "agenciar",
        "agilizar",
        "agiota",
        "agitado",
        "agora",
        "agradar",
        "agreste",
        "agrupar",
        "aguardar",
        "agulha",
        "ajoelhar",
        "ajudar",
        "ajustar",
        "alameda",
        "alarme",
        "alastrar",
        "alavanca",
        "albergue",
        "albino",
        "alcatra",
        "aldeia",
        "alecrim",
        "alegria",
        "alertar",
        "alface",
        "alfinete",
        "algum",
        "alheio",
        "aliar",
        "alicate",
        "alienar",
        "alinhar",
        "aliviar",
        "almofada",
        "alocar",
        "alpiste",
        "alterar",
        "altitude",
        "alucinar",
        "alugar",
        "aluno",
        "alusivo",
        "alvo",
        "amaciar",
        "amador",
        "amarelo",
        "amassar",
        "ambas",
        "ambiente",
        "ameixa",
        "amenizar",
        "amido",
        "amistoso",
        "amizade",
        "amolador",
        "amontoar",
        "amoroso",
        "amostra",
        "amparar",
        "ampliar",
        "ampola",
        "anagrama",
        "analisar",
        "anarquia",
        "anatomia",
        "andaime",
        "anel",
        "anexo",
        "angular",
        "animar",
        "anjo",
        "anomalia",
        "anotado",
        "ansioso",
        "anterior",
        "anuidade",
        "anunciar",
        "anzol",
        "apagador",
        "apalpar",
        "apanhado",
        "apego",
        "apelido",
        "apertada",
        "apesar",
        "apetite",
        "apito",
        "aplauso",
        "aplicada",
        "apoio",
        "apontar",
        "aposta",
        "aprendiz",
        "aprovar",
        "aquecer",
        "arame",
        "aranha",
        "arara",
        "arcada",
        "ardente",
        "areia",
        "arejar",
        "arenito",
        "aresta",
        "argiloso",
        "argola",
        "arma",
        "arquivo",
        "arraial",
        "arrebate",
        "arriscar",
        "arroba",
        "arrumar",
        "arsenal",
        "arterial",
        "artigo",
        "arvoredo",
        "asfaltar",
        "asilado",
        "aspirar",
        "assador",
        "assinar",
        "assoalho",
        "assunto",
        "astral",
        "atacado",
        "atadura",
        "atalho",
        "atarefar",
        "atear",
        "atender",
        "aterro",
        "ateu",
        "atingir",
        "atirador",
        "ativo",
        "atoleiro",
        "atracar",
        "atrevido",
        "atriz",
        "atual",
        "atum",
        "auditor",
        "aumentar",
        "aura",
        "aurora",
        "autismo",
        "autoria",
        "autuar",
        "avaliar",
        "avante",
        "avaria",
        "avental",
        "avesso",
        "aviador",
        "avisar",
        "avulso",
        "axila",
        "azarar",
        "azedo",
        "azeite",
        "azulejo",
        "babar",
        "babosa",
        "bacalhau",
        "bacharel",
        "bacia",
        "bagagem",
        "baiano",
        "bailar",
        "baioneta",
        "bairro",
        "baixista",
        "bajular",
        "baleia",
        "baliza",
        "balsa",
        "banal",
        "bandeira",
        "banho",
        "banir",
        "banquete",
        "barato",
        "barbado",
        "baronesa",
        "barraca",
        "barulho",
        "baseado",
        "bastante",
        "batata",
        "batedor",
        "batida",
        "batom",
        "batucar",
        "baunilha",
        "beber",
        "beijo",
        "beirada",
        "beisebol",
        "beldade",
        "beleza",
        "belga",
        "beliscar",
        "bendito",
        "bengala",
        "benzer",
        "berimbau",
        "berlinda",
        "berro",
        "besouro",
        "bexiga",
        "bezerro",
        "bico",
        "bicudo",
        "bienal",
        "bifocal",
        "bifurcar",
        "bigorna",
        "bilhete",
        "bimestre",
        "bimotor",
        "biologia",
        "biombo",
        "biosfera",
        "bipolar",
        "birrento",
        "biscoito",
        "bisneto",
        "bispo",
        "bissexto",
        "bitola",
        "bizarro",
        "blindado",
        "bloco",
        "bloquear",
        "boato",
        "bobagem",
        "bocado",
        "bocejo",
        "bochecha",
        "boicotar",
        "bolada",
        "boletim",
        "bolha",
        "bolo",
        "bombeiro",
        "bonde",
        "boneco",
        "bonita",
        "borbulha",
        "borda",
        "boreal",
        "borracha",
        "bovino",
        "boxeador",
        "branco",
        "brasa",
        "braveza",
        "breu",
        "briga",
        "brilho",
        "brincar",
        "broa",
        "brochura",
        "bronzear",
        "broto",
        "bruxo",
        "bucha",
        "budismo",
        "bufar",
        "bule",
        "buraco",
        "busca",
        "busto",
        "buzina",
        "cabana",
        "cabelo",
        "cabide",
        "cabo",
        "cabrito",
        "cacau",
        "cacetada",
        "cachorro",
        "cacique",
        "cadastro",
        "cadeado",
        "cafezal",
        "caiaque",
        "caipira",
        "caixote",
        "cajado",
        "caju",
        "calafrio",
        "calcular",
        "caldeira",
        "calibrar",
        "calmante",
        "calota",
        "camada",
        "cambista",
        "camisa",
        "camomila",
        "campanha",
        "camuflar",
        "canavial",
        "cancelar",
        "caneta",
        "canguru",
        "canhoto",
        "canivete",
        "canoa",
        "cansado",
        "cantar",
        "canudo",
        "capacho",
        "capela",
        "capinar",
        "capotar",
        "capricho",
        "captador",
        "capuz",
        "caracol",
        "carbono",
        "cardeal",
        "careca",
        "carimbar",
        "carneiro",
        "carpete",
        "carreira",
        "cartaz",
        "carvalho",
        "casaco",
        "casca",
        "casebre",
        "castelo",
        "casulo",
        "catarata",
        "cativar",
        "caule",
        "causador",
        "cautelar",
        "cavalo",
        "caverna",
        "cebola",
        "cedilha",
        "cegonha",
        "celebrar",
        "celular",
        "cenoura",
        "censo",
        "centeio",
        "cercar",
        "cerrado",
        "certeiro",
        "cerveja",
        "cetim",
        "cevada",
        "chacota",
        "chaleira",
        "chamado",
        "chapada",
        "charme",
        "chatice",
        "chave",
        "chefe",
        "chegada",
        "cheiro",
        "cheque",
        "chicote",
        "chifre",
        "chinelo",
        "chocalho",
        "chover",
        "chumbo",
        "chutar",
        "chuva",
        "cicatriz",
        "ciclone",
        "cidade",
        "cidreira",
        "ciente",
        "cigana",
        "cimento",
        "cinto",
        "cinza",
        "ciranda",
        "circuito",
        "cirurgia",
        "citar",
        "clareza",
        "clero",
        "clicar",
        "clone",
        "clube",
        "coado",
        "coagir",
        "cobaia",
        "cobertor",
        "cobrar",
        "cocada",
        "coelho",
        "coentro",
        "coeso",
        "cogumelo",
        "coibir",
        "coifa",
        "coiote",
        "colar",
        "coleira",
        "colher",
        "colidir",
        "colmeia",
        "colono",
        "coluna",
        "comando",
        "combinar",
        "comentar",
        "comitiva",
        "comover",
        "complexo",
        "comum",
        "concha",
        "condor",
        "conectar",
        "confuso",
        "congelar",
        "conhecer",
        "conjugar",
        "consumir",
        "contrato",
        "convite",
        "cooperar",
        "copeiro",
        "copiador",
        "copo",
        "coquetel",
        "coragem",
        "cordial",
        "corneta",
        "coronha",
        "corporal",
        "correio",
        "cortejo",
        "coruja",
        "corvo",
        "cosseno",
        "costela",
        "cotonete",
        "couro",
        "couve",
        "covil",
        "cozinha",
        "cratera",
        "cravo",
        "creche",
        "credor",
        "creme",
        "crer",
        "crespo",
        "criada",
        "criminal",
        "crioulo",
        "crise",
        "criticar",
        "crosta",
        "crua",
        "cruzeiro",
        "cubano",
        "cueca",
        "cuidado",
        "cujo",
        "culatra",
        "culminar",
        "culpar",
        "cultura",
        "cumprir",
        "cunhado",
        "cupido",
        "curativo",
        "curral",
        "cursar",
        "curto",
        "cuspir",
        "custear",
        "cutelo",
        "damasco",
        "datar",
        "debater",
        "debitar",
        "deboche",
        "debulhar",
        "decalque",
        "decimal",
        "declive",
        "decote",
        "decretar",
        "dedal",
        "dedicado",
        "deduzir",
        "defesa",
        "defumar",
        "degelo",
        "degrau",
        "degustar",
        "deitado",
        "deixar",
        "delator",
        "delegado",
        "delinear",
        "delonga",
        "demanda",
        "demitir",
        "demolido",
        "dentista",
        "depenado",
        "depilar",
        "depois",
        "depressa",
        "depurar",
        "deriva",
        "derramar",
        "desafio",
        "desbotar",
        "descanso",
        "desenho",
        "desfiado",
        "desgaste",
        "desigual",
        "deslize",
        "desmamar",
        "desova",
        "despesa",
        "destaque",
        "desviar",
        "detalhar",
        "detentor",
        "detonar",
        "detrito",
        "deusa",
        "dever",
        "devido",
        "devotado",
        "dezena",
        "diagrama",
        "dialeto",
        "didata",
        "difuso",
        "digitar",
        "dilatado",
        "diluente",
        "diminuir",
        "dinastia",
        "dinheiro",
        "diocese",
        "direto",
        "discreta",
        "disfarce",
        "disparo",
        "disquete",
        "dissipar",
        "distante",
        "ditador",
        "diurno",
        "diverso",
        "divisor",
        "divulgar",
        "dizer",
        "dobrador",
        "dolorido",
        "domador",
        "dominado",
        "donativo",
        "donzela",
        "dormente",
        "dorsal",
        "dosagem",
        "dourado",
        "doutor",
        "drenagem",
        "drible",
        "drogaria",
        "duelar",
        "duende",
        "dueto",
        "duplo",
        "duquesa",
        "durante",
        "duvidoso",
        "eclodir",
        "ecoar",
        "ecologia",
        "edificar",
        "edital",
        "educado",
        "efeito",
        "efetivar",
        "ejetar",
        "elaborar",
        "eleger",
        "eleitor",
        "elenco",
        "elevador",
        "eliminar",
        "elogiar",
        "embargo",
        "embolado",
        "embrulho",
        "embutido",
        "emenda",
        "emergir",
        "emissor",
        "empatia",
        "empenho",
        "empinado",
        "empolgar",
        "emprego",
        "empurrar",
        "emulador",
        "encaixe",
        "encenado",
        "enchente",
        "encontro",
        "endeusar",
        "endossar",
        "enfaixar",
        "enfeite",
        "enfim",
        "engajado",
        "engenho",
        "englobar",
        "engomado",
        "engraxar",
        "enguia",
        "enjoar",
        "enlatar",
        "enquanto",
        "enraizar",
        "enrolado",
        "enrugar",
        "ensaio",
        "enseada",
        "ensino",
        "ensopado",
        "entanto",
        "enteado",
        "entidade",
        "entortar",
        "entrada",
        "entulho",
        "envergar",
        "enviado",
        "envolver",
        "enxame",
        "enxerto",
        "enxofre",
        "enxuto",
        "epiderme",
        "equipar",
        "ereto",
        "erguido",
        "errata",
        "erva",
        "ervilha",
        "esbanjar",
        "esbelto",
        "escama",
        "escola",
        "escrita",
        "escuta",
        "esfinge",
        "esfolar",
        "esfregar",
        "esfumado",
        "esgrima",
        "esmalte",
        "espanto",
        "espelho",
        "espiga",
        "esponja",
        "espreita",
        "espumar",
        "esquerda",
        "estaca",
        "esteira",
        "esticar",
        "estofado",
        "estrela",
        "estudo",
        "esvaziar",
        "etanol",
        "etiqueta",
        "euforia",
        "europeu",
        "evacuar",
        "evaporar",
        "evasivo",
        "eventual",
        "evidente",
        "evoluir",
        "exagero",
        "exalar",
        "examinar",
        "exato",
        "exausto",
        "excesso",
        "excitar",
        "exclamar",
        "executar",
        "exemplo",
        "exibir",
        "exigente",
        "exonerar",
        "expandir",
        "expelir",
        "expirar",
        "explanar",
        "exposto",
        "expresso",
        "expulsar",
        "externo",
        "extinto",
        "extrato",
        "fabricar",
        "fabuloso",
        "faceta",
        "facial",
        "fada",
        "fadiga",
        "faixa",
        "falar",
        "falta",
        "familiar",
        "fandango",
        "fanfarra",
        "fantoche",
        "fardado",
        "farelo",
        "farinha",
        "farofa",
        "farpa",
        "fartura",
        "fatia",
        "fator",
        "favorita",
        "faxina",
        "fazenda",
        "fechado",
        "feijoada",
        "feirante",
        "felino",
        "feminino",
        "fenda",
        "feno",
        "fera",
        "feriado",
        "ferrugem",
        "ferver",
        "festejar",
        "fetal",
        "feudal",
        "fiapo",
        "fibrose",
        "ficar",
        "ficheiro",
        "figurado",
        "fileira",
        "filho",
        "filme",
        "filtrar",
        "firmeza",
        "fisgada",
        "fissura",
        "fita",
        "fivela",
        "fixador",
        "fixo",
        "flacidez",
        "flamingo",
        "flanela",
        "flechada",
        "flora",
        "flutuar",
        "fluxo",
        "focal",
        "focinho",
        "fofocar",
        "fogo",
        "foguete",
        "foice",
        "folgado",
        "folheto",
        "forjar",
        "formiga",
        "forno",
        "forte",
        "fosco",
        "fossa",
        "fragata",
        "fralda",
        "frango",
        "frasco",
        "fraterno",
        "freira",
        "frente",
        "fretar",
        "frieza",
        "friso",
        "fritura",
        "fronha",
        "frustrar",
        "fruteira",
        "fugir",
        "fulano",
        "fuligem",
        "fundar",
        "fungo",
        "funil",
        "furador",
        "furioso",
        "futebol",
        "gabarito",
        "gabinete",
        "gado",
        "gaiato",
        "gaiola",
        "gaivota",
        "galega",
        "galho",
        "galinha",
        "galocha",
        "ganhar",
        "garagem",
        "garfo",
        "gargalo",
        "garimpo",
        "garoupa",
        "garrafa",
        "gasoduto",
        "gasto",
        "gata",
        "gatilho",
        "gaveta",
        "gazela",
        "gelado",
        "geleia",
        "gelo",
        "gemada",
        "gemer",
        "gemido",
        "generoso",
        "gengiva",
        "genial",
        "genoma",
        "genro",
        "geologia",
        "gerador",
        "germinar",
        "gesso",
        "gestor",
        "ginasta",
        "gincana",
        "gingado",
        "girafa",
        "girino",
        "glacial",
        "glicose",
        "global",
        "glorioso",
        "goela",
        "goiaba",
        "golfe",
        "golpear",
        "gordura",
        "gorjeta",
        "gorro",
        "gostoso",
        "goteira",
        "governar",
        "gracejo",
        "gradual",
        "grafite",
        "gralha",
        "grampo",
        "granada",
        "gratuito",
        "graveto",
        "graxa",
        "grego",
        "grelhar",
        "greve",
        "grilo",
        "grisalho",
        "gritaria",
        "grosso",
        "grotesco",
        "grudado",
        "grunhido",
        "gruta",
        "guache",
        "guarani",
        "guaxinim",
        "guerrear",
        "guiar",
        "guincho",
        "guisado",
        "gula",
        "guloso",
        "guru",
        "habitar",
        "harmonia",
        "haste",
        "haver",
        "hectare",
        "herdar",
        "heresia",
        "hesitar",
        "hiato",
        "hibernar",
        "hidratar",
        "hiena",
        "hino",
        "hipismo",
        "hipnose",
        "hipoteca",
        "hoje",
        "holofote",
        "homem",
        "honesto",
        "honrado",
        "hormonal",
        "hospedar",
        "humorado",
        "iate",
        "ideia",
        "idoso",
        "ignorado",
        "igreja",
        "iguana",
        "ileso",
        "ilha",
        "iludido",
        "iluminar",
        "ilustrar",
        "imagem",
        "imediato",
        "imenso",
        "imersivo",
        "iminente",
        "imitador",
        "imortal",
        "impacto",
        "impedir",
        "implante",
        "impor",
        "imprensa",
        "impune",
        "imunizar",
        "inalador",
        "inapto",
        "inativo",
        "incenso",
        "inchar",
        "incidir",
        "incluir",
        "incolor",
        "indeciso",
        "indireto",
        "indutor",
        "ineficaz",
        "inerente",
        "infantil",
        "infestar",
        "infinito",
        "inflamar",
        "informal",
        "infrator",
        "ingerir",
        "inibido",
        "inicial",
        "inimigo",
        "injetar",
        "inocente",
        "inodoro",
        "inovador",
        "inox",
        "inquieto",
        "inscrito",
        "inseto",
        "insistir",
        "inspetor",
        "instalar",
        "insulto",
        "intacto",
        "integral",
        "intimar",
        "intocado",
        "intriga",
        "invasor",
        "inverno",
        "invicto",
        "invocar",
        "iogurte",
        "iraniano",
        "ironizar",
        "irreal",
        "irritado",
        "isca",
        "isento",
        "isolado",
        "isqueiro",
        "italiano",
        "janeiro",
        "jangada",
        "janta",
        "jararaca",
        "jardim",
        "jarro",
        "jasmim",
        "jato",
        "javali",
        "jazida",
        "jejum",
        "joaninha",
        "joelhada",
        "jogador",
        "joia",
        "jornal",
        "jorrar",
        "jovem",
        "juba",
        "judeu",
        "judoca",
        "juiz",
        "julgador",
        "julho",
        "jurado",
        "jurista",
        "juro",
        "justa",
        "labareda",
        "laboral",
        "lacre",
        "lactante",
        "ladrilho",
        "lagarta",
        "lagoa",
        "laje",
        "lamber",
        "lamentar",
        "laminar",
        "lampejo",
        "lanche",
        "lapidar",
        "lapso",
        "laranja",
        "lareira",
        "largura",
        "lasanha",
        "lastro",
        "lateral",
        "latido",
        "lavanda",
        "lavoura",
        "lavrador",
        "laxante",
        "lazer",
        "lealdade",
        "lebre",
        "legado",
        "legendar",
        "legista",
        "leigo",
        "leiloar",
        "leitura",
        "lembrete",
        "leme",
        "lenhador",
        "lentilha",
        "leoa",
        "lesma",
        "leste",
        "letivo",
        "letreiro",
        "levar",
        "leveza",
        "levitar",
        "liberal",
        "libido",
        "liderar",
        "ligar",
        "ligeiro",
        "limitar",
        "limoeiro",
        "limpador",
        "linda",
        "linear",
        "linhagem",
        "liquidez",
        "listagem",
        "lisura",
        "litoral",
        "livro",
        "lixa",
        "lixeira",
        "locador",
        "locutor",
        "lojista",
        "lombo",
        "lona",
        "longe",
        "lontra",
        "lorde",
        "lotado",
        "loteria",
        "loucura",
        "lousa",
        "louvar",
        "luar",
        "lucidez",
        "lucro",
        "luneta",
        "lustre",
        "lutador",
        "luva",
        "macaco",
        "macete",
        "machado",
        "macio",
        "madeira",
        "madrinha",
        "magnata",
        "magreza",
        "maior",
        "mais",
        "malandro",
        "malha",
        "malote",
        "maluco",
        "mamilo",
        "mamoeiro",
        "mamute",
        "manada",
        "mancha",
        "mandato",
        "manequim",
        "manhoso",
        "manivela",
        "manobrar",
        "mansa",
        "manter",
        "manusear",
        "mapeado",
        "maquinar",
        "marcador",
        "maresia",
        "marfim",
        "margem",
        "marinho",
        "marmita",
        "maroto",
        "marquise",
        "marreco",
        "martelo",
        "marujo",
        "mascote",
        "masmorra",
        "massagem",
        "mastigar",
        "matagal",
        "materno",
        "matinal",
        "matutar",
        "maxilar",
        "medalha",
        "medida",
        "medusa",
        "megafone",
        "meiga",
        "melancia",
        "melhor",
        "membro",
        "memorial",
        "menino",
        "menos",
        "mensagem",
        "mental",
        "merecer",
        "mergulho",
        "mesada",
        "mesclar",
        "mesmo",
        "mesquita",
        "mestre",
        "metade",
        "meteoro",
        "metragem",
        "mexer",
        "mexicano",
        "micro",
        "migalha",
        "migrar",
        "milagre",
        "milenar",
        "milhar",
        "mimado",
        "minerar",
        "minhoca",
        "ministro",
        "minoria",
        "miolo",
        "mirante",
        "mirtilo",
        "misturar",
        "mocidade",
        "moderno",
        "modular",
        "moeda",
        "moer",
        "moinho",
        "moita",
        "moldura",
        "moleza",
        "molho",
        "molinete",
        "molusco",
        "montanha",
        "moqueca",
        "morango",
        "morcego",
        "mordomo",
        "morena",
        "mosaico",
        "mosquete",
        "mostarda",
        "motel",
        "motim",
        "moto",
        "motriz",
        "muda",
        "muito",
        "mulata",
        "mulher",
        "multar",
        "mundial",
        "munido",
        "muralha",
        "murcho",
        "muscular",
        "museu",
        "musical",
        "nacional",
        "nadador",
        "naja",
        "namoro",
        "narina",
        "narrado",
        "nascer",
        "nativa",
        "natureza",
        "navalha",
        "navegar",
        "navio",
        "neblina",
        "nebuloso",
        "negativa",
        "negociar",
        "negrito",
        "nervoso",
        "neta",
        "neural",
        "nevasca",
        "nevoeiro",
        "ninar",
        "ninho",
        "nitidez",
        "nivelar",
        "nobreza",
        "noite",
        "noiva",
        "nomear",
        "nominal",
        "nordeste",
        "nortear",
        "notar",
        "noticiar",
        "noturno",
        "novelo",
        "novilho",
        "novo",
        "nublado",
        "nudez",
        "numeral",
        "nupcial",
        "nutrir",
        "nuvem",
        "obcecado",
        "obedecer",
        "objetivo",
        "obrigado",
        "obscuro",
        "obstetra",
        "obter",
        "obturar",
        "ocidente",
        "ocioso",
        "ocorrer",
        "oculista",
        "ocupado",
        "ofegante",
        "ofensiva",
        "oferenda",
        "oficina",
        "ofuscado",
        "ogiva",
        "olaria",
        "oleoso",
        "olhar",
        "oliveira",
        "ombro",
        "omelete",
        "omisso",
        "omitir",
        "ondulado",
        "oneroso",
        "ontem",
        "opcional",
        "operador",
        "oponente",
        "oportuno",
        "oposto",
        "orar",
        "orbitar",
        "ordem",
        "ordinal",
        "orfanato",
        "orgasmo",
        "orgulho",
        "oriental",
        "origem",
        "oriundo",
        "orla",
        "ortodoxo",
        "orvalho",
        "oscilar",
        "ossada",
        "osso",
        "ostentar",
        "otimismo",
        "ousadia",
        "outono",
        "outubro",
        "ouvido",
        "ovelha",
        "ovular",
        "oxidar",
        "oxigenar",
        "pacato",
        "paciente",
        "pacote",
        "pactuar",
        "padaria",
        "padrinho",
        "pagar",
        "pagode",
        "painel",
        "pairar",
        "paisagem",
        "palavra",
        "palestra",
        "palheta",
        "palito",
        "palmada",
        "palpitar",
        "pancada",
        "panela",
        "panfleto",
        "panqueca",
        "pantanal",
        "papagaio",
        "papelada",
        "papiro",
        "parafina",
        "parcial",
        "pardal",
        "parede",
        "partida",
        "pasmo",
        "passado",
        "pastel",
        "patamar",
        "patente",
        "patinar",
        "patrono",
        "paulada",
        "pausar",
        "peculiar",
        "pedalar",
        "pedestre",
        "pediatra",
        "pedra",
        "pegada",
        "peitoral",
        "peixe",
        "pele",
        "pelicano",
        "penca",
        "pendurar",
        "peneira",
        "penhasco",
        "pensador",
        "pente",
        "perceber",
        "perfeito",
        "pergunta",
        "perito",
        "permitir",
        "perna",
        "perplexo",
        "persiana",
        "pertence",
        "peruca",
        "pescado",
        "pesquisa",
        "pessoa",
        "petiscar",
        "piada",
        "picado",
        "piedade",
        "pigmento",
        "pilastra",
        "pilhado",
        "pilotar",
        "pimenta",
        "pincel",
        "pinguim",
        "pinha",
        "pinote",
        "pintar",
        "pioneiro",
        "pipoca",
        "piquete",
        "piranha",
        "pires",
        "pirueta",
        "piscar",
        "pistola",
        "pitanga",
        "pivete",
        "planta",
        "plaqueta",
        "platina",
        "plebeu",
        "plumagem",
        "pluvial",
        "pneu",
        "poda",
        "poeira",
        "poetisa",
        "polegada",
        "policiar",
        "poluente",
        "polvilho",
        "pomar",
        "pomba",
        "ponderar",
        "pontaria",
        "populoso",
        "porta",
        "possuir",
        "postal",
        "pote",
        "poupar",
        "pouso",
        "povoar",
        "praia",
        "prancha",
        "prato",
        "praxe",
        "prece",
        "predador",
        "prefeito",
        "premiar",
        "prensar",
        "preparar",
        "presilha",
        "pretexto",
        "prevenir",
        "prezar",
        "primata",
        "princesa",
        "prisma",
        "privado",
        "processo",
        "produto",
        "profeta",
        "proibido",
        "projeto",
        "prometer",
        "propagar",
        "prosa",
        "protetor",
        "provador",
        "publicar",
        "pudim",
        "pular",
        "pulmonar",
        "pulseira",
        "punhal",
        "punir",
        "pupilo",
        "pureza",
        "puxador",
        "quadra",
        "quantia",
        "quarto",
        "quase",
        "quebrar",
        "queda",
        "queijo",
        "quente",
        "querido",
        "quimono",
        "quina",
        "quiosque",
        "rabanada",
        "rabisco",
        "rachar",
        "racionar",
        "radial",
        "raiar",
        "rainha",
        "raio",
        "raiva",
        "rajada",
        "ralado",
        "ramal",
        "ranger",
        "ranhura",
        "rapadura",
        "rapel",
        "rapidez",
        "raposa",
        "raquete",
        "raridade",
        "rasante",
        "rascunho",
        "rasgar",
        "raspador",
        "rasteira",
        "rasurar",
        "ratazana",
        "ratoeira",
        "realeza",
        "reanimar",
        "reaver",
        "rebaixar",
        "rebelde",
        "rebolar",
        "recado",
        "recente",
        "recheio",
        "recibo",
        "recordar",
        "recrutar",
        "recuar",
        "rede",
        "redimir",
        "redonda",
        "reduzida",
        "reenvio",
        "refinar",
        "refletir",
        "refogar",
        "refresco",
        "refugiar",
        "regalia",
        "regime",
        "regra",
        "reinado",
        "reitor",
        "rejeitar",
        "relativo",
        "remador",
        "remendo",
        "remorso",
        "renovado",
        "reparo",
        "repelir",
        "repleto",
        "repolho",
        "represa",
        "repudiar",
        "requerer",
        "resenha",
        "resfriar",
        "resgatar",
        "residir",
        "resolver",
        "respeito",
        "ressaca",
        "restante",
        "resumir",
        "retalho",
        "reter",
        "retirar",
        "retomada",
        "retratar",
        "revelar",
        "revisor",
        "revolta",
        "riacho",
        "rica",
        "rigidez",
        "rigoroso",
        "rimar",
        "ringue",
        "risada",
        "risco",
        "risonho",
        "robalo",
        "rochedo",
        "rodada",
        "rodeio",
        "rodovia",
        "roedor",
        "roleta",
        "romano",
        "roncar",
        "rosado",
        "roseira",
        "rosto",
        "rota",
        "roteiro",
        "rotina",
        "rotular",
        "rouco",
        "roupa",
        "roxo",
        "rubro",
        "rugido",
        "rugoso",
        "ruivo",
        "rumo",
        "rupestre",
        "russo",
        "sabor",
        "saciar",
        "sacola",
        "sacudir",
        "sadio",
        "safira",
        "saga",
        "sagrada",
        "saibro",
        "salada",
        "saleiro",
        "salgado",
        "saliva",
        "salpicar",
        "salsicha",
        "saltar",
        "salvador",
        "sambar",
        "samurai",
        "sanar",
        "sanfona",
        "sangue",
        "sanidade",
        "sapato",
        "sarda",
        "sargento",
        "sarjeta",
        "saturar",
        "saudade",
        "saxofone",
        "sazonal",
        "secar",
        "secular",
        "seda",
        "sedento",
        "sediado",
        "sedoso",
        "sedutor",
        "segmento",
        "segredo",
        "segundo",
        "seiva",
        "seleto",
        "selvagem",
        "semanal",
        "semente",
        "senador",
        "senhor",
        "sensual",
        "sentado",
        "separado",
        "sereia",
        "seringa",
        "serra",
        "servo",
        "setembro",
        "setor",
        "sigilo",
        "silhueta",
        "silicone",
        "simetria",
        "simpatia",
        "simular",
        "sinal",
        "sincero",
        "singular",
        "sinopse",
        "sintonia",
        "sirene",
        "siri",
        "situado",
        "soberano",
        "sobra",
        "socorro",
        "sogro",
        "soja",
        "solda",
        "soletrar",
        "solteiro",
        "sombrio",
        "sonata",
        "sondar",
        "sonegar",
        "sonhador",
        "sono",
        "soprano",
        "soquete",
        "sorrir",
        "sorteio",
        "sossego",
        "sotaque",
        "soterrar",
        "sovado",
        "sozinho",
        "suavizar",
        "subida",
        "submerso",
        "subsolo",
        "subtrair",
        "sucata",
        "sucesso",
        "suco",
        "sudeste",
        "sufixo",
        "sugador",
        "sugerir",
        "sujeito",
        "sulfato",
        "sumir",
        "suor",
        "superior",
        "suplicar",
        "suposto",
        "suprimir",
        "surdina",
        "surfista",
        "surpresa",
        "surreal",
        "surtir",
        "suspiro",
        "sustento",
        "tabela",
        "tablete",
        "tabuada",
        "tacho",
        "tagarela",
        "talher",
        "talo",
        "talvez",
        "tamanho",
        "tamborim",
        "tampa",
        "tangente",
        "tanto",
        "tapar",
        "tapioca",
        "tardio",
        "tarefa",
        "tarja",
        "tarraxa",
        "tatuagem",
        "taurino",
        "taxativo",
        "taxista",
        "teatral",
        "tecer",
        "tecido",
        "teclado",
        "tedioso",
        "teia",
        "teimar",
        "telefone",
        "telhado",
        "tempero",
        "tenente",
        "tensor",
        "tentar",
        "termal",
        "terno",
        "terreno",
        "tese",
        "tesoura",
        "testado",
        "teto",
        "textura",
        "texugo",
        "tiara",
        "tigela",
        "tijolo",
        "timbrar",
        "timidez",
        "tingido",
        "tinteiro",
        "tiragem",
        "titular",
        "toalha",
        "tocha",
        "tolerar",
        "tolice",
        "tomada",
        "tomilho",
        "tonel",
        "tontura",
        "topete",
        "tora",
        "torcido",
        "torneio",
        "torque",
        "torrada",
        "torto",
        "tostar",
        "touca",
        "toupeira",
        "toxina",
        "trabalho",
        "tracejar",
        "tradutor",
        "trafegar",
        "trajeto",
        "trama",
        "trancar",
        "trapo",
        "traseiro",
        "tratador",
        "travar",
        "treino",
        "tremer",
        "trepidar",
        "trevo",
        "triagem",
        "tribo",
        "triciclo",
        "tridente",
        "trilogia",
        "trindade",
        "triplo",
        "triturar",
        "triunfal",
        "trocar",
        "trombeta",
        "trova",
        "trunfo",
        "truque",
        "tubular",
        "tucano",
        "tudo",
        "tulipa",
        "tupi",
        "turbo",
        "turma",
        "turquesa",
        "tutelar",
        "tutorial",
        "uivar",
        "umbigo",
        "unha",
        "unidade",
        "uniforme",
        "urologia",
        "urso",
        "urtiga",
        "urubu",
        "usado",
        "usina",
        "usufruir",
        "vacina",
        "vadiar",
        "vagaroso",
        "vaidoso",
        "vala",
        "valente",
        "validade",
        "valores",
        "vantagem",
        "vaqueiro",
        "varanda",
        "vareta",
        "varrer",
        "vascular",
        "vasilha",
        "vassoura",
        "vazar",
        "vazio",
        "veado",
        "vedar",
        "vegetar",
        "veicular",
        "veleiro",
        "velhice",
        "veludo",
        "vencedor",
        "vendaval",
        "venerar",
        "ventre",
        "verbal",
        "verdade",
        "vereador",
        "vergonha",
        "vermelho",
        "verniz",
        "versar",
        "vertente",
        "vespa",
        "vestido",
        "vetorial",
        "viaduto",
        "viagem",
        "viajar",
        "viatura",
        "vibrador",
        "videira",
        "vidraria",
        "viela",
        "viga",
        "vigente",
        "vigiar",
        "vigorar",
        "vilarejo",
        "vinco",
        "vinheta",
        "vinil",
        "violeta",
        "virada",
        "virtude",
        "visitar",
        "visto",
        "vitral",
        "viveiro",
        "vizinho",
        "voador",
        "voar",
        "vogal",
        "volante",
        "voleibol",
        "voltagem",
        "volumoso",
        "vontade",
        "vulto",
        "vuvuzela",
        "xadrez",
        "xarope",
        "xeque",
        "xeretar",
        "xerife",
        "xingar",
        "zangado",
        "zarpar",
        "zebu",
        "zelador",
        "zombar",
        "zoologia",
        "zumbido"
      ];
    }
  });

  // node_modules/bip39/src/wordlists/english.json
  var require_english = __commonJS({
    "node_modules/bip39/src/wordlists/english.json"(exports, module) {
      module.exports = [
        "abandon",
        "ability",
        "able",
        "about",
        "above",
        "absent",
        "absorb",
        "abstract",
        "absurd",
        "abuse",
        "access",
        "accident",
        "account",
        "accuse",
        "achieve",
        "acid",
        "acoustic",
        "acquire",
        "across",
        "act",
        "action",
        "actor",
        "actress",
        "actual",
        "adapt",
        "add",
        "addict",
        "address",
        "adjust",
        "admit",
        "adult",
        "advance",
        "advice",
        "aerobic",
        "affair",
        "afford",
        "afraid",
        "again",
        "age",
        "agent",
        "agree",
        "ahead",
        "aim",
        "air",
        "airport",
        "aisle",
        "alarm",
        "album",
        "alcohol",
        "alert",
        "alien",
        "all",
        "alley",
        "allow",
        "almost",
        "alone",
        "alpha",
        "already",
        "also",
        "alter",
        "always",
        "amateur",
        "amazing",
        "among",
        "amount",
        "amused",
        "analyst",
        "anchor",
        "ancient",
        "anger",
        "angle",
        "angry",
        "animal",
        "ankle",
        "announce",
        "annual",
        "another",
        "answer",
        "antenna",
        "antique",
        "anxiety",
        "any",
        "apart",
        "apology",
        "appear",
        "apple",
        "approve",
        "april",
        "arch",
        "arctic",
        "area",
        "arena",
        "argue",
        "arm",
        "armed",
        "armor",
        "army",
        "around",
        "arrange",
        "arrest",
        "arrive",
        "arrow",
        "art",
        "artefact",
        "artist",
        "artwork",
        "ask",
        "aspect",
        "assault",
        "asset",
        "assist",
        "assume",
        "asthma",
        "athlete",
        "atom",
        "attack",
        "attend",
        "attitude",
        "attract",
        "auction",
        "audit",
        "august",
        "aunt",
        "author",
        "auto",
        "autumn",
        "average",
        "avocado",
        "avoid",
        "awake",
        "aware",
        "away",
        "awesome",
        "awful",
        "awkward",
        "axis",
        "baby",
        "bachelor",
        "bacon",
        "badge",
        "bag",
        "balance",
        "balcony",
        "ball",
        "bamboo",
        "banana",
        "banner",
        "bar",
        "barely",
        "bargain",
        "barrel",
        "base",
        "basic",
        "basket",
        "battle",
        "beach",
        "bean",
        "beauty",
        "because",
        "become",
        "beef",
        "before",
        "begin",
        "behave",
        "behind",
        "believe",
        "below",
        "belt",
        "bench",
        "benefit",
        "best",
        "betray",
        "better",
        "between",
        "beyond",
        "bicycle",
        "bid",
        "bike",
        "bind",
        "biology",
        "bird",
        "birth",
        "bitter",
        "black",
        "blade",
        "blame",
        "blanket",
        "blast",
        "bleak",
        "bless",
        "blind",
        "blood",
        "blossom",
        "blouse",
        "blue",
        "blur",
        "blush",
        "board",
        "boat",
        "body",
        "boil",
        "bomb",
        "bone",
        "bonus",
        "book",
        "boost",
        "border",
        "boring",
        "borrow",
        "boss",
        "bottom",
        "bounce",
        "box",
        "boy",
        "bracket",
        "brain",
        "brand",
        "brass",
        "brave",
        "bread",
        "breeze",
        "brick",
        "bridge",
        "brief",
        "bright",
        "bring",
        "brisk",
        "broccoli",
        "broken",
        "bronze",
        "broom",
        "brother",
        "brown",
        "brush",
        "bubble",
        "buddy",
        "budget",
        "buffalo",
        "build",
        "bulb",
        "bulk",
        "bullet",
        "bundle",
        "bunker",
        "burden",
        "burger",
        "burst",
        "bus",
        "business",
        "busy",
        "butter",
        "buyer",
        "buzz",
        "cabbage",
        "cabin",
        "cable",
        "cactus",
        "cage",
        "cake",
        "call",
        "calm",
        "camera",
        "camp",
        "can",
        "canal",
        "cancel",
        "candy",
        "cannon",
        "canoe",
        "canvas",
        "canyon",
        "capable",
        "capital",
        "captain",
        "car",
        "carbon",
        "card",
        "cargo",
        "carpet",
        "carry",
        "cart",
        "case",
        "cash",
        "casino",
        "castle",
        "casual",
        "cat",
        "catalog",
        "catch",
        "category",
        "cattle",
        "caught",
        "cause",
        "caution",
        "cave",
        "ceiling",
        "celery",
        "cement",
        "census",
        "century",
        "cereal",
        "certain",
        "chair",
        "chalk",
        "champion",
        "change",
        "chaos",
        "chapter",
        "charge",
        "chase",
        "chat",
        "cheap",
        "check",
        "cheese",
        "chef",
        "cherry",
        "chest",
        "chicken",
        "chief",
        "child",
        "chimney",
        "choice",
        "choose",
        "chronic",
        "chuckle",
        "chunk",
        "churn",
        "cigar",
        "cinnamon",
        "circle",
        "citizen",
        "city",
        "civil",
        "claim",
        "clap",
        "clarify",
        "claw",
        "clay",
        "clean",
        "clerk",
        "clever",
        "click",
        "client",
        "cliff",
        "climb",
        "clinic",
        "clip",
        "clock",
        "clog",
        "close",
        "cloth",
        "cloud",
        "clown",
        "club",
        "clump",
        "cluster",
        "clutch",
        "coach",
        "coast",
        "coconut",
        "code",
        "coffee",
        "coil",
        "coin",
        "collect",
        "color",
        "column",
        "combine",
        "come",
        "comfort",
        "comic",
        "common",
        "company",
        "concert",
        "conduct",
        "confirm",
        "congress",
        "connect",
        "consider",
        "control",
        "convince",
        "cook",
        "cool",
        "copper",
        "copy",
        "coral",
        "core",
        "corn",
        "correct",
        "cost",
        "cotton",
        "couch",
        "country",
        "couple",
        "course",
        "cousin",
        "cover",
        "coyote",
        "crack",
        "cradle",
        "craft",
        "cram",
        "crane",
        "crash",
        "crater",
        "crawl",
        "crazy",
        "cream",
        "credit",
        "creek",
        "crew",
        "cricket",
        "crime",
        "crisp",
        "critic",
        "crop",
        "cross",
        "crouch",
        "crowd",
        "crucial",
        "cruel",
        "cruise",
        "crumble",
        "crunch",
        "crush",
        "cry",
        "crystal",
        "cube",
        "culture",
        "cup",
        "cupboard",
        "curious",
        "current",
        "curtain",
        "curve",
        "cushion",
        "custom",
        "cute",
        "cycle",
        "dad",
        "damage",
        "damp",
        "dance",
        "danger",
        "daring",
        "dash",
        "daughter",
        "dawn",
        "day",
        "deal",
        "debate",
        "debris",
        "decade",
        "december",
        "decide",
        "decline",
        "decorate",
        "decrease",
        "deer",
        "defense",
        "define",
        "defy",
        "degree",
        "delay",
        "deliver",
        "demand",
        "demise",
        "denial",
        "dentist",
        "deny",
        "depart",
        "depend",
        "deposit",
        "depth",
        "deputy",
        "derive",
        "describe",
        "desert",
        "design",
        "desk",
        "despair",
        "destroy",
        "detail",
        "detect",
        "develop",
        "device",
        "devote",
        "diagram",
        "dial",
        "diamond",
        "diary",
        "dice",
        "diesel",
        "diet",
        "differ",
        "digital",
        "dignity",
        "dilemma",
        "dinner",
        "dinosaur",
        "direct",
        "dirt",
        "disagree",
        "discover",
        "disease",
        "dish",
        "dismiss",
        "disorder",
        "display",
        "distance",
        "divert",
        "divide",
        "divorce",
        "dizzy",
        "doctor",
        "document",
        "dog",
        "doll",
        "dolphin",
        "domain",
        "donate",
        "donkey",
        "donor",
        "door",
        "dose",
        "double",
        "dove",
        "draft",
        "dragon",
        "drama",
        "drastic",
        "draw",
        "dream",
        "dress",
        "drift",
        "drill",
        "drink",
        "drip",
        "drive",
        "drop",
        "drum",
        "dry",
        "duck",
        "dumb",
        "dune",
        "during",
        "dust",
        "dutch",
        "duty",
        "dwarf",
        "dynamic",
        "eager",
        "eagle",
        "early",
        "earn",
        "earth",
        "easily",
        "east",
        "easy",
        "echo",
        "ecology",
        "economy",
        "edge",
        "edit",
        "educate",
        "effort",
        "egg",
        "eight",
        "either",
        "elbow",
        "elder",
        "electric",
        "elegant",
        "element",
        "elephant",
        "elevator",
        "elite",
        "else",
        "embark",
        "embody",
        "embrace",
        "emerge",
        "emotion",
        "employ",
        "empower",
        "empty",
        "enable",
        "enact",
        "end",
        "endless",
        "endorse",
        "enemy",
        "energy",
        "enforce",
        "engage",
        "engine",
        "enhance",
        "enjoy",
        "enlist",
        "enough",
        "enrich",
        "enroll",
        "ensure",
        "enter",
        "entire",
        "entry",
        "envelope",
        "episode",
        "equal",
        "equip",
        "era",
        "erase",
        "erode",
        "erosion",
        "error",
        "erupt",
        "escape",
        "essay",
        "essence",
        "estate",
        "eternal",
        "ethics",
        "evidence",
        "evil",
        "evoke",
        "evolve",
        "exact",
        "example",
        "excess",
        "exchange",
        "excite",
        "exclude",
        "excuse",
        "execute",
        "exercise",
        "exhaust",
        "exhibit",
        "exile",
        "exist",
        "exit",
        "exotic",
        "expand",
        "expect",
        "expire",
        "explain",
        "expose",
        "express",
        "extend",
        "extra",
        "eye",
        "eyebrow",
        "fabric",
        "face",
        "faculty",
        "fade",
        "faint",
        "faith",
        "fall",
        "false",
        "fame",
        "family",
        "famous",
        "fan",
        "fancy",
        "fantasy",
        "farm",
        "fashion",
        "fat",
        "fatal",
        "father",
        "fatigue",
        "fault",
        "favorite",
        "feature",
        "february",
        "federal",
        "fee",
        "feed",
        "feel",
        "female",
        "fence",
        "festival",
        "fetch",
        "fever",
        "few",
        "fiber",
        "fiction",
        "field",
        "figure",
        "file",
        "film",
        "filter",
        "final",
        "find",
        "fine",
        "finger",
        "finish",
        "fire",
        "firm",
        "first",
        "fiscal",
        "fish",
        "fit",
        "fitness",
        "fix",
        "flag",
        "flame",
        "flash",
        "flat",
        "flavor",
        "flee",
        "flight",
        "flip",
        "float",
        "flock",
        "floor",
        "flower",
        "fluid",
        "flush",
        "fly",
        "foam",
        "focus",
        "fog",
        "foil",
        "fold",
        "follow",
        "food",
        "foot",
        "force",
        "forest",
        "forget",
        "fork",
        "fortune",
        "forum",
        "forward",
        "fossil",
        "foster",
        "found",
        "fox",
        "fragile",
        "frame",
        "frequent",
        "fresh",
        "friend",
        "fringe",
        "frog",
        "front",
        "frost",
        "frown",
        "frozen",
        "fruit",
        "fuel",
        "fun",
        "funny",
        "furnace",
        "fury",
        "future",
        "gadget",
        "gain",
        "galaxy",
        "gallery",
        "game",
        "gap",
        "garage",
        "garbage",
        "garden",
        "garlic",
        "garment",
        "gas",
        "gasp",
        "gate",
        "gather",
        "gauge",
        "gaze",
        "general",
        "genius",
        "genre",
        "gentle",
        "genuine",
        "gesture",
        "ghost",
        "giant",
        "gift",
        "giggle",
        "ginger",
        "giraffe",
        "girl",
        "give",
        "glad",
        "glance",
        "glare",
        "glass",
        "glide",
        "glimpse",
        "globe",
        "gloom",
        "glory",
        "glove",
        "glow",
        "glue",
        "goat",
        "goddess",
        "gold",
        "good",
        "goose",
        "gorilla",
        "gospel",
        "gossip",
        "govern",
        "gown",
        "grab",
        "grace",
        "grain",
        "grant",
        "grape",
        "grass",
        "gravity",
        "great",
        "green",
        "grid",
        "grief",
        "grit",
        "grocery",
        "group",
        "grow",
        "grunt",
        "guard",
        "guess",
        "guide",
        "guilt",
        "guitar",
        "gun",
        "gym",
        "habit",
        "hair",
        "half",
        "hammer",
        "hamster",
        "hand",
        "happy",
        "harbor",
        "hard",
        "harsh",
        "harvest",
        "hat",
        "have",
        "hawk",
        "hazard",
        "head",
        "health",
        "heart",
        "heavy",
        "hedgehog",
        "height",
        "hello",
        "helmet",
        "help",
        "hen",
        "hero",
        "hidden",
        "high",
        "hill",
        "hint",
        "hip",
        "hire",
        "history",
        "hobby",
        "hockey",
        "hold",
        "hole",
        "holiday",
        "hollow",
        "home",
        "honey",
        "hood",
        "hope",
        "horn",
        "horror",
        "horse",
        "hospital",
        "host",
        "hotel",
        "hour",
        "hover",
        "hub",
        "huge",
        "human",
        "humble",
        "humor",
        "hundred",
        "hungry",
        "hunt",
        "hurdle",
        "hurry",
        "hurt",
        "husband",
        "hybrid",
        "ice",
        "icon",
        "idea",
        "identify",
        "idle",
        "ignore",
        "ill",
        "illegal",
        "illness",
        "image",
        "imitate",
        "immense",
        "immune",
        "impact",
        "impose",
        "improve",
        "impulse",
        "inch",
        "include",
        "income",
        "increase",
        "index",
        "indicate",
        "indoor",
        "industry",
        "infant",
        "inflict",
        "inform",
        "inhale",
        "inherit",
        "initial",
        "inject",
        "injury",
        "inmate",
        "inner",
        "innocent",
        "input",
        "inquiry",
        "insane",
        "insect",
        "inside",
        "inspire",
        "install",
        "intact",
        "interest",
        "into",
        "invest",
        "invite",
        "involve",
        "iron",
        "island",
        "isolate",
        "issue",
        "item",
        "ivory",
        "jacket",
        "jaguar",
        "jar",
        "jazz",
        "jealous",
        "jeans",
        "jelly",
        "jewel",
        "job",
        "join",
        "joke",
        "journey",
        "joy",
        "judge",
        "juice",
        "jump",
        "jungle",
        "junior",
        "junk",
        "just",
        "kangaroo",
        "keen",
        "keep",
        "ketchup",
        "key",
        "kick",
        "kid",
        "kidney",
        "kind",
        "kingdom",
        "kiss",
        "kit",
        "kitchen",
        "kite",
        "kitten",
        "kiwi",
        "knee",
        "knife",
        "knock",
        "know",
        "lab",
        "label",
        "labor",
        "ladder",
        "lady",
        "lake",
        "lamp",
        "language",
        "laptop",
        "large",
        "later",
        "latin",
        "laugh",
        "laundry",
        "lava",
        "law",
        "lawn",
        "lawsuit",
        "layer",
        "lazy",
        "leader",
        "leaf",
        "learn",
        "leave",
        "lecture",
        "left",
        "leg",
        "legal",
        "legend",
        "leisure",
        "lemon",
        "lend",
        "length",
        "lens",
        "leopard",
        "lesson",
        "letter",
        "level",
        "liar",
        "liberty",
        "library",
        "license",
        "life",
        "lift",
        "light",
        "like",
        "limb",
        "limit",
        "link",
        "lion",
        "liquid",
        "list",
        "little",
        "live",
        "lizard",
        "load",
        "loan",
        "lobster",
        "local",
        "lock",
        "logic",
        "lonely",
        "long",
        "loop",
        "lottery",
        "loud",
        "lounge",
        "love",
        "loyal",
        "lucky",
        "luggage",
        "lumber",
        "lunar",
        "lunch",
        "luxury",
        "lyrics",
        "machine",
        "mad",
        "magic",
        "magnet",
        "maid",
        "mail",
        "main",
        "major",
        "make",
        "mammal",
        "man",
        "manage",
        "mandate",
        "mango",
        "mansion",
        "manual",
        "maple",
        "marble",
        "march",
        "margin",
        "marine",
        "market",
        "marriage",
        "mask",
        "mass",
        "master",
        "match",
        "material",
        "math",
        "matrix",
        "matter",
        "maximum",
        "maze",
        "meadow",
        "mean",
        "measure",
        "meat",
        "mechanic",
        "medal",
        "media",
        "melody",
        "melt",
        "member",
        "memory",
        "mention",
        "menu",
        "mercy",
        "merge",
        "merit",
        "merry",
        "mesh",
        "message",
        "metal",
        "method",
        "middle",
        "midnight",
        "milk",
        "million",
        "mimic",
        "mind",
        "minimum",
        "minor",
        "minute",
        "miracle",
        "mirror",
        "misery",
        "miss",
        "mistake",
        "mix",
        "mixed",
        "mixture",
        "mobile",
        "model",
        "modify",
        "mom",
        "moment",
        "monitor",
        "monkey",
        "monster",
        "month",
        "moon",
        "moral",
        "more",
        "morning",
        "mosquito",
        "mother",
        "motion",
        "motor",
        "mountain",
        "mouse",
        "move",
        "movie",
        "much",
        "muffin",
        "mule",
        "multiply",
        "muscle",
        "museum",
        "mushroom",
        "music",
        "must",
        "mutual",
        "myself",
        "mystery",
        "myth",
        "naive",
        "name",
        "napkin",
        "narrow",
        "nasty",
        "nation",
        "nature",
        "near",
        "neck",
        "need",
        "negative",
        "neglect",
        "neither",
        "nephew",
        "nerve",
        "nest",
        "net",
        "network",
        "neutral",
        "never",
        "news",
        "next",
        "nice",
        "night",
        "noble",
        "noise",
        "nominee",
        "noodle",
        "normal",
        "north",
        "nose",
        "notable",
        "note",
        "nothing",
        "notice",
        "novel",
        "now",
        "nuclear",
        "number",
        "nurse",
        "nut",
        "oak",
        "obey",
        "object",
        "oblige",
        "obscure",
        "observe",
        "obtain",
        "obvious",
        "occur",
        "ocean",
        "october",
        "odor",
        "off",
        "offer",
        "office",
        "often",
        "oil",
        "okay",
        "old",
        "olive",
        "olympic",
        "omit",
        "once",
        "one",
        "onion",
        "online",
        "only",
        "open",
        "opera",
        "opinion",
        "oppose",
        "option",
        "orange",
        "orbit",
        "orchard",
        "order",
        "ordinary",
        "organ",
        "orient",
        "original",
        "orphan",
        "ostrich",
        "other",
        "outdoor",
        "outer",
        "output",
        "outside",
        "oval",
        "oven",
        "over",
        "own",
        "owner",
        "oxygen",
        "oyster",
        "ozone",
        "pact",
        "paddle",
        "page",
        "pair",
        "palace",
        "palm",
        "panda",
        "panel",
        "panic",
        "panther",
        "paper",
        "parade",
        "parent",
        "park",
        "parrot",
        "party",
        "pass",
        "patch",
        "path",
        "patient",
        "patrol",
        "pattern",
        "pause",
        "pave",
        "payment",
        "peace",
        "peanut",
        "pear",
        "peasant",
        "pelican",
        "pen",
        "penalty",
        "pencil",
        "people",
        "pepper",
        "perfect",
        "permit",
        "person",
        "pet",
        "phone",
        "photo",
        "phrase",
        "physical",
        "piano",
        "picnic",
        "picture",
        "piece",
        "pig",
        "pigeon",
        "pill",
        "pilot",
        "pink",
        "pioneer",
        "pipe",
        "pistol",
        "pitch",
        "pizza",
        "place",
        "planet",
        "plastic",
        "plate",
        "play",
        "please",
        "pledge",
        "pluck",
        "plug",
        "plunge",
        "poem",
        "poet",
        "point",
        "polar",
        "pole",
        "police",
        "pond",
        "pony",
        "pool",
        "popular",
        "portion",
        "position",
        "possible",
        "post",
        "potato",
        "pottery",
        "poverty",
        "powder",
        "power",
        "practice",
        "praise",
        "predict",
        "prefer",
        "prepare",
        "present",
        "pretty",
        "prevent",
        "price",
        "pride",
        "primary",
        "print",
        "priority",
        "prison",
        "private",
        "prize",
        "problem",
        "process",
        "produce",
        "profit",
        "program",
        "project",
        "promote",
        "proof",
        "property",
        "prosper",
        "protect",
        "proud",
        "provide",
        "public",
        "pudding",
        "pull",
        "pulp",
        "pulse",
        "pumpkin",
        "punch",
        "pupil",
        "puppy",
        "purchase",
        "purity",
        "purpose",
        "purse",
        "push",
        "put",
        "puzzle",
        "pyramid",
        "quality",
        "quantum",
        "quarter",
        "question",
        "quick",
        "quit",
        "quiz",
        "quote",
        "rabbit",
        "raccoon",
        "race",
        "rack",
        "radar",
        "radio",
        "rail",
        "rain",
        "raise",
        "rally",
        "ramp",
        "ranch",
        "random",
        "range",
        "rapid",
        "rare",
        "rate",
        "rather",
        "raven",
        "raw",
        "razor",
        "ready",
        "real",
        "reason",
        "rebel",
        "rebuild",
        "recall",
        "receive",
        "recipe",
        "record",
        "recycle",
        "reduce",
        "reflect",
        "reform",
        "refuse",
        "region",
        "regret",
        "regular",
        "reject",
        "relax",
        "release",
        "relief",
        "rely",
        "remain",
        "remember",
        "remind",
        "remove",
        "render",
        "renew",
        "rent",
        "reopen",
        "repair",
        "repeat",
        "replace",
        "report",
        "require",
        "rescue",
        "resemble",
        "resist",
        "resource",
        "response",
        "result",
        "retire",
        "retreat",
        "return",
        "reunion",
        "reveal",
        "review",
        "reward",
        "rhythm",
        "rib",
        "ribbon",
        "rice",
        "rich",
        "ride",
        "ridge",
        "rifle",
        "right",
        "rigid",
        "ring",
        "riot",
        "ripple",
        "risk",
        "ritual",
        "rival",
        "river",
        "road",
        "roast",
        "robot",
        "robust",
        "rocket",
        "romance",
        "roof",
        "rookie",
        "room",
        "rose",
        "rotate",
        "rough",
        "round",
        "route",
        "royal",
        "rubber",
        "rude",
        "rug",
        "rule",
        "run",
        "runway",
        "rural",
        "sad",
        "saddle",
        "sadness",
        "safe",
        "sail",
        "salad",
        "salmon",
        "salon",
        "salt",
        "salute",
        "same",
        "sample",
        "sand",
        "satisfy",
        "satoshi",
        "sauce",
        "sausage",
        "save",
        "say",
        "scale",
        "scan",
        "scare",
        "scatter",
        "scene",
        "scheme",
        "school",
        "science",
        "scissors",
        "scorpion",
        "scout",
        "scrap",
        "screen",
        "script",
        "scrub",
        "sea",
        "search",
        "season",
        "seat",
        "second",
        "secret",
        "section",
        "security",
        "seed",
        "seek",
        "segment",
        "select",
        "sell",
        "seminar",
        "senior",
        "sense",
        "sentence",
        "series",
        "service",
        "session",
        "settle",
        "setup",
        "seven",
        "shadow",
        "shaft",
        "shallow",
        "share",
        "shed",
        "shell",
        "sheriff",
        "shield",
        "shift",
        "shine",
        "ship",
        "shiver",
        "shock",
        "shoe",
        "shoot",
        "shop",
        "short",
        "shoulder",
        "shove",
        "shrimp",
        "shrug",
        "shuffle",
        "shy",
        "sibling",
        "sick",
        "side",
        "siege",
        "sight",
        "sign",
        "silent",
        "silk",
        "silly",
        "silver",
        "similar",
        "simple",
        "since",
        "sing",
        "siren",
        "sister",
        "situate",
        "six",
        "size",
        "skate",
        "sketch",
        "ski",
        "skill",
        "skin",
        "skirt",
        "skull",
        "slab",
        "slam",
        "sleep",
        "slender",
        "slice",
        "slide",
        "slight",
        "slim",
        "slogan",
        "slot",
        "slow",
        "slush",
        "small",
        "smart",
        "smile",
        "smoke",
        "smooth",
        "snack",
        "snake",
        "snap",
        "sniff",
        "snow",
        "soap",
        "soccer",
        "social",
        "sock",
        "soda",
        "soft",
        "solar",
        "soldier",
        "solid",
        "solution",
        "solve",
        "someone",
        "song",
        "soon",
        "sorry",
        "sort",
        "soul",
        "sound",
        "soup",
        "source",
        "south",
        "space",
        "spare",
        "spatial",
        "spawn",
        "speak",
        "special",
        "speed",
        "spell",
        "spend",
        "sphere",
        "spice",
        "spider",
        "spike",
        "spin",
        "spirit",
        "split",
        "spoil",
        "sponsor",
        "spoon",
        "sport",
        "spot",
        "spray",
        "spread",
        "spring",
        "spy",
        "square",
        "squeeze",
        "squirrel",
        "stable",
        "stadium",
        "staff",
        "stage",
        "stairs",
        "stamp",
        "stand",
        "start",
        "state",
        "stay",
        "steak",
        "steel",
        "stem",
        "step",
        "stereo",
        "stick",
        "still",
        "sting",
        "stock",
        "stomach",
        "stone",
        "stool",
        "story",
        "stove",
        "strategy",
        "street",
        "strike",
        "strong",
        "struggle",
        "student",
        "stuff",
        "stumble",
        "style",
        "subject",
        "submit",
        "subway",
        "success",
        "such",
        "sudden",
        "suffer",
        "sugar",
        "suggest",
        "suit",
        "summer",
        "sun",
        "sunny",
        "sunset",
        "super",
        "supply",
        "supreme",
        "sure",
        "surface",
        "surge",
        "surprise",
        "surround",
        "survey",
        "suspect",
        "sustain",
        "swallow",
        "swamp",
        "swap",
        "swarm",
        "swear",
        "sweet",
        "swift",
        "swim",
        "swing",
        "switch",
        "sword",
        "symbol",
        "symptom",
        "syrup",
        "system",
        "table",
        "tackle",
        "tag",
        "tail",
        "talent",
        "talk",
        "tank",
        "tape",
        "target",
        "task",
        "taste",
        "tattoo",
        "taxi",
        "teach",
        "team",
        "tell",
        "ten",
        "tenant",
        "tennis",
        "tent",
        "term",
        "test",
        "text",
        "thank",
        "that",
        "theme",
        "then",
        "theory",
        "there",
        "they",
        "thing",
        "this",
        "thought",
        "three",
        "thrive",
        "throw",
        "thumb",
        "thunder",
        "ticket",
        "tide",
        "tiger",
        "tilt",
        "timber",
        "time",
        "tiny",
        "tip",
        "tired",
        "tissue",
        "title",
        "toast",
        "tobacco",
        "today",
        "toddler",
        "toe",
        "together",
        "toilet",
        "token",
        "tomato",
        "tomorrow",
        "tone",
        "tongue",
        "tonight",
        "tool",
        "tooth",
        "top",
        "topic",
        "topple",
        "torch",
        "tornado",
        "tortoise",
        "toss",
        "total",
        "tourist",
        "toward",
        "tower",
        "town",
        "toy",
        "track",
        "trade",
        "traffic",
        "tragic",
        "train",
        "transfer",
        "trap",
        "trash",
        "travel",
        "tray",
        "treat",
        "tree",
        "trend",
        "trial",
        "tribe",
        "trick",
        "trigger",
        "trim",
        "trip",
        "trophy",
        "trouble",
        "truck",
        "true",
        "truly",
        "trumpet",
        "trust",
        "truth",
        "try",
        "tube",
        "tuition",
        "tumble",
        "tuna",
        "tunnel",
        "turkey",
        "turn",
        "turtle",
        "twelve",
        "twenty",
        "twice",
        "twin",
        "twist",
        "two",
        "type",
        "typical",
        "ugly",
        "umbrella",
        "unable",
        "unaware",
        "uncle",
        "uncover",
        "under",
        "undo",
        "unfair",
        "unfold",
        "unhappy",
        "uniform",
        "unique",
        "unit",
        "universe",
        "unknown",
        "unlock",
        "until",
        "unusual",
        "unveil",
        "update",
        "upgrade",
        "uphold",
        "upon",
        "upper",
        "upset",
        "urban",
        "urge",
        "usage",
        "use",
        "used",
        "useful",
        "useless",
        "usual",
        "utility",
        "vacant",
        "vacuum",
        "vague",
        "valid",
        "valley",
        "valve",
        "van",
        "vanish",
        "vapor",
        "various",
        "vast",
        "vault",
        "vehicle",
        "velvet",
        "vendor",
        "venture",
        "venue",
        "verb",
        "verify",
        "version",
        "very",
        "vessel",
        "veteran",
        "viable",
        "vibrant",
        "vicious",
        "victory",
        "video",
        "view",
        "village",
        "vintage",
        "violin",
        "virtual",
        "virus",
        "visa",
        "visit",
        "visual",
        "vital",
        "vivid",
        "vocal",
        "voice",
        "void",
        "volcano",
        "volume",
        "vote",
        "voyage",
        "wage",
        "wagon",
        "wait",
        "walk",
        "wall",
        "walnut",
        "want",
        "warfare",
        "warm",
        "warrior",
        "wash",
        "wasp",
        "waste",
        "water",
        "wave",
        "way",
        "wealth",
        "weapon",
        "wear",
        "weasel",
        "weather",
        "web",
        "wedding",
        "weekend",
        "weird",
        "welcome",
        "west",
        "wet",
        "whale",
        "what",
        "wheat",
        "wheel",
        "when",
        "where",
        "whip",
        "whisper",
        "wide",
        "width",
        "wife",
        "wild",
        "will",
        "win",
        "window",
        "wine",
        "wing",
        "wink",
        "winner",
        "winter",
        "wire",
        "wisdom",
        "wise",
        "wish",
        "witness",
        "wolf",
        "woman",
        "wonder",
        "wood",
        "wool",
        "word",
        "work",
        "world",
        "worry",
        "worth",
        "wrap",
        "wreck",
        "wrestle",
        "wrist",
        "write",
        "wrong",
        "yard",
        "year",
        "yellow",
        "you",
        "young",
        "youth",
        "zebra",
        "zero",
        "zone",
        "zoo"
      ];
    }
  });

  // node_modules/bip39/src/_wordlists.js
  var require_wordlists = __commonJS({
    "node_modules/bip39/src/_wordlists.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var wordlists = {};
      exports.wordlists = wordlists;
      var _default;
      exports._default = _default;
      try {
        exports._default = _default = require_czech();
        wordlists.czech = _default;
      } catch (err) {
      }
      try {
        exports._default = _default = require_chinese_simplified();
        wordlists.chinese_simplified = _default;
      } catch (err) {
      }
      try {
        exports._default = _default = require_chinese_traditional();
        wordlists.chinese_traditional = _default;
      } catch (err) {
      }
      try {
        exports._default = _default = require_korean();
        wordlists.korean = _default;
      } catch (err) {
      }
      try {
        exports._default = _default = require_french();
        wordlists.french = _default;
      } catch (err) {
      }
      try {
        exports._default = _default = require_italian();
        wordlists.italian = _default;
      } catch (err) {
      }
      try {
        exports._default = _default = require_spanish();
        wordlists.spanish = _default;
      } catch (err) {
      }
      try {
        exports._default = _default = require_japanese();
        wordlists.japanese = _default;
        wordlists.JA = _default;
      } catch (err) {
      }
      try {
        exports._default = _default = require_portuguese();
        wordlists.portuguese = _default;
      } catch (err) {
      }
      try {
        exports._default = _default = require_english();
        wordlists.english = _default;
        wordlists.EN = _default;
      } catch (err) {
      }
    }
  });

  // node_modules/bip39/src/index.js
  var require_src5 = __commonJS({
    "node_modules/bip39/src/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var sha256_1 = require_sha2562();
      var sha512_1 = require_sha5122();
      var pbkdf2_1 = require_pbkdf2();
      var utils_1 = require_utils();
      var _wordlists_1 = require_wordlists();
      var DEFAULT_WORDLIST = _wordlists_1._default;
      var INVALID_MNEMONIC = "Invalid mnemonic";
      var INVALID_ENTROPY = "Invalid entropy";
      var INVALID_CHECKSUM = "Invalid mnemonic checksum";
      var WORDLIST_REQUIRED = "A wordlist is required but a default could not be found.\nPlease pass a 2048 word array explicitly.";
      function normalize(str) {
        return (str || "").normalize("NFKD");
      }
      function lpad(str, padString, length) {
        while (str.length < length) {
          str = padString + str;
        }
        return str;
      }
      function binaryToByte(bin) {
        return parseInt(bin, 2);
      }
      function bytesToBinary(bytes) {
        return bytes.map((x) => lpad(x.toString(2), "0", 8)).join("");
      }
      function deriveChecksumBits(entropyBuffer) {
        const ENT = entropyBuffer.length * 8;
        const CS = ENT / 32;
        const hash = sha256_1.sha256(Uint8Array.from(entropyBuffer));
        return bytesToBinary(Array.from(hash)).slice(0, CS);
      }
      function salt(password) {
        return "mnemonic" + (password || "");
      }
      function mnemonicToSeedSync2(mnemonic, password) {
        const mnemonicBuffer = Uint8Array.from(Buffer.from(normalize(mnemonic), "utf8"));
        const saltBuffer = Uint8Array.from(Buffer.from(salt(normalize(password)), "utf8"));
        const res = pbkdf2_1.pbkdf2(sha512_1.sha512, mnemonicBuffer, saltBuffer, {
          c: 2048,
          dkLen: 64
        });
        return Buffer.from(res);
      }
      exports.mnemonicToSeedSync = mnemonicToSeedSync2;
      function mnemonicToSeed(mnemonic, password) {
        const mnemonicBuffer = Uint8Array.from(Buffer.from(normalize(mnemonic), "utf8"));
        const saltBuffer = Uint8Array.from(Buffer.from(salt(normalize(password)), "utf8"));
        return pbkdf2_1.pbkdf2Async(sha512_1.sha512, mnemonicBuffer, saltBuffer, {
          c: 2048,
          dkLen: 64
        }).then((res) => Buffer.from(res));
      }
      exports.mnemonicToSeed = mnemonicToSeed;
      function mnemonicToEntropy(mnemonic, wordlist) {
        wordlist = wordlist || DEFAULT_WORDLIST;
        if (!wordlist) {
          throw new Error(WORDLIST_REQUIRED);
        }
        const words = normalize(mnemonic).split(" ");
        if (words.length % 3 !== 0) {
          throw new Error(INVALID_MNEMONIC);
        }
        const bits = words.map((word) => {
          const index = wordlist.indexOf(word);
          if (index === -1) {
            throw new Error(INVALID_MNEMONIC);
          }
          return lpad(index.toString(2), "0", 11);
        }).join("");
        const dividerIndex = Math.floor(bits.length / 33) * 32;
        const entropyBits = bits.slice(0, dividerIndex);
        const checksumBits = bits.slice(dividerIndex);
        const entropyBytes = entropyBits.match(/(.{1,8})/g).map(binaryToByte);
        if (entropyBytes.length < 16) {
          throw new Error(INVALID_ENTROPY);
        }
        if (entropyBytes.length > 32) {
          throw new Error(INVALID_ENTROPY);
        }
        if (entropyBytes.length % 4 !== 0) {
          throw new Error(INVALID_ENTROPY);
        }
        const entropy = Buffer.from(entropyBytes);
        const newChecksum = deriveChecksumBits(entropy);
        if (newChecksum !== checksumBits) {
          throw new Error(INVALID_CHECKSUM);
        }
        return entropy.toString("hex");
      }
      exports.mnemonicToEntropy = mnemonicToEntropy;
      function entropyToMnemonic(entropy, wordlist) {
        if (!Buffer.isBuffer(entropy)) {
          entropy = Buffer.from(entropy, "hex");
        }
        wordlist = wordlist || DEFAULT_WORDLIST;
        if (!wordlist) {
          throw new Error(WORDLIST_REQUIRED);
        }
        if (entropy.length < 16) {
          throw new TypeError(INVALID_ENTROPY);
        }
        if (entropy.length > 32) {
          throw new TypeError(INVALID_ENTROPY);
        }
        if (entropy.length % 4 !== 0) {
          throw new TypeError(INVALID_ENTROPY);
        }
        const entropyBits = bytesToBinary(Array.from(entropy));
        const checksumBits = deriveChecksumBits(entropy);
        const bits = entropyBits + checksumBits;
        const chunks = bits.match(/(.{1,11})/g);
        const words = chunks.map((binary) => {
          const index = binaryToByte(binary);
          return wordlist[index];
        });
        return wordlist[0] === "\u3042\u3044\u3053\u304F\u3057\u3093" ? words.join("\u3000") : words.join(" ");
      }
      exports.entropyToMnemonic = entropyToMnemonic;
      function generateMnemonic2(strength, rng, wordlist) {
        strength = strength || 128;
        if (strength % 32 !== 0) {
          throw new TypeError(INVALID_ENTROPY);
        }
        rng = rng || ((size) => Buffer.from(utils_1.randomBytes(size)));
        return entropyToMnemonic(rng(strength / 8), wordlist);
      }
      exports.generateMnemonic = generateMnemonic2;
      function validateMnemonic(mnemonic, wordlist) {
        try {
          mnemonicToEntropy(mnemonic, wordlist);
        } catch (e) {
          return false;
        }
        return true;
      }
      exports.validateMnemonic = validateMnemonic;
      function setDefaultWordlist(language) {
        const result = _wordlists_1.wordlists[language];
        if (result) {
          DEFAULT_WORDLIST = result;
        } else {
          throw new Error('Could not find wordlist for language "' + language + '"');
        }
      }
      exports.setDefaultWordlist = setDefaultWordlist;
      function getDefaultWordlist() {
        if (!DEFAULT_WORDLIST) {
          throw new Error("No Default Wordlist set");
        }
        return Object.keys(_wordlists_1.wordlists).filter((lang) => {
          if (lang === "JA" || lang === "EN") {
            return false;
          }
          return _wordlists_1.wordlists[lang].every((word, index) => word === DEFAULT_WORDLIST[index]);
        })[0];
      }
      exports.getDefaultWordlist = getDefaultWordlist;
      var _wordlists_2 = require_wordlists();
      exports.wordlists = _wordlists_2.wordlists;
    }
  });

  // node_modules/bip32/src/crypto.js
  var require_crypto4 = __commonJS({
    "node_modules/bip32/src/crypto.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.hmacSHA512 = exports.hash160 = void 0;
      var hmac_1 = require_hmac();
      var ripemd160_1 = require_ripemd1602();
      var sha256_1 = require_sha2562();
      var sha512_1 = require_sha5122();
      function hash160(buffer) {
        const sha256Hash = (0, sha256_1.sha256)(Uint8Array.from(buffer));
        return Buffer.from((0, ripemd160_1.ripemd160)(sha256Hash));
      }
      exports.hash160 = hash160;
      function hmacSHA512(key, data) {
        return Buffer.from((0, hmac_1.hmac)(sha512_1.sha512, key, data));
      }
      exports.hmacSHA512 = hmacSHA512;
    }
  });

  // node_modules/bip32/src/testecc.js
  var require_testecc2 = __commonJS({
    "node_modules/bip32/src/testecc.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.testEcc = void 0;
      var h = (hex) => Buffer.from(hex, "hex");
      function testEcc(ecc3) {
        assert(ecc3.isPoint(h("0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798")));
        assert(!ecc3.isPoint(h("030000000000000000000000000000000000000000000000000000000000000005")));
        assert(ecc3.isPrivate(h("79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798")));
        assert(ecc3.isPrivate(h("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140")));
        assert(!ecc3.isPrivate(h("0000000000000000000000000000000000000000000000000000000000000000")));
        assert(!ecc3.isPrivate(h("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141")));
        assert(!ecc3.isPrivate(h("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142")));
        assert(Buffer.from(ecc3.pointFromScalar(h("b1121e4088a66a28f5b6b0f5844943ecd9f610196d7bb83b25214b60452c09af"))).equals(h("02b07ba9dca9523b7ef4bd97703d43d20399eb698e194704791a25ce77a400df99")));
        if (ecc3.xOnlyPointAddTweak) {
          assert(ecc3.xOnlyPointAddTweak(h("79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798"), h("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140")) === null);
          let xOnlyRes = ecc3.xOnlyPointAddTweak(h("1617d38ed8d8657da4d4761e8057bc396ea9e4b9d29776d4be096016dbd2509b"), h("a8397a935f0dfceba6ba9618f6451ef4d80637abf4e6af2669fbc9de6a8fd2ac"));
          assert(Buffer.from(xOnlyRes.xOnlyPubkey).equals(h("e478f99dab91052ab39a33ea35fd5e6e4933f4d28023cd597c9a1f6760346adf")) && xOnlyRes.parity === 1);
          xOnlyRes = ecc3.xOnlyPointAddTweak(h("2c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991"), h("823c3cd2142744b075a87eade7e1b8678ba308d566226a0056ca2b7a76f86b47"));
        }
        assert(Buffer.from(ecc3.pointAddScalar(h("0379be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798"), h("0000000000000000000000000000000000000000000000000000000000000003"))).equals(h("02c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5")));
        assert(Buffer.from(ecc3.privateAdd(h("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413e"), h("0000000000000000000000000000000000000000000000000000000000000002"))).equals(h("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140")));
        if (ecc3.privateNegate) {
          assert(Buffer.from(ecc3.privateNegate(h("0000000000000000000000000000000000000000000000000000000000000001"))).equals(h("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140")));
          assert(Buffer.from(ecc3.privateNegate(h("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413e"))).equals(h("0000000000000000000000000000000000000000000000000000000000000003")));
          assert(Buffer.from(ecc3.privateNegate(h("b1121e4088a66a28f5b6b0f5844943ecd9f610196d7bb83b25214b60452c09af"))).equals(h("4eede1bf775995d70a494f0a7bb6bc11e0b8cccd41cce8009ab1132c8b0a3792")));
        }
        assert(Buffer.from(ecc3.sign(h("5e9f0a0d593efdcf78ac923bc3313e4e7d408d574354ee2b3288c0da9fbba6ed"), h("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140"))).equals(h("54c4a33c6423d689378f160a7ff8b61330444abb58fb470f96ea16d99d4a2fed07082304410efa6b2943111b6a4e0aaa7b7db55a07e9861d1fb3cb1f421044a5")));
        assert(ecc3.verify(h("5e9f0a0d593efdcf78ac923bc3313e4e7d408d574354ee2b3288c0da9fbba6ed"), h("0379be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798"), h("54c4a33c6423d689378f160a7ff8b61330444abb58fb470f96ea16d99d4a2fed07082304410efa6b2943111b6a4e0aaa7b7db55a07e9861d1fb3cb1f421044a5")));
        if (ecc3.signSchnorr) {
          assert(Buffer.from(ecc3.signSchnorr(h("7e2d58d8b3bcdf1abadec7829054f90dda9805aab56c77333024b9d0a508b75c"), h("c90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b14e5c9"), h("c87aa53824b4d7ae2eb035a2b5bbbccc080e76cdc6d1692c4b0b62d798e6d906"))).equals(h("5831aaeed7b44bb74e5eab94ba9d4294c49bcf2a60728d8b4c200f50dd313c1bab745879a5ad954a72c45a91c3a51d3c7adea98d82f8481e0e1e03674a6f3fb7")));
        }
        if (ecc3.verifySchnorr) {
          assert(ecc3.verifySchnorr(h("7e2d58d8b3bcdf1abadec7829054f90dda9805aab56c77333024b9d0a508b75c"), h("dd308afec5777e13121fa72b9cc1b7cc0139715309b086c960e18fd969774eb8"), h("5831aaeed7b44bb74e5eab94ba9d4294c49bcf2a60728d8b4c200f50dd313c1bab745879a5ad954a72c45a91c3a51d3c7adea98d82f8481e0e1e03674a6f3fb7")));
        }
      }
      exports.testEcc = testEcc;
      function assert(bool) {
        if (!bool)
          throw new Error("ecc library invalid");
      }
    }
  });

  // node_modules/@scure/base/lib/index.js
  var require_lib2 = __commonJS({
    "node_modules/@scure/base/lib/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.bytes = exports.stringToBytes = exports.str = exports.bytesToString = exports.hex = exports.utf8 = exports.bech32m = exports.bech32 = exports.base58check = exports.createBase58check = exports.base58xmr = exports.base58xrp = exports.base58flickr = exports.base58 = exports.base64urlnopad = exports.base64url = exports.base64 = exports.base32crockford = exports.base32hex = exports.base32 = exports.base16 = exports.utils = exports.assertNumber = void 0;
      // @__NO_SIDE_EFFECTS__
      function assertNumber(n) {
        if (!Number.isSafeInteger(n))
          throw new Error(`Wrong integer: ${n}`);
      }
      exports.assertNumber = assertNumber;
      function isBytes(a) {
        return a instanceof Uint8Array || a != null && typeof a === "object" && a.constructor.name === "Uint8Array";
      }
      // @__NO_SIDE_EFFECTS__
      function chain(...args) {
        const id = (a) => a;
        const wrap = (a, b) => (c) => a(b(c));
        const encode = args.map((x) => x.encode).reduceRight(wrap, id);
        const decode = args.map((x) => x.decode).reduce(wrap, id);
        return { encode, decode };
      }
      // @__NO_SIDE_EFFECTS__
      function alphabet(alphabet2) {
        return {
          encode: (digits) => {
            if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number")
              throw new Error("alphabet.encode input should be an array of numbers");
            return digits.map((i) => {
              /* @__PURE__ */ assertNumber(i);
              if (i < 0 || i >= alphabet2.length)
                throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet2.length})`);
              return alphabet2[i];
            });
          },
          decode: (input) => {
            if (!Array.isArray(input) || input.length && typeof input[0] !== "string")
              throw new Error("alphabet.decode input should be array of strings");
            return input.map((letter) => {
              if (typeof letter !== "string")
                throw new Error(`alphabet.decode: not string element=${letter}`);
              const index = alphabet2.indexOf(letter);
              if (index === -1)
                throw new Error(`Unknown letter: "${letter}". Allowed: ${alphabet2}`);
              return index;
            });
          }
        };
      }
      // @__NO_SIDE_EFFECTS__
      function join(separator = "") {
        if (typeof separator !== "string")
          throw new Error("join separator should be string");
        return {
          encode: (from) => {
            if (!Array.isArray(from) || from.length && typeof from[0] !== "string")
              throw new Error("join.encode input should be array of strings");
            for (let i of from)
              if (typeof i !== "string")
                throw new Error(`join.encode: non-string input=${i}`);
            return from.join(separator);
          },
          decode: (to) => {
            if (typeof to !== "string")
              throw new Error("join.decode input should be string");
            return to.split(separator);
          }
        };
      }
      // @__NO_SIDE_EFFECTS__
      function padding(bits, chr = "=") {
        /* @__PURE__ */ assertNumber(bits);
        if (typeof chr !== "string")
          throw new Error("padding chr should be string");
        return {
          encode(data) {
            if (!Array.isArray(data) || data.length && typeof data[0] !== "string")
              throw new Error("padding.encode input should be array of strings");
            for (let i of data)
              if (typeof i !== "string")
                throw new Error(`padding.encode: non-string input=${i}`);
            while (data.length * bits % 8)
              data.push(chr);
            return data;
          },
          decode(input) {
            if (!Array.isArray(input) || input.length && typeof input[0] !== "string")
              throw new Error("padding.encode input should be array of strings");
            for (let i of input)
              if (typeof i !== "string")
                throw new Error(`padding.decode: non-string input=${i}`);
            let end = input.length;
            if (end * bits % 8)
              throw new Error("Invalid padding: string should have whole number of bytes");
            for (; end > 0 && input[end - 1] === chr; end--) {
              if (!((end - 1) * bits % 8))
                throw new Error("Invalid padding: string has too much padding");
            }
            return input.slice(0, end);
          }
        };
      }
      // @__NO_SIDE_EFFECTS__
      function normalize(fn) {
        if (typeof fn !== "function")
          throw new Error("normalize fn should be function");
        return { encode: (from) => from, decode: (to) => fn(to) };
      }
      // @__NO_SIDE_EFFECTS__
      function convertRadix(data, from, to) {
        if (from < 2)
          throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);
        if (to < 2)
          throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);
        if (!Array.isArray(data))
          throw new Error("convertRadix: data should be array");
        if (!data.length)
          return [];
        let pos = 0;
        const res = [];
        const digits = Array.from(data);
        digits.forEach((d) => {
          /* @__PURE__ */ assertNumber(d);
          if (d < 0 || d >= from)
            throw new Error(`Wrong integer: ${d}`);
        });
        while (true) {
          let carry = 0;
          let done = true;
          for (let i = pos; i < digits.length; i++) {
            const digit = digits[i];
            const digitBase = from * carry + digit;
            if (!Number.isSafeInteger(digitBase) || from * carry / from !== carry || digitBase - digit !== from * carry) {
              throw new Error("convertRadix: carry overflow");
            }
            carry = digitBase % to;
            const rounded = Math.floor(digitBase / to);
            digits[i] = rounded;
            if (!Number.isSafeInteger(rounded) || rounded * to + carry !== digitBase)
              throw new Error("convertRadix: carry overflow");
            if (!done)
              continue;
            else if (!rounded)
              pos = i;
            else
              done = false;
          }
          res.push(carry);
          if (done)
            break;
        }
        for (let i = 0; i < data.length - 1 && data[i] === 0; i++)
          res.push(0);
        return res.reverse();
      }
      var gcd = /* @__NO_SIDE_EFFECTS__ */ (a, b) => !b ? a : /* @__PURE__ */ gcd(b, a % b);
      var radix2carry = /* @__NO_SIDE_EFFECTS__ */ (from, to) => from + (to - /* @__PURE__ */ gcd(from, to));
      // @__NO_SIDE_EFFECTS__
      function convertRadix2(data, from, to, padding2) {
        if (!Array.isArray(data))
          throw new Error("convertRadix2: data should be array");
        if (from <= 0 || from > 32)
          throw new Error(`convertRadix2: wrong from=${from}`);
        if (to <= 0 || to > 32)
          throw new Error(`convertRadix2: wrong to=${to}`);
        if (/* @__PURE__ */ radix2carry(from, to) > 32) {
          throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${/* @__PURE__ */ radix2carry(from, to)}`);
        }
        let carry = 0;
        let pos = 0;
        const mask = 2 ** to - 1;
        const res = [];
        for (const n of data) {
          /* @__PURE__ */ assertNumber(n);
          if (n >= 2 ** from)
            throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);
          carry = carry << from | n;
          if (pos + from > 32)
            throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);
          pos += from;
          for (; pos >= to; pos -= to)
            res.push((carry >> pos - to & mask) >>> 0);
          carry &= 2 ** pos - 1;
        }
        carry = carry << to - pos & mask;
        if (!padding2 && pos >= from)
          throw new Error("Excess padding");
        if (!padding2 && carry)
          throw new Error(`Non-zero padding: ${carry}`);
        if (padding2 && pos > 0)
          res.push(carry >>> 0);
        return res;
      }
      // @__NO_SIDE_EFFECTS__
      function radix(num) {
        /* @__PURE__ */ assertNumber(num);
        return {
          encode: (bytes) => {
            if (!isBytes(bytes))
              throw new Error("radix.encode input should be Uint8Array");
            return /* @__PURE__ */ convertRadix(Array.from(bytes), 2 ** 8, num);
          },
          decode: (digits) => {
            if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number")
              throw new Error("radix.decode input should be array of numbers");
            return Uint8Array.from(/* @__PURE__ */ convertRadix(digits, num, 2 ** 8));
          }
        };
      }
      // @__NO_SIDE_EFFECTS__
      function radix2(bits, revPadding = false) {
        /* @__PURE__ */ assertNumber(bits);
        if (bits <= 0 || bits > 32)
          throw new Error("radix2: bits should be in (0..32]");
        if (/* @__PURE__ */ radix2carry(8, bits) > 32 || /* @__PURE__ */ radix2carry(bits, 8) > 32)
          throw new Error("radix2: carry overflow");
        return {
          encode: (bytes) => {
            if (!isBytes(bytes))
              throw new Error("radix2.encode input should be Uint8Array");
            return /* @__PURE__ */ convertRadix2(Array.from(bytes), 8, bits, !revPadding);
          },
          decode: (digits) => {
            if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number")
              throw new Error("radix2.decode input should be array of numbers");
            return Uint8Array.from(/* @__PURE__ */ convertRadix2(digits, bits, 8, revPadding));
          }
        };
      }
      // @__NO_SIDE_EFFECTS__
      function unsafeWrapper(fn) {
        if (typeof fn !== "function")
          throw new Error("unsafeWrapper fn should be function");
        return function(...args) {
          try {
            return fn.apply(null, args);
          } catch (e) {
          }
        };
      }
      // @__NO_SIDE_EFFECTS__
      function checksum(len, fn) {
        /* @__PURE__ */ assertNumber(len);
        if (typeof fn !== "function")
          throw new Error("checksum fn should be function");
        return {
          encode(data) {
            if (!isBytes(data))
              throw new Error("checksum.encode: input should be Uint8Array");
            const checksum2 = fn(data).slice(0, len);
            const res = new Uint8Array(data.length + len);
            res.set(data);
            res.set(checksum2, data.length);
            return res;
          },
          decode(data) {
            if (!isBytes(data))
              throw new Error("checksum.decode: input should be Uint8Array");
            const payload = data.slice(0, -len);
            const newChecksum = fn(payload).slice(0, len);
            const oldChecksum = data.slice(-len);
            for (let i = 0; i < len; i++)
              if (newChecksum[i] !== oldChecksum[i])
                throw new Error("Invalid checksum");
            return payload;
          }
        };
      }
      exports.utils = {
        alphabet,
        chain,
        checksum,
        convertRadix,
        convertRadix2,
        radix,
        radix2,
        join,
        padding
      };
      exports.base16 = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(4), /* @__PURE__ */ alphabet("0123456789ABCDEF"), /* @__PURE__ */ join(""));
      exports.base32 = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(5), /* @__PURE__ */ alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), /* @__PURE__ */ padding(5), /* @__PURE__ */ join(""));
      exports.base32hex = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(5), /* @__PURE__ */ alphabet("0123456789ABCDEFGHIJKLMNOPQRSTUV"), /* @__PURE__ */ padding(5), /* @__PURE__ */ join(""));
      exports.base32crockford = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(5), /* @__PURE__ */ alphabet("0123456789ABCDEFGHJKMNPQRSTVWXYZ"), /* @__PURE__ */ join(""), /* @__PURE__ */ normalize((s) => s.toUpperCase().replace(/O/g, "0").replace(/[IL]/g, "1")));
      exports.base64 = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(6), /* @__PURE__ */ alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), /* @__PURE__ */ padding(6), /* @__PURE__ */ join(""));
      exports.base64url = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(6), /* @__PURE__ */ alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), /* @__PURE__ */ padding(6), /* @__PURE__ */ join(""));
      exports.base64urlnopad = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(6), /* @__PURE__ */ alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), /* @__PURE__ */ join(""));
      var genBase58 = (abc) => /* @__PURE__ */ chain(/* @__PURE__ */ radix(58), /* @__PURE__ */ alphabet(abc), /* @__PURE__ */ join(""));
      exports.base58 = genBase58("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
      exports.base58flickr = genBase58("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ");
      exports.base58xrp = genBase58("rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz");
      var XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];
      exports.base58xmr = {
        encode(data) {
          let res = "";
          for (let i = 0; i < data.length; i += 8) {
            const block = data.subarray(i, i + 8);
            res += exports.base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], "1");
          }
          return res;
        },
        decode(str) {
          let res = [];
          for (let i = 0; i < str.length; i += 11) {
            const slice = str.slice(i, i + 11);
            const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);
            const block = exports.base58.decode(slice);
            for (let j = 0; j < block.length - blockLen; j++) {
              if (block[j] !== 0)
                throw new Error("base58xmr: wrong padding");
            }
            res = res.concat(Array.from(block.slice(block.length - blockLen)));
          }
          return Uint8Array.from(res);
        }
      };
      var createBase58check = (sha256) => /* @__PURE__ */ chain(/* @__PURE__ */ checksum(4, (data) => sha256(sha256(data))), exports.base58);
      exports.createBase58check = createBase58check;
      exports.base58check = exports.createBase58check;
      var BECH_ALPHABET = /* @__PURE__ */ chain(/* @__PURE__ */ alphabet("qpzry9x8gf2tvdw0s3jn54khce6mua7l"), /* @__PURE__ */ join(""));
      var POLYMOD_GENERATORS = [996825010, 642813549, 513874426, 1027748829, 705979059];
      // @__NO_SIDE_EFFECTS__
      function bech32Polymod(pre) {
        const b = pre >> 25;
        let chk = (pre & 33554431) << 5;
        for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {
          if ((b >> i & 1) === 1)
            chk ^= POLYMOD_GENERATORS[i];
        }
        return chk;
      }
      // @__NO_SIDE_EFFECTS__
      function bechChecksum(prefix, words, encodingConst = 1) {
        const len = prefix.length;
        let chk = 1;
        for (let i = 0; i < len; i++) {
          const c = prefix.charCodeAt(i);
          if (c < 33 || c > 126)
            throw new Error(`Invalid prefix (${prefix})`);
          chk = /* @__PURE__ */ bech32Polymod(chk) ^ c >> 5;
        }
        chk = /* @__PURE__ */ bech32Polymod(chk);
        for (let i = 0; i < len; i++)
          chk = /* @__PURE__ */ bech32Polymod(chk) ^ prefix.charCodeAt(i) & 31;
        for (let v of words)
          chk = /* @__PURE__ */ bech32Polymod(chk) ^ v;
        for (let i = 0; i < 6; i++)
          chk = /* @__PURE__ */ bech32Polymod(chk);
        chk ^= encodingConst;
        return BECH_ALPHABET.encode(/* @__PURE__ */ convertRadix2([chk % 2 ** 30], 30, 5, false));
      }
      // @__NO_SIDE_EFFECTS__
      function genBech32(encoding) {
        const ENCODING_CONST = encoding === "bech32" ? 1 : 734539939;
        const _words = /* @__PURE__ */ radix2(5);
        const fromWords = _words.decode;
        const toWords = _words.encode;
        const fromWordsUnsafe = /* @__PURE__ */ unsafeWrapper(fromWords);
        function encode(prefix, words, limit = 90) {
          if (typeof prefix !== "string")
            throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);
          if (!Array.isArray(words) || words.length && typeof words[0] !== "number")
            throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);
          const actualLength = prefix.length + 7 + words.length;
          if (limit !== false && actualLength > limit)
            throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);
          const lowered = prefix.toLowerCase();
          const sum = /* @__PURE__ */ bechChecksum(lowered, words, ENCODING_CONST);
          return `${lowered}1${BECH_ALPHABET.encode(words)}${sum}`;
        }
        function decode(str, limit = 90) {
          if (typeof str !== "string")
            throw new Error(`bech32.decode input should be string, not ${typeof str}`);
          if (str.length < 8 || limit !== false && str.length > limit)
            throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);
          const lowered = str.toLowerCase();
          if (str !== lowered && str !== str.toUpperCase())
            throw new Error(`String must be lowercase or uppercase`);
          str = lowered;
          const sepIndex = str.lastIndexOf("1");
          if (sepIndex === 0 || sepIndex === -1)
            throw new Error(`Letter "1" must be present between prefix and data only`);
          const prefix = str.slice(0, sepIndex);
          const _words2 = str.slice(sepIndex + 1);
          if (_words2.length < 6)
            throw new Error("Data must be at least 6 characters long");
          const words = BECH_ALPHABET.decode(_words2).slice(0, -6);
          const sum = /* @__PURE__ */ bechChecksum(prefix, words, ENCODING_CONST);
          if (!_words2.endsWith(sum))
            throw new Error(`Invalid checksum in ${str}: expected "${sum}"`);
          return { prefix, words };
        }
        const decodeUnsafe = /* @__PURE__ */ unsafeWrapper(decode);
        function decodeToBytes(str) {
          const { prefix, words } = decode(str, false);
          return { prefix, words, bytes: fromWords(words) };
        }
        return { encode, decode, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };
      }
      exports.bech32 = /* @__PURE__ */ genBech32("bech32");
      exports.bech32m = /* @__PURE__ */ genBech32("bech32m");
      exports.utf8 = {
        encode: (data) => new TextDecoder().decode(data),
        decode: (str) => new TextEncoder().encode(str)
      };
      exports.hex = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(4), /* @__PURE__ */ alphabet("0123456789abcdef"), /* @__PURE__ */ join(""), /* @__PURE__ */ normalize((s) => {
        if (typeof s !== "string" || s.length % 2)
          throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);
        return s.toLowerCase();
      }));
      var CODERS = {
        utf8: exports.utf8,
        hex: exports.hex,
        base16: exports.base16,
        base32: exports.base32,
        base64: exports.base64,
        base64url: exports.base64url,
        base58: exports.base58,
        base58xmr: exports.base58xmr
      };
      var coderTypeError = "Invalid encoding type. Available types: utf8, hex, base16, base32, base64, base64url, base58, base58xmr";
      var bytesToString = (type, bytes) => {
        if (typeof type !== "string" || !CODERS.hasOwnProperty(type))
          throw new TypeError(coderTypeError);
        if (!isBytes(bytes))
          throw new TypeError("bytesToString() expects Uint8Array");
        return CODERS[type].encode(bytes);
      };
      exports.bytesToString = bytesToString;
      exports.str = exports.bytesToString;
      var stringToBytes = (type, str) => {
        if (!CODERS.hasOwnProperty(type))
          throw new TypeError(coderTypeError);
        if (typeof str !== "string")
          throw new TypeError("stringToBytes() expects string");
        return CODERS[type].decode(str);
      };
      exports.stringToBytes = stringToBytes;
      exports.bytes = exports.stringToBytes;
    }
  });

  // node_modules/bip32/src/bip32.js
  var require_bip32 = __commonJS({
    "node_modules/bip32/src/bip32.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.BIP32Factory = void 0;
      var crypto2 = require_crypto4();
      var testecc_1 = require_testecc2();
      var base_1 = require_lib2();
      var sha256_1 = require_sha2562();
      var typeforce = require_typeforce();
      var wif = require_wif();
      var _bs58check = (0, base_1.base58check)(sha256_1.sha256);
      var bs58check = {
        encode: (data) => _bs58check.encode(Uint8Array.from(data)),
        decode: (str) => Buffer.from(_bs58check.decode(str))
      };
      function BIP32Factory3(ecc3) {
        (0, testecc_1.testEcc)(ecc3);
        const UINT256_TYPE = typeforce.BufferN(32);
        const NETWORK_TYPE = typeforce.compile({
          wif: typeforce.UInt8,
          bip32: {
            public: typeforce.UInt32,
            private: typeforce.UInt32
          }
        });
        const BITCOIN = {
          messagePrefix: "Bitcoin Signed Message:\n",
          bech32: "bc",
          bip32: {
            public: 76067358,
            private: 76066276
          },
          pubKeyHash: 0,
          scriptHash: 5,
          wif: 128
        };
        const HIGHEST_BIT = 2147483648;
        const UINT31_MAX = Math.pow(2, 31) - 1;
        function BIP32Path(value) {
          return typeforce.String(value) && value.match(/^(m\/)?(\d+'?\/)*\d+'?$/) !== null;
        }
        function UInt31(value) {
          return typeforce.UInt32(value) && value <= UINT31_MAX;
        }
        function toXOnly(pubKey) {
          return pubKey.length === 32 ? pubKey : pubKey.slice(1, 33);
        }
        class Bip32Signer {
          constructor(__D, __Q) {
            this.__D = __D;
            this.__Q = __Q;
            this.lowR = false;
          }
          get publicKey() {
            if (this.__Q === void 0)
              this.__Q = Buffer.from(ecc3.pointFromScalar(this.__D, true));
            return this.__Q;
          }
          get privateKey() {
            return this.__D;
          }
          sign(hash, lowR) {
            if (!this.privateKey)
              throw new Error("Missing private key");
            if (lowR === void 0)
              lowR = this.lowR;
            if (lowR === false) {
              return Buffer.from(ecc3.sign(hash, this.privateKey));
            } else {
              let sig = Buffer.from(ecc3.sign(hash, this.privateKey));
              const extraData = Buffer.alloc(32, 0);
              let counter = 0;
              while (sig[0] > 127) {
                counter++;
                extraData.writeUIntLE(counter, 0, 6);
                sig = Buffer.from(ecc3.sign(hash, this.privateKey, extraData));
              }
              return sig;
            }
          }
          signSchnorr(hash) {
            if (!this.privateKey)
              throw new Error("Missing private key");
            if (!ecc3.signSchnorr)
              throw new Error("signSchnorr not supported by ecc library");
            return Buffer.from(ecc3.signSchnorr(hash, this.privateKey));
          }
          verify(hash, signature) {
            return ecc3.verify(hash, this.publicKey, signature);
          }
          verifySchnorr(hash, signature) {
            if (!ecc3.verifySchnorr)
              throw new Error("verifySchnorr not supported by ecc library");
            return ecc3.verifySchnorr(hash, this.publicKey.subarray(1, 33), signature);
          }
        }
        class BIP32 extends Bip32Signer {
          constructor(__D, __Q, chainCode, network, __DEPTH = 0, __INDEX = 0, __PARENT_FINGERPRINT = 0) {
            super(__D, __Q);
            this.chainCode = chainCode;
            this.network = network;
            this.__DEPTH = __DEPTH;
            this.__INDEX = __INDEX;
            this.__PARENT_FINGERPRINT = __PARENT_FINGERPRINT;
            typeforce(NETWORK_TYPE, network);
          }
          get depth() {
            return this.__DEPTH;
          }
          get index() {
            return this.__INDEX;
          }
          get parentFingerprint() {
            return this.__PARENT_FINGERPRINT;
          }
          get identifier() {
            return crypto2.hash160(this.publicKey);
          }
          get fingerprint() {
            return this.identifier.slice(0, 4);
          }
          get compressed() {
            return true;
          }
          // Private === not neutered
          // Public === neutered
          isNeutered() {
            return this.__D === void 0;
          }
          neutered() {
            return fromPublicKeyLocal(this.publicKey, this.chainCode, this.network, this.depth, this.index, this.parentFingerprint);
          }
          toBase58() {
            const network = this.network;
            const version = !this.isNeutered() ? network.bip32.private : network.bip32.public;
            const buffer = Buffer.allocUnsafe(78);
            buffer.writeUInt32BE(version, 0);
            buffer.writeUInt8(this.depth, 4);
            buffer.writeUInt32BE(this.parentFingerprint, 5);
            buffer.writeUInt32BE(this.index, 9);
            this.chainCode.copy(buffer, 13);
            if (!this.isNeutered()) {
              buffer.writeUInt8(0, 45);
              this.privateKey.copy(buffer, 46);
            } else {
              this.publicKey.copy(buffer, 45);
            }
            return bs58check.encode(buffer);
          }
          toWIF() {
            if (!this.privateKey)
              throw new TypeError("Missing private key");
            return wif.encode(this.network.wif, this.privateKey, true);
          }
          // https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#child-key-derivation-ckd-functions
          derive(index) {
            typeforce(typeforce.UInt32, index);
            const isHardened = index >= HIGHEST_BIT;
            const data = Buffer.allocUnsafe(37);
            if (isHardened) {
              if (this.isNeutered())
                throw new TypeError("Missing private key for hardened child key");
              data[0] = 0;
              this.privateKey.copy(data, 1);
              data.writeUInt32BE(index, 33);
            } else {
              this.publicKey.copy(data, 0);
              data.writeUInt32BE(index, 33);
            }
            const I = crypto2.hmacSHA512(this.chainCode, data);
            const IL = I.slice(0, 32);
            const IR = I.slice(32);
            if (!ecc3.isPrivate(IL))
              return this.derive(index + 1);
            let hd;
            if (!this.isNeutered()) {
              const ki = Buffer.from(ecc3.privateAdd(this.privateKey, IL));
              if (ki == null)
                return this.derive(index + 1);
              hd = fromPrivateKeyLocal(ki, IR, this.network, this.depth + 1, index, this.fingerprint.readUInt32BE(0));
            } else {
              const Ki = Buffer.from(ecc3.pointAddScalar(this.publicKey, IL, true));
              if (Ki === null)
                return this.derive(index + 1);
              hd = fromPublicKeyLocal(Ki, IR, this.network, this.depth + 1, index, this.fingerprint.readUInt32BE(0));
            }
            return hd;
          }
          deriveHardened(index) {
            typeforce(UInt31, index);
            return this.derive(index + HIGHEST_BIT);
          }
          derivePath(path) {
            typeforce(BIP32Path, path);
            let splitPath = path.split("/");
            if (splitPath[0] === "m") {
              if (this.parentFingerprint)
                throw new TypeError("Expected master, got child");
              splitPath = splitPath.slice(1);
            }
            return splitPath.reduce((prevHd, indexStr) => {
              let index;
              if (indexStr.slice(-1) === `'`) {
                index = parseInt(indexStr.slice(0, -1), 10);
                return prevHd.deriveHardened(index);
              } else {
                index = parseInt(indexStr, 10);
                return prevHd.derive(index);
              }
            }, this);
          }
          tweak(t) {
            if (this.privateKey)
              return this.tweakFromPrivateKey(t);
            return this.tweakFromPublicKey(t);
          }
          tweakFromPublicKey(t) {
            const xOnlyPubKey = toXOnly(this.publicKey);
            if (!ecc3.xOnlyPointAddTweak)
              throw new Error("xOnlyPointAddTweak not supported by ecc library");
            const tweakedPublicKey = ecc3.xOnlyPointAddTweak(xOnlyPubKey, t);
            if (!tweakedPublicKey || tweakedPublicKey.xOnlyPubkey === null)
              throw new Error("Cannot tweak public key!");
            const parityByte = Buffer.from([
              tweakedPublicKey.parity === 0 ? 2 : 3
            ]);
            const tweakedPublicKeyCompresed = Buffer.concat([
              parityByte,
              tweakedPublicKey.xOnlyPubkey
            ]);
            return new Bip32Signer(void 0, tweakedPublicKeyCompresed);
          }
          tweakFromPrivateKey(t) {
            const hasOddY = this.publicKey[0] === 3 || this.publicKey[0] === 4 && (this.publicKey[64] & 1) === 1;
            const privateKey = (() => {
              if (!hasOddY)
                return this.privateKey;
              else if (!ecc3.privateNegate)
                throw new Error("privateNegate not supported by ecc library");
              else
                return ecc3.privateNegate(this.privateKey);
            })();
            const tweakedPrivateKey = ecc3.privateAdd(privateKey, t);
            if (!tweakedPrivateKey)
              throw new Error("Invalid tweaked private key!");
            return new Bip32Signer(Buffer.from(tweakedPrivateKey), void 0);
          }
        }
        function fromBase58(inString, network) {
          const buffer = bs58check.decode(inString);
          if (buffer.length !== 78)
            throw new TypeError("Invalid buffer length");
          network = network || BITCOIN;
          const version = buffer.readUInt32BE(0);
          if (version !== network.bip32.private && version !== network.bip32.public)
            throw new TypeError("Invalid network version");
          const depth = buffer[4];
          const parentFingerprint = buffer.readUInt32BE(5);
          if (depth === 0) {
            if (parentFingerprint !== 0)
              throw new TypeError("Invalid parent fingerprint");
          }
          const index = buffer.readUInt32BE(9);
          if (depth === 0 && index !== 0)
            throw new TypeError("Invalid index");
          const chainCode = buffer.slice(13, 45);
          let hd;
          if (version === network.bip32.private) {
            if (buffer.readUInt8(45) !== 0)
              throw new TypeError("Invalid private key");
            const k = buffer.slice(46, 78);
            hd = fromPrivateKeyLocal(k, chainCode, network, depth, index, parentFingerprint);
          } else {
            const X = buffer.slice(45, 78);
            hd = fromPublicKeyLocal(X, chainCode, network, depth, index, parentFingerprint);
          }
          return hd;
        }
        function fromPrivateKey(privateKey, chainCode, network) {
          return fromPrivateKeyLocal(privateKey, chainCode, network);
        }
        function fromPrivateKeyLocal(privateKey, chainCode, network, depth, index, parentFingerprint) {
          typeforce({
            privateKey: UINT256_TYPE,
            chainCode: UINT256_TYPE
          }, { privateKey, chainCode });
          network = network || BITCOIN;
          if (!ecc3.isPrivate(privateKey))
            throw new TypeError("Private key not in range [1, n)");
          return new BIP32(privateKey, void 0, chainCode, network, depth, index, parentFingerprint);
        }
        function fromPublicKey(publicKey, chainCode, network) {
          return fromPublicKeyLocal(publicKey, chainCode, network);
        }
        function fromPublicKeyLocal(publicKey, chainCode, network, depth, index, parentFingerprint) {
          typeforce({
            publicKey: typeforce.BufferN(33),
            chainCode: UINT256_TYPE
          }, { publicKey, chainCode });
          network = network || BITCOIN;
          if (!ecc3.isPoint(publicKey))
            throw new TypeError("Point is not on the curve");
          return new BIP32(void 0, publicKey, chainCode, network, depth, index, parentFingerprint);
        }
        function fromSeed(seed, network) {
          typeforce(typeforce.Buffer, seed);
          if (seed.length < 16)
            throw new TypeError("Seed should be at least 128 bits");
          if (seed.length > 64)
            throw new TypeError("Seed should be at most 512 bits");
          network = network || BITCOIN;
          const I = crypto2.hmacSHA512(Buffer.from("Bitcoin seed", "utf8"), seed);
          const IL = I.slice(0, 32);
          const IR = I.slice(32);
          return fromPrivateKey(IL, IR, network);
        }
        return {
          fromSeed,
          fromBase58,
          fromPublicKey,
          fromPrivateKey
        };
      }
      exports.BIP32Factory = BIP32Factory3;
    }
  });

  // node_modules/bip32/src/index.js
  var require_src6 = __commonJS({
    "node_modules/bip32/src/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.BIP32Factory = exports.default = void 0;
      var bip32_1 = require_bip32();
      Object.defineProperty(exports, "default", { enumerable: true, get: function() {
        return bip32_1.BIP32Factory;
      } });
      Object.defineProperty(exports, "BIP32Factory", { enumerable: true, get: function() {
        return bip32_1.BIP32Factory;
      } });
    }
  });

  // node_modules/object-keys/isArguments.js
  var require_isArguments = __commonJS({
    "node_modules/object-keys/isArguments.js"(exports, module) {
      "use strict";
      var toStr = Object.prototype.toString;
      module.exports = function isArguments(value) {
        var str = toStr.call(value);
        var isArgs = str === "[object Arguments]";
        if (!isArgs) {
          isArgs = str !== "[object Array]" && value !== null && typeof value === "object" && typeof value.length === "number" && value.length >= 0 && toStr.call(value.callee) === "[object Function]";
        }
        return isArgs;
      };
    }
  });

  // node_modules/object-keys/implementation.js
  var require_implementation = __commonJS({
    "node_modules/object-keys/implementation.js"(exports, module) {
      "use strict";
      var keysShim;
      if (!Object.keys) {
        has = Object.prototype.hasOwnProperty;
        toStr = Object.prototype.toString;
        isArgs = require_isArguments();
        isEnumerable = Object.prototype.propertyIsEnumerable;
        hasDontEnumBug = !isEnumerable.call({ toString: null }, "toString");
        hasProtoEnumBug = isEnumerable.call(function() {
        }, "prototype");
        dontEnums = [
          "toString",
          "toLocaleString",
          "valueOf",
          "hasOwnProperty",
          "isPrototypeOf",
          "propertyIsEnumerable",
          "constructor"
        ];
        equalsConstructorPrototype = function(o) {
          var ctor = o.constructor;
          return ctor && ctor.prototype === o;
        };
        excludedKeys = {
          $applicationCache: true,
          $console: true,
          $external: true,
          $frame: true,
          $frameElement: true,
          $frames: true,
          $innerHeight: true,
          $innerWidth: true,
          $onmozfullscreenchange: true,
          $onmozfullscreenerror: true,
          $outerHeight: true,
          $outerWidth: true,
          $pageXOffset: true,
          $pageYOffset: true,
          $parent: true,
          $scrollLeft: true,
          $scrollTop: true,
          $scrollX: true,
          $scrollY: true,
          $self: true,
          $webkitIndexedDB: true,
          $webkitStorageInfo: true,
          $window: true
        };
        hasAutomationEqualityBug = function() {
          if (typeof window === "undefined") {
            return false;
          }
          for (var k in window) {
            try {
              if (!excludedKeys["$" + k] && has.call(window, k) && window[k] !== null && typeof window[k] === "object") {
                try {
                  equalsConstructorPrototype(window[k]);
                } catch (e) {
                  return true;
                }
              }
            } catch (e) {
              return true;
            }
          }
          return false;
        }();
        equalsConstructorPrototypeIfNotBuggy = function(o) {
          if (typeof window === "undefined" || !hasAutomationEqualityBug) {
            return equalsConstructorPrototype(o);
          }
          try {
            return equalsConstructorPrototype(o);
          } catch (e) {
            return false;
          }
        };
        keysShim = function keys(object) {
          var isObject = object !== null && typeof object === "object";
          var isFunction = toStr.call(object) === "[object Function]";
          var isArguments = isArgs(object);
          var isString = isObject && toStr.call(object) === "[object String]";
          var theKeys = [];
          if (!isObject && !isFunction && !isArguments) {
            throw new TypeError("Object.keys called on a non-object");
          }
          var skipProto = hasProtoEnumBug && isFunction;
          if (isString && object.length > 0 && !has.call(object, 0)) {
            for (var i = 0; i < object.length; ++i) {
              theKeys.push(String(i));
            }
          }
          if (isArguments && object.length > 0) {
            for (var j = 0; j < object.length; ++j) {
              theKeys.push(String(j));
            }
          } else {
            for (var name in object) {
              if (!(skipProto && name === "prototype") && has.call(object, name)) {
                theKeys.push(String(name));
              }
            }
          }
          if (hasDontEnumBug) {
            var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);
            for (var k = 0; k < dontEnums.length; ++k) {
              if (!(skipConstructor && dontEnums[k] === "constructor") && has.call(object, dontEnums[k])) {
                theKeys.push(dontEnums[k]);
              }
            }
          }
          return theKeys;
        };
      }
      var has;
      var toStr;
      var isArgs;
      var isEnumerable;
      var hasDontEnumBug;
      var hasProtoEnumBug;
      var dontEnums;
      var equalsConstructorPrototype;
      var excludedKeys;
      var hasAutomationEqualityBug;
      var equalsConstructorPrototypeIfNotBuggy;
      module.exports = keysShim;
    }
  });

  // node_modules/object-keys/index.js
  var require_object_keys = __commonJS({
    "node_modules/object-keys/index.js"(exports, module) {
      "use strict";
      var slice = Array.prototype.slice;
      var isArgs = require_isArguments();
      var origKeys = Object.keys;
      var keysShim = origKeys ? function keys(o) {
        return origKeys(o);
      } : require_implementation();
      var originalKeys = Object.keys;
      keysShim.shim = function shimObjectKeys() {
        if (Object.keys) {
          var keysWorksWithArguments = function() {
            var args = Object.keys(arguments);
            return args && args.length === arguments.length;
          }(1, 2);
          if (!keysWorksWithArguments) {
            Object.keys = function keys(object) {
              if (isArgs(object)) {
                return originalKeys(slice.call(object));
              }
              return originalKeys(object);
            };
          }
        } else {
          Object.keys = keysShim;
        }
        return Object.keys || keysShim;
      };
      module.exports = keysShim;
    }
  });

  // node_modules/has-symbols/shams.js
  var require_shams = __commonJS({
    "node_modules/has-symbols/shams.js"(exports, module) {
      "use strict";
      module.exports = function hasSymbols() {
        if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
          return false;
        }
        if (typeof Symbol.iterator === "symbol") {
          return true;
        }
        var obj = {};
        var sym = Symbol("test");
        var symObj = Object(sym);
        if (typeof sym === "string") {
          return false;
        }
        if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
          return false;
        }
        if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
          return false;
        }
        var symVal = 42;
        obj[sym] = symVal;
        for (sym in obj) {
          return false;
        }
        if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
          return false;
        }
        if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
          return false;
        }
        var syms = Object.getOwnPropertySymbols(obj);
        if (syms.length !== 1 || syms[0] !== sym) {
          return false;
        }
        if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
          return false;
        }
        if (typeof Object.getOwnPropertyDescriptor === "function") {
          var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
          if (descriptor.value !== symVal || descriptor.enumerable !== true) {
            return false;
          }
        }
        return true;
      };
    }
  });

  // node_modules/es-errors/index.js
  var require_es_errors = __commonJS({
    "node_modules/es-errors/index.js"(exports, module) {
      "use strict";
      module.exports = Error;
    }
  });

  // node_modules/es-errors/eval.js
  var require_eval = __commonJS({
    "node_modules/es-errors/eval.js"(exports, module) {
      "use strict";
      module.exports = EvalError;
    }
  });

  // node_modules/es-errors/range.js
  var require_range = __commonJS({
    "node_modules/es-errors/range.js"(exports, module) {
      "use strict";
      module.exports = RangeError;
    }
  });

  // node_modules/es-errors/ref.js
  var require_ref = __commonJS({
    "node_modules/es-errors/ref.js"(exports, module) {
      "use strict";
      module.exports = ReferenceError;
    }
  });

  // node_modules/es-errors/syntax.js
  var require_syntax = __commonJS({
    "node_modules/es-errors/syntax.js"(exports, module) {
      "use strict";
      module.exports = SyntaxError;
    }
  });

  // node_modules/es-errors/type.js
  var require_type = __commonJS({
    "node_modules/es-errors/type.js"(exports, module) {
      "use strict";
      module.exports = TypeError;
    }
  });

  // node_modules/es-errors/uri.js
  var require_uri = __commonJS({
    "node_modules/es-errors/uri.js"(exports, module) {
      "use strict";
      module.exports = URIError;
    }
  });

  // node_modules/has-symbols/index.js
  var require_has_symbols = __commonJS({
    "node_modules/has-symbols/index.js"(exports, module) {
      "use strict";
      var origSymbol = typeof Symbol !== "undefined" && Symbol;
      var hasSymbolSham = require_shams();
      module.exports = function hasNativeSymbols() {
        if (typeof origSymbol !== "function") {
          return false;
        }
        if (typeof Symbol !== "function") {
          return false;
        }
        if (typeof origSymbol("foo") !== "symbol") {
          return false;
        }
        if (typeof Symbol("bar") !== "symbol") {
          return false;
        }
        return hasSymbolSham();
      };
    }
  });

  // node_modules/has-proto/index.js
  var require_has_proto = __commonJS({
    "node_modules/has-proto/index.js"(exports, module) {
      "use strict";
      var test = {
        __proto__: null,
        foo: {}
      };
      var $Object = Object;
      module.exports = function hasProto() {
        return { __proto__: test }.foo === test.foo && !(test instanceof $Object);
      };
    }
  });

  // node_modules/function-bind/implementation.js
  var require_implementation2 = __commonJS({
    "node_modules/function-bind/implementation.js"(exports, module) {
      "use strict";
      var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
      var toStr = Object.prototype.toString;
      var max = Math.max;
      var funcType = "[object Function]";
      var concatty = function concatty2(a, b) {
        var arr = [];
        for (var i = 0; i < a.length; i += 1) {
          arr[i] = a[i];
        }
        for (var j = 0; j < b.length; j += 1) {
          arr[j + a.length] = b[j];
        }
        return arr;
      };
      var slicy = function slicy2(arrLike, offset) {
        var arr = [];
        for (var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1) {
          arr[j] = arrLike[i];
        }
        return arr;
      };
      var joiny = function(arr, joiner) {
        var str = "";
        for (var i = 0; i < arr.length; i += 1) {
          str += arr[i];
          if (i + 1 < arr.length) {
            str += joiner;
          }
        }
        return str;
      };
      module.exports = function bind(that) {
        var target = this;
        if (typeof target !== "function" || toStr.apply(target) !== funcType) {
          throw new TypeError(ERROR_MESSAGE + target);
        }
        var args = slicy(arguments, 1);
        var bound;
        var binder = function() {
          if (this instanceof bound) {
            var result = target.apply(
              this,
              concatty(args, arguments)
            );
            if (Object(result) === result) {
              return result;
            }
            return this;
          }
          return target.apply(
            that,
            concatty(args, arguments)
          );
        };
        var boundLength = max(0, target.length - args.length);
        var boundArgs = [];
        for (var i = 0; i < boundLength; i++) {
          boundArgs[i] = "$" + i;
        }
        bound = Function("binder", "return function (" + joiny(boundArgs, ",") + "){ return binder.apply(this,arguments); }")(binder);
        if (target.prototype) {
          var Empty = function Empty2() {
          };
          Empty.prototype = target.prototype;
          bound.prototype = new Empty();
          Empty.prototype = null;
        }
        return bound;
      };
    }
  });

  // node_modules/function-bind/index.js
  var require_function_bind = __commonJS({
    "node_modules/function-bind/index.js"(exports, module) {
      "use strict";
      var implementation = require_implementation2();
      module.exports = Function.prototype.bind || implementation;
    }
  });

  // node_modules/hasown/node_modules/function-bind/implementation.js
  var require_implementation3 = __commonJS({
    "node_modules/hasown/node_modules/function-bind/implementation.js"(exports, module) {
      "use strict";
      var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
      var toStr = Object.prototype.toString;
      var max = Math.max;
      var funcType = "[object Function]";
      var concatty = function concatty2(a, b) {
        var arr = [];
        for (var i = 0; i < a.length; i += 1) {
          arr[i] = a[i];
        }
        for (var j = 0; j < b.length; j += 1) {
          arr[j + a.length] = b[j];
        }
        return arr;
      };
      var slicy = function slicy2(arrLike, offset) {
        var arr = [];
        for (var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1) {
          arr[j] = arrLike[i];
        }
        return arr;
      };
      var joiny = function(arr, joiner) {
        var str = "";
        for (var i = 0; i < arr.length; i += 1) {
          str += arr[i];
          if (i + 1 < arr.length) {
            str += joiner;
          }
        }
        return str;
      };
      module.exports = function bind(that) {
        var target = this;
        if (typeof target !== "function" || toStr.apply(target) !== funcType) {
          throw new TypeError(ERROR_MESSAGE + target);
        }
        var args = slicy(arguments, 1);
        var bound;
        var binder = function() {
          if (this instanceof bound) {
            var result = target.apply(
              this,
              concatty(args, arguments)
            );
            if (Object(result) === result) {
              return result;
            }
            return this;
          }
          return target.apply(
            that,
            concatty(args, arguments)
          );
        };
        var boundLength = max(0, target.length - args.length);
        var boundArgs = [];
        for (var i = 0; i < boundLength; i++) {
          boundArgs[i] = "$" + i;
        }
        bound = Function("binder", "return function (" + joiny(boundArgs, ",") + "){ return binder.apply(this,arguments); }")(binder);
        if (target.prototype) {
          var Empty = function Empty2() {
          };
          Empty.prototype = target.prototype;
          bound.prototype = new Empty();
          Empty.prototype = null;
        }
        return bound;
      };
    }
  });

  // node_modules/hasown/node_modules/function-bind/index.js
  var require_function_bind2 = __commonJS({
    "node_modules/hasown/node_modules/function-bind/index.js"(exports, module) {
      "use strict";
      var implementation = require_implementation3();
      module.exports = Function.prototype.bind || implementation;
    }
  });

  // node_modules/hasown/index.js
  var require_hasown = __commonJS({
    "node_modules/hasown/index.js"(exports, module) {
      "use strict";
      var call = Function.prototype.call;
      var $hasOwn = Object.prototype.hasOwnProperty;
      var bind = require_function_bind2();
      module.exports = bind.call(call, $hasOwn);
    }
  });

  // node_modules/get-intrinsic/index.js
  var require_get_intrinsic = __commonJS({
    "node_modules/get-intrinsic/index.js"(exports, module) {
      "use strict";
      var undefined2;
      var $Error = require_es_errors();
      var $EvalError = require_eval();
      var $RangeError = require_range();
      var $ReferenceError = require_ref();
      var $SyntaxError = require_syntax();
      var $TypeError = require_type();
      var $URIError = require_uri();
      var $Function = Function;
      var getEvalledConstructor = function(expressionSyntax) {
        try {
          return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
        } catch (e) {
        }
      };
      var $gOPD = Object.getOwnPropertyDescriptor;
      if ($gOPD) {
        try {
          $gOPD({}, "");
        } catch (e) {
          $gOPD = null;
        }
      }
      var throwTypeError = function() {
        throw new $TypeError();
      };
      var ThrowTypeError = $gOPD ? function() {
        try {
          arguments.callee;
          return throwTypeError;
        } catch (calleeThrows) {
          try {
            return $gOPD(arguments, "callee").get;
          } catch (gOPDthrows) {
            return throwTypeError;
          }
        }
      }() : throwTypeError;
      var hasSymbols = require_has_symbols()();
      var hasProto = require_has_proto()();
      var getProto = Object.getPrototypeOf || (hasProto ? function(x) {
        return x.__proto__;
      } : null);
      var needsEval = {};
      var TypedArray = typeof Uint8Array === "undefined" || !getProto ? undefined2 : getProto(Uint8Array);
      var INTRINSICS = {
        __proto__: null,
        "%AggregateError%": typeof AggregateError === "undefined" ? undefined2 : AggregateError,
        "%Array%": Array,
        "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined2 : ArrayBuffer,
        "%ArrayIteratorPrototype%": hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined2,
        "%AsyncFromSyncIteratorPrototype%": undefined2,
        "%AsyncFunction%": needsEval,
        "%AsyncGenerator%": needsEval,
        "%AsyncGeneratorFunction%": needsEval,
        "%AsyncIteratorPrototype%": needsEval,
        "%Atomics%": typeof Atomics === "undefined" ? undefined2 : Atomics,
        "%BigInt%": typeof BigInt === "undefined" ? undefined2 : BigInt,
        "%BigInt64Array%": typeof BigInt64Array === "undefined" ? undefined2 : BigInt64Array,
        "%BigUint64Array%": typeof BigUint64Array === "undefined" ? undefined2 : BigUint64Array,
        "%Boolean%": Boolean,
        "%DataView%": typeof DataView === "undefined" ? undefined2 : DataView,
        "%Date%": Date,
        "%decodeURI%": decodeURI,
        "%decodeURIComponent%": decodeURIComponent,
        "%encodeURI%": encodeURI,
        "%encodeURIComponent%": encodeURIComponent,
        "%Error%": $Error,
        "%eval%": eval,
        // eslint-disable-line no-eval
        "%EvalError%": $EvalError,
        "%Float32Array%": typeof Float32Array === "undefined" ? undefined2 : Float32Array,
        "%Float64Array%": typeof Float64Array === "undefined" ? undefined2 : Float64Array,
        "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined2 : FinalizationRegistry,
        "%Function%": $Function,
        "%GeneratorFunction%": needsEval,
        "%Int8Array%": typeof Int8Array === "undefined" ? undefined2 : Int8Array,
        "%Int16Array%": typeof Int16Array === "undefined" ? undefined2 : Int16Array,
        "%Int32Array%": typeof Int32Array === "undefined" ? undefined2 : Int32Array,
        "%isFinite%": isFinite,
        "%isNaN%": isNaN,
        "%IteratorPrototype%": hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined2,
        "%JSON%": typeof JSON === "object" ? JSON : undefined2,
        "%Map%": typeof Map === "undefined" ? undefined2 : Map,
        "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()),
        "%Math%": Math,
        "%Number%": Number,
        "%Object%": Object,
        "%parseFloat%": parseFloat,
        "%parseInt%": parseInt,
        "%Promise%": typeof Promise === "undefined" ? undefined2 : Promise,
        "%Proxy%": typeof Proxy === "undefined" ? undefined2 : Proxy,
        "%RangeError%": $RangeError,
        "%ReferenceError%": $ReferenceError,
        "%Reflect%": typeof Reflect === "undefined" ? undefined2 : Reflect,
        "%RegExp%": RegExp,
        "%Set%": typeof Set === "undefined" ? undefined2 : Set,
        "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()),
        "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined2 : SharedArrayBuffer,
        "%String%": String,
        "%StringIteratorPrototype%": hasSymbols && getProto ? getProto(""[Symbol.iterator]()) : undefined2,
        "%Symbol%": hasSymbols ? Symbol : undefined2,
        "%SyntaxError%": $SyntaxError,
        "%ThrowTypeError%": ThrowTypeError,
        "%TypedArray%": TypedArray,
        "%TypeError%": $TypeError,
        "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined2 : Uint8Array,
        "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined2 : Uint8ClampedArray,
        "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined2 : Uint16Array,
        "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined2 : Uint32Array,
        "%URIError%": $URIError,
        "%WeakMap%": typeof WeakMap === "undefined" ? undefined2 : WeakMap,
        "%WeakRef%": typeof WeakRef === "undefined" ? undefined2 : WeakRef,
        "%WeakSet%": typeof WeakSet === "undefined" ? undefined2 : WeakSet
      };
      if (getProto) {
        try {
          null.error;
        } catch (e) {
          errorProto = getProto(getProto(e));
          INTRINSICS["%Error.prototype%"] = errorProto;
        }
      }
      var errorProto;
      var doEval = function doEval2(name) {
        var value;
        if (name === "%AsyncFunction%") {
          value = getEvalledConstructor("async function () {}");
        } else if (name === "%GeneratorFunction%") {
          value = getEvalledConstructor("function* () {}");
        } else if (name === "%AsyncGeneratorFunction%") {
          value = getEvalledConstructor("async function* () {}");
        } else if (name === "%AsyncGenerator%") {
          var fn = doEval2("%AsyncGeneratorFunction%");
          if (fn) {
            value = fn.prototype;
          }
        } else if (name === "%AsyncIteratorPrototype%") {
          var gen = doEval2("%AsyncGenerator%");
          if (gen && getProto) {
            value = getProto(gen.prototype);
          }
        }
        INTRINSICS[name] = value;
        return value;
      };
      var LEGACY_ALIASES = {
        __proto__: null,
        "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
        "%ArrayPrototype%": ["Array", "prototype"],
        "%ArrayProto_entries%": ["Array", "prototype", "entries"],
        "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
        "%ArrayProto_keys%": ["Array", "prototype", "keys"],
        "%ArrayProto_values%": ["Array", "prototype", "values"],
        "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
        "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
        "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
        "%BooleanPrototype%": ["Boolean", "prototype"],
        "%DataViewPrototype%": ["DataView", "prototype"],
        "%DatePrototype%": ["Date", "prototype"],
        "%ErrorPrototype%": ["Error", "prototype"],
        "%EvalErrorPrototype%": ["EvalError", "prototype"],
        "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
        "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
        "%FunctionPrototype%": ["Function", "prototype"],
        "%Generator%": ["GeneratorFunction", "prototype"],
        "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
        "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
        "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
        "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
        "%JSONParse%": ["JSON", "parse"],
        "%JSONStringify%": ["JSON", "stringify"],
        "%MapPrototype%": ["Map", "prototype"],
        "%NumberPrototype%": ["Number", "prototype"],
        "%ObjectPrototype%": ["Object", "prototype"],
        "%ObjProto_toString%": ["Object", "prototype", "toString"],
        "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
        "%PromisePrototype%": ["Promise", "prototype"],
        "%PromiseProto_then%": ["Promise", "prototype", "then"],
        "%Promise_all%": ["Promise", "all"],
        "%Promise_reject%": ["Promise", "reject"],
        "%Promise_resolve%": ["Promise", "resolve"],
        "%RangeErrorPrototype%": ["RangeError", "prototype"],
        "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
        "%RegExpPrototype%": ["RegExp", "prototype"],
        "%SetPrototype%": ["Set", "prototype"],
        "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
        "%StringPrototype%": ["String", "prototype"],
        "%SymbolPrototype%": ["Symbol", "prototype"],
        "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
        "%TypedArrayPrototype%": ["TypedArray", "prototype"],
        "%TypeErrorPrototype%": ["TypeError", "prototype"],
        "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
        "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
        "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
        "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
        "%URIErrorPrototype%": ["URIError", "prototype"],
        "%WeakMapPrototype%": ["WeakMap", "prototype"],
        "%WeakSetPrototype%": ["WeakSet", "prototype"]
      };
      var bind = require_function_bind();
      var hasOwn = require_hasown();
      var $concat = bind.call(Function.call, Array.prototype.concat);
      var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
      var $replace = bind.call(Function.call, String.prototype.replace);
      var $strSlice = bind.call(Function.call, String.prototype.slice);
      var $exec = bind.call(Function.call, RegExp.prototype.exec);
      var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
      var reEscapeChar = /\\(\\)?/g;
      var stringToPath = function stringToPath2(string) {
        var first = $strSlice(string, 0, 1);
        var last = $strSlice(string, -1);
        if (first === "%" && last !== "%") {
          throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
        } else if (last === "%" && first !== "%") {
          throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
        }
        var result = [];
        $replace(string, rePropName, function(match, number, quote, subString) {
          result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number || match;
        });
        return result;
      };
      var getBaseIntrinsic = function getBaseIntrinsic2(name, allowMissing) {
        var intrinsicName = name;
        var alias;
        if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
          alias = LEGACY_ALIASES[intrinsicName];
          intrinsicName = "%" + alias[0] + "%";
        }
        if (hasOwn(INTRINSICS, intrinsicName)) {
          var value = INTRINSICS[intrinsicName];
          if (value === needsEval) {
            value = doEval(intrinsicName);
          }
          if (typeof value === "undefined" && !allowMissing) {
            throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
          }
          return {
            alias,
            name: intrinsicName,
            value
          };
        }
        throw new $SyntaxError("intrinsic " + name + " does not exist!");
      };
      module.exports = function GetIntrinsic(name, allowMissing) {
        if (typeof name !== "string" || name.length === 0) {
          throw new $TypeError("intrinsic name must be a non-empty string");
        }
        if (arguments.length > 1 && typeof allowMissing !== "boolean") {
          throw new $TypeError('"allowMissing" argument must be a boolean');
        }
        if ($exec(/^%?[^%]*%?$/, name) === null) {
          throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
        }
        var parts = stringToPath(name);
        var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
        var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
        var intrinsicRealName = intrinsic.name;
        var value = intrinsic.value;
        var skipFurtherCaching = false;
        var alias = intrinsic.alias;
        if (alias) {
          intrinsicBaseName = alias[0];
          $spliceApply(parts, $concat([0, 1], alias));
        }
        for (var i = 1, isOwn = true; i < parts.length; i += 1) {
          var part = parts[i];
          var first = $strSlice(part, 0, 1);
          var last = $strSlice(part, -1);
          if ((first === '"' || first === "'" || first === "`" || (last === '"' || last === "'" || last === "`")) && first !== last) {
            throw new $SyntaxError("property names with quotes must have matching quotes");
          }
          if (part === "constructor" || !isOwn) {
            skipFurtherCaching = true;
          }
          intrinsicBaseName += "." + part;
          intrinsicRealName = "%" + intrinsicBaseName + "%";
          if (hasOwn(INTRINSICS, intrinsicRealName)) {
            value = INTRINSICS[intrinsicRealName];
          } else if (value != null) {
            if (!(part in value)) {
              if (!allowMissing) {
                throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
              }
              return void 0;
            }
            if ($gOPD && i + 1 >= parts.length) {
              var desc = $gOPD(value, part);
              isOwn = !!desc;
              if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
                value = desc.get;
              } else {
                value = value[part];
              }
            } else {
              isOwn = hasOwn(value, part);
              value = value[part];
            }
            if (isOwn && !skipFurtherCaching) {
              INTRINSICS[intrinsicRealName] = value;
            }
          }
        }
        return value;
      };
    }
  });

  // node_modules/es-define-property/index.js
  var require_es_define_property = __commonJS({
    "node_modules/es-define-property/index.js"(exports, module) {
      "use strict";
      var GetIntrinsic = require_get_intrinsic();
      var $defineProperty = GetIntrinsic("%Object.defineProperty%", true) || false;
      if ($defineProperty) {
        try {
          $defineProperty({}, "a", { value: 1 });
        } catch (e) {
          $defineProperty = false;
        }
      }
      module.exports = $defineProperty;
    }
  });

  // node_modules/gopd/index.js
  var require_gopd = __commonJS({
    "node_modules/gopd/index.js"(exports, module) {
      "use strict";
      var GetIntrinsic = require_get_intrinsic();
      var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
      if ($gOPD) {
        try {
          $gOPD([], "length");
        } catch (e) {
          $gOPD = null;
        }
      }
      module.exports = $gOPD;
    }
  });

  // node_modules/define-data-property/index.js
  var require_define_data_property = __commonJS({
    "node_modules/define-data-property/index.js"(exports, module) {
      "use strict";
      var $defineProperty = require_es_define_property();
      var $SyntaxError = require_syntax();
      var $TypeError = require_type();
      var gopd = require_gopd();
      module.exports = function defineDataProperty(obj, property, value) {
        if (!obj || typeof obj !== "object" && typeof obj !== "function") {
          throw new $TypeError("`obj` must be an object or a function`");
        }
        if (typeof property !== "string" && typeof property !== "symbol") {
          throw new $TypeError("`property` must be a string or a symbol`");
        }
        if (arguments.length > 3 && typeof arguments[3] !== "boolean" && arguments[3] !== null) {
          throw new $TypeError("`nonEnumerable`, if provided, must be a boolean or null");
        }
        if (arguments.length > 4 && typeof arguments[4] !== "boolean" && arguments[4] !== null) {
          throw new $TypeError("`nonWritable`, if provided, must be a boolean or null");
        }
        if (arguments.length > 5 && typeof arguments[5] !== "boolean" && arguments[5] !== null) {
          throw new $TypeError("`nonConfigurable`, if provided, must be a boolean or null");
        }
        if (arguments.length > 6 && typeof arguments[6] !== "boolean") {
          throw new $TypeError("`loose`, if provided, must be a boolean");
        }
        var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
        var nonWritable = arguments.length > 4 ? arguments[4] : null;
        var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
        var loose = arguments.length > 6 ? arguments[6] : false;
        var desc = !!gopd && gopd(obj, property);
        if ($defineProperty) {
          $defineProperty(obj, property, {
            configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
            enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
            value,
            writable: nonWritable === null && desc ? desc.writable : !nonWritable
          });
        } else if (loose || !nonEnumerable && !nonWritable && !nonConfigurable) {
          obj[property] = value;
        } else {
          throw new $SyntaxError("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");
        }
      };
    }
  });

  // node_modules/has-property-descriptors/index.js
  var require_has_property_descriptors = __commonJS({
    "node_modules/has-property-descriptors/index.js"(exports, module) {
      "use strict";
      var $defineProperty = require_es_define_property();
      var hasPropertyDescriptors = function hasPropertyDescriptors2() {
        return !!$defineProperty;
      };
      hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
        if (!$defineProperty) {
          return null;
        }
        try {
          return $defineProperty([], "length", { value: 1 }).length !== 1;
        } catch (e) {
          return true;
        }
      };
      module.exports = hasPropertyDescriptors;
    }
  });

  // node_modules/set-function-length/index.js
  var require_set_function_length = __commonJS({
    "node_modules/set-function-length/index.js"(exports, module) {
      "use strict";
      var GetIntrinsic = require_get_intrinsic();
      var define2 = require_define_data_property();
      var hasDescriptors = require_has_property_descriptors()();
      var gOPD = require_gopd();
      var $TypeError = require_type();
      var $floor = GetIntrinsic("%Math.floor%");
      module.exports = function setFunctionLength(fn, length) {
        if (typeof fn !== "function") {
          throw new $TypeError("`fn` is not a function");
        }
        if (typeof length !== "number" || length < 0 || length > 4294967295 || $floor(length) !== length) {
          throw new $TypeError("`length` must be a positive 32-bit integer");
        }
        var loose = arguments.length > 2 && !!arguments[2];
        var functionLengthIsConfigurable = true;
        var functionLengthIsWritable = true;
        if ("length" in fn && gOPD) {
          var desc = gOPD(fn, "length");
          if (desc && !desc.configurable) {
            functionLengthIsConfigurable = false;
          }
          if (desc && !desc.writable) {
            functionLengthIsWritable = false;
          }
        }
        if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
          if (hasDescriptors) {
            define2(
              /** @type {Parameters<define>[0]} */
              fn,
              "length",
              length,
              true,
              true
            );
          } else {
            define2(
              /** @type {Parameters<define>[0]} */
              fn,
              "length",
              length
            );
          }
        }
        return fn;
      };
    }
  });

  // node_modules/call-bind/index.js
  var require_call_bind = __commonJS({
    "node_modules/call-bind/index.js"(exports, module) {
      "use strict";
      var bind = require_function_bind();
      var GetIntrinsic = require_get_intrinsic();
      var setFunctionLength = require_set_function_length();
      var $TypeError = require_type();
      var $apply = GetIntrinsic("%Function.prototype.apply%");
      var $call = GetIntrinsic("%Function.prototype.call%");
      var $reflectApply = GetIntrinsic("%Reflect.apply%", true) || bind.call($call, $apply);
      var $defineProperty = require_es_define_property();
      var $max = GetIntrinsic("%Math.max%");
      module.exports = function callBind(originalFunction) {
        if (typeof originalFunction !== "function") {
          throw new $TypeError("a function is required");
        }
        var func = $reflectApply(bind, $call, arguments);
        return setFunctionLength(
          func,
          1 + $max(0, originalFunction.length - (arguments.length - 1)),
          true
        );
      };
      var applyBind = function applyBind2() {
        return $reflectApply(bind, $apply, arguments);
      };
      if ($defineProperty) {
        $defineProperty(module.exports, "apply", { value: applyBind });
      } else {
        module.exports.apply = applyBind;
      }
    }
  });

  // node_modules/call-bind/callBound.js
  var require_callBound = __commonJS({
    "node_modules/call-bind/callBound.js"(exports, module) {
      "use strict";
      var GetIntrinsic = require_get_intrinsic();
      var callBind = require_call_bind();
      var $indexOf = callBind(GetIntrinsic("String.prototype.indexOf"));
      module.exports = function callBoundIntrinsic(name, allowMissing) {
        var intrinsic = GetIntrinsic(name, !!allowMissing);
        if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) {
          return callBind(intrinsic);
        }
        return intrinsic;
      };
    }
  });

  // node_modules/object.assign/implementation.js
  var require_implementation4 = __commonJS({
    "node_modules/object.assign/implementation.js"(exports, module) {
      "use strict";
      var objectKeys = require_object_keys();
      var hasSymbols = require_shams()();
      var callBound = require_callBound();
      var toObject = Object;
      var $push = callBound("Array.prototype.push");
      var $propIsEnumerable = callBound("Object.prototype.propertyIsEnumerable");
      var originalGetSymbols = hasSymbols ? Object.getOwnPropertySymbols : null;
      module.exports = function assign(target, source1) {
        if (target == null) {
          throw new TypeError("target must be an object");
        }
        var to = toObject(target);
        if (arguments.length === 1) {
          return to;
        }
        for (var s = 1; s < arguments.length; ++s) {
          var from = toObject(arguments[s]);
          var keys = objectKeys(from);
          var getSymbols = hasSymbols && (Object.getOwnPropertySymbols || originalGetSymbols);
          if (getSymbols) {
            var syms = getSymbols(from);
            for (var j = 0; j < syms.length; ++j) {
              var key = syms[j];
              if ($propIsEnumerable(from, key)) {
                $push(keys, key);
              }
            }
          }
          for (var i = 0; i < keys.length; ++i) {
            var nextKey = keys[i];
            if ($propIsEnumerable(from, nextKey)) {
              var propValue = from[nextKey];
              to[nextKey] = propValue;
            }
          }
        }
        return to;
      };
    }
  });

  // node_modules/object.assign/polyfill.js
  var require_polyfill = __commonJS({
    "node_modules/object.assign/polyfill.js"(exports, module) {
      "use strict";
      var implementation = require_implementation4();
      var lacksProperEnumerationOrder = function() {
        if (!Object.assign) {
          return false;
        }
        var str = "abcdefghijklmnopqrst";
        var letters = str.split("");
        var map = {};
        for (var i = 0; i < letters.length; ++i) {
          map[letters[i]] = letters[i];
        }
        var obj = Object.assign({}, map);
        var actual = "";
        for (var k in obj) {
          actual += k;
        }
        return str !== actual;
      };
      var assignHasPendingExceptions = function() {
        if (!Object.assign || !Object.preventExtensions) {
          return false;
        }
        var thrower = Object.preventExtensions({ 1: 2 });
        try {
          Object.assign(thrower, "xy");
        } catch (e) {
          return thrower[1] === "y";
        }
        return false;
      };
      module.exports = function getPolyfill() {
        if (!Object.assign) {
          return implementation;
        }
        if (lacksProperEnumerationOrder()) {
          return implementation;
        }
        if (assignHasPendingExceptions()) {
          return implementation;
        }
        return Object.assign;
      };
    }
  });

  // node_modules/assert/node_modules/util/support/isBufferBrowser.js
  var require_isBufferBrowser = __commonJS({
    "node_modules/assert/node_modules/util/support/isBufferBrowser.js"(exports, module) {
      module.exports = function isBuffer(arg) {
        return arg && typeof arg === "object" && typeof arg.copy === "function" && typeof arg.fill === "function" && typeof arg.readUInt8 === "function";
      };
    }
  });

  // node_modules/assert/node_modules/inherits/inherits_browser.js
  var require_inherits_browser2 = __commonJS({
    "node_modules/assert/node_modules/inherits/inherits_browser.js"(exports, module) {
      if (typeof Object.create === "function") {
        module.exports = function inherits(ctor, superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        };
      } else {
        module.exports = function inherits(ctor, superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        };
      }
    }
  });

  // node_modules/assert/node_modules/util/util.js
  var require_util2 = __commonJS({
    "node_modules/assert/node_modules/util/util.js"(exports) {
      var formatRegExp = /%[sdj%]/g;
      exports.format = function(f) {
        if (!isString(f)) {
          var objects = [];
          for (var i = 0; i < arguments.length; i++) {
            objects.push(inspect(arguments[i]));
          }
          return objects.join(" ");
        }
        var i = 1;
        var args = arguments;
        var len = args.length;
        var str = String(f).replace(formatRegExp, function(x2) {
          if (x2 === "%%")
            return "%";
          if (i >= len)
            return x2;
          switch (x2) {
            case "%s":
              return String(args[i++]);
            case "%d":
              return Number(args[i++]);
            case "%j":
              try {
                return JSON.stringify(args[i++]);
              } catch (_) {
                return "[Circular]";
              }
            default:
              return x2;
          }
        });
        for (var x = args[i]; i < len; x = args[++i]) {
          if (isNull(x) || !isObject(x)) {
            str += " " + x;
          } else {
            str += " " + inspect(x);
          }
        }
        return str;
      };
      exports.deprecate = function(fn, msg) {
        if (isUndefined(global.process)) {
          return function() {
            return exports.deprecate(fn, msg).apply(this, arguments);
          };
        }
        if (process.noDeprecation === true) {
          return fn;
        }
        var warned = false;
        function deprecated() {
          if (!warned) {
            if (process.throwDeprecation) {
              throw new Error(msg);
            } else if (process.traceDeprecation) {
              console.trace(msg);
            } else {
              console.error(msg);
            }
            warned = true;
          }
          return fn.apply(this, arguments);
        }
        return deprecated;
      };
      var debugs = {};
      var debugEnviron;
      exports.debuglog = function(set) {
        if (isUndefined(debugEnviron))
          debugEnviron = process.env.NODE_DEBUG || "";
        set = set.toUpperCase();
        if (!debugs[set]) {
          if (new RegExp("\\b" + set + "\\b", "i").test(debugEnviron)) {
            var pid = process.pid;
            debugs[set] = function() {
              var msg = exports.format.apply(exports, arguments);
              console.error("%s %d: %s", set, pid, msg);
            };
          } else {
            debugs[set] = function() {
            };
          }
        }
        return debugs[set];
      };
      function inspect(obj, opts) {
        var ctx = {
          seen: [],
          stylize: stylizeNoColor
        };
        if (arguments.length >= 3)
          ctx.depth = arguments[2];
        if (arguments.length >= 4)
          ctx.colors = arguments[3];
        if (isBoolean(opts)) {
          ctx.showHidden = opts;
        } else if (opts) {
          exports._extend(ctx, opts);
        }
        if (isUndefined(ctx.showHidden))
          ctx.showHidden = false;
        if (isUndefined(ctx.depth))
          ctx.depth = 2;
        if (isUndefined(ctx.colors))
          ctx.colors = false;
        if (isUndefined(ctx.customInspect))
          ctx.customInspect = true;
        if (ctx.colors)
          ctx.stylize = stylizeWithColor;
        return formatValue(ctx, obj, ctx.depth);
      }
      exports.inspect = inspect;
      inspect.colors = {
        "bold": [1, 22],
        "italic": [3, 23],
        "underline": [4, 24],
        "inverse": [7, 27],
        "white": [37, 39],
        "grey": [90, 39],
        "black": [30, 39],
        "blue": [34, 39],
        "cyan": [36, 39],
        "green": [32, 39],
        "magenta": [35, 39],
        "red": [31, 39],
        "yellow": [33, 39]
      };
      inspect.styles = {
        "special": "cyan",
        "number": "yellow",
        "boolean": "yellow",
        "undefined": "grey",
        "null": "bold",
        "string": "green",
        "date": "magenta",
        // "name": intentionally not styling
        "regexp": "red"
      };
      function stylizeWithColor(str, styleType) {
        var style = inspect.styles[styleType];
        if (style) {
          return "\x1B[" + inspect.colors[style][0] + "m" + str + "\x1B[" + inspect.colors[style][1] + "m";
        } else {
          return str;
        }
      }
      function stylizeNoColor(str, styleType) {
        return str;
      }
      function arrayToHash(array) {
        var hash = {};
        array.forEach(function(val, idx) {
          hash[val] = true;
        });
        return hash;
      }
      function formatValue(ctx, value, recurseTimes) {
        if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
        value.inspect !== exports.inspect && // Also filter out any prototype objects using the circular check.
        !(value.constructor && value.constructor.prototype === value)) {
          var ret = value.inspect(recurseTimes, ctx);
          if (!isString(ret)) {
            ret = formatValue(ctx, ret, recurseTimes);
          }
          return ret;
        }
        var primitive = formatPrimitive(ctx, value);
        if (primitive) {
          return primitive;
        }
        var keys = Object.keys(value);
        var visibleKeys = arrayToHash(keys);
        if (ctx.showHidden) {
          keys = Object.getOwnPropertyNames(value);
        }
        if (isError(value) && (keys.indexOf("message") >= 0 || keys.indexOf("description") >= 0)) {
          return formatError(value);
        }
        if (keys.length === 0) {
          if (isFunction(value)) {
            var name = value.name ? ": " + value.name : "";
            return ctx.stylize("[Function" + name + "]", "special");
          }
          if (isRegExp(value)) {
            return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
          }
          if (isDate(value)) {
            return ctx.stylize(Date.prototype.toString.call(value), "date");
          }
          if (isError(value)) {
            return formatError(value);
          }
        }
        var base = "", array = false, braces = ["{", "}"];
        if (isArray(value)) {
          array = true;
          braces = ["[", "]"];
        }
        if (isFunction(value)) {
          var n = value.name ? ": " + value.name : "";
          base = " [Function" + n + "]";
        }
        if (isRegExp(value)) {
          base = " " + RegExp.prototype.toString.call(value);
        }
        if (isDate(value)) {
          base = " " + Date.prototype.toUTCString.call(value);
        }
        if (isError(value)) {
          base = " " + formatError(value);
        }
        if (keys.length === 0 && (!array || value.length == 0)) {
          return braces[0] + base + braces[1];
        }
        if (recurseTimes < 0) {
          if (isRegExp(value)) {
            return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
          } else {
            return ctx.stylize("[Object]", "special");
          }
        }
        ctx.seen.push(value);
        var output;
        if (array) {
          output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
        } else {
          output = keys.map(function(key) {
            return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
          });
        }
        ctx.seen.pop();
        return reduceToSingleString(output, base, braces);
      }
      function formatPrimitive(ctx, value) {
        if (isUndefined(value))
          return ctx.stylize("undefined", "undefined");
        if (isString(value)) {
          var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
          return ctx.stylize(simple, "string");
        }
        if (isNumber(value))
          return ctx.stylize("" + value, "number");
        if (isBoolean(value))
          return ctx.stylize("" + value, "boolean");
        if (isNull(value))
          return ctx.stylize("null", "null");
      }
      function formatError(value) {
        return "[" + Error.prototype.toString.call(value) + "]";
      }
      function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
        var output = [];
        for (var i = 0, l = value.length; i < l; ++i) {
          if (hasOwnProperty(value, String(i))) {
            output.push(formatProperty(
              ctx,
              value,
              recurseTimes,
              visibleKeys,
              String(i),
              true
            ));
          } else {
            output.push("");
          }
        }
        keys.forEach(function(key) {
          if (!key.match(/^\d+$/)) {
            output.push(formatProperty(
              ctx,
              value,
              recurseTimes,
              visibleKeys,
              key,
              true
            ));
          }
        });
        return output;
      }
      function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
        var name, str, desc;
        desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
        if (desc.get) {
          if (desc.set) {
            str = ctx.stylize("[Getter/Setter]", "special");
          } else {
            str = ctx.stylize("[Getter]", "special");
          }
        } else {
          if (desc.set) {
            str = ctx.stylize("[Setter]", "special");
          }
        }
        if (!hasOwnProperty(visibleKeys, key)) {
          name = "[" + key + "]";
        }
        if (!str) {
          if (ctx.seen.indexOf(desc.value) < 0) {
            if (isNull(recurseTimes)) {
              str = formatValue(ctx, desc.value, null);
            } else {
              str = formatValue(ctx, desc.value, recurseTimes - 1);
            }
            if (str.indexOf("\n") > -1) {
              if (array) {
                str = str.split("\n").map(function(line) {
                  return "  " + line;
                }).join("\n").substr(2);
              } else {
                str = "\n" + str.split("\n").map(function(line) {
                  return "   " + line;
                }).join("\n");
              }
            }
          } else {
            str = ctx.stylize("[Circular]", "special");
          }
        }
        if (isUndefined(name)) {
          if (array && key.match(/^\d+$/)) {
            return str;
          }
          name = JSON.stringify("" + key);
          if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
            name = name.substr(1, name.length - 2);
            name = ctx.stylize(name, "name");
          } else {
            name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
            name = ctx.stylize(name, "string");
          }
        }
        return name + ": " + str;
      }
      function reduceToSingleString(output, base, braces) {
        var numLinesEst = 0;
        var length = output.reduce(function(prev, cur) {
          numLinesEst++;
          if (cur.indexOf("\n") >= 0)
            numLinesEst++;
          return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
        }, 0);
        if (length > 60) {
          return braces[0] + (base === "" ? "" : base + "\n ") + " " + output.join(",\n  ") + " " + braces[1];
        }
        return braces[0] + base + " " + output.join(", ") + " " + braces[1];
      }
      function isArray(ar) {
        return Array.isArray(ar);
      }
      exports.isArray = isArray;
      function isBoolean(arg) {
        return typeof arg === "boolean";
      }
      exports.isBoolean = isBoolean;
      function isNull(arg) {
        return arg === null;
      }
      exports.isNull = isNull;
      function isNullOrUndefined(arg) {
        return arg == null;
      }
      exports.isNullOrUndefined = isNullOrUndefined;
      function isNumber(arg) {
        return typeof arg === "number";
      }
      exports.isNumber = isNumber;
      function isString(arg) {
        return typeof arg === "string";
      }
      exports.isString = isString;
      function isSymbol(arg) {
        return typeof arg === "symbol";
      }
      exports.isSymbol = isSymbol;
      function isUndefined(arg) {
        return arg === void 0;
      }
      exports.isUndefined = isUndefined;
      function isRegExp(re) {
        return isObject(re) && objectToString(re) === "[object RegExp]";
      }
      exports.isRegExp = isRegExp;
      function isObject(arg) {
        return typeof arg === "object" && arg !== null;
      }
      exports.isObject = isObject;
      function isDate(d) {
        return isObject(d) && objectToString(d) === "[object Date]";
      }
      exports.isDate = isDate;
      function isError(e) {
        return isObject(e) && (objectToString(e) === "[object Error]" || e instanceof Error);
      }
      exports.isError = isError;
      function isFunction(arg) {
        return typeof arg === "function";
      }
      exports.isFunction = isFunction;
      function isPrimitive(arg) {
        return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || // ES6 symbol
        typeof arg === "undefined";
      }
      exports.isPrimitive = isPrimitive;
      exports.isBuffer = require_isBufferBrowser();
      function objectToString(o) {
        return Object.prototype.toString.call(o);
      }
      function pad(n) {
        return n < 10 ? "0" + n.toString(10) : n.toString(10);
      }
      var months = [
        "Jan",
        "Feb",
        "Mar",
        "Apr",
        "May",
        "Jun",
        "Jul",
        "Aug",
        "Sep",
        "Oct",
        "Nov",
        "Dec"
      ];
      function timestamp() {
        var d = /* @__PURE__ */ new Date();
        var time = [
          pad(d.getHours()),
          pad(d.getMinutes()),
          pad(d.getSeconds())
        ].join(":");
        return [d.getDate(), months[d.getMonth()], time].join(" ");
      }
      exports.log = function() {
        console.log("%s - %s", timestamp(), exports.format.apply(exports, arguments));
      };
      exports.inherits = require_inherits_browser2();
      exports._extend = function(origin, add) {
        if (!add || !isObject(add))
          return origin;
        var keys = Object.keys(add);
        var i = keys.length;
        while (i--) {
          origin[keys[i]] = add[keys[i]];
        }
        return origin;
      };
      function hasOwnProperty(obj, prop) {
        return Object.prototype.hasOwnProperty.call(obj, prop);
      }
    }
  });

  // node_modules/assert/assert.js
  var require_assert2 = __commonJS({
    "node_modules/assert/assert.js"(exports, module) {
      "use strict";
      var objectAssign = require_polyfill()();
      function compare(a, b) {
        if (a === b) {
          return 0;
        }
        var x = a.length;
        var y = b.length;
        for (var i = 0, len = Math.min(x, y); i < len; ++i) {
          if (a[i] !== b[i]) {
            x = a[i];
            y = b[i];
            break;
          }
        }
        if (x < y) {
          return -1;
        }
        if (y < x) {
          return 1;
        }
        return 0;
      }
      function isBuffer(b) {
        if (global.Buffer && typeof global.Buffer.isBuffer === "function") {
          return global.Buffer.isBuffer(b);
        }
        return !!(b != null && b._isBuffer);
      }
      var util = require_util2();
      var hasOwn = Object.prototype.hasOwnProperty;
      var pSlice = Array.prototype.slice;
      var functionsHaveNames = function() {
        return function foo() {
        }.name === "foo";
      }();
      function pToString(obj) {
        return Object.prototype.toString.call(obj);
      }
      function isView(arrbuf) {
        if (isBuffer(arrbuf)) {
          return false;
        }
        if (typeof global.ArrayBuffer !== "function") {
          return false;
        }
        if (typeof ArrayBuffer.isView === "function") {
          return ArrayBuffer.isView(arrbuf);
        }
        if (!arrbuf) {
          return false;
        }
        if (arrbuf instanceof DataView) {
          return true;
        }
        if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
          return true;
        }
        return false;
      }
      var assert = module.exports = ok;
      var regex = /\s*function\s+([^\(\s]*)\s*/;
      function getName(func) {
        if (!util.isFunction(func)) {
          return;
        }
        if (functionsHaveNames) {
          return func.name;
        }
        var str = func.toString();
        var match = str.match(regex);
        return match && match[1];
      }
      assert.AssertionError = function AssertionError(options) {
        this.name = "AssertionError";
        this.actual = options.actual;
        this.expected = options.expected;
        this.operator = options.operator;
        if (options.message) {
          this.message = options.message;
          this.generatedMessage = false;
        } else {
          this.message = getMessage(this);
          this.generatedMessage = true;
        }
        var stackStartFunction = options.stackStartFunction || fail;
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, stackStartFunction);
        } else {
          var err = new Error();
          if (err.stack) {
            var out = err.stack;
            var fn_name = getName(stackStartFunction);
            var idx = out.indexOf("\n" + fn_name);
            if (idx >= 0) {
              var next_line = out.indexOf("\n", idx + 1);
              out = out.substring(next_line + 1);
            }
            this.stack = out;
          }
        }
      };
      util.inherits(assert.AssertionError, Error);
      function truncate(s, n) {
        if (typeof s === "string") {
          return s.length < n ? s : s.slice(0, n);
        } else {
          return s;
        }
      }
      function inspect(something) {
        if (functionsHaveNames || !util.isFunction(something)) {
          return util.inspect(something);
        }
        var rawname = getName(something);
        var name = rawname ? ": " + rawname : "";
        return "[Function" + name + "]";
      }
      function getMessage(self2) {
        return truncate(inspect(self2.actual), 128) + " " + self2.operator + " " + truncate(inspect(self2.expected), 128);
      }
      function fail(actual, expected, message, operator, stackStartFunction) {
        throw new assert.AssertionError({
          message,
          actual,
          expected,
          operator,
          stackStartFunction
        });
      }
      assert.fail = fail;
      function ok(value, message) {
        if (!value)
          fail(value, true, message, "==", assert.ok);
      }
      assert.ok = ok;
      assert.equal = function equal(actual, expected, message) {
        if (actual != expected)
          fail(actual, expected, message, "==", assert.equal);
      };
      assert.notEqual = function notEqual(actual, expected, message) {
        if (actual == expected) {
          fail(actual, expected, message, "!=", assert.notEqual);
        }
      };
      assert.deepEqual = function deepEqual(actual, expected, message) {
        if (!_deepEqual(actual, expected, false)) {
          fail(actual, expected, message, "deepEqual", assert.deepEqual);
        }
      };
      assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
        if (!_deepEqual(actual, expected, true)) {
          fail(actual, expected, message, "deepStrictEqual", assert.deepStrictEqual);
        }
      };
      function _deepEqual(actual, expected, strict2, memos) {
        if (actual === expected) {
          return true;
        } else if (isBuffer(actual) && isBuffer(expected)) {
          return compare(actual, expected) === 0;
        } else if (util.isDate(actual) && util.isDate(expected)) {
          return actual.getTime() === expected.getTime();
        } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
          return actual.source === expected.source && actual.global === expected.global && actual.multiline === expected.multiline && actual.lastIndex === expected.lastIndex && actual.ignoreCase === expected.ignoreCase;
        } else if ((actual === null || typeof actual !== "object") && (expected === null || typeof expected !== "object")) {
          return strict2 ? actual === expected : actual == expected;
        } else if (isView(actual) && isView(expected) && pToString(actual) === pToString(expected) && !(actual instanceof Float32Array || actual instanceof Float64Array)) {
          return compare(
            new Uint8Array(actual.buffer),
            new Uint8Array(expected.buffer)
          ) === 0;
        } else if (isBuffer(actual) !== isBuffer(expected)) {
          return false;
        } else {
          memos = memos || { actual: [], expected: [] };
          var actualIndex = memos.actual.indexOf(actual);
          if (actualIndex !== -1) {
            if (actualIndex === memos.expected.indexOf(expected)) {
              return true;
            }
          }
          memos.actual.push(actual);
          memos.expected.push(expected);
          return objEquiv(actual, expected, strict2, memos);
        }
      }
      function isArguments(object) {
        return Object.prototype.toString.call(object) == "[object Arguments]";
      }
      function objEquiv(a, b, strict2, actualVisitedObjects) {
        if (a === null || a === void 0 || b === null || b === void 0)
          return false;
        if (util.isPrimitive(a) || util.isPrimitive(b))
          return a === b;
        if (strict2 && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
          return false;
        var aIsArgs = isArguments(a);
        var bIsArgs = isArguments(b);
        if (aIsArgs && !bIsArgs || !aIsArgs && bIsArgs)
          return false;
        if (aIsArgs) {
          a = pSlice.call(a);
          b = pSlice.call(b);
          return _deepEqual(a, b, strict2);
        }
        var ka = objectKeys(a);
        var kb = objectKeys(b);
        var key, i;
        if (ka.length !== kb.length)
          return false;
        ka.sort();
        kb.sort();
        for (i = ka.length - 1; i >= 0; i--) {
          if (ka[i] !== kb[i])
            return false;
        }
        for (i = ka.length - 1; i >= 0; i--) {
          key = ka[i];
          if (!_deepEqual(a[key], b[key], strict2, actualVisitedObjects))
            return false;
        }
        return true;
      }
      assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
        if (_deepEqual(actual, expected, false)) {
          fail(actual, expected, message, "notDeepEqual", assert.notDeepEqual);
        }
      };
      assert.notDeepStrictEqual = notDeepStrictEqual;
      function notDeepStrictEqual(actual, expected, message) {
        if (_deepEqual(actual, expected, true)) {
          fail(actual, expected, message, "notDeepStrictEqual", notDeepStrictEqual);
        }
      }
      assert.strictEqual = function strictEqual(actual, expected, message) {
        if (actual !== expected) {
          fail(actual, expected, message, "===", assert.strictEqual);
        }
      };
      assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
        if (actual === expected) {
          fail(actual, expected, message, "!==", assert.notStrictEqual);
        }
      };
      function expectedException(actual, expected) {
        if (!actual || !expected) {
          return false;
        }
        if (Object.prototype.toString.call(expected) == "[object RegExp]") {
          return expected.test(actual);
        }
        try {
          if (actual instanceof expected) {
            return true;
          }
        } catch (e) {
        }
        if (Error.isPrototypeOf(expected)) {
          return false;
        }
        return expected.call({}, actual) === true;
      }
      function _tryBlock(block) {
        var error;
        try {
          block();
        } catch (e) {
          error = e;
        }
        return error;
      }
      function _throws(shouldThrow, block, expected, message) {
        var actual;
        if (typeof block !== "function") {
          throw new TypeError('"block" argument must be a function');
        }
        if (typeof expected === "string") {
          message = expected;
          expected = null;
        }
        actual = _tryBlock(block);
        message = (expected && expected.name ? " (" + expected.name + ")." : ".") + (message ? " " + message : ".");
        if (shouldThrow && !actual) {
          fail(actual, expected, "Missing expected exception" + message);
        }
        var userProvidedMessage = typeof message === "string";
        var isUnwantedException = !shouldThrow && util.isError(actual);
        var isUnexpectedException = !shouldThrow && actual && !expected;
        if (isUnwantedException && userProvidedMessage && expectedException(actual, expected) || isUnexpectedException) {
          fail(actual, expected, "Got unwanted exception" + message);
        }
        if (shouldThrow && actual && expected && !expectedException(actual, expected) || !shouldThrow && actual) {
          throw actual;
        }
      }
      assert.throws = function(block, error, message) {
        _throws(true, block, error, message);
      };
      assert.doesNotThrow = function(block, error, message) {
        _throws(false, block, error, message);
      };
      assert.ifError = function(err) {
        if (err)
          throw err;
      };
      function strict(value, message) {
        if (!value)
          fail(value, true, message, "==", strict);
      }
      assert.strict = objectAssign(strict, assert, {
        equal: assert.strictEqual,
        deepEqual: assert.deepStrictEqual,
        notEqual: assert.notStrictEqual,
        notDeepEqual: assert.notDeepStrictEqual
      });
      assert.strict.strict = assert.strict;
      var objectKeys = Object.keys || function(obj) {
        var keys = [];
        for (var key in obj) {
          if (hasOwn.call(obj, key))
            keys.push(key);
        }
        return keys;
      };
    }
  });

  // node_modules/regtest-client/node_modules/base-x/src/index.js
  var require_src7 = __commonJS({
    "node_modules/regtest-client/node_modules/base-x/src/index.js"(exports, module) {
      "use strict";
      var _Buffer = require_safe_buffer().Buffer;
      function base(ALPHABET) {
        if (ALPHABET.length >= 255) {
          throw new TypeError("Alphabet too long");
        }
        var BASE_MAP = new Uint8Array(256);
        for (var j = 0; j < BASE_MAP.length; j++) {
          BASE_MAP[j] = 255;
        }
        for (var i = 0; i < ALPHABET.length; i++) {
          var x = ALPHABET.charAt(i);
          var xc = x.charCodeAt(0);
          if (BASE_MAP[xc] !== 255) {
            throw new TypeError(x + " is ambiguous");
          }
          BASE_MAP[xc] = i;
        }
        var BASE = ALPHABET.length;
        var LEADER = ALPHABET.charAt(0);
        var FACTOR = Math.log(BASE) / Math.log(256);
        var iFACTOR = Math.log(256) / Math.log(BASE);
        function encode(source) {
          if (Array.isArray(source) || source instanceof Uint8Array) {
            source = _Buffer.from(source);
          }
          if (!_Buffer.isBuffer(source)) {
            throw new TypeError("Expected Buffer");
          }
          if (source.length === 0) {
            return "";
          }
          var zeroes = 0;
          var length = 0;
          var pbegin = 0;
          var pend = source.length;
          while (pbegin !== pend && source[pbegin] === 0) {
            pbegin++;
            zeroes++;
          }
          var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
          var b58 = new Uint8Array(size);
          while (pbegin !== pend) {
            var carry = source[pbegin];
            var i2 = 0;
            for (var it1 = size - 1; (carry !== 0 || i2 < length) && it1 !== -1; it1--, i2++) {
              carry += 256 * b58[it1] >>> 0;
              b58[it1] = carry % BASE >>> 0;
              carry = carry / BASE >>> 0;
            }
            if (carry !== 0) {
              throw new Error("Non-zero carry");
            }
            length = i2;
            pbegin++;
          }
          var it2 = size - length;
          while (it2 !== size && b58[it2] === 0) {
            it2++;
          }
          var str = LEADER.repeat(zeroes);
          for (; it2 < size; ++it2) {
            str += ALPHABET.charAt(b58[it2]);
          }
          return str;
        }
        function decodeUnsafe(source) {
          if (typeof source !== "string") {
            throw new TypeError("Expected String");
          }
          if (source.length === 0) {
            return _Buffer.alloc(0);
          }
          var psz = 0;
          var zeroes = 0;
          var length = 0;
          while (source[psz] === LEADER) {
            zeroes++;
            psz++;
          }
          var size = (source.length - psz) * FACTOR + 1 >>> 0;
          var b256 = new Uint8Array(size);
          while (source[psz]) {
            var carry = BASE_MAP[source.charCodeAt(psz)];
            if (carry === 255) {
              return;
            }
            var i2 = 0;
            for (var it3 = size - 1; (carry !== 0 || i2 < length) && it3 !== -1; it3--, i2++) {
              carry += BASE * b256[it3] >>> 0;
              b256[it3] = carry % 256 >>> 0;
              carry = carry / 256 >>> 0;
            }
            if (carry !== 0) {
              throw new Error("Non-zero carry");
            }
            length = i2;
            psz++;
          }
          var it4 = size - length;
          while (it4 !== size && b256[it4] === 0) {
            it4++;
          }
          var vch = _Buffer.allocUnsafe(zeroes + (size - it4));
          vch.fill(0, 0, zeroes);
          var j2 = zeroes;
          while (it4 !== size) {
            vch[j2++] = b256[it4++];
          }
          return vch;
        }
        function decode(string) {
          var buffer = decodeUnsafe(string);
          if (buffer) {
            return buffer;
          }
          throw new Error("Non-base" + BASE + " character");
        }
        return {
          encode,
          decodeUnsafe,
          decode
        };
      }
      module.exports = base;
    }
  });

  // node_modules/regtest-client/node_modules/bs58/index.js
  var require_bs583 = __commonJS({
    "node_modules/regtest-client/node_modules/bs58/index.js"(exports, module) {
      var basex = require_src7();
      var ALPHABET = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
      module.exports = basex(ALPHABET);
    }
  });

  // node_modules/regtest-client/node_modules/bs58check/base.js
  var require_base3 = __commonJS({
    "node_modules/regtest-client/node_modules/bs58check/base.js"(exports, module) {
      "use strict";
      var base58 = require_bs583();
      var Buffer2 = require_safe_buffer().Buffer;
      module.exports = function(checksumFn) {
        function encode(payload) {
          var checksum = checksumFn(payload);
          return base58.encode(Buffer2.concat([
            payload,
            checksum
          ], payload.length + 4));
        }
        function decodeRaw(buffer) {
          var payload = buffer.slice(0, -4);
          var checksum = buffer.slice(-4);
          var newChecksum = checksumFn(payload);
          if (checksum[0] ^ newChecksum[0] | checksum[1] ^ newChecksum[1] | checksum[2] ^ newChecksum[2] | checksum[3] ^ newChecksum[3])
            return;
          return payload;
        }
        function decodeUnsafe(string) {
          var buffer = base58.decodeUnsafe(string);
          if (!buffer)
            return;
          return decodeRaw(buffer);
        }
        function decode(string) {
          var buffer = base58.decode(string);
          var payload = decodeRaw(buffer, checksumFn);
          if (!payload)
            throw new Error("Invalid checksum");
          return payload;
        }
        return {
          encode,
          decode,
          decodeUnsafe
        };
      };
    }
  });

  // node_modules/regtest-client/node_modules/bs58check/index.js
  var require_bs58check3 = __commonJS({
    "node_modules/regtest-client/node_modules/bs58check/index.js"(exports, module) {
      "use strict";
      var createHash = require_browser3();
      var bs58checkBase = require_base3();
      function sha256x2(buffer) {
        var tmp = createHash("sha256").update(buffer).digest();
        return createHash("sha256").update(tmp).digest();
      }
      module.exports = bs58checkBase(sha256x2);
    }
  });

  // node_modules/url/node_modules/punycode/punycode.js
  var require_punycode = __commonJS({
    "node_modules/url/node_modules/punycode/punycode.js"(exports, module) {
      (function(root) {
        var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
        var freeModule = typeof module == "object" && module && !module.nodeType && module;
        var freeGlobal = typeof global == "object" && global;
        if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {
          root = freeGlobal;
        }
        var punycode, maxInt = 2147483647, base = 36, tMin = 1, tMax = 26, skew = 38, damp = 700, initialBias = 72, initialN = 128, delimiter = "-", regexPunycode = /^xn--/, regexNonASCII = /[^\x20-\x7E]/, regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, errors = {
          "overflow": "Overflow: input needs wider integers to process",
          "not-basic": "Illegal input >= 0x80 (not a basic code point)",
          "invalid-input": "Invalid input"
        }, baseMinusTMin = base - tMin, floor = Math.floor, stringFromCharCode = String.fromCharCode, key;
        function error(type) {
          throw new RangeError(errors[type]);
        }
        function map(array, fn) {
          var length = array.length;
          var result = [];
          while (length--) {
            result[length] = fn(array[length]);
          }
          return result;
        }
        function mapDomain(string, fn) {
          var parts = string.split("@");
          var result = "";
          if (parts.length > 1) {
            result = parts[0] + "@";
            string = parts[1];
          }
          string = string.replace(regexSeparators, ".");
          var labels = string.split(".");
          var encoded = map(labels, fn).join(".");
          return result + encoded;
        }
        function ucs2decode(string) {
          var output = [], counter = 0, length = string.length, value, extra;
          while (counter < length) {
            value = string.charCodeAt(counter++);
            if (value >= 55296 && value <= 56319 && counter < length) {
              extra = string.charCodeAt(counter++);
              if ((extra & 64512) == 56320) {
                output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
              } else {
                output.push(value);
                counter--;
              }
            } else {
              output.push(value);
            }
          }
          return output;
        }
        function ucs2encode(array) {
          return map(array, function(value) {
            var output = "";
            if (value > 65535) {
              value -= 65536;
              output += stringFromCharCode(value >>> 10 & 1023 | 55296);
              value = 56320 | value & 1023;
            }
            output += stringFromCharCode(value);
            return output;
          }).join("");
        }
        function basicToDigit(codePoint) {
          if (codePoint - 48 < 10) {
            return codePoint - 22;
          }
          if (codePoint - 65 < 26) {
            return codePoint - 65;
          }
          if (codePoint - 97 < 26) {
            return codePoint - 97;
          }
          return base;
        }
        function digitToBasic(digit, flag) {
          return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
        }
        function adapt(delta, numPoints, firstTime) {
          var k = 0;
          delta = firstTime ? floor(delta / damp) : delta >> 1;
          delta += floor(delta / numPoints);
          for (; delta > baseMinusTMin * tMax >> 1; k += base) {
            delta = floor(delta / baseMinusTMin);
          }
          return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
        }
        function decode(input) {
          var output = [], inputLength = input.length, out, i = 0, n = initialN, bias = initialBias, basic, j, index, oldi, w, k, digit, t, baseMinusT;
          basic = input.lastIndexOf(delimiter);
          if (basic < 0) {
            basic = 0;
          }
          for (j = 0; j < basic; ++j) {
            if (input.charCodeAt(j) >= 128) {
              error("not-basic");
            }
            output.push(input.charCodeAt(j));
          }
          for (index = basic > 0 ? basic + 1 : 0; index < inputLength; ) {
            for (oldi = i, w = 1, k = base; ; k += base) {
              if (index >= inputLength) {
                error("invalid-input");
              }
              digit = basicToDigit(input.charCodeAt(index++));
              if (digit >= base || digit > floor((maxInt - i) / w)) {
                error("overflow");
              }
              i += digit * w;
              t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
              if (digit < t) {
                break;
              }
              baseMinusT = base - t;
              if (w > floor(maxInt / baseMinusT)) {
                error("overflow");
              }
              w *= baseMinusT;
            }
            out = output.length + 1;
            bias = adapt(i - oldi, out, oldi == 0);
            if (floor(i / out) > maxInt - n) {
              error("overflow");
            }
            n += floor(i / out);
            i %= out;
            output.splice(i++, 0, n);
          }
          return ucs2encode(output);
        }
        function encode(input) {
          var n, delta, handledCPCount, basicLength, bias, j, m, q, k, t, currentValue, output = [], inputLength, handledCPCountPlusOne, baseMinusT, qMinusT;
          input = ucs2decode(input);
          inputLength = input.length;
          n = initialN;
          delta = 0;
          bias = initialBias;
          for (j = 0; j < inputLength; ++j) {
            currentValue = input[j];
            if (currentValue < 128) {
              output.push(stringFromCharCode(currentValue));
            }
          }
          handledCPCount = basicLength = output.length;
          if (basicLength) {
            output.push(delimiter);
          }
          while (handledCPCount < inputLength) {
            for (m = maxInt, j = 0; j < inputLength; ++j) {
              currentValue = input[j];
              if (currentValue >= n && currentValue < m) {
                m = currentValue;
              }
            }
            handledCPCountPlusOne = handledCPCount + 1;
            if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
              error("overflow");
            }
            delta += (m - n) * handledCPCountPlusOne;
            n = m;
            for (j = 0; j < inputLength; ++j) {
              currentValue = input[j];
              if (currentValue < n && ++delta > maxInt) {
                error("overflow");
              }
              if (currentValue == n) {
                for (q = delta, k = base; ; k += base) {
                  t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                  if (q < t) {
                    break;
                  }
                  qMinusT = q - t;
                  baseMinusT = base - t;
                  output.push(
                    stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
                  );
                  q = floor(qMinusT / baseMinusT);
                }
                output.push(stringFromCharCode(digitToBasic(q, 0)));
                bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                delta = 0;
                ++handledCPCount;
              }
            }
            ++delta;
            ++n;
          }
          return output.join("");
        }
        function toUnicode(input) {
          return mapDomain(input, function(string) {
            return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
          });
        }
        function toASCII(input) {
          return mapDomain(input, function(string) {
            return regexNonASCII.test(string) ? "xn--" + encode(string) : string;
          });
        }
        punycode = {
          /**
           * A string representing the current Punycode.js version number.
           * @memberOf punycode
           * @type String
           */
          "version": "1.4.1",
          /**
           * An object of methods to convert from JavaScript's internal character
           * representation (UCS-2) to Unicode code points, and back.
           * @see <https://mathiasbynens.be/notes/javascript-encoding>
           * @memberOf punycode
           * @type Object
           */
          "ucs2": {
            "decode": ucs2decode,
            "encode": ucs2encode
          },
          "decode": decode,
          "encode": encode,
          "toASCII": toASCII,
          "toUnicode": toUnicode
        };
        if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
          define("punycode", function() {
            return punycode;
          });
        } else if (freeExports && freeModule) {
          if (module.exports == freeExports) {
            freeModule.exports = punycode;
          } else {
            for (key in punycode) {
              punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
            }
          }
        } else {
          root.punycode = punycode;
        }
      })(exports);
    }
  });

  // (disabled):node_modules/object-inspect/util.inspect
  var require_util3 = __commonJS({
    "(disabled):node_modules/object-inspect/util.inspect"() {
    }
  });

  // node_modules/object-inspect/index.js
  var require_object_inspect = __commonJS({
    "node_modules/object-inspect/index.js"(exports, module) {
      var hasMap = typeof Map === "function" && Map.prototype;
      var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, "size") : null;
      var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === "function" ? mapSizeDescriptor.get : null;
      var mapForEach = hasMap && Map.prototype.forEach;
      var hasSet = typeof Set === "function" && Set.prototype;
      var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, "size") : null;
      var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === "function" ? setSizeDescriptor.get : null;
      var setForEach = hasSet && Set.prototype.forEach;
      var hasWeakMap = typeof WeakMap === "function" && WeakMap.prototype;
      var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
      var hasWeakSet = typeof WeakSet === "function" && WeakSet.prototype;
      var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
      var hasWeakRef = typeof WeakRef === "function" && WeakRef.prototype;
      var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
      var booleanValueOf = Boolean.prototype.valueOf;
      var objectToString = Object.prototype.toString;
      var functionToString = Function.prototype.toString;
      var $match = String.prototype.match;
      var $slice = String.prototype.slice;
      var $replace = String.prototype.replace;
      var $toUpperCase = String.prototype.toUpperCase;
      var $toLowerCase = String.prototype.toLowerCase;
      var $test = RegExp.prototype.test;
      var $concat = Array.prototype.concat;
      var $join = Array.prototype.join;
      var $arrSlice = Array.prototype.slice;
      var $floor = Math.floor;
      var bigIntValueOf = typeof BigInt === "function" ? BigInt.prototype.valueOf : null;
      var gOPS = Object.getOwnPropertySymbols;
      var symToString = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? Symbol.prototype.toString : null;
      var hasShammedSymbols = typeof Symbol === "function" && typeof Symbol.iterator === "object";
      var toStringTag = typeof Symbol === "function" && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? "object" : "symbol") ? Symbol.toStringTag : null;
      var isEnumerable = Object.prototype.propertyIsEnumerable;
      var gPO = (typeof Reflect === "function" ? Reflect.getPrototypeOf : Object.getPrototypeOf) || ([].__proto__ === Array.prototype ? function(O) {
        return O.__proto__;
      } : null);
      function addNumericSeparator(num, str) {
        if (num === Infinity || num === -Infinity || num !== num || num && num > -1e3 && num < 1e3 || $test.call(/e/, str)) {
          return str;
        }
        var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
        if (typeof num === "number") {
          var int = num < 0 ? -$floor(-num) : $floor(num);
          if (int !== num) {
            var intStr = String(int);
            var dec = $slice.call(str, intStr.length + 1);
            return $replace.call(intStr, sepRegex, "$&_") + "." + $replace.call($replace.call(dec, /([0-9]{3})/g, "$&_"), /_$/, "");
          }
        }
        return $replace.call(str, sepRegex, "$&_");
      }
      var utilInspect = require_util3();
      var inspectCustom = utilInspect.custom;
      var inspectSymbol = isSymbol(inspectCustom) ? inspectCustom : null;
      module.exports = function inspect_(obj, options, depth, seen) {
        var opts = options || {};
        if (has(opts, "quoteStyle") && (opts.quoteStyle !== "single" && opts.quoteStyle !== "double")) {
          throw new TypeError('option "quoteStyle" must be "single" or "double"');
        }
        if (has(opts, "maxStringLength") && (typeof opts.maxStringLength === "number" ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity : opts.maxStringLength !== null)) {
          throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
        }
        var customInspect = has(opts, "customInspect") ? opts.customInspect : true;
        if (typeof customInspect !== "boolean" && customInspect !== "symbol") {
          throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");
        }
        if (has(opts, "indent") && opts.indent !== null && opts.indent !== "	" && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)) {
          throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
        }
        if (has(opts, "numericSeparator") && typeof opts.numericSeparator !== "boolean") {
          throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
        }
        var numericSeparator = opts.numericSeparator;
        if (typeof obj === "undefined") {
          return "undefined";
        }
        if (obj === null) {
          return "null";
        }
        if (typeof obj === "boolean") {
          return obj ? "true" : "false";
        }
        if (typeof obj === "string") {
          return inspectString(obj, opts);
        }
        if (typeof obj === "number") {
          if (obj === 0) {
            return Infinity / obj > 0 ? "0" : "-0";
          }
          var str = String(obj);
          return numericSeparator ? addNumericSeparator(obj, str) : str;
        }
        if (typeof obj === "bigint") {
          var bigIntStr = String(obj) + "n";
          return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
        }
        var maxDepth = typeof opts.depth === "undefined" ? 5 : opts.depth;
        if (typeof depth === "undefined") {
          depth = 0;
        }
        if (depth >= maxDepth && maxDepth > 0 && typeof obj === "object") {
          return isArray(obj) ? "[Array]" : "[Object]";
        }
        var indent = getIndent(opts, depth);
        if (typeof seen === "undefined") {
          seen = [];
        } else if (indexOf(seen, obj) >= 0) {
          return "[Circular]";
        }
        function inspect(value, from, noIndent) {
          if (from) {
            seen = $arrSlice.call(seen);
            seen.push(from);
          }
          if (noIndent) {
            var newOpts = {
              depth: opts.depth
            };
            if (has(opts, "quoteStyle")) {
              newOpts.quoteStyle = opts.quoteStyle;
            }
            return inspect_(value, newOpts, depth + 1, seen);
          }
          return inspect_(value, opts, depth + 1, seen);
        }
        if (typeof obj === "function" && !isRegExp(obj)) {
          var name = nameOf(obj);
          var keys = arrObjKeys(obj, inspect);
          return "[Function" + (name ? ": " + name : " (anonymous)") + "]" + (keys.length > 0 ? " { " + $join.call(keys, ", ") + " }" : "");
        }
        if (isSymbol(obj)) {
          var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, "$1") : symToString.call(obj);
          return typeof obj === "object" && !hasShammedSymbols ? markBoxed(symString) : symString;
        }
        if (isElement(obj)) {
          var s = "<" + $toLowerCase.call(String(obj.nodeName));
          var attrs = obj.attributes || [];
          for (var i = 0; i < attrs.length; i++) {
            s += " " + attrs[i].name + "=" + wrapQuotes(quote(attrs[i].value), "double", opts);
          }
          s += ">";
          if (obj.childNodes && obj.childNodes.length) {
            s += "...";
          }
          s += "</" + $toLowerCase.call(String(obj.nodeName)) + ">";
          return s;
        }
        if (isArray(obj)) {
          if (obj.length === 0) {
            return "[]";
          }
          var xs = arrObjKeys(obj, inspect);
          if (indent && !singleLineValues(xs)) {
            return "[" + indentedJoin(xs, indent) + "]";
          }
          return "[ " + $join.call(xs, ", ") + " ]";
        }
        if (isError(obj)) {
          var parts = arrObjKeys(obj, inspect);
          if (!("cause" in Error.prototype) && "cause" in obj && !isEnumerable.call(obj, "cause")) {
            return "{ [" + String(obj) + "] " + $join.call($concat.call("[cause]: " + inspect(obj.cause), parts), ", ") + " }";
          }
          if (parts.length === 0) {
            return "[" + String(obj) + "]";
          }
          return "{ [" + String(obj) + "] " + $join.call(parts, ", ") + " }";
        }
        if (typeof obj === "object" && customInspect) {
          if (inspectSymbol && typeof obj[inspectSymbol] === "function" && utilInspect) {
            return utilInspect(obj, { depth: maxDepth - depth });
          } else if (customInspect !== "symbol" && typeof obj.inspect === "function") {
            return obj.inspect();
          }
        }
        if (isMap(obj)) {
          var mapParts = [];
          if (mapForEach) {
            mapForEach.call(obj, function(value, key) {
              mapParts.push(inspect(key, obj, true) + " => " + inspect(value, obj));
            });
          }
          return collectionOf("Map", mapSize.call(obj), mapParts, indent);
        }
        if (isSet(obj)) {
          var setParts = [];
          if (setForEach) {
            setForEach.call(obj, function(value) {
              setParts.push(inspect(value, obj));
            });
          }
          return collectionOf("Set", setSize.call(obj), setParts, indent);
        }
        if (isWeakMap(obj)) {
          return weakCollectionOf("WeakMap");
        }
        if (isWeakSet(obj)) {
          return weakCollectionOf("WeakSet");
        }
        if (isWeakRef(obj)) {
          return weakCollectionOf("WeakRef");
        }
        if (isNumber(obj)) {
          return markBoxed(inspect(Number(obj)));
        }
        if (isBigInt(obj)) {
          return markBoxed(inspect(bigIntValueOf.call(obj)));
        }
        if (isBoolean(obj)) {
          return markBoxed(booleanValueOf.call(obj));
        }
        if (isString(obj)) {
          return markBoxed(inspect(String(obj)));
        }
        if (typeof window !== "undefined" && obj === window) {
          return "{ [object Window] }";
        }
        if (obj === global) {
          return "{ [object globalThis] }";
        }
        if (!isDate(obj) && !isRegExp(obj)) {
          var ys = arrObjKeys(obj, inspect);
          var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
          var protoTag = obj instanceof Object ? "" : "null prototype";
          var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? "Object" : "";
          var constructorTag = isPlainObject || typeof obj.constructor !== "function" ? "" : obj.constructor.name ? obj.constructor.name + " " : "";
          var tag = constructorTag + (stringTag || protoTag ? "[" + $join.call($concat.call([], stringTag || [], protoTag || []), ": ") + "] " : "");
          if (ys.length === 0) {
            return tag + "{}";
          }
          if (indent) {
            return tag + "{" + indentedJoin(ys, indent) + "}";
          }
          return tag + "{ " + $join.call(ys, ", ") + " }";
        }
        return String(obj);
      };
      function wrapQuotes(s, defaultStyle, opts) {
        var quoteChar = (opts.quoteStyle || defaultStyle) === "double" ? '"' : "'";
        return quoteChar + s + quoteChar;
      }
      function quote(s) {
        return $replace.call(String(s), /"/g, "&quot;");
      }
      function isArray(obj) {
        return toStr(obj) === "[object Array]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
      }
      function isDate(obj) {
        return toStr(obj) === "[object Date]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
      }
      function isRegExp(obj) {
        return toStr(obj) === "[object RegExp]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
      }
      function isError(obj) {
        return toStr(obj) === "[object Error]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
      }
      function isString(obj) {
        return toStr(obj) === "[object String]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
      }
      function isNumber(obj) {
        return toStr(obj) === "[object Number]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
      }
      function isBoolean(obj) {
        return toStr(obj) === "[object Boolean]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
      }
      function isSymbol(obj) {
        if (hasShammedSymbols) {
          return obj && typeof obj === "object" && obj instanceof Symbol;
        }
        if (typeof obj === "symbol") {
          return true;
        }
        if (!obj || typeof obj !== "object" || !symToString) {
          return false;
        }
        try {
          symToString.call(obj);
          return true;
        } catch (e) {
        }
        return false;
      }
      function isBigInt(obj) {
        if (!obj || typeof obj !== "object" || !bigIntValueOf) {
          return false;
        }
        try {
          bigIntValueOf.call(obj);
          return true;
        } catch (e) {
        }
        return false;
      }
      var hasOwn = Object.prototype.hasOwnProperty || function(key) {
        return key in this;
      };
      function has(obj, key) {
        return hasOwn.call(obj, key);
      }
      function toStr(obj) {
        return objectToString.call(obj);
      }
      function nameOf(f) {
        if (f.name) {
          return f.name;
        }
        var m = $match.call(functionToString.call(f), /^function\s*([\w$]+)/);
        if (m) {
          return m[1];
        }
        return null;
      }
      function indexOf(xs, x) {
        if (xs.indexOf) {
          return xs.indexOf(x);
        }
        for (var i = 0, l = xs.length; i < l; i++) {
          if (xs[i] === x) {
            return i;
          }
        }
        return -1;
      }
      function isMap(x) {
        if (!mapSize || !x || typeof x !== "object") {
          return false;
        }
        try {
          mapSize.call(x);
          try {
            setSize.call(x);
          } catch (s) {
            return true;
          }
          return x instanceof Map;
        } catch (e) {
        }
        return false;
      }
      function isWeakMap(x) {
        if (!weakMapHas || !x || typeof x !== "object") {
          return false;
        }
        try {
          weakMapHas.call(x, weakMapHas);
          try {
            weakSetHas.call(x, weakSetHas);
          } catch (s) {
            return true;
          }
          return x instanceof WeakMap;
        } catch (e) {
        }
        return false;
      }
      function isWeakRef(x) {
        if (!weakRefDeref || !x || typeof x !== "object") {
          return false;
        }
        try {
          weakRefDeref.call(x);
          return true;
        } catch (e) {
        }
        return false;
      }
      function isSet(x) {
        if (!setSize || !x || typeof x !== "object") {
          return false;
        }
        try {
          setSize.call(x);
          try {
            mapSize.call(x);
          } catch (m) {
            return true;
          }
          return x instanceof Set;
        } catch (e) {
        }
        return false;
      }
      function isWeakSet(x) {
        if (!weakSetHas || !x || typeof x !== "object") {
          return false;
        }
        try {
          weakSetHas.call(x, weakSetHas);
          try {
            weakMapHas.call(x, weakMapHas);
          } catch (s) {
            return true;
          }
          return x instanceof WeakSet;
        } catch (e) {
        }
        return false;
      }
      function isElement(x) {
        if (!x || typeof x !== "object") {
          return false;
        }
        if (typeof HTMLElement !== "undefined" && x instanceof HTMLElement) {
          return true;
        }
        return typeof x.nodeName === "string" && typeof x.getAttribute === "function";
      }
      function inspectString(str, opts) {
        if (str.length > opts.maxStringLength) {
          var remaining = str.length - opts.maxStringLength;
          var trailer = "... " + remaining + " more character" + (remaining > 1 ? "s" : "");
          return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
        }
        var s = $replace.call($replace.call(str, /(['\\])/g, "\\$1"), /[\x00-\x1f]/g, lowbyte);
        return wrapQuotes(s, "single", opts);
      }
      function lowbyte(c) {
        var n = c.charCodeAt(0);
        var x = {
          8: "b",
          9: "t",
          10: "n",
          12: "f",
          13: "r"
        }[n];
        if (x) {
          return "\\" + x;
        }
        return "\\x" + (n < 16 ? "0" : "") + $toUpperCase.call(n.toString(16));
      }
      function markBoxed(str) {
        return "Object(" + str + ")";
      }
      function weakCollectionOf(type) {
        return type + " { ? }";
      }
      function collectionOf(type, size, entries, indent) {
        var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ", ");
        return type + " (" + size + ") {" + joinedEntries + "}";
      }
      function singleLineValues(xs) {
        for (var i = 0; i < xs.length; i++) {
          if (indexOf(xs[i], "\n") >= 0) {
            return false;
          }
        }
        return true;
      }
      function getIndent(opts, depth) {
        var baseIndent;
        if (opts.indent === "	") {
          baseIndent = "	";
        } else if (typeof opts.indent === "number" && opts.indent > 0) {
          baseIndent = $join.call(Array(opts.indent + 1), " ");
        } else {
          return null;
        }
        return {
          base: baseIndent,
          prev: $join.call(Array(depth + 1), baseIndent)
        };
      }
      function indentedJoin(xs, indent) {
        if (xs.length === 0) {
          return "";
        }
        var lineJoiner = "\n" + indent.prev + indent.base;
        return lineJoiner + $join.call(xs, "," + lineJoiner) + "\n" + indent.prev;
      }
      function arrObjKeys(obj, inspect) {
        var isArr = isArray(obj);
        var xs = [];
        if (isArr) {
          xs.length = obj.length;
          for (var i = 0; i < obj.length; i++) {
            xs[i] = has(obj, i) ? inspect(obj[i], obj) : "";
          }
        }
        var syms = typeof gOPS === "function" ? gOPS(obj) : [];
        var symMap;
        if (hasShammedSymbols) {
          symMap = {};
          for (var k = 0; k < syms.length; k++) {
            symMap["$" + syms[k]] = syms[k];
          }
        }
        for (var key in obj) {
          if (!has(obj, key)) {
            continue;
          }
          if (isArr && String(Number(key)) === key && key < obj.length) {
            continue;
          }
          if (hasShammedSymbols && symMap["$" + key] instanceof Symbol) {
            continue;
          } else if ($test.call(/[^\w$]/, key)) {
            xs.push(inspect(key, obj) + ": " + inspect(obj[key], obj));
          } else {
            xs.push(key + ": " + inspect(obj[key], obj));
          }
        }
        if (typeof gOPS === "function") {
          for (var j = 0; j < syms.length; j++) {
            if (isEnumerable.call(obj, syms[j])) {
              xs.push("[" + inspect(syms[j]) + "]: " + inspect(obj[syms[j]], obj));
            }
          }
        }
        return xs;
      }
    }
  });

  // node_modules/side-channel/index.js
  var require_side_channel = __commonJS({
    "node_modules/side-channel/index.js"(exports, module) {
      "use strict";
      var GetIntrinsic = require_get_intrinsic();
      var callBound = require_callBound();
      var inspect = require_object_inspect();
      var $TypeError = require_type();
      var $WeakMap = GetIntrinsic("%WeakMap%", true);
      var $Map = GetIntrinsic("%Map%", true);
      var $weakMapGet = callBound("WeakMap.prototype.get", true);
      var $weakMapSet = callBound("WeakMap.prototype.set", true);
      var $weakMapHas = callBound("WeakMap.prototype.has", true);
      var $mapGet = callBound("Map.prototype.get", true);
      var $mapSet = callBound("Map.prototype.set", true);
      var $mapHas = callBound("Map.prototype.has", true);
      var listGetNode = function(list, key) {
        var prev = list;
        var curr;
        for (; (curr = prev.next) !== null; prev = curr) {
          if (curr.key === key) {
            prev.next = curr.next;
            curr.next = /** @type {NonNullable<typeof list.next>} */
            list.next;
            list.next = curr;
            return curr;
          }
        }
      };
      var listGet = function(objects, key) {
        var node = listGetNode(objects, key);
        return node && node.value;
      };
      var listSet = function(objects, key, value) {
        var node = listGetNode(objects, key);
        if (node) {
          node.value = value;
        } else {
          objects.next = /** @type {import('.').ListNode<typeof value>} */
          {
            // eslint-disable-line no-param-reassign, no-extra-parens
            key,
            next: objects.next,
            value
          };
        }
      };
      var listHas = function(objects, key) {
        return !!listGetNode(objects, key);
      };
      module.exports = function getSideChannel() {
        var $wm;
        var $m;
        var $o;
        var channel = {
          assert: function(key) {
            if (!channel.has(key)) {
              throw new $TypeError("Side channel does not contain " + inspect(key));
            }
          },
          get: function(key) {
            if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
              if ($wm) {
                return $weakMapGet($wm, key);
              }
            } else if ($Map) {
              if ($m) {
                return $mapGet($m, key);
              }
            } else {
              if ($o) {
                return listGet($o, key);
              }
            }
          },
          has: function(key) {
            if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
              if ($wm) {
                return $weakMapHas($wm, key);
              }
            } else if ($Map) {
              if ($m) {
                return $mapHas($m, key);
              }
            } else {
              if ($o) {
                return listHas($o, key);
              }
            }
            return false;
          },
          set: function(key, value) {
            if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
              if (!$wm) {
                $wm = new $WeakMap();
              }
              $weakMapSet($wm, key, value);
            } else if ($Map) {
              if (!$m) {
                $m = new $Map();
              }
              $mapSet($m, key, value);
            } else {
              if (!$o) {
                $o = { key: {}, next: null };
              }
              listSet($o, key, value);
            }
          }
        };
        return channel;
      };
    }
  });

  // node_modules/qs/lib/formats.js
  var require_formats = __commonJS({
    "node_modules/qs/lib/formats.js"(exports, module) {
      "use strict";
      var replace = String.prototype.replace;
      var percentTwenties = /%20/g;
      var Format = {
        RFC1738: "RFC1738",
        RFC3986: "RFC3986"
      };
      module.exports = {
        "default": Format.RFC3986,
        formatters: {
          RFC1738: function(value) {
            return replace.call(value, percentTwenties, "+");
          },
          RFC3986: function(value) {
            return String(value);
          }
        },
        RFC1738: Format.RFC1738,
        RFC3986: Format.RFC3986
      };
    }
  });

  // node_modules/qs/lib/utils.js
  var require_utils3 = __commonJS({
    "node_modules/qs/lib/utils.js"(exports, module) {
      "use strict";
      var formats = require_formats();
      var has = Object.prototype.hasOwnProperty;
      var isArray = Array.isArray;
      var hexTable = function() {
        var array = [];
        for (var i = 0; i < 256; ++i) {
          array.push("%" + ((i < 16 ? "0" : "") + i.toString(16)).toUpperCase());
        }
        return array;
      }();
      var compactQueue = function compactQueue2(queue) {
        while (queue.length > 1) {
          var item = queue.pop();
          var obj = item.obj[item.prop];
          if (isArray(obj)) {
            var compacted = [];
            for (var j = 0; j < obj.length; ++j) {
              if (typeof obj[j] !== "undefined") {
                compacted.push(obj[j]);
              }
            }
            item.obj[item.prop] = compacted;
          }
        }
      };
      var arrayToObject = function arrayToObject2(source, options) {
        var obj = options && options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
        for (var i = 0; i < source.length; ++i) {
          if (typeof source[i] !== "undefined") {
            obj[i] = source[i];
          }
        }
        return obj;
      };
      var merge = function merge2(target, source, options) {
        if (!source) {
          return target;
        }
        if (typeof source !== "object") {
          if (isArray(target)) {
            target.push(source);
          } else if (target && typeof target === "object") {
            if (options && (options.plainObjects || options.allowPrototypes) || !has.call(Object.prototype, source)) {
              target[source] = true;
            }
          } else {
            return [target, source];
          }
          return target;
        }
        if (!target || typeof target !== "object") {
          return [target].concat(source);
        }
        var mergeTarget = target;
        if (isArray(target) && !isArray(source)) {
          mergeTarget = arrayToObject(target, options);
        }
        if (isArray(target) && isArray(source)) {
          source.forEach(function(item, i) {
            if (has.call(target, i)) {
              var targetItem = target[i];
              if (targetItem && typeof targetItem === "object" && item && typeof item === "object") {
                target[i] = merge2(targetItem, item, options);
              } else {
                target.push(item);
              }
            } else {
              target[i] = item;
            }
          });
          return target;
        }
        return Object.keys(source).reduce(function(acc, key) {
          var value = source[key];
          if (has.call(acc, key)) {
            acc[key] = merge2(acc[key], value, options);
          } else {
            acc[key] = value;
          }
          return acc;
        }, mergeTarget);
      };
      var assign = function assignSingleSource(target, source) {
        return Object.keys(source).reduce(function(acc, key) {
          acc[key] = source[key];
          return acc;
        }, target);
      };
      var decode = function(str, decoder, charset) {
        var strWithoutPlus = str.replace(/\+/g, " ");
        if (charset === "iso-8859-1") {
          return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
        }
        try {
          return decodeURIComponent(strWithoutPlus);
        } catch (e) {
          return strWithoutPlus;
        }
      };
      var encode = function encode2(str, defaultEncoder, charset, kind, format) {
        if (str.length === 0) {
          return str;
        }
        var string = str;
        if (typeof str === "symbol") {
          string = Symbol.prototype.toString.call(str);
        } else if (typeof str !== "string") {
          string = String(str);
        }
        if (charset === "iso-8859-1") {
          return escape(string).replace(/%u[0-9a-f]{4}/gi, function($0) {
            return "%26%23" + parseInt($0.slice(2), 16) + "%3B";
          });
        }
        var out = "";
        for (var i = 0; i < string.length; ++i) {
          var c = string.charCodeAt(i);
          if (c === 45 || c === 46 || c === 95 || c === 126 || c >= 48 && c <= 57 || c >= 65 && c <= 90 || c >= 97 && c <= 122 || format === formats.RFC1738 && (c === 40 || c === 41)) {
            out += string.charAt(i);
            continue;
          }
          if (c < 128) {
            out = out + hexTable[c];
            continue;
          }
          if (c < 2048) {
            out = out + (hexTable[192 | c >> 6] + hexTable[128 | c & 63]);
            continue;
          }
          if (c < 55296 || c >= 57344) {
            out = out + (hexTable[224 | c >> 12] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63]);
            continue;
          }
          i += 1;
          c = 65536 + ((c & 1023) << 10 | string.charCodeAt(i) & 1023);
          out += hexTable[240 | c >> 18] + hexTable[128 | c >> 12 & 63] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63];
        }
        return out;
      };
      var compact = function compact2(value) {
        var queue = [{ obj: { o: value }, prop: "o" }];
        var refs = [];
        for (var i = 0; i < queue.length; ++i) {
          var item = queue[i];
          var obj = item.obj[item.prop];
          var keys = Object.keys(obj);
          for (var j = 0; j < keys.length; ++j) {
            var key = keys[j];
            var val = obj[key];
            if (typeof val === "object" && val !== null && refs.indexOf(val) === -1) {
              queue.push({ obj, prop: key });
              refs.push(val);
            }
          }
        }
        compactQueue(queue);
        return value;
      };
      var isRegExp = function isRegExp2(obj) {
        return Object.prototype.toString.call(obj) === "[object RegExp]";
      };
      var isBuffer = function isBuffer2(obj) {
        if (!obj || typeof obj !== "object") {
          return false;
        }
        return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
      };
      var combine = function combine2(a, b) {
        return [].concat(a, b);
      };
      var maybeMap = function maybeMap2(val, fn) {
        if (isArray(val)) {
          var mapped = [];
          for (var i = 0; i < val.length; i += 1) {
            mapped.push(fn(val[i]));
          }
          return mapped;
        }
        return fn(val);
      };
      module.exports = {
        arrayToObject,
        assign,
        combine,
        compact,
        decode,
        encode,
        isBuffer,
        isRegExp,
        maybeMap,
        merge
      };
    }
  });

  // node_modules/qs/lib/stringify.js
  var require_stringify = __commonJS({
    "node_modules/qs/lib/stringify.js"(exports, module) {
      "use strict";
      var getSideChannel = require_side_channel();
      var utils = require_utils3();
      var formats = require_formats();
      var has = Object.prototype.hasOwnProperty;
      var arrayPrefixGenerators = {
        brackets: function brackets(prefix) {
          return prefix + "[]";
        },
        comma: "comma",
        indices: function indices(prefix, key) {
          return prefix + "[" + key + "]";
        },
        repeat: function repeat(prefix) {
          return prefix;
        }
      };
      var isArray = Array.isArray;
      var push = Array.prototype.push;
      var pushToArray = function(arr, valueOrArray) {
        push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);
      };
      var toISO = Date.prototype.toISOString;
      var defaultFormat = formats["default"];
      var defaults = {
        addQueryPrefix: false,
        allowDots: false,
        allowEmptyArrays: false,
        arrayFormat: "indices",
        charset: "utf-8",
        charsetSentinel: false,
        delimiter: "&",
        encode: true,
        encodeDotInKeys: false,
        encoder: utils.encode,
        encodeValuesOnly: false,
        format: defaultFormat,
        formatter: formats.formatters[defaultFormat],
        // deprecated
        indices: false,
        serializeDate: function serializeDate(date) {
          return toISO.call(date);
        },
        skipNulls: false,
        strictNullHandling: false
      };
      var isNonNullishPrimitive = function isNonNullishPrimitive2(v) {
        return typeof v === "string" || typeof v === "number" || typeof v === "boolean" || typeof v === "symbol" || typeof v === "bigint";
      };
      var sentinel = {};
      var stringify = function stringify2(object, prefix, generateArrayPrefix, commaRoundTrip, allowEmptyArrays, strictNullHandling, skipNulls, encodeDotInKeys, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, sideChannel) {
        var obj = object;
        var tmpSc = sideChannel;
        var step = 0;
        var findFlag = false;
        while ((tmpSc = tmpSc.get(sentinel)) !== void 0 && !findFlag) {
          var pos = tmpSc.get(object);
          step += 1;
          if (typeof pos !== "undefined") {
            if (pos === step) {
              throw new RangeError("Cyclic object value");
            } else {
              findFlag = true;
            }
          }
          if (typeof tmpSc.get(sentinel) === "undefined") {
            step = 0;
          }
        }
        if (typeof filter === "function") {
          obj = filter(prefix, obj);
        } else if (obj instanceof Date) {
          obj = serializeDate(obj);
        } else if (generateArrayPrefix === "comma" && isArray(obj)) {
          obj = utils.maybeMap(obj, function(value2) {
            if (value2 instanceof Date) {
              return serializeDate(value2);
            }
            return value2;
          });
        }
        if (obj === null) {
          if (strictNullHandling) {
            return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, "key", format) : prefix;
          }
          obj = "";
        }
        if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {
          if (encoder) {
            var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, "key", format);
            return [formatter(keyValue) + "=" + formatter(encoder(obj, defaults.encoder, charset, "value", format))];
          }
          return [formatter(prefix) + "=" + formatter(String(obj))];
        }
        var values = [];
        if (typeof obj === "undefined") {
          return values;
        }
        var objKeys;
        if (generateArrayPrefix === "comma" && isArray(obj)) {
          if (encodeValuesOnly && encoder) {
            obj = utils.maybeMap(obj, encoder);
          }
          objKeys = [{ value: obj.length > 0 ? obj.join(",") || null : void 0 }];
        } else if (isArray(filter)) {
          objKeys = filter;
        } else {
          var keys = Object.keys(obj);
          objKeys = sort ? keys.sort(sort) : keys;
        }
        var encodedPrefix = encodeDotInKeys ? prefix.replace(/\./g, "%2E") : prefix;
        var adjustedPrefix = commaRoundTrip && isArray(obj) && obj.length === 1 ? encodedPrefix + "[]" : encodedPrefix;
        if (allowEmptyArrays && isArray(obj) && obj.length === 0) {
          return adjustedPrefix + "[]";
        }
        for (var j = 0; j < objKeys.length; ++j) {
          var key = objKeys[j];
          var value = typeof key === "object" && typeof key.value !== "undefined" ? key.value : obj[key];
          if (skipNulls && value === null) {
            continue;
          }
          var encodedKey = allowDots && encodeDotInKeys ? key.replace(/\./g, "%2E") : key;
          var keyPrefix = isArray(obj) ? typeof generateArrayPrefix === "function" ? generateArrayPrefix(adjustedPrefix, encodedKey) : adjustedPrefix : adjustedPrefix + (allowDots ? "." + encodedKey : "[" + encodedKey + "]");
          sideChannel.set(object, step);
          var valueSideChannel = getSideChannel();
          valueSideChannel.set(sentinel, sideChannel);
          pushToArray(values, stringify2(
            value,
            keyPrefix,
            generateArrayPrefix,
            commaRoundTrip,
            allowEmptyArrays,
            strictNullHandling,
            skipNulls,
            encodeDotInKeys,
            generateArrayPrefix === "comma" && encodeValuesOnly && isArray(obj) ? null : encoder,
            filter,
            sort,
            allowDots,
            serializeDate,
            format,
            formatter,
            encodeValuesOnly,
            charset,
            valueSideChannel
          ));
        }
        return values;
      };
      var normalizeStringifyOptions = function normalizeStringifyOptions2(opts) {
        if (!opts) {
          return defaults;
        }
        if (typeof opts.allowEmptyArrays !== "undefined" && typeof opts.allowEmptyArrays !== "boolean") {
          throw new TypeError("`allowEmptyArrays` option can only be `true` or `false`, when provided");
        }
        if (typeof opts.encodeDotInKeys !== "undefined" && typeof opts.encodeDotInKeys !== "boolean") {
          throw new TypeError("`encodeDotInKeys` option can only be `true` or `false`, when provided");
        }
        if (opts.encoder !== null && typeof opts.encoder !== "undefined" && typeof opts.encoder !== "function") {
          throw new TypeError("Encoder has to be a function.");
        }
        var charset = opts.charset || defaults.charset;
        if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
          throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
        }
        var format = formats["default"];
        if (typeof opts.format !== "undefined") {
          if (!has.call(formats.formatters, opts.format)) {
            throw new TypeError("Unknown format option provided.");
          }
          format = opts.format;
        }
        var formatter = formats.formatters[format];
        var filter = defaults.filter;
        if (typeof opts.filter === "function" || isArray(opts.filter)) {
          filter = opts.filter;
        }
        var arrayFormat;
        if (opts.arrayFormat in arrayPrefixGenerators) {
          arrayFormat = opts.arrayFormat;
        } else if ("indices" in opts) {
          arrayFormat = opts.indices ? "indices" : "repeat";
        } else {
          arrayFormat = defaults.arrayFormat;
        }
        if ("commaRoundTrip" in opts && typeof opts.commaRoundTrip !== "boolean") {
          throw new TypeError("`commaRoundTrip` must be a boolean, or absent");
        }
        var allowDots = typeof opts.allowDots === "undefined" ? opts.encodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;
        return {
          addQueryPrefix: typeof opts.addQueryPrefix === "boolean" ? opts.addQueryPrefix : defaults.addQueryPrefix,
          allowDots,
          allowEmptyArrays: typeof opts.allowEmptyArrays === "boolean" ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,
          arrayFormat,
          charset,
          charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
          commaRoundTrip: opts.commaRoundTrip,
          delimiter: typeof opts.delimiter === "undefined" ? defaults.delimiter : opts.delimiter,
          encode: typeof opts.encode === "boolean" ? opts.encode : defaults.encode,
          encodeDotInKeys: typeof opts.encodeDotInKeys === "boolean" ? opts.encodeDotInKeys : defaults.encodeDotInKeys,
          encoder: typeof opts.encoder === "function" ? opts.encoder : defaults.encoder,
          encodeValuesOnly: typeof opts.encodeValuesOnly === "boolean" ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
          filter,
          format,
          formatter,
          serializeDate: typeof opts.serializeDate === "function" ? opts.serializeDate : defaults.serializeDate,
          skipNulls: typeof opts.skipNulls === "boolean" ? opts.skipNulls : defaults.skipNulls,
          sort: typeof opts.sort === "function" ? opts.sort : null,
          strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
        };
      };
      module.exports = function(object, opts) {
        var obj = object;
        var options = normalizeStringifyOptions(opts);
        var objKeys;
        var filter;
        if (typeof options.filter === "function") {
          filter = options.filter;
          obj = filter("", obj);
        } else if (isArray(options.filter)) {
          filter = options.filter;
          objKeys = filter;
        }
        var keys = [];
        if (typeof obj !== "object" || obj === null) {
          return "";
        }
        var generateArrayPrefix = arrayPrefixGenerators[options.arrayFormat];
        var commaRoundTrip = generateArrayPrefix === "comma" && options.commaRoundTrip;
        if (!objKeys) {
          objKeys = Object.keys(obj);
        }
        if (options.sort) {
          objKeys.sort(options.sort);
        }
        var sideChannel = getSideChannel();
        for (var i = 0; i < objKeys.length; ++i) {
          var key = objKeys[i];
          if (options.skipNulls && obj[key] === null) {
            continue;
          }
          pushToArray(keys, stringify(
            obj[key],
            key,
            generateArrayPrefix,
            commaRoundTrip,
            options.allowEmptyArrays,
            options.strictNullHandling,
            options.skipNulls,
            options.encodeDotInKeys,
            options.encode ? options.encoder : null,
            options.filter,
            options.sort,
            options.allowDots,
            options.serializeDate,
            options.format,
            options.formatter,
            options.encodeValuesOnly,
            options.charset,
            sideChannel
          ));
        }
        var joined = keys.join(options.delimiter);
        var prefix = options.addQueryPrefix === true ? "?" : "";
        if (options.charsetSentinel) {
          if (options.charset === "iso-8859-1") {
            prefix += "utf8=%26%2310003%3B&";
          } else {
            prefix += "utf8=%E2%9C%93&";
          }
        }
        return joined.length > 0 ? prefix + joined : "";
      };
    }
  });

  // node_modules/qs/lib/parse.js
  var require_parse = __commonJS({
    "node_modules/qs/lib/parse.js"(exports, module) {
      "use strict";
      var utils = require_utils3();
      var has = Object.prototype.hasOwnProperty;
      var isArray = Array.isArray;
      var defaults = {
        allowDots: false,
        allowEmptyArrays: false,
        allowPrototypes: false,
        allowSparse: false,
        arrayLimit: 20,
        charset: "utf-8",
        charsetSentinel: false,
        comma: false,
        decodeDotInKeys: true,
        decoder: utils.decode,
        delimiter: "&",
        depth: 5,
        duplicates: "combine",
        ignoreQueryPrefix: false,
        interpretNumericEntities: false,
        parameterLimit: 1e3,
        parseArrays: true,
        plainObjects: false,
        strictNullHandling: false
      };
      var interpretNumericEntities = function(str) {
        return str.replace(/&#(\d+);/g, function($0, numberStr) {
          return String.fromCharCode(parseInt(numberStr, 10));
        });
      };
      var parseArrayValue = function(val, options) {
        if (val && typeof val === "string" && options.comma && val.indexOf(",") > -1) {
          return val.split(",");
        }
        return val;
      };
      var isoSentinel = "utf8=%26%2310003%3B";
      var charsetSentinel = "utf8=%E2%9C%93";
      var parseValues = function parseQueryStringValues(str, options) {
        var obj = { __proto__: null };
        var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, "") : str;
        var limit = options.parameterLimit === Infinity ? void 0 : options.parameterLimit;
        var parts = cleanStr.split(options.delimiter, limit);
        var skipIndex = -1;
        var i;
        var charset = options.charset;
        if (options.charsetSentinel) {
          for (i = 0; i < parts.length; ++i) {
            if (parts[i].indexOf("utf8=") === 0) {
              if (parts[i] === charsetSentinel) {
                charset = "utf-8";
              } else if (parts[i] === isoSentinel) {
                charset = "iso-8859-1";
              }
              skipIndex = i;
              i = parts.length;
            }
          }
        }
        for (i = 0; i < parts.length; ++i) {
          if (i === skipIndex) {
            continue;
          }
          var part = parts[i];
          var bracketEqualsPos = part.indexOf("]=");
          var pos = bracketEqualsPos === -1 ? part.indexOf("=") : bracketEqualsPos + 1;
          var key, val;
          if (pos === -1) {
            key = options.decoder(part, defaults.decoder, charset, "key");
            val = options.strictNullHandling ? null : "";
          } else {
            key = options.decoder(part.slice(0, pos), defaults.decoder, charset, "key");
            val = utils.maybeMap(
              parseArrayValue(part.slice(pos + 1), options),
              function(encodedVal) {
                return options.decoder(encodedVal, defaults.decoder, charset, "value");
              }
            );
          }
          if (val && options.interpretNumericEntities && charset === "iso-8859-1") {
            val = interpretNumericEntities(val);
          }
          if (part.indexOf("[]=") > -1) {
            val = isArray(val) ? [val] : val;
          }
          var existing = has.call(obj, key);
          if (existing && options.duplicates === "combine") {
            obj[key] = utils.combine(obj[key], val);
          } else if (!existing || options.duplicates === "last") {
            obj[key] = val;
          }
        }
        return obj;
      };
      var parseObject = function(chain, val, options, valuesParsed) {
        var leaf = valuesParsed ? val : parseArrayValue(val, options);
        for (var i = chain.length - 1; i >= 0; --i) {
          var obj;
          var root = chain[i];
          if (root === "[]" && options.parseArrays) {
            obj = options.allowEmptyArrays && leaf === "" ? [] : [].concat(leaf);
          } else {
            obj = options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
            var cleanRoot = root.charAt(0) === "[" && root.charAt(root.length - 1) === "]" ? root.slice(1, -1) : root;
            var decodedRoot = options.decodeDotInKeys ? cleanRoot.replace(/%2E/g, ".") : cleanRoot;
            var index = parseInt(decodedRoot, 10);
            if (!options.parseArrays && decodedRoot === "") {
              obj = { 0: leaf };
            } else if (!isNaN(index) && root !== decodedRoot && String(index) === decodedRoot && index >= 0 && (options.parseArrays && index <= options.arrayLimit)) {
              obj = [];
              obj[index] = leaf;
            } else if (decodedRoot !== "__proto__") {
              obj[decodedRoot] = leaf;
            }
          }
          leaf = obj;
        }
        return leaf;
      };
      var parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {
        if (!givenKey) {
          return;
        }
        var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, "[$1]") : givenKey;
        var brackets = /(\[[^[\]]*])/;
        var child = /(\[[^[\]]*])/g;
        var segment = options.depth > 0 && brackets.exec(key);
        var parent = segment ? key.slice(0, segment.index) : key;
        var keys = [];
        if (parent) {
          if (!options.plainObjects && has.call(Object.prototype, parent)) {
            if (!options.allowPrototypes) {
              return;
            }
          }
          keys.push(parent);
        }
        var i = 0;
        while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {
          i += 1;
          if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
            if (!options.allowPrototypes) {
              return;
            }
          }
          keys.push(segment[1]);
        }
        if (segment) {
          keys.push("[" + key.slice(segment.index) + "]");
        }
        return parseObject(keys, val, options, valuesParsed);
      };
      var normalizeParseOptions = function normalizeParseOptions2(opts) {
        if (!opts) {
          return defaults;
        }
        if (typeof opts.allowEmptyArrays !== "undefined" && typeof opts.allowEmptyArrays !== "boolean") {
          throw new TypeError("`allowEmptyArrays` option can only be `true` or `false`, when provided");
        }
        if (typeof opts.decodeDotInKeys !== "undefined" && typeof opts.decodeDotInKeys !== "boolean") {
          throw new TypeError("`decodeDotInKeys` option can only be `true` or `false`, when provided");
        }
        if (opts.decoder !== null && typeof opts.decoder !== "undefined" && typeof opts.decoder !== "function") {
          throw new TypeError("Decoder has to be a function.");
        }
        if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
          throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
        }
        var charset = typeof opts.charset === "undefined" ? defaults.charset : opts.charset;
        var duplicates = typeof opts.duplicates === "undefined" ? defaults.duplicates : opts.duplicates;
        if (duplicates !== "combine" && duplicates !== "first" && duplicates !== "last") {
          throw new TypeError("The duplicates option must be either combine, first, or last");
        }
        var allowDots = typeof opts.allowDots === "undefined" ? opts.decodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;
        return {
          allowDots,
          allowEmptyArrays: typeof opts.allowEmptyArrays === "boolean" ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,
          allowPrototypes: typeof opts.allowPrototypes === "boolean" ? opts.allowPrototypes : defaults.allowPrototypes,
          allowSparse: typeof opts.allowSparse === "boolean" ? opts.allowSparse : defaults.allowSparse,
          arrayLimit: typeof opts.arrayLimit === "number" ? opts.arrayLimit : defaults.arrayLimit,
          charset,
          charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
          comma: typeof opts.comma === "boolean" ? opts.comma : defaults.comma,
          decodeDotInKeys: typeof opts.decodeDotInKeys === "boolean" ? opts.decodeDotInKeys : defaults.decodeDotInKeys,
          decoder: typeof opts.decoder === "function" ? opts.decoder : defaults.decoder,
          delimiter: typeof opts.delimiter === "string" || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,
          // eslint-disable-next-line no-implicit-coercion, no-extra-parens
          depth: typeof opts.depth === "number" || opts.depth === false ? +opts.depth : defaults.depth,
          duplicates,
          ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
          interpretNumericEntities: typeof opts.interpretNumericEntities === "boolean" ? opts.interpretNumericEntities : defaults.interpretNumericEntities,
          parameterLimit: typeof opts.parameterLimit === "number" ? opts.parameterLimit : defaults.parameterLimit,
          parseArrays: opts.parseArrays !== false,
          plainObjects: typeof opts.plainObjects === "boolean" ? opts.plainObjects : defaults.plainObjects,
          strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
        };
      };
      module.exports = function(str, opts) {
        var options = normalizeParseOptions(opts);
        if (str === "" || str === null || typeof str === "undefined") {
          return options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
        }
        var tempObj = typeof str === "string" ? parseValues(str, options) : str;
        var obj = options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
        var keys = Object.keys(tempObj);
        for (var i = 0; i < keys.length; ++i) {
          var key = keys[i];
          var newObj = parseKeys(key, tempObj[key], options, typeof str === "string");
          obj = utils.merge(obj, newObj, options);
        }
        if (options.allowSparse === true) {
          return obj;
        }
        return utils.compact(obj);
      };
    }
  });

  // node_modules/qs/lib/index.js
  var require_lib3 = __commonJS({
    "node_modules/qs/lib/index.js"(exports, module) {
      "use strict";
      var stringify = require_stringify();
      var parse = require_parse();
      var formats = require_formats();
      module.exports = {
        formats,
        parse,
        stringify
      };
    }
  });

  // node_modules/url/url.js
  var require_url = __commonJS({
    "node_modules/url/url.js"(exports) {
      "use strict";
      var punycode = require_punycode();
      function Url() {
        this.protocol = null;
        this.slashes = null;
        this.auth = null;
        this.host = null;
        this.port = null;
        this.hostname = null;
        this.hash = null;
        this.search = null;
        this.query = null;
        this.pathname = null;
        this.path = null;
        this.href = null;
      }
      var protocolPattern = /^([a-z0-9.+-]+:)/i;
      var portPattern = /:[0-9]*$/;
      var simplePathPattern = /^(\/\/?(?!\/)[^?\s]*)(\?[^\s]*)?$/;
      var delims = [
        "<",
        ">",
        '"',
        "`",
        " ",
        "\r",
        "\n",
        "	"
      ];
      var unwise = [
        "{",
        "}",
        "|",
        "\\",
        "^",
        "`"
      ].concat(delims);
      var autoEscape = ["'"].concat(unwise);
      var nonHostChars = [
        "%",
        "/",
        "?",
        ";",
        "#"
      ].concat(autoEscape);
      var hostEndingChars = [
        "/",
        "?",
        "#"
      ];
      var hostnameMaxLen = 255;
      var hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/;
      var hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/;
      var unsafeProtocol = {
        javascript: true,
        "javascript:": true
      };
      var hostlessProtocol = {
        javascript: true,
        "javascript:": true
      };
      var slashedProtocol = {
        http: true,
        https: true,
        ftp: true,
        gopher: true,
        file: true,
        "http:": true,
        "https:": true,
        "ftp:": true,
        "gopher:": true,
        "file:": true
      };
      var querystring = require_lib3();
      function urlParse(url, parseQueryString, slashesDenoteHost) {
        if (url && typeof url === "object" && url instanceof Url) {
          return url;
        }
        var u = new Url();
        u.parse(url, parseQueryString, slashesDenoteHost);
        return u;
      }
      Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
        if (typeof url !== "string") {
          throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
        }
        var queryIndex = url.indexOf("?"), splitter = queryIndex !== -1 && queryIndex < url.indexOf("#") ? "?" : "#", uSplit = url.split(splitter), slashRegex = /\\/g;
        uSplit[0] = uSplit[0].replace(slashRegex, "/");
        url = uSplit.join(splitter);
        var rest = url;
        rest = rest.trim();
        if (!slashesDenoteHost && url.split("#").length === 1) {
          var simplePath = simplePathPattern.exec(rest);
          if (simplePath) {
            this.path = rest;
            this.href = rest;
            this.pathname = simplePath[1];
            if (simplePath[2]) {
              this.search = simplePath[2];
              if (parseQueryString) {
                this.query = querystring.parse(this.search.substr(1));
              } else {
                this.query = this.search.substr(1);
              }
            } else if (parseQueryString) {
              this.search = "";
              this.query = {};
            }
            return this;
          }
        }
        var proto = protocolPattern.exec(rest);
        if (proto) {
          proto = proto[0];
          var lowerProto = proto.toLowerCase();
          this.protocol = lowerProto;
          rest = rest.substr(proto.length);
        }
        if (slashesDenoteHost || proto || rest.match(/^\/\/[^@/]+@[^@/]+/)) {
          var slashes = rest.substr(0, 2) === "//";
          if (slashes && !(proto && hostlessProtocol[proto])) {
            rest = rest.substr(2);
            this.slashes = true;
          }
        }
        if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
          var hostEnd = -1;
          for (var i = 0; i < hostEndingChars.length; i++) {
            var hec = rest.indexOf(hostEndingChars[i]);
            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
              hostEnd = hec;
            }
          }
          var auth, atSign;
          if (hostEnd === -1) {
            atSign = rest.lastIndexOf("@");
          } else {
            atSign = rest.lastIndexOf("@", hostEnd);
          }
          if (atSign !== -1) {
            auth = rest.slice(0, atSign);
            rest = rest.slice(atSign + 1);
            this.auth = decodeURIComponent(auth);
          }
          hostEnd = -1;
          for (var i = 0; i < nonHostChars.length; i++) {
            var hec = rest.indexOf(nonHostChars[i]);
            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
              hostEnd = hec;
            }
          }
          if (hostEnd === -1) {
            hostEnd = rest.length;
          }
          this.host = rest.slice(0, hostEnd);
          rest = rest.slice(hostEnd);
          this.parseHost();
          this.hostname = this.hostname || "";
          var ipv6Hostname = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
          if (!ipv6Hostname) {
            var hostparts = this.hostname.split(/\./);
            for (var i = 0, l = hostparts.length; i < l; i++) {
              var part = hostparts[i];
              if (!part) {
                continue;
              }
              if (!part.match(hostnamePartPattern)) {
                var newpart = "";
                for (var j = 0, k = part.length; j < k; j++) {
                  if (part.charCodeAt(j) > 127) {
                    newpart += "x";
                  } else {
                    newpart += part[j];
                  }
                }
                if (!newpart.match(hostnamePartPattern)) {
                  var validParts = hostparts.slice(0, i);
                  var notHost = hostparts.slice(i + 1);
                  var bit = part.match(hostnamePartStart);
                  if (bit) {
                    validParts.push(bit[1]);
                    notHost.unshift(bit[2]);
                  }
                  if (notHost.length) {
                    rest = "/" + notHost.join(".") + rest;
                  }
                  this.hostname = validParts.join(".");
                  break;
                }
              }
            }
          }
          if (this.hostname.length > hostnameMaxLen) {
            this.hostname = "";
          } else {
            this.hostname = this.hostname.toLowerCase();
          }
          if (!ipv6Hostname) {
            this.hostname = punycode.toASCII(this.hostname);
          }
          var p = this.port ? ":" + this.port : "";
          var h = this.hostname || "";
          this.host = h + p;
          this.href += this.host;
          if (ipv6Hostname) {
            this.hostname = this.hostname.substr(1, this.hostname.length - 2);
            if (rest[0] !== "/") {
              rest = "/" + rest;
            }
          }
        }
        if (!unsafeProtocol[lowerProto]) {
          for (var i = 0, l = autoEscape.length; i < l; i++) {
            var ae = autoEscape[i];
            if (rest.indexOf(ae) === -1) {
              continue;
            }
            var esc = encodeURIComponent(ae);
            if (esc === ae) {
              esc = escape(ae);
            }
            rest = rest.split(ae).join(esc);
          }
        }
        var hash = rest.indexOf("#");
        if (hash !== -1) {
          this.hash = rest.substr(hash);
          rest = rest.slice(0, hash);
        }
        var qm = rest.indexOf("?");
        if (qm !== -1) {
          this.search = rest.substr(qm);
          this.query = rest.substr(qm + 1);
          if (parseQueryString) {
            this.query = querystring.parse(this.query);
          }
          rest = rest.slice(0, qm);
        } else if (parseQueryString) {
          this.search = "";
          this.query = {};
        }
        if (rest) {
          this.pathname = rest;
        }
        if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
          this.pathname = "/";
        }
        if (this.pathname || this.search) {
          var p = this.pathname || "";
          var s = this.search || "";
          this.path = p + s;
        }
        this.href = this.format();
        return this;
      };
      function urlFormat(obj) {
        if (typeof obj === "string") {
          obj = urlParse(obj);
        }
        if (!(obj instanceof Url)) {
          return Url.prototype.format.call(obj);
        }
        return obj.format();
      }
      Url.prototype.format = function() {
        var auth = this.auth || "";
        if (auth) {
          auth = encodeURIComponent(auth);
          auth = auth.replace(/%3A/i, ":");
          auth += "@";
        }
        var protocol = this.protocol || "", pathname = this.pathname || "", hash = this.hash || "", host = false, query = "";
        if (this.host) {
          host = auth + this.host;
        } else if (this.hostname) {
          host = auth + (this.hostname.indexOf(":") === -1 ? this.hostname : "[" + this.hostname + "]");
          if (this.port) {
            host += ":" + this.port;
          }
        }
        if (this.query && typeof this.query === "object" && Object.keys(this.query).length) {
          query = querystring.stringify(this.query, {
            arrayFormat: "repeat",
            addQueryPrefix: false
          });
        }
        var search = this.search || query && "?" + query || "";
        if (protocol && protocol.substr(-1) !== ":") {
          protocol += ":";
        }
        if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
          host = "//" + (host || "");
          if (pathname && pathname.charAt(0) !== "/") {
            pathname = "/" + pathname;
          }
        } else if (!host) {
          host = "";
        }
        if (hash && hash.charAt(0) !== "#") {
          hash = "#" + hash;
        }
        if (search && search.charAt(0) !== "?") {
          search = "?" + search;
        }
        pathname = pathname.replace(/[?#]/g, function(match) {
          return encodeURIComponent(match);
        });
        search = search.replace("#", "%23");
        return protocol + host + pathname + search + hash;
      };
      function urlResolve(source, relative) {
        return urlParse(source, false, true).resolve(relative);
      }
      Url.prototype.resolve = function(relative) {
        return this.resolveObject(urlParse(relative, false, true)).format();
      };
      function urlResolveObject(source, relative) {
        if (!source) {
          return relative;
        }
        return urlParse(source, false, true).resolveObject(relative);
      }
      Url.prototype.resolveObject = function(relative) {
        if (typeof relative === "string") {
          var rel = new Url();
          rel.parse(relative, false, true);
          relative = rel;
        }
        var result = new Url();
        var tkeys = Object.keys(this);
        for (var tk = 0; tk < tkeys.length; tk++) {
          var tkey = tkeys[tk];
          result[tkey] = this[tkey];
        }
        result.hash = relative.hash;
        if (relative.href === "") {
          result.href = result.format();
          return result;
        }
        if (relative.slashes && !relative.protocol) {
          var rkeys = Object.keys(relative);
          for (var rk = 0; rk < rkeys.length; rk++) {
            var rkey = rkeys[rk];
            if (rkey !== "protocol") {
              result[rkey] = relative[rkey];
            }
          }
          if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
            result.pathname = "/";
            result.path = result.pathname;
          }
          result.href = result.format();
          return result;
        }
        if (relative.protocol && relative.protocol !== result.protocol) {
          if (!slashedProtocol[relative.protocol]) {
            var keys = Object.keys(relative);
            for (var v = 0; v < keys.length; v++) {
              var k = keys[v];
              result[k] = relative[k];
            }
            result.href = result.format();
            return result;
          }
          result.protocol = relative.protocol;
          if (!relative.host && !hostlessProtocol[relative.protocol]) {
            var relPath = (relative.pathname || "").split("/");
            while (relPath.length && !(relative.host = relPath.shift())) {
            }
            if (!relative.host) {
              relative.host = "";
            }
            if (!relative.hostname) {
              relative.hostname = "";
            }
            if (relPath[0] !== "") {
              relPath.unshift("");
            }
            if (relPath.length < 2) {
              relPath.unshift("");
            }
            result.pathname = relPath.join("/");
          } else {
            result.pathname = relative.pathname;
          }
          result.search = relative.search;
          result.query = relative.query;
          result.host = relative.host || "";
          result.auth = relative.auth;
          result.hostname = relative.hostname || relative.host;
          result.port = relative.port;
          if (result.pathname || result.search) {
            var p = result.pathname || "";
            var s = result.search || "";
            result.path = p + s;
          }
          result.slashes = result.slashes || relative.slashes;
          result.href = result.format();
          return result;
        }
        var isSourceAbs = result.pathname && result.pathname.charAt(0) === "/", isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === "/", mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname, removeAllDots = mustEndAbs, srcPath = result.pathname && result.pathname.split("/") || [], relPath = relative.pathname && relative.pathname.split("/") || [], psychotic = result.protocol && !slashedProtocol[result.protocol];
        if (psychotic) {
          result.hostname = "";
          result.port = null;
          if (result.host) {
            if (srcPath[0] === "") {
              srcPath[0] = result.host;
            } else {
              srcPath.unshift(result.host);
            }
          }
          result.host = "";
          if (relative.protocol) {
            relative.hostname = null;
            relative.port = null;
            if (relative.host) {
              if (relPath[0] === "") {
                relPath[0] = relative.host;
              } else {
                relPath.unshift(relative.host);
              }
            }
            relative.host = null;
          }
          mustEndAbs = mustEndAbs && (relPath[0] === "" || srcPath[0] === "");
        }
        if (isRelAbs) {
          result.host = relative.host || relative.host === "" ? relative.host : result.host;
          result.hostname = relative.hostname || relative.hostname === "" ? relative.hostname : result.hostname;
          result.search = relative.search;
          result.query = relative.query;
          srcPath = relPath;
        } else if (relPath.length) {
          if (!srcPath) {
            srcPath = [];
          }
          srcPath.pop();
          srcPath = srcPath.concat(relPath);
          result.search = relative.search;
          result.query = relative.query;
        } else if (relative.search != null) {
          if (psychotic) {
            result.host = srcPath.shift();
            result.hostname = result.host;
            var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
            if (authInHost) {
              result.auth = authInHost.shift();
              result.hostname = authInHost.shift();
              result.host = result.hostname;
            }
          }
          result.search = relative.search;
          result.query = relative.query;
          if (result.pathname !== null || result.search !== null) {
            result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
          }
          result.href = result.format();
          return result;
        }
        if (!srcPath.length) {
          result.pathname = null;
          if (result.search) {
            result.path = "/" + result.search;
          } else {
            result.path = null;
          }
          result.href = result.format();
          return result;
        }
        var last = srcPath.slice(-1)[0];
        var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === "." || last === "..") || last === "";
        var up = 0;
        for (var i = srcPath.length; i >= 0; i--) {
          last = srcPath[i];
          if (last === ".") {
            srcPath.splice(i, 1);
          } else if (last === "..") {
            srcPath.splice(i, 1);
            up++;
          } else if (up) {
            srcPath.splice(i, 1);
            up--;
          }
        }
        if (!mustEndAbs && !removeAllDots) {
          for (; up--; up) {
            srcPath.unshift("..");
          }
        }
        if (mustEndAbs && srcPath[0] !== "" && (!srcPath[0] || srcPath[0].charAt(0) !== "/")) {
          srcPath.unshift("");
        }
        if (hasTrailingSlash && srcPath.join("/").substr(-1) !== "/") {
          srcPath.push("");
        }
        var isAbsolute = srcPath[0] === "" || srcPath[0] && srcPath[0].charAt(0) === "/";
        if (psychotic) {
          result.hostname = isAbsolute ? "" : srcPath.length ? srcPath.shift() : "";
          result.host = result.hostname;
          var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
          if (authInHost) {
            result.auth = authInHost.shift();
            result.hostname = authInHost.shift();
            result.host = result.hostname;
          }
        }
        mustEndAbs = mustEndAbs || result.host && srcPath.length;
        if (mustEndAbs && !isAbsolute) {
          srcPath.unshift("");
        }
        if (srcPath.length > 0) {
          result.pathname = srcPath.join("/");
        } else {
          result.pathname = null;
          result.path = null;
        }
        if (result.pathname !== null || result.search !== null) {
          result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
        }
        result.auth = relative.auth || result.auth;
        result.slashes = result.slashes || relative.slashes;
        result.href = result.format();
        return result;
      };
      Url.prototype.parseHost = function() {
        var host = this.host;
        var port = portPattern.exec(host);
        if (port) {
          port = port[0];
          if (port !== ":") {
            this.port = port.substr(1);
          }
          host = host.substr(0, host.length - port.length);
        }
        if (host) {
          this.hostname = host;
        }
      };
      exports.parse = urlParse;
      exports.resolve = urlResolve;
      exports.resolveObject = urlResolveObject;
      exports.format = urlFormat;
      exports.Url = Url;
    }
  });

  // node_modules/dhttp/augment.js
  var require_augment = __commonJS({
    "node_modules/dhttp/augment.js"(exports, module) {
      var url = require_url();
      var CONTENT_TYPE_MAP = {
        "buffer": "application/octet-stream",
        "object": "application/json",
        "number": "application/json",
        "string": "text/plain"
      };
      module.exports = function augment(options) {
        options = Object.assign({}, options);
        if (options.url) {
          Object.assign(options, url.parse(options.url));
        }
        if (options.body === void 0)
          return options;
        let typeOf = typeof options.body;
        if (Buffer.isBuffer(options.body)) {
          typeOf = "buffer";
        }
        options.headers = options.headers || {};
        if (!options.headers["content-type"]) {
          options.headers = Object.assign({}, options.headers);
          options.headers["content-type"] = CONTENT_TYPE_MAP[typeOf];
        }
        if (options.headers["content-type"] === "application/json") {
          if (typeof options.body !== "string") {
            options.body = JSON.stringify(options.body);
          }
        }
        return options;
      };
    }
  });

  // node_modules/dhttp/browser.js
  var require_browser4 = __commonJS({
    "node_modules/dhttp/browser.js"(exports, module) {
      var Buffer2 = require_buffer().Buffer;
      var augment = require_augment();
      function returnJSON(result, body, callback) {
        try {
          body = body.toString("utf8");
          result.body = JSON.parse(body);
        } catch (e) {
          return callback(e);
        }
        callback(null, result);
      }
      function returnUTF8(result, body, callback) {
        result.body = body.toString("utf8");
        return callback(null, result);
      }
      function returnRaw(result, body, callback) {
        result.body = body;
        return callback(null, result);
      }
      module.exports = function request(options, callback) {
        let timeout;
        function done(err, res) {
          if (timeout)
            clearTimeout(timeout);
          if (callback)
            callback(err, res);
          callback = void 0;
        }
        options = augment(options);
        let xhr;
        function ready() {
          if (this.readyState < 2)
            return;
          let headers = {};
          xhr.getAllResponseHeaders().split("\r\n").forEach(function(header) {
            const i = header.indexOf(":");
            if (i === -1)
              return;
            const key = header.substr(0, i).toLowerCase();
            headers[key] = header.substr(i);
          });
          const length = headers["content-length"];
          if (options.limit && length > options.limit)
            return done(new Error("Content-Length exceeded limit"));
          if (this.readyState !== 4)
            return;
          if (xhr.status === 0)
            return done(new Error("ETIMEDOUT"));
          const body = Buffer2.from(xhr.response || "");
          const result = {
            body: null,
            headers,
            statusCode: xhr.status
          };
          const contentType = headers["content-type"];
          if (contentType) {
            if (/application\/json/.test(contentType))
              return returnJSON(result, body, done);
            if (/text\/(plain|html)/.test(contentType))
              return returnUTF8(result, body, done);
            if (/application\/octet-stream/.test(contentType))
              return returnRaw(result, body, done);
          }
          done(null, result);
        }
        if (options.timeout) {
          timeout = setTimeout(function() {
            xhr.abort();
            done(new Error("ETIMEDOUT"));
          }, options.timeout);
        }
        xhr = new window.XMLHttpRequest();
        xhr.onreadystatechange = ready;
        xhr.onerror = done;
        xhr.responseType = "arraybuffer";
        xhr.open(options.method, options.url, true);
        if (options.headers !== void 0 && xhr.setRequestHeader) {
          for (const key in options.headers) {
            xhr.setRequestHeader(key, options.headers[key]);
          }
        }
        xhr.send(options.body);
      };
    }
  });

  // node_modules/statuses/codes.json
  var require_codes = __commonJS({
    "node_modules/statuses/codes.json"(exports, module) {
      module.exports = {
        "100": "Continue",
        "101": "Switching Protocols",
        "102": "Processing",
        "103": "Early Hints",
        "200": "OK",
        "201": "Created",
        "202": "Accepted",
        "203": "Non-Authoritative Information",
        "204": "No Content",
        "205": "Reset Content",
        "206": "Partial Content",
        "207": "Multi-Status",
        "208": "Already Reported",
        "226": "IM Used",
        "300": "Multiple Choices",
        "301": "Moved Permanently",
        "302": "Found",
        "303": "See Other",
        "304": "Not Modified",
        "305": "Use Proxy",
        "306": "(Unused)",
        "307": "Temporary Redirect",
        "308": "Permanent Redirect",
        "400": "Bad Request",
        "401": "Unauthorized",
        "402": "Payment Required",
        "403": "Forbidden",
        "404": "Not Found",
        "405": "Method Not Allowed",
        "406": "Not Acceptable",
        "407": "Proxy Authentication Required",
        "408": "Request Timeout",
        "409": "Conflict",
        "410": "Gone",
        "411": "Length Required",
        "412": "Precondition Failed",
        "413": "Payload Too Large",
        "414": "URI Too Long",
        "415": "Unsupported Media Type",
        "416": "Range Not Satisfiable",
        "417": "Expectation Failed",
        "418": "I'm a teapot",
        "421": "Misdirected Request",
        "422": "Unprocessable Entity",
        "423": "Locked",
        "424": "Failed Dependency",
        "425": "Unordered Collection",
        "426": "Upgrade Required",
        "428": "Precondition Required",
        "429": "Too Many Requests",
        "431": "Request Header Fields Too Large",
        "451": "Unavailable For Legal Reasons",
        "500": "Internal Server Error",
        "501": "Not Implemented",
        "502": "Bad Gateway",
        "503": "Service Unavailable",
        "504": "Gateway Timeout",
        "505": "HTTP Version Not Supported",
        "506": "Variant Also Negotiates",
        "507": "Insufficient Storage",
        "508": "Loop Detected",
        "509": "Bandwidth Limit Exceeded",
        "510": "Not Extended",
        "511": "Network Authentication Required"
      };
    }
  });

  // node_modules/dhttp/200.js
  var require__ = __commonJS({
    "node_modules/dhttp/200.js"(exports, module) {
      var dhttp = require_browser4();
      var httpStatus = require_codes();
      module.exports = function only200(options, callback) {
        dhttp(options, function(err, result) {
          if (err)
            return callback(err);
          if (result.statusCode < 200 || result.statusCode >= 300) {
            const message = result.body || httpStatus[result.statusCode];
            return callback(new Error(message));
          }
          callback(null, result.body);
        });
      };
    }
  });

  // node_modules/regtest-client/src/index.js
  var require_src8 = __commonJS({
    "node_modules/regtest-client/src/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.RegtestUtils = void 0;
      var assert = require_assert2();
      var rng = require_browser();
      var bs58check = require_bs58check3();
      var dhttpCallback = require__();
      var RANDOM_ADDRESS;
      var RegtestUtils2 = class {
        constructor(_opts) {
          this._APIURL = (_opts || {}).APIURL || process.env.APIURL || "http://127.0.0.1:8080/1";
          this._APIPASS = (_opts || {}).APIPASS || process.env.APIPASS || "satoshi";
          this.network = {
            messagePrefix: "Bitcoin Signed Message:\n",
            bech32: "bcrt",
            bip32: {
              public: 70617039,
              private: 70615956
            },
            pubKeyHash: 111,
            scriptHash: 196,
            wif: 239
          };
        }
        get RANDOM_ADDRESS() {
          if (RANDOM_ADDRESS === void 0) {
            RANDOM_ADDRESS = this.randomAddress();
          }
          return RANDOM_ADDRESS;
        }
        // use Promises
        async dhttp(options) {
          return new Promise((resolve, reject) => {
            return dhttpCallback(options, (err, data) => {
              if (err)
                return reject(err);
              else
                return resolve(data);
            });
          });
        }
        async broadcast(txHex) {
          return this.dhttp({
            method: "POST",
            url: this._APIURL + "/t/push",
            body: txHex
          });
        }
        async mine(count) {
          return this.dhttp({
            method: "POST",
            url: `${this._APIURL}/r/generate?count=${count}&key=${this._APIPASS}`
          });
        }
        async height() {
          return this.dhttp({
            method: "GET",
            url: this._APIURL + "/b/best/height"
          });
        }
        async fetch(txId) {
          return this.dhttp({
            method: "GET",
            url: `${this._APIURL}/t/${txId}/json`
          });
        }
        async unspents(address) {
          return this.dhttp({
            method: "GET",
            url: `${this._APIURL}/a/${address}/unspents`
          });
        }
        async faucet(address, value) {
          const requester = _faucetRequestMaker(
            "faucet",
            "address",
            this.dhttp,
            this._APIURL,
            this._APIPASS
          );
          const faucet = _faucetMaker(this, requester);
          return faucet(address, value);
        }
        async faucetComplex(output, value) {
          const outputString = output.toString("hex");
          const requester = _faucetRequestMaker(
            "faucetScript",
            "script",
            this.dhttp,
            this._APIURL,
            this._APIPASS
          );
          const faucet = _faucetMaker(this, requester);
          return faucet(outputString, value);
        }
        async verify(txo) {
          const tx = await this.fetch(txo.txId);
          const txoActual = tx.outs[txo.vout];
          if (txo.address)
            assert.strictEqual(txoActual.address, txo.address);
          if (txo.value)
            assert.strictEqual(txoActual.value, txo.value);
        }
        randomAddress() {
          return bs58check.encode(Buffer.concat([Buffer.from([111]), rng(20)]));
        }
      };
      exports.RegtestUtils = RegtestUtils2;
      function _faucetRequestMaker(name, paramName, dhttp, url, pass) {
        return async (address, value) => dhttp({
          method: "POST",
          url: `${url}/r/${name}?${paramName}=${address}&value=${value}&key=${pass}`
        });
      }
      function _faucetMaker(self2, _requester) {
        return async (address, value) => {
          let count = 0;
          let _unspents = [];
          const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
          const randInt = (min, max) => min + Math.floor((max - min + 1) * Math.random());
          const txId = await _requester(address, value).then(
            (v) => v,
            // Pass success value as is
            async (err) => {
              const currentHeight = await self2.height();
              if (err.message === "Bad Request" && currentHeight < 432) {
                await self2.mine(432 - currentHeight);
                return _requester(address, value);
              } else if (err.message === "Bad Request" && currentHeight >= 432) {
                return _requester(address, value);
              } else {
                throw err;
              }
            }
          );
          while (_unspents.length === 0) {
            if (count > 0) {
              if (count >= 5) {
                console.log("WARNING: Indexd is busy. Using getrawtransaction RPC.");
                const tx = await self2.fetch(txId);
                const outs = tx.outs.filter((x) => x.address === address);
                const out = outs.pop();
                if (out) {
                  const vout = tx.outs.indexOf(out);
                  const v = out.value;
                  return { txId, vout, value: v };
                } else {
                  throw new Error("Missing Inputs");
                }
              }
              console.log("Missing Inputs, retry #" + count);
              await sleep(randInt(150, 250));
            }
            await sleep(randInt(50, 150));
            const results = await self2.unspents(address);
            _unspents = results.filter((x) => x.txId === txId);
            count++;
          }
          return _unspents.pop();
        };
      }
    }
  });

  // src/btc/keypair.ts
  var import_ecpair2 = __toESM(require_src2());
  var import_secp256k12 = __toESM(require_dist());
  var bitcoin2 = __toESM(require_src4());
  var bip39 = __toESM(require_src5());
  var import_bip322 = __toESM(require_src6());

  // src/btc/utils.ts
  var bitcoin = __toESM(require_src4());
  var import_ecpair = __toESM(require_src2());
  var import_secp256k1 = __toESM(require_dist());
  var import_bip32 = __toESM(require_src6());
  var import_regtest_client = __toESM(require_src8());
  var APIPASS = process.env.APIPASS || "satoshi";
  var APIURL = process.env.APIURL || "https://regtest.bitbank.cc/1";
  var regtestUtils = new import_regtest_client.RegtestUtils({ APIPASS, APIURL });
  var ECPair = (0, import_ecpair.ECPairFactory)(import_secp256k1.default);
  var bip32 = (0, import_bip32.BIP32Factory)(import_secp256k1.default);
  var publicKeyToAddress = (publicKey, network) => {
    return bitcoin.payments.p2wpkh({ pubkey: publicKey, network }).address;
  };
  var wifToPrivateKey = (wif, network) => {
    return ECPair.fromWIF(wif, network).privateKey;
  };
  var seedToPrivateKey = (seed, index = 0, network) => {
    const root = bip32.fromSeed(Buffer.from(seed, "hex"), network);
    const child = root.derivePath(`m/44'/0'/0'/0/${index}`);
    return wifToPrivateKey(child.toWIF(), network);
  };
  function hashSeed(seed) {
    const seedBuffer = Buffer.from(seed, "hex");
    const hashBuffer = bitcoin.crypto.sha256(seedBuffer);
    const hashHex = hashBuffer.toString("hex");
    return hashHex;
  }
  var createTx = async (toAddress, value, env, fromAddress) => {
    const valueInSatoshi = value * 1e8;
    if (!fromAddress || !toAddress || !value || !env) {
      return {
        code: 0,
        message: "invalid/insufficient parameters"
      };
    }
    const url = env === "mainnet" ? "https://api.blockcypher.com/v1/btc/main/txs/new" : "https://api.blockcypher.com/v1/btc/test3/txs/new";
    const data = JSON.stringify({
      "inputs": [
        {
          "addresses": [
            `${fromAddress}`
            /* "n1TKu4ZX7vkyjfvo7RCbjeUZB6Zub8N3fN" */
          ]
        }
      ],
      "outputs": [
        {
          "addresses": [
            `${toAddress}`
            /* "2NCY42y4mbvJCxhd7gcCroBEvVh1dXkbPzA"
            */
          ],
          "value": valueInSatoshi
        }
      ]
    });
    const response = await fetch(url, { method: "POST", body: data, headers: { "Content-Type": "application/json" } });
    if (!response.ok) {
      const jsonData2 = await response.json();
      return {
        code: 0,
        message: JSON.stringify(jsonData2["errors"])
      };
    }
    const jsonData = await response.json();
    return {
      code: 1,
      result: jsonData
    };
  };
  var generateTxSignatures = (senderWif, network, toSign) => {
    const keys = ECPair.fromWIF(senderWif, network);
    const signatures = [];
    const pubkeys = [];
    for (let i = 0; i < toSign.length; i++) {
      signatures.push(
        bitcoin.script.signature.encode(keys.sign(Buffer.from(toSign[i], "hex")), 1).toString("hex")
        // .slice(0, -2),
      );
      pubkeys.push(keys.publicKey.toString("hex"));
    }
    return {
      code: 1,
      signatures,
      pubkeys
    };
  };
  var sendTx = async (tx, tosign, signatures, pubkeys, env) => {
    const url = env === "mainnet" ? "https://api.blockcypher.com/v1/btc/main/txs/send?token=8204f6d6308846d9a26daa8c19d51a64" : "https://api.blockcypher.com/v1/btc/test3/txs/send?token=8204f6d6308846d9a26daa8c19d51a64";
    const data = {
      tx,
      signatures,
      pubkeys,
      tosign
    };
    const response = await fetch(url, { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } });
    if (!response.ok) {
      const jsonData2 = await response.json();
      return {
        success: false,
        result: null,
        message: JSON.stringify(jsonData2["errors"])
      };
    }
    const jsonData = await response.json();
    return {
      success: true,
      result: jsonData,
      message: "success"
    };
  };

  // src/btc/keypair.ts
  var ECPair2 = (0, import_ecpair2.ECPairFactory)(import_secp256k12.default);
  var TESTNET = bitcoin2.networks.testnet;
  var MAINNET = bitcoin2.networks.bitcoin;
  var bip322 = (0, import_bip322.BIP32Factory)(import_secp256k12.default);
  var KeypairService = class {
    constructor(isTestnet) {
      this.network = isTestnet ? TESTNET : MAINNET;
    }
    buildOutput(keyPair, mnemonic = null) {
      const address = publicKeyToAddress(keyPair.publicKey, this.network);
      const privateKey = keyPair.privateKey?.toString("hex");
      return {
        address,
        wif: keyPair.toWIF(),
        privateKey,
        publicKey: keyPair.publicKey.toString("hex"),
        ...mnemonic && { mnemonic }
      };
    }
    keypairFromRandom() {
      const keyPair = ECPair2.makeRandom({ network: this.network });
      return this.buildOutput(keyPair);
    }
    keypairFromWif(wif) {
      const keyPair = ECPair2.fromWIF(wif, this.network);
      return this.buildOutput(keyPair);
    }
    keypairFromMnemonic(mnemonic, index = 0) {
      const seed = bip39.mnemonicToSeedSync(mnemonic);
      const root = bip322.fromSeed(seed, this.network);
      const child1 = root.derivePath(`m/44'/0'/0'/0/${index}`);
      const privateKey = wifToPrivateKey(child1.toWIF(), this.network);
      if (!privateKey)
        throw new Error("Invalid private key");
      const keyPair = ECPair2.fromPrivateKey(privateKey, { network: this.network });
      return this.buildOutput(keyPair, mnemonic);
    }
    keypairFromRandomMnemonic() {
      const mnemonic = bip39.generateMnemonic(256);
      return this.keypairFromMnemonic(mnemonic);
    }
    keypairFromEmailPassword(email, password, index = 0) {
      email = email.toLowerCase();
      let seed = `${email}|${password}|`;
      seed = `$seed${seed.length}|!@${(password.length * 7 + email.length) * 7}`;
      const regChars = /[a-z]+/g;
      const regUpperChars = /[A-Z]+/g;
      const regNumbers = /[0-9]+/g;
      const charsMatches = password.match(regChars);
      const chars = charsMatches ? charsMatches.length : 1;
      const upperCharsMatches = password.match(regUpperChars);
      const upperChars = upperCharsMatches ? upperCharsMatches.length : 1;
      const numbersMatches = password.match(regNumbers);
      const numbers = numbersMatches ? numbersMatches.length : 1;
      seed = `${seed}${(chars + upperChars + numbers) * password.length}3571`;
      seed = `${seed}${seed}`;
      for (let i = 0; i <= 50; i++) {
        seed = hashSeed(seed);
      }
      const privateKey = seedToPrivateKey(seed, index, this.network);
      if (!privateKey)
        throw new Error("Invalid private key");
      const keyPair = ECPair2.fromPrivateKey(privateKey, { network: this.network });
      return this.buildOutput(keyPair);
    }
  };

  // src/btc/transaction.ts
  var bitcoin3 = __toESM(require_src4());
  var TESTNET2 = bitcoin3.networks.testnet;
  var MAINNET2 = bitcoin3.networks.bitcoin;
  var TransactionService = class {
    constructor(isTestnet) {
      this.network = isTestnet ? TESTNET2 : MAINNET2;
    }
    _buildCreateResponse(success, result, error = null) {
      return {
        success,
        result,
        error
      };
    }
    async createTransaction(senderWif, senderAddress, recipientAddress, amount) {
      const networkName = this.network === TESTNET2 ? "testnet" : "mainnet";
      const txResponse = await createTx(recipientAddress, amount, networkName, senderAddress);
      if (txResponse?.code != 1) {
        console.log(txResponse.message);
        return this._buildCreateResponse(false, null, txResponse.message);
      }
      const tx = txResponse.result.tx;
      const toSign = txResponse.result.tosign;
      const signaturesResponse = generateTxSignatures(senderWif, this.network, toSign);
      const signatures = signaturesResponse.signatures;
      const pubkeys = signaturesResponse.pubkeys;
      if (!signatures || !pubkeys) {
        console.log("invalid signatures or pubkeys");
        return this._buildCreateResponse(false, null, "invalid signatures or pubkeys");
      }
      const data = await sendTx(tx, toSign, signatures, pubkeys, this.network === TESTNET2 ? "testnet" : "mainnet");
      if (!data.success) {
        console.log(data.message);
        return this._buildCreateResponse(false, null, data.message);
      }
      return this._buildCreateResponse(true, data.result, null);
    }
    // public async sendTransaction(tx: any, toSign: any, signatures: any, pubkeys: any): Promise<SendTxResponse> {
    //     const result = await sendTx(tx, toSign, signatures, pubkeys, this.network === TESTNET ? 'testnet' : 'mainnet');
    //     console.log(result)
    //     console.log('------------------')
    //     if (!result.success) {
    //         return {
    //             success: false,
    //             result: null,
    //             error: result.message ?? 'unkwnown error'
    //         }
    //     }
    //     return {
    //         success: true,
    //         result: result,
    //         error: null
    //     }
    // }
    // public async sendTransaction2(senderWif: string, recipientAddress: string, amount: number) {
    //     const sender = ECPair.fromWIF(
    //         senderWif,
    //         this.network
    //     );
    //     const payment1 = createPayment('p2pkh', [sender], this.network);
    //     const payment2 = createPayment('p2pkh', [sender], this.network);
    //     console.log({ payment1 })
    //     console.log({ payment2 })
    //     const inputData1 = await getInputData(
    //         2e5,
    //         payment1.payment,
    //         true,
    //         'noredeem',
    //     );
    //     const inputData2 = await getInputData(
    //         7e4,
    //         payment2.payment,
    //         true,
    //         'noredeem',
    //     );
    //     const { hash, index, nonWitnessUtxo } = inputData1;
    //     console.log({ hash, index, nonWitnessUtxo });
    //     const psbt = new bitcoin.Psbt({ network: this.network })
    //         .addInput(inputData1)
    //         .addInput(inputData2)
    //         .addOutput({
    //             address: recipientAddress,
    //             value: 8e4,
    //         }).addOutput({
    //             address: payment2.payment.address, // OR script, which is a Buffer.
    //             value: 1e4,
    //         });
    //     const psbtBaseText = psbt.toBase64();
    //     const signer1 = bitcoin.Psbt.fromBase64(psbtBaseText);
    //     const signer2 = bitcoin.Psbt.fromBase64(psbtBaseText);
    //     signer1.signAllInputs(payment1.keys[0]);
    //     signer2.signAllInputs(payment2.keys[0]);
    //     const s1text = signer1.toBase64();
    //     const s2text = signer2.toBase64();
    //     const final1 = bitcoin.Psbt.fromBase64(s1text);
    //     const final2 = bitcoin.Psbt.fromBase64(s2text);
    //     psbt.combine(final1, final2);
    //     psbt.finalizeAllInputs();
    //     const tx = psbt.extractTransaction().toHex();
    //     console.log('----------');
    //     console.log(tx);
    //     console.log('----------');
    //     return tx;
    // }
  };

  // src/btc/account.ts
  var bitcoin4 = __toESM(require_src4());

  // src/btc/constants.ts
  var SATOSHI_TO_BTC_MULTIPLIER = 1e-8;

  // src/btc/account.ts
  var TESTNET3 = bitcoin4.networks.testnet;
  var MAINNET3 = bitcoin4.networks.bitcoin;
  var AccountService = class {
    constructor(isTestnet) {
      this.network = isTestnet ? TESTNET3 : MAINNET3;
    }
    async addressInfo(address, inSatoshis = true) {
      const url = `https://api.blockcypher.com/v1/btc/${this.network === TESTNET3 ? "test3" : "main"}/addrs/${address}/balance`;
      const response = await fetch(url);
      const data = await response.json();
      return {
        totalRecieved: inSatoshis ? data.total_received : data.total_received * SATOSHI_TO_BTC_MULTIPLIER,
        totalSent: inSatoshis ? data.total_sent : data.total_sent * SATOSHI_TO_BTC_MULTIPLIER,
        balance: inSatoshis ? data.balance : data.balance * SATOSHI_TO_BTC_MULTIPLIER,
        unconfirmedBalance: inSatoshis ? data.unconfirmed_balance : data.unconfirmed_balance * SATOSHI_TO_BTC_MULTIPLIER,
        finalBalance: inSatoshis ? data.final_balance : data.final_balance * SATOSHI_TO_BTC_MULTIPLIER,
        txCount: data.n_tx,
        unconfirmedTxCount: data.unconfirmed_n_tx,
        finalTxCount: data.final_n_tx
      };
    }
    async transactions(address, limit = 50, before = null) {
      let url = `https://api.blockcypher.com/v1/btc/${this.network === TESTNET3 ? "test3" : "main"}/addrs/${address}/full?limit=${limit}`;
      if (before) {
        url += `&before=${before}`;
      }
      const response = await fetch(url);
      const data = await response.json();
      const transactions = data["txs"];
      return {
        canLoadMore: data["hasMore"],
        transactions
      };
    }
  };

  // src/browser.ts
  window.btc = { KeypairService, TransactionService, AccountService };
})();
/*! Bundled license information:

ieee754/index.js:
  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)

buffer/index.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   *)

safe-buffer/index.js:
  (*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)

safe-buffer/index.js:
  (*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)

@noble/secp256k1/lib/index.js:
  (*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) *)

@noble/hashes/utils.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@scure/base/lib/index.js:
  (*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

assert/assert.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
   * @license  MIT
   *)

punycode/punycode.js:
  (*! https://mths.be/punycode v1.4.1 by @mathias *)
*/

}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
},{"_process":5,"buffer":3}],2:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],3:[function(require,module,exports){
(function (Buffer){(function (){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"base64-js":2,"buffer":3,"ieee754":4}],4:[function(require,module,exports){
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],5:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}]},{},[1]);
